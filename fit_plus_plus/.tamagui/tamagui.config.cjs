var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __esm = (fn, res) => function __init() {
  return fn && (res = (0, fn[__getOwnPropNames(fn)[0]])(fn = 0)), res;
};
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __reExport = (target, mod, secondTarget) => (__copyProps(target, mod, "default"), secondTarget && __copyProps(secondTarget, mod, "default"));
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/@tamagui/adapt/dist/cjs/Adapt.js
var require_Adapt = __commonJS({
  "node_modules/@tamagui/adapt/dist/cjs/Adapt.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Adapt_exports = {};
    __export2(Adapt_exports, {
      Adapt: () => Adapt2,
      AdaptContents: () => AdaptContents,
      AdaptParentContext: () => AdaptParentContext,
      useAdaptParent: () => useAdaptParent2
    });
    module2.exports = __toCommonJS2(Adapt_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_core37 = require("@tamagui/core-node");
    var import_react30 = require("react");
    var AdaptParentContext = (0, import_react30.createContext)(null);
    var AdaptContents = /* @__PURE__ */ __name((props) => {
      const context = (0, import_react30.useContext)(AdaptParentContext);
      if (!(context == null ? void 0 : context.Contents)) {
        throw new Error("Adapt not supported by this component");
      }
      return (0, import_react30.createElement)(context.Contents, props);
    }, "AdaptContents");
    AdaptContents["shouldForwardSpace"] = true;
    var useAdaptParent2 = /* @__PURE__ */ __name(({
      Contents
    }) => {
      const [when, setWhen] = (0, import_react30.useState)(null);
      const AdaptProvider = (0, import_react30.useMemo)(() => {
        const context = {
          Contents,
          setWhen
        };
        function AdaptProviderView(props) {
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(AdaptParentContext.Provider, { value: context, children: props.children });
        }
        __name(AdaptProviderView, "AdaptProviderView");
        return AdaptProviderView;
      }, [Contents]);
      return {
        AdaptProvider,
        when
      };
    }, "useAdaptParent");
    var Adapt2 = (0, import_core37.withStaticProperties)(
      /* @__PURE__ */ __name(function Adapt22({ platform: platform2, when, children }) {
        const context = (0, import_react30.useContext)(AdaptParentContext);
        let enabled = !platform2;
        if (platform2 === "touch")
          enabled = import_core37.isTouchable;
        if (platform2 === "native")
          enabled = !import_core37.isWeb;
        if (platform2 === "web")
          enabled = import_core37.isWeb;
        (0, import_core37.useIsomorphicLayoutEffect)(() => {
          if (!enabled)
            return;
          context == null ? void 0 : context.setWhen(when || enabled);
        }, [when, context, enabled]);
        if (!enabled) {
          return null;
        }
        return children;
      }, "Adapt2"),
      {
        Contents: AdaptContents
      }
    );
  }
});

// node_modules/@tamagui/adapt/dist/cjs/index.js
var require_cjs = __commonJS({
  "node_modules/@tamagui/adapt/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Adapt(), module2.exports);
  }
});

// node_modules/@tamagui/compose-refs/dist/cjs/compose-refs.js
var require_compose_refs = __commonJS({
  "node_modules/@tamagui/compose-refs/dist/cjs/compose-refs.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var compose_refs_exports = {};
    __export2(compose_refs_exports, {
      composeRefs: () => composeRefs2,
      useComposedRefs: () => useComposedRefs2
    });
    module2.exports = __toCommonJS2(compose_refs_exports);
    var React17 = __toESM2(require("react"));
    function setRef2(ref, value) {
      if (typeof ref === "function") {
        ref(value);
      } else if (ref) {
        ;
        ref.current = value;
      }
    }
    __name(setRef2, "setRef");
    function composeRefs2(...refs) {
      return (node) => refs.forEach((ref) => setRef2(ref, node));
    }
    __name(composeRefs2, "composeRefs");
    function useComposedRefs2(...refs) {
      return React17.useCallback(composeRefs2(...refs), refs);
    }
    __name(useComposedRefs2, "useComposedRefs");
  }
});

// node_modules/@tamagui/compose-refs/dist/cjs/index.js
var require_cjs2 = __commonJS({
  "node_modules/@tamagui/compose-refs/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_compose_refs(), module2.exports);
  }
});

// node_modules/@tamagui/create-context/dist/cjs/create-context.js
var require_create_context = __commonJS({
  "node_modules/@tamagui/create-context/dist/cjs/create-context.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var create_context_exports = {};
    __export2(create_context_exports, {
      createContext: () => createContext4,
      createContextScope: () => createContextScope4
    });
    module2.exports = __toCommonJS2(create_context_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var React17 = __toESM2(require("react"));
    function createContext4(rootComponentName, defaultContext) {
      const Context = React17.createContext(defaultContext);
      function Provider(props) {
        const { children, ...context } = props;
        const value = React17.useMemo(() => context, Object.values(context));
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Context.Provider, { value, children });
      }
      __name(Provider, "Provider");
      function useContext3(consumerName) {
        const context = React17.useContext(Context);
        if (context)
          return context;
        if (defaultContext !== void 0)
          return defaultContext;
        throw new Error(`\`${consumerName}\` must be used within \`${rootComponentName}\``);
      }
      __name(useContext3, "useContext");
      Provider.displayName = `${rootComponentName}Provider`;
      return [Provider, useContext3];
    }
    __name(createContext4, "createContext");
    function createContextScope4(scopeName, createContextScopeDeps = []) {
      let defaultContexts = [];
      function createContext22(rootComponentName, defaultContext) {
        const BaseContext = React17.createContext(defaultContext);
        const index3 = defaultContexts.length;
        defaultContexts = [...defaultContexts, defaultContext];
        function Provider(props) {
          const { scope, children, ...context } = props;
          const Context = (scope == null ? void 0 : scope[scopeName][index3]) || BaseContext;
          const value = React17.useMemo(
            () => context,
            Object.values(context)
          );
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Context.Provider, { value, children });
        }
        __name(Provider, "Provider");
        function useContext3(consumerName, scope, options) {
          const Context = (scope == null ? void 0 : scope[scopeName][index3]) || BaseContext;
          const context = React17.useContext(Context);
          if (context)
            return context;
          if (defaultContext !== void 0)
            return defaultContext;
          const missingContextMessage = `\`${consumerName}\` must be used within \`${rootComponentName}\``;
          if (options == null ? void 0 : options.fallback) {
            if ((options == null ? void 0 : options.warn) !== false) {
              console.warn(missingContextMessage);
            }
            return options.fallback;
          } else {
            throw new Error(missingContextMessage);
          }
        }
        __name(useContext3, "useContext");
        Provider.displayName = `${rootComponentName}Provider`;
        return [Provider, useContext3];
      }
      __name(createContext22, "createContext2");
      const createScope = /* @__PURE__ */ __name(() => {
        const scopeContexts = defaultContexts.map((defaultContext) => {
          return React17.createContext(defaultContext);
        });
        return /* @__PURE__ */ __name(function useScope(scope) {
          const contexts = (scope == null ? void 0 : scope[scopeName]) || scopeContexts;
          return React17.useMemo(
            () => ({ [`__scope${scopeName}`]: { ...scope, [scopeName]: contexts } }),
            [scope, contexts]
          );
        }, "useScope");
      }, "createScope");
      createScope.scopeName = scopeName;
      return [
        createContext22,
        composeContextScopes(createScope, ...createContextScopeDeps)
      ];
    }
    __name(createContextScope4, "createContextScope");
    function composeContextScopes(...scopes) {
      const baseScope = scopes[0];
      if (scopes.length === 1)
        return baseScope;
      const createScope = /* @__PURE__ */ __name(() => {
        const scopeHooks = scopes.map((createScope2) => ({
          useScope: createScope2(),
          scopeName: createScope2.scopeName
        }));
        return /* @__PURE__ */ __name(function useComposedScopes(overrideScopes) {
          const nextScopes = scopeHooks.reduce((nextScopes2, { useScope, scopeName }) => {
            const scopeProps = useScope(overrideScopes);
            const currentScope = scopeProps[`__scope${scopeName}`];
            return { ...nextScopes2, ...currentScope };
          }, {});
          return React17.useMemo(
            () => ({ [`__scope${baseScope.scopeName}`]: nextScopes }),
            [nextScopes]
          );
        }, "useComposedScopes");
      }, "createScope");
      createScope.scopeName = baseScope.scopeName;
      return createScope;
    }
    __name(composeContextScopes, "composeContextScopes");
  }
});

// node_modules/@tamagui/create-context/dist/cjs/index.js
var require_cjs3 = __commonJS({
  "node_modules/@tamagui/create-context/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_create_context(), module2.exports);
  }
});

// node_modules/@tamagui/animate-presence/dist/cjs/LayoutGroupContext.js
var require_LayoutGroupContext = __commonJS({
  "node_modules/@tamagui/animate-presence/dist/cjs/LayoutGroupContext.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var LayoutGroupContext_exports = {};
    __export2(LayoutGroupContext_exports, {
      LayoutGroupContext: () => LayoutGroupContext
    });
    module2.exports = __toCommonJS2(LayoutGroupContext_exports);
    var import_react30 = require("react");
    var LayoutGroupContext = (0, import_react30.createContext)({});
  }
});

// node_modules/@tamagui/use-presence/dist/cjs/PresenceContext.js
var require_PresenceContext = __commonJS({
  "node_modules/@tamagui/use-presence/dist/cjs/PresenceContext.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var PresenceContext_exports = {};
    __export2(PresenceContext_exports, {
      PresenceContext: () => PresenceContext
    });
    module2.exports = __toCommonJS2(PresenceContext_exports);
    var import_react30 = require("react");
    var PresenceContext = (0, import_react30.createContext)(null);
  }
});

// node_modules/@tamagui/use-presence/dist/cjs/usePresence.js
var require_usePresence = __commonJS({
  "node_modules/@tamagui/use-presence/dist/cjs/usePresence.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var usePresence_exports = {};
    __export2(usePresence_exports, {
      isPresent: () => isPresent,
      useIsPresent: () => useIsPresent,
      usePresence: () => usePresence
    });
    module2.exports = __toCommonJS2(usePresence_exports);
    var import_react30 = require("react");
    var import_PresenceContext = require_PresenceContext();
    function usePresence() {
      const context = (0, import_react30.useContext)(import_PresenceContext.PresenceContext);
      if (!context) {
        return [true, null, context];
      }
      const { isPresent: isPresent2, onExitComplete, register } = context;
      const id = (0, import_react30.useId)() || "";
      (0, import_react30.useEffect)(() => register(id), [id, register]);
      const safeToRemove = /* @__PURE__ */ __name(() => onExitComplete == null ? void 0 : onExitComplete(id), "safeToRemove");
      return !isPresent2 && onExitComplete ? [false, safeToRemove, context] : [true, void 0, context];
    }
    __name(usePresence, "usePresence");
    function useIsPresent() {
      return isPresent((0, import_react30.useContext)(import_PresenceContext.PresenceContext));
    }
    __name(useIsPresent, "useIsPresent");
    function isPresent(context) {
      return context === null ? true : context.isPresent;
    }
    __name(isPresent, "isPresent");
  }
});

// node_modules/@tamagui/use-presence/dist/cjs/index.js
var require_cjs4 = __commonJS({
  "node_modules/@tamagui/use-presence/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_PresenceContext(), module2.exports);
    __reExport2(src_exports, require_usePresence(), module2.exports);
  }
});

// node_modules/@tamagui/animate-presence/dist/cjs/PresenceChild.js
var require_PresenceChild = __commonJS({
  "node_modules/@tamagui/animate-presence/dist/cjs/PresenceChild.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var PresenceChild_exports = {};
    __export2(PresenceChild_exports, {
      PresenceChild: () => PresenceChild
    });
    module2.exports = __toCommonJS2(PresenceChild_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_use_presence = require_cjs4();
    var React17 = __toESM2(require("react"));
    var import_react30 = require("react");
    var PresenceChild = /* @__PURE__ */ __name(({
      children,
      initial,
      isPresent,
      onExitComplete,
      exitVariant,
      enterVariant,
      presenceAffectsLayout
    }) => {
      const presenceChildren = React17.useMemo(newChildrenMap, []);
      const id = (0, import_react30.useId)() || "";
      const context = React17.useMemo(
        () => {
          return {
            id,
            initial,
            isPresent,
            exitVariant,
            enterVariant,
            onExitComplete: (id2) => {
              presenceChildren.set(id2, true);
              for (const isComplete of presenceChildren.values()) {
                if (!isComplete) {
                  return;
                }
              }
              onExitComplete == null ? void 0 : onExitComplete();
            },
            register: (id2) => {
              presenceChildren.set(id2, false);
              return () => presenceChildren.delete(id2);
            }
          };
        },
        /**
         * If the presence of a child affects the layout of the components around it,
         * we want to make a new context value to ensure they get re-rendered
         * so they can detect that layout change.
         */
        // eslint-disable-next-line react-hooks/exhaustive-deps
        presenceAffectsLayout ? void 0 : [isPresent, exitVariant, enterVariant]
      );
      React17.useMemo(() => {
        presenceChildren.forEach((_, key) => presenceChildren.set(key, false));
      }, [isPresent]);
      React17.useEffect(() => {
        !(isPresent || presenceChildren.size) && (onExitComplete == null ? void 0 : onExitComplete());
      }, [isPresent]);
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_use_presence.PresenceContext.Provider, { value: context, children });
    }, "PresenceChild");
    function newChildrenMap() {
      return /* @__PURE__ */ new Map();
    }
    __name(newChildrenMap, "newChildrenMap");
  }
});

// node_modules/@tamagui/animate-presence/dist/cjs/AnimatePresence.js
var require_AnimatePresence = __commonJS({
  "node_modules/@tamagui/animate-presence/dist/cjs/AnimatePresence.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var AnimatePresence_exports = {};
    __export2(AnimatePresence_exports, {
      AnimatePresence: () => AnimatePresence2
    });
    module2.exports = __toCommonJS2(AnimatePresence_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_web8 = require("@tamagui/core-node");
    var import_react30 = __toESM2(require("react"));
    var import_LayoutGroupContext = require_LayoutGroupContext();
    var import_PresenceChild = require_PresenceChild();
    var getChildKey = /* @__PURE__ */ __name((child) => child.key || "", "getChildKey");
    var isDev = process.env.NODE_ENV !== "production";
    function updateChildLookup(children, allChildren) {
      const seenChildren = isDev ? /* @__PURE__ */ new Set() : null;
      children.forEach((child) => {
        const key = getChildKey(child);
        if (isDev && seenChildren && seenChildren.has(key)) {
          console.warn(
            `Children of AnimatePresence require unique keys. "${key}" is a duplicate.`
          );
          seenChildren.add(key);
        }
        allChildren.set(key, child);
      });
    }
    __name(updateChildLookup, "updateChildLookup");
    function onlyElements(children) {
      const filtered = [];
      import_react30.Children.forEach(children, (child, index3) => {
        if ((0, import_react30.isValidElement)(child)) {
          if (!child.key) {
            if (process.env.NODE_ENV === "development") {
              console.warn("No key given to AnimatePresence child, assigning index as key");
            }
            filtered.push(
              import_react30.default.cloneElement(child, {
                key: index3
              })
            );
          } else {
            filtered.push(child);
          }
        }
      });
      return filtered;
    }
    __name(onlyElements, "onlyElements");
    var AnimatePresence2 = /* @__PURE__ */ __name(({
      children,
      enterVariant,
      exitVariant,
      initial = true,
      onExitComplete,
      exitBeforeEnter,
      presenceAffectsLayout = true
    }) => {
      let forceRender = (0, import_web8.useForceUpdate)();
      const isClientMounted = (0, import_web8.useDidFinishSSR)();
      const forceRenderLayoutGroup = (0, import_react30.useContext)(import_LayoutGroupContext.LayoutGroupContext).forceRender;
      if (forceRenderLayoutGroup)
        forceRender = forceRenderLayoutGroup;
      const isMounted = (0, import_react30.useRef)(false);
      const filteredChildren = onlyElements(children);
      let childrenToRender = filteredChildren;
      const exiting = /* @__PURE__ */ new Set();
      const presentChildren = (0, import_react30.useRef)(childrenToRender);
      const allChildren = (0, import_react30.useRef)(/* @__PURE__ */ new Map()).current;
      const isInitialRender = (0, import_react30.useRef)(true);
      (0, import_react30.useEffect)(() => {
        isMounted.current = true;
        return () => {
          isMounted.current = false;
          isInitialRender.current = true;
          allChildren.clear();
          exiting.clear();
        };
      }, []);
      (0, import_web8.useIsomorphicLayoutEffect)(() => {
        isInitialRender.current = false;
        updateChildLookup(filteredChildren, allChildren);
        presentChildren.current = childrenToRender;
      });
      const hasWarned = process.env.NODE_ENV === "development" ? (0, import_react30.useRef)(false) : null;
      if (isInitialRender.current) {
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_jsx_runtime12.Fragment, { children: childrenToRender.map((child) => /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          import_PresenceChild.PresenceChild,
          {
            isPresent: Boolean(isClientMounted ? true : isMounted.current),
            exitVariant,
            enterVariant,
            initial: initial ? void 0 : false,
            presenceAffectsLayout,
            children: child
          },
          getChildKey(child)
        )) });
      }
      childrenToRender = [...childrenToRender];
      const presentKeys = presentChildren.current.map(getChildKey);
      const targetKeys = filteredChildren.map(getChildKey);
      const numPresent = presentKeys.length;
      for (let i = 0; i < numPresent; i++) {
        const key = presentKeys[i];
        if (targetKeys.indexOf(key) === -1) {
          exiting.add(key);
        }
      }
      if (exitBeforeEnter && exiting.size) {
        childrenToRender = [];
      }
      exiting.forEach((key) => {
        if (targetKeys.indexOf(key) !== -1)
          return;
        const child = allChildren.get(key);
        if (!child)
          return;
        const insertionIndex = presentKeys.indexOf(key);
        childrenToRender.splice(
          insertionIndex,
          0,
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            import_PresenceChild.PresenceChild,
            {
              isPresent: false,
              onExitComplete: () => {
                allChildren.delete(key);
                exiting.delete(key);
                const removeIndex = presentChildren.current.findIndex(
                  (presentChild) => presentChild.key === key
                );
                presentChildren.current.splice(removeIndex, 1);
                if (!exiting.size) {
                  presentChildren.current = filteredChildren;
                  if (isMounted.current === false)
                    return;
                  forceRender();
                  onExitComplete == null ? void 0 : onExitComplete();
                }
              },
              exitVariant,
              enterVariant,
              presenceAffectsLayout,
              children: child
            },
            getChildKey(child)
          )
        );
      });
      childrenToRender = childrenToRender.map((child) => {
        const key = child.key;
        return exiting.has(key) ? child : /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          import_PresenceChild.PresenceChild,
          {
            isPresent: true,
            exitVariant,
            enterVariant,
            presenceAffectsLayout,
            children: child
          },
          getChildKey(child)
        );
      });
      if (process.env.NODE_ENV === "development") {
        const shouldWarn = exitBeforeEnter && childrenToRender.length > 1;
        if (shouldWarn && hasWarned && !hasWarned.current) {
          hasWarned.current = true;
          console.log(
            `You're attempting to animate multiple children within AnimatePresence, but its exitBeforeEnter prop is set to true. This can lead to odd visual behaviour.`
          );
        }
      }
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_jsx_runtime12.Fragment, { children: exiting.size ? childrenToRender : childrenToRender.map((child) => (0, import_react30.cloneElement)(child)) });
    }, "AnimatePresence");
    AnimatePresence2.displayName = "AnimatePresence";
  }
});

// node_modules/@tamagui/animate-presence/dist/cjs/index.js
var require_cjs5 = __commonJS({
  "node_modules/@tamagui/animate-presence/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_AnimatePresence(), module2.exports);
    __reExport2(src_exports, require_cjs4(), module2.exports);
  }
});

// node_modules/aria-hidden/dist/es5/index.js
var require_es5 = __commonJS({
  "node_modules/aria-hidden/dist/es5/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.suppressOthers = exports.supportsInert = exports.inertOthers = exports.hideOthers = void 0;
    var getDefaultParent = /* @__PURE__ */ __name(function(originalTarget) {
      if (typeof document === "undefined") {
        return null;
      }
      var sampleTarget = Array.isArray(originalTarget) ? originalTarget[0] : originalTarget;
      return sampleTarget.ownerDocument.body;
    }, "getDefaultParent");
    var counterMap = /* @__PURE__ */ new WeakMap();
    var uncontrolledNodes = /* @__PURE__ */ new WeakMap();
    var markerMap = {};
    var lockCount = 0;
    var unwrapHost = /* @__PURE__ */ __name(function(node) {
      return node && (node.host || unwrapHost(node.parentNode));
    }, "unwrapHost");
    var correctTargets = /* @__PURE__ */ __name(function(parent, targets) {
      return targets.map(function(target) {
        if (parent.contains(target)) {
          return target;
        }
        var correctedTarget = unwrapHost(target);
        if (correctedTarget && parent.contains(correctedTarget)) {
          return correctedTarget;
        }
        console.error("aria-hidden", target, "in not contained inside", parent, ". Doing nothing");
        return null;
      }).filter(function(x) {
        return Boolean(x);
      });
    }, "correctTargets");
    var applyAttributeToOthers = /* @__PURE__ */ __name(function(originalTarget, parentNode, markerName, controlAttribute) {
      var targets = correctTargets(parentNode, Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
      if (!markerMap[markerName]) {
        markerMap[markerName] = /* @__PURE__ */ new WeakMap();
      }
      var markerCounter = markerMap[markerName];
      var hiddenNodes = [];
      var elementsToKeep = /* @__PURE__ */ new Set();
      var elementsToStop = new Set(targets);
      var keep = /* @__PURE__ */ __name(function(el) {
        if (!el || elementsToKeep.has(el)) {
          return;
        }
        elementsToKeep.add(el);
        keep(el.parentNode);
      }, "keep");
      targets.forEach(keep);
      var deep = /* @__PURE__ */ __name(function(parent) {
        if (!parent || elementsToStop.has(parent)) {
          return;
        }
        Array.prototype.forEach.call(parent.children, function(node) {
          if (elementsToKeep.has(node)) {
            deep(node);
          } else {
            try {
              var attr = node.getAttribute(controlAttribute);
              var alreadyHidden = attr !== null && attr !== "false";
              var counterValue = (counterMap.get(node) || 0) + 1;
              var markerValue = (markerCounter.get(node) || 0) + 1;
              counterMap.set(node, counterValue);
              markerCounter.set(node, markerValue);
              hiddenNodes.push(node);
              if (counterValue === 1 && alreadyHidden) {
                uncontrolledNodes.set(node, true);
              }
              if (markerValue === 1) {
                node.setAttribute(markerName, "true");
              }
              if (!alreadyHidden) {
                node.setAttribute(controlAttribute, "true");
              }
            } catch (e) {
              console.error("aria-hidden: cannot operate on ", node, e);
            }
          }
        });
      }, "deep");
      deep(parentNode);
      elementsToKeep.clear();
      lockCount++;
      return function() {
        hiddenNodes.forEach(function(node) {
          var counterValue = counterMap.get(node) - 1;
          var markerValue = markerCounter.get(node) - 1;
          counterMap.set(node, counterValue);
          markerCounter.set(node, markerValue);
          if (!counterValue) {
            if (!uncontrolledNodes.has(node)) {
              node.removeAttribute(controlAttribute);
            }
            uncontrolledNodes.delete(node);
          }
          if (!markerValue) {
            node.removeAttribute(markerName);
          }
        });
        lockCount--;
        if (!lockCount) {
          counterMap = /* @__PURE__ */ new WeakMap();
          counterMap = /* @__PURE__ */ new WeakMap();
          uncontrolledNodes = /* @__PURE__ */ new WeakMap();
          markerMap = {};
        }
      };
    }, "applyAttributeToOthers");
    var hideOthers4 = /* @__PURE__ */ __name(function(originalTarget, parentNode, markerName) {
      if (markerName === void 0) {
        markerName = "data-aria-hidden";
      }
      var targets = Array.from(Array.isArray(originalTarget) ? originalTarget : [originalTarget]);
      var activeParentNode = parentNode || getDefaultParent(originalTarget);
      if (!activeParentNode) {
        return function() {
          return null;
        };
      }
      targets.push.apply(targets, Array.from(activeParentNode.querySelectorAll("[aria-live]")));
      return applyAttributeToOthers(targets, activeParentNode, markerName, "aria-hidden");
    }, "hideOthers");
    exports.hideOthers = hideOthers4;
    var inertOthers = /* @__PURE__ */ __name(function(originalTarget, parentNode, markerName) {
      if (markerName === void 0) {
        markerName = "data-inert-ed";
      }
      var activeParentNode = parentNode || getDefaultParent(originalTarget);
      if (!activeParentNode) {
        return function() {
          return null;
        };
      }
      return applyAttributeToOthers(originalTarget, activeParentNode, markerName, "inert");
    }, "inertOthers");
    exports.inertOthers = inertOthers;
    var supportsInert = /* @__PURE__ */ __name(function() {
      return typeof HTMLElement !== "undefined" && HTMLElement.prototype.hasOwnProperty("inert");
    }, "supportsInert");
    exports.supportsInert = supportsInert;
    var suppressOthers = /* @__PURE__ */ __name(function(originalTarget, parentNode, markerName) {
      if (markerName === void 0) {
        markerName = "data-suppressed";
      }
      return ((0, exports.supportsInert)() ? exports.inertOthers : exports.hideOthers)(originalTarget, parentNode, markerName);
    }, "suppressOthers");
    exports.suppressOthers = suppressOthers;
  }
});

// node_modules/@tamagui/aria-hidden/dist/cjs/AriaHidden.js
var require_AriaHidden = __commonJS({
  "node_modules/@tamagui/aria-hidden/dist/cjs/AriaHidden.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var AriaHidden_exports = {};
    __export2(AriaHidden_exports, {
      hideOthers: () => import_aria_hidden3.hideOthers
    });
    module2.exports = __toCommonJS2(AriaHidden_exports);
    var import_aria_hidden3 = require_es5();
  }
});

// node_modules/@tamagui/aria-hidden/dist/cjs/index.js
var require_cjs6 = __commonJS({
  "node_modules/@tamagui/aria-hidden/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_AriaHidden(), module2.exports);
  }
});

// node_modules/@radix-ui/react-use-callback-ref/dist/index.js
var require_dist = __commonJS({
  "node_modules/@radix-ui/react-use-callback-ref/dist/index.js"(exports) {
    var e;
    var r;
    var t = (e = {}, r = require("react"), Object.keys(r).forEach(function(t2) {
      "default" !== t2 && "__esModule" !== t2 && Object.defineProperty(e, t2, { enumerable: true, get: function() {
        return r[t2];
      } });
    }), e);
    exports.useCallbackRef = function(e2) {
      const r2 = t.useRef(e2);
      return t.useEffect(() => {
        r2.current = e2;
      }), t.useMemo(() => (...e3) => {
        var t2;
        return null === (t2 = r2.current) || void 0 === t2 ? void 0 : t2.call(r2, ...e3);
      }, []);
    };
  }
});

// node_modules/@radix-ui/react-use-escape-keydown/dist/index.js
var require_dist2 = __commonJS({
  "node_modules/@radix-ui/react-use-escape-keydown/dist/index.js"(exports) {
    var e;
    var t;
    var n = require_dist().useCallbackRef;
    var r = (e = {}, t = require("react"), Object.keys(t).forEach(function(n2) {
      "default" !== n2 && "__esModule" !== n2 && Object.defineProperty(e, n2, { enumerable: true, get: function() {
        return t[n2];
      } });
    }), e);
    exports.useEscapeKeydown = function(e2) {
      const t2 = n(e2);
      r.useEffect(() => {
        const e3 = /* @__PURE__ */ __name((e4) => {
          "Escape" === e4.key && t2(e4);
        }, "e");
        return document.addEventListener("keydown", e3), () => document.removeEventListener("keydown", e3);
      }, [t2]);
    };
  }
});

// node_modules/@tamagui/use-event/dist/cjs/useGet.js
var require_useGet = __commonJS({
  "node_modules/@tamagui/use-event/dist/cjs/useGet.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var useGet_exports = {};
    __export2(useGet_exports, {
      useGet: () => useGet4
    });
    module2.exports = __toCommonJS2(useGet_exports);
    var import_react30 = require("react");
    var isWeb9 = process.env.TAMAGUI_TARGET === "web";
    var isClient3 = typeof window !== "undefined";
    var useIsomorphicLayoutEffect3 = !isWeb9 || isClient3 ? import_react30.useLayoutEffect : import_react30.useEffect;
    function useGet4(currentValue, initialValue, forwardToFunction) {
      const curRef = (0, import_react30.useRef)(initialValue ?? currentValue);
      useIsomorphicLayoutEffect3(() => {
        curRef.current = currentValue;
      });
      return (0, import_react30.useCallback)(
        forwardToFunction ? (...args) => {
          var _a;
          return (_a = curRef.current) == null ? void 0 : _a.apply(null, args);
        } : () => curRef.current,
        []
      );
    }
    __name(useGet4, "useGet");
  }
});

// node_modules/@tamagui/use-event/dist/cjs/useEvent.js
var require_useEvent = __commonJS({
  "node_modules/@tamagui/use-event/dist/cjs/useEvent.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var useEvent_exports = {};
    __export2(useEvent_exports, {
      useEvent: () => useEvent5
    });
    module2.exports = __toCommonJS2(useEvent_exports);
    var import_useGet2 = require_useGet();
    function useEvent5(callback) {
      return (0, import_useGet2.useGet)(callback, defaultValue2, true);
    }
    __name(useEvent5, "useEvent");
    var defaultValue2 = /* @__PURE__ */ __name(() => {
      throw new Error("Cannot call an event handler while rendering.");
    }, "defaultValue");
  }
});

// node_modules/@tamagui/use-event/dist/cjs/index.js
var require_cjs7 = __commonJS({
  "node_modules/@tamagui/use-event/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_useEvent(), module2.exports);
    __reExport2(src_exports, require_useGet(), module2.exports);
  }
});

// node_modules/@tamagui/dismissable/dist/cjs/Dismissable.js
var require_Dismissable = __commonJS({
  "node_modules/@tamagui/dismissable/dist/cjs/Dismissable.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Dismissable_exports = {};
    __export2(Dismissable_exports, {
      Dismissable: () => Dismissable2,
      DismissableBranch: () => DismissableBranch
    });
    module2.exports = __toCommonJS2(Dismissable_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_react_use_escape_keydown = require_dist2();
    var import_compose_refs3 = require_cjs2();
    var import_core37 = require("@tamagui/core-node");
    var import_use_event2 = require_cjs7();
    var React17 = __toESM2(require("react"));
    var ReactDOM2 = __toESM2(require("react-dom"));
    function dispatchDiscreteCustomEvent(target, event) {
      if (target)
        ReactDOM2.flushSync(() => target.dispatchEvent(event));
    }
    __name(dispatchDiscreteCustomEvent, "dispatchDiscreteCustomEvent");
    var DISMISSABLE_LAYER_NAME = "Dismissable";
    var CONTEXT_UPDATE = "dismissable.update";
    var POINTER_DOWN_OUTSIDE = "dismissable.pointerDownOutside";
    var FOCUS_OUTSIDE = "dismissable.focusOutside";
    var originalBodyPointerEvents;
    var DismissableContext = React17.createContext({
      layers: /* @__PURE__ */ new Set(),
      layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
      branches: /* @__PURE__ */ new Set()
    });
    var Dismissable2 = React17.forwardRef(
      (props, forwardedRef) => {
        const {
          disableOutsidePointerEvents = false,
          forceUnmount,
          onEscapeKeyDown,
          onPointerDownOutside,
          onFocusOutside,
          onInteractOutside,
          onDismiss,
          ...layerProps
        } = props;
        const context = React17.useContext(DismissableContext);
        const [node, setNode] = React17.useState(null);
        const [, force] = React17.useState({});
        const composedRefs = (0, import_compose_refs3.useComposedRefs)(forwardedRef, (node2) => setNode(node2));
        const layers = Array.from(context.layers);
        const [highestLayerWithOutsidePointerEventsDisabled] = [
          ...context.layersWithOutsidePointerEventsDisabled
        ].slice(-1);
        const highestLayerWithOutsidePointerEventsDisabledIndex = layers.indexOf(
          highestLayerWithOutsidePointerEventsDisabled
        );
        const index3 = node ? layers.indexOf(node) : -1;
        const isBodyPointerEventsDisabled = context.layersWithOutsidePointerEventsDisabled.size > 0;
        const isPointerEventsEnabled = index3 >= highestLayerWithOutsidePointerEventsDisabledIndex;
        const pointerDownOutside = usePointerDownOutside((event) => {
          const target = event.target;
          const isPointerDownOnBranch = [...context.branches].some(
            (branch) => branch.contains(target)
          );
          if (!isPointerEventsEnabled || isPointerDownOnBranch)
            return;
          onPointerDownOutside == null ? void 0 : onPointerDownOutside(event);
          onInteractOutside == null ? void 0 : onInteractOutside(event);
          if (!event.defaultPrevented)
            onDismiss == null ? void 0 : onDismiss();
        });
        const focusOutside = useFocusOutside((event) => {
          const target = event.target;
          const isFocusInBranch = [...context.branches].some(
            (branch) => branch.contains(target)
          );
          if (isFocusInBranch)
            return;
          onFocusOutside == null ? void 0 : onFocusOutside(event);
          onInteractOutside == null ? void 0 : onInteractOutside(event);
          if (!event.defaultPrevented)
            onDismiss == null ? void 0 : onDismiss();
        });
        (0, import_react_use_escape_keydown.useEscapeKeydown)((event) => {
          const isHighestLayer = index3 === context.layers.size - 1;
          if (!isHighestLayer)
            return;
          onEscapeKeyDown == null ? void 0 : onEscapeKeyDown(event);
          if (!event.defaultPrevented && onDismiss) {
            event.preventDefault();
            onDismiss();
          }
        });
        React17.useEffect(() => {
          if (!node)
            return;
          if (disableOutsidePointerEvents) {
            if (context.layersWithOutsidePointerEventsDisabled.size === 0) {
              originalBodyPointerEvents = document.body.style.pointerEvents;
              document.body.style.pointerEvents = "none";
            }
            context.layersWithOutsidePointerEventsDisabled.add(node);
          }
          context.layers.add(node);
          dispatchUpdate();
          return () => {
            if (disableOutsidePointerEvents && context.layersWithOutsidePointerEventsDisabled.size === 1) {
              document.body.style.pointerEvents = originalBodyPointerEvents;
            }
          };
        }, [node, disableOutsidePointerEvents, context]);
        React17.useEffect(() => {
          if (forceUnmount)
            return;
          return () => {
            if (!node)
              return;
            context.layers.delete(node);
            context.layersWithOutsidePointerEventsDisabled.delete(node);
            dispatchUpdate();
          };
        }, [node, context, forceUnmount]);
        React17.useEffect(() => {
          const handleUpdate = /* @__PURE__ */ __name(() => {
            force({});
          }, "handleUpdate");
          document.addEventListener(CONTEXT_UPDATE, handleUpdate);
          return () => document.removeEventListener(CONTEXT_UPDATE, handleUpdate);
        }, []);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          "div",
          {
            ...layerProps,
            ref: composedRefs,
            style: {
              display: "contents",
              pointerEvents: isBodyPointerEventsDisabled ? isPointerEventsEnabled ? "auto" : "none" : void 0,
              // @ts-ignore
              ...props.style
            },
            onFocusCapture: (0, import_core37.composeEventHandlers)(
              // @ts-ignore
              props.onFocusCapture,
              focusOutside.onFocusCapture
            ),
            onBlurCapture: (0, import_core37.composeEventHandlers)(
              // @ts-ignore
              props.onBlurCapture,
              focusOutside.onBlurCapture
            ),
            onPointerDownCapture: (0, import_core37.composeEventHandlers)(
              // @ts-ignore
              props.onPointerDownCapture,
              pointerDownOutside.onPointerDownCapture
            )
          }
        );
      }
    );
    Dismissable2.displayName = DISMISSABLE_LAYER_NAME;
    var BRANCH_NAME = "DismissableBranch";
    var DismissableBranch = React17.forwardRef(
      (props, forwardedRef) => {
        const context = React17.useContext(DismissableContext);
        const ref = React17.useRef(null);
        const composedRefs = (0, import_compose_refs3.useComposedRefs)(forwardedRef, ref);
        React17.useEffect(() => {
          const node = ref.current;
          if (node) {
            context.branches.add(node);
            return () => {
              context.branches.delete(node);
            };
          }
        }, [context.branches]);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { style: { display: "contents" }, ...props, ref: composedRefs });
      }
    );
    DismissableBranch.displayName = BRANCH_NAME;
    function usePointerDownOutside(onPointerDownOutside) {
      const handlePointerDownOutside = (0, import_use_event2.useEvent)(onPointerDownOutside);
      const isPointerInsideReactTreeRef = React17.useRef(false);
      const handleClickRef = React17.useRef(() => {
      });
      React17.useEffect(() => {
        const handlePointerDown = /* @__PURE__ */ __name((event) => {
          if (event.target && !isPointerInsideReactTreeRef.current) {
            let handleAndDispatchPointerDownOutsideEvent2 = /* @__PURE__ */ __name(function() {
              handleAndDispatchCustomEvent(
                POINTER_DOWN_OUTSIDE,
                handlePointerDownOutside,
                eventDetail,
                { discrete: true }
              );
            }, "handleAndDispatchPointerDownOutsideEvent2");
            var handleAndDispatchPointerDownOutsideEvent = handleAndDispatchPointerDownOutsideEvent2;
            const eventDetail = { originalEvent: event };
            if (event.pointerType === "touch") {
              document.removeEventListener("click", handleClickRef.current);
              handleClickRef.current = handleAndDispatchPointerDownOutsideEvent2;
              document.addEventListener("click", handleClickRef.current, { once: true });
            } else {
              handleAndDispatchPointerDownOutsideEvent2();
            }
          }
          isPointerInsideReactTreeRef.current = false;
        }, "handlePointerDown");
        const timerId = setTimeout(() => {
          document.addEventListener("pointerdown", handlePointerDown);
        }, 0);
        return () => {
          window.clearTimeout(timerId);
          document.removeEventListener("pointerdown", handlePointerDown);
          document.removeEventListener("click", handleClickRef.current);
        };
      }, [handlePointerDownOutside]);
      return {
        // ensures we check React component tree (not just DOM tree)
        onPointerDownCapture: () => isPointerInsideReactTreeRef.current = true
      };
    }
    __name(usePointerDownOutside, "usePointerDownOutside");
    function useFocusOutside(onFocusOutside) {
      const handleFocusOutside = (0, import_use_event2.useEvent)(onFocusOutside);
      const isFocusInsideReactTreeRef = React17.useRef(false);
      React17.useEffect(() => {
        const handleFocus = /* @__PURE__ */ __name((event) => {
          if (event.target && !isFocusInsideReactTreeRef.current) {
            const eventDetail = { originalEvent: event };
            handleAndDispatchCustomEvent(FOCUS_OUTSIDE, handleFocusOutside, eventDetail, {
              discrete: false
            });
          }
        }, "handleFocus");
        document.addEventListener("focusin", handleFocus);
        return () => document.removeEventListener("focusin", handleFocus);
      }, [handleFocusOutside]);
      return {
        onFocusCapture: () => isFocusInsideReactTreeRef.current = true,
        onBlurCapture: () => isFocusInsideReactTreeRef.current = false
      };
    }
    __name(useFocusOutside, "useFocusOutside");
    function dispatchUpdate() {
      const event = new CustomEvent(CONTEXT_UPDATE);
      document.dispatchEvent(event);
    }
    __name(dispatchUpdate, "dispatchUpdate");
    function handleAndDispatchCustomEvent(name, handler, detail, { discrete }) {
      const target = detail.originalEvent.target;
      const event = new CustomEvent(name, { bubbles: false, cancelable: true, detail });
      if (handler)
        target.addEventListener(name, handler, { once: true });
      if (discrete) {
        dispatchDiscreteCustomEvent(target, event);
      } else {
        target.dispatchEvent(event);
      }
    }
    __name(handleAndDispatchCustomEvent, "handleAndDispatchCustomEvent");
  }
});

// node_modules/@tamagui/dismissable/dist/cjs/index.js
var require_cjs8 = __commonJS({
  "node_modules/@tamagui/dismissable/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Dismissable(), module2.exports);
  }
});

// node_modules/@tamagui/focus-scope/dist/cjs/FocusScope.js
var require_FocusScope = __commonJS({
  "node_modules/@tamagui/focus-scope/dist/cjs/FocusScope.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var FocusScope_exports = {};
    __export2(FocusScope_exports, {
      FocusScope: () => FocusScope2
    });
    module2.exports = __toCommonJS2(FocusScope_exports);
    var import_compose_refs3 = require_cjs2();
    var import_use_event2 = require_cjs7();
    var React17 = __toESM2(require("react"));
    var AUTOFOCUS_ON_MOUNT = "focusScope.autoFocusOnMount";
    var AUTOFOCUS_ON_UNMOUNT = "focusScope.autoFocusOnUnmount";
    var EVENT_OPTIONS = { bubbles: false, cancelable: true };
    var FOCUS_SCOPE_NAME = "FocusScope";
    var FocusScope2 = React17.forwardRef(
      (props, forwardedRef) => {
        const {
          loop = false,
          trapped = false,
          onMountAutoFocus: onMountAutoFocusProp,
          onUnmountAutoFocus: onUnmountAutoFocusProp,
          children,
          forceUnmount,
          ...scopeProps
        } = props;
        const [container, setContainer] = React17.useState(null);
        const onMountAutoFocus = (0, import_use_event2.useEvent)(onMountAutoFocusProp);
        const onUnmountAutoFocus = (0, import_use_event2.useEvent)(onUnmountAutoFocusProp);
        const lastFocusedElementRef = React17.useRef(null);
        const composedRefs = (0, import_compose_refs3.useComposedRefs)(forwardedRef, (node) => setContainer(node));
        const focusScope = React17.useRef({
          paused: false,
          pause() {
            this.paused = true;
          },
          resume() {
            this.paused = false;
          }
        }).current;
        React17.useEffect(() => {
          if (!trapped)
            return;
          function handleFocusIn(event) {
            if (focusScope.paused || !container)
              return;
            const target = event.target;
            if (container.contains(target)) {
              lastFocusedElementRef.current = target;
            } else {
              focus(lastFocusedElementRef.current, { select: true });
            }
          }
          __name(handleFocusIn, "handleFocusIn");
          function handleFocusOut(event) {
            if (focusScope.paused || !container)
              return;
            if (!container.contains(event.relatedTarget)) {
              focus(lastFocusedElementRef.current, { select: true });
            }
          }
          __name(handleFocusOut, "handleFocusOut");
          document.addEventListener("focusin", handleFocusIn);
          document.addEventListener("focusout", handleFocusOut);
          return () => {
            document.removeEventListener("focusin", handleFocusIn);
            document.removeEventListener("focusout", handleFocusOut);
          };
        }, [trapped, forceUnmount, container, focusScope.paused]);
        React17.useEffect(() => {
          if (!container)
            return;
          if (forceUnmount)
            return;
          focusScopesStack.add(focusScope);
          const previouslyFocusedElement = document.activeElement;
          const hasFocusedCandidate = container.contains(previouslyFocusedElement);
          if (!hasFocusedCandidate) {
            const mountEvent = new CustomEvent(AUTOFOCUS_ON_MOUNT, EVENT_OPTIONS);
            container.addEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
            container.dispatchEvent(mountEvent);
            if (!mountEvent.defaultPrevented) {
              focusFirst(removeLinks(getTabbableCandidates(container)), { select: true });
              if (document.activeElement === previouslyFocusedElement) {
                focus(container);
              }
            }
          }
          return () => {
            container.removeEventListener(AUTOFOCUS_ON_MOUNT, onMountAutoFocus);
            const unmountEvent = new CustomEvent(AUTOFOCUS_ON_UNMOUNT, EVENT_OPTIONS);
            container.addEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
            container.dispatchEvent(unmountEvent);
            if (!unmountEvent.defaultPrevented) {
              focus(previouslyFocusedElement ?? document.body, { select: true });
            }
            container.removeEventListener(AUTOFOCUS_ON_UNMOUNT, onUnmountAutoFocus);
            focusScopesStack.remove(focusScope);
          };
        }, [container, forceUnmount, onMountAutoFocus, onUnmountAutoFocus, focusScope]);
        const handleKeyDown = React17.useCallback(
          (event) => {
            if (!(loop || trapped))
              return;
            if (focusScope.paused)
              return;
            const isTabKey = event.key === "Tab" && !event.altKey && !event.ctrlKey && !event.metaKey;
            const focusedElement = document.activeElement;
            if (isTabKey && focusedElement) {
              const container2 = event.currentTarget;
              const [first, last] = getTabbableEdges(container2);
              const hasTabbableElementsInside = first && last;
              if (!hasTabbableElementsInside) {
                if (focusedElement === container2)
                  event.preventDefault();
              } else {
                if (!event.shiftKey && focusedElement === last) {
                  event.preventDefault();
                  if (loop)
                    focus(first, { select: true });
                } else if (event.shiftKey && focusedElement === first) {
                  event.preventDefault();
                  if (loop)
                    focus(last, { select: true });
                }
              }
            }
          },
          [loop, trapped, focusScope.paused]
        );
        const child = React17.Children.only(children);
        return React17.cloneElement(child, {
          tabIndex: -1,
          ...scopeProps,
          ref: composedRefs,
          onKeyDown: handleKeyDown
        });
      }
    );
    FocusScope2.displayName = FOCUS_SCOPE_NAME;
    function focusFirst(candidates, { select = false } = {}) {
      const previouslyFocusedElement = document.activeElement;
      for (const candidate of candidates) {
        focus(candidate, { select });
        if (document.activeElement !== previouslyFocusedElement)
          return;
      }
    }
    __name(focusFirst, "focusFirst");
    function getTabbableEdges(container) {
      const candidates = getTabbableCandidates(container);
      const first = findVisible(candidates, container);
      const last = findVisible(candidates.reverse(), container);
      return [first, last];
    }
    __name(getTabbableEdges, "getTabbableEdges");
    function getTabbableCandidates(container) {
      const nodes = [];
      const walker = document.createTreeWalker(container, NodeFilter.SHOW_ELEMENT, {
        acceptNode: (node) => {
          const isHiddenInput = node.tagName === "INPUT" && node.type === "hidden";
          if (node.disabled || node.hidden || isHiddenInput)
            return NodeFilter.FILTER_SKIP;
          return node.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
        }
      });
      while (walker.nextNode())
        nodes.push(walker.currentNode);
      return nodes;
    }
    __name(getTabbableCandidates, "getTabbableCandidates");
    function findVisible(elements, container) {
      for (const element of elements) {
        if (!isHidden(element, { upTo: container }))
          return element;
      }
    }
    __name(findVisible, "findVisible");
    function isHidden(node, { upTo }) {
      if (getComputedStyle(node).visibility === "hidden")
        return true;
      while (node) {
        if (upTo !== void 0 && node === upTo)
          return false;
        if (getComputedStyle(node).display === "none")
          return true;
        node = node.parentElement;
      }
      return false;
    }
    __name(isHidden, "isHidden");
    function isSelectableInput(element) {
      return element instanceof HTMLInputElement && "select" in element;
    }
    __name(isSelectableInput, "isSelectableInput");
    function focus(element, { select = false } = {}) {
      if (element == null ? void 0 : element.focus) {
        const previouslyFocusedElement = document.activeElement;
        element.focus({ preventScroll: true });
        if (element !== previouslyFocusedElement && isSelectableInput(element) && select)
          element.select();
      }
    }
    __name(focus, "focus");
    var focusScopesStack = createFocusScopesStack();
    function createFocusScopesStack() {
      let stack = [];
      return {
        add(focusScope) {
          const activeFocusScope = stack[0];
          if (focusScope !== activeFocusScope) {
            activeFocusScope == null ? void 0 : activeFocusScope.pause();
          }
          stack = arrayRemove(stack, focusScope);
          stack.unshift(focusScope);
        },
        remove(focusScope) {
          var _a;
          stack = arrayRemove(stack, focusScope);
          (_a = stack[0]) == null ? void 0 : _a.resume();
        }
      };
    }
    __name(createFocusScopesStack, "createFocusScopesStack");
    function arrayRemove(array, item) {
      const updatedArray = [...array];
      const index3 = updatedArray.indexOf(item);
      if (index3 !== -1) {
        updatedArray.splice(index3, 1);
      }
      return updatedArray;
    }
    __name(arrayRemove, "arrayRemove");
    function removeLinks(items) {
      return items.filter((item) => item.tagName !== "A");
    }
    __name(removeLinks, "removeLinks");
  }
});

// node_modules/@tamagui/focus-scope/dist/cjs/index.js
var require_cjs9 = __commonJS({
  "node_modules/@tamagui/focus-scope/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_FocusScope(), module2.exports);
  }
});

// node_modules/@tamagui/polyfill-dev/index.js
var require_polyfill_dev = __commonJS({
  "node_modules/@tamagui/polyfill-dev/index.js"() {
    if (typeof globalThis["__DEV__"] === "undefined") {
      globalThis["__DEV__"] = process.env.NODE_ENV === "development";
    }
  }
});

// node_modules/@tamagui/stacks/dist/cjs/getElevation.js
var require_getElevation = __commonJS({
  "node_modules/@tamagui/stacks/dist/cjs/getElevation.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var getElevation_exports = {};
    __export2(getElevation_exports, {
      getElevation: () => getElevation2,
      getSizedElevation: () => getSizedElevation2
    });
    module2.exports = __toCommonJS2(getElevation_exports);
    var import_core37 = require("@tamagui/core-node");
    var getElevation2 = /* @__PURE__ */ __name((size4, extras) => {
      if (!size4)
        return;
      const { tokens: tokens2 } = extras;
      const token = tokens2.size[size4];
      const sizeNum = (0, import_core37.isVariable)(token) ? +token.val : size4;
      return getSizedElevation2(sizeNum, extras);
    }, "getElevation");
    var getSizedElevation2 = /* @__PURE__ */ __name((val2, { theme, tokens: tokens2 }) => {
      let num = 0;
      if (val2 === true) {
        const val22 = (0, import_core37.getVariableValue)(tokens2.size["true"]);
        if (typeof val22 === "number") {
          num = val22;
        } else {
          num = 10;
        }
      } else {
        num = +val2;
      }
      if (process.env.NODE_ENV === "development") {
        if (num !== null && isNaN(num)) {
          console.warn("NaN shadow", num, val2);
        }
      }
      const [height, shadowRadius] = [Math.round(num / 4 + 1), Math.round(num / 2 + 2)];
      const shadow = {
        shadowColor: theme.shadowColor,
        shadowRadius,
        shadowOffset: { height, width: 0 }
      };
      return shadow;
    }, "getSizedElevation");
  }
});

// node_modules/@tamagui/stacks/dist/cjs/Stacks.js
var require_Stacks = __commonJS({
  "node_modules/@tamagui/stacks/dist/cjs/Stacks.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Stacks_exports = {};
    __export2(Stacks_exports, {
      XStack: () => XStack2,
      YStack: () => YStack2,
      ZStack: () => ZStack2,
      fullscreenStyle: () => fullscreenStyle2
    });
    module2.exports = __toCommonJS2(Stacks_exports);
    var import_core37 = require("@tamagui/core-node");
    var import_getElevation3 = require_getElevation();
    var fullscreenStyle2 = {
      position: "absolute",
      top: 0,
      left: 0,
      right: 0,
      bottom: 0
    };
    var variants2 = {
      fullscreen: {
        true: fullscreenStyle2
      },
      elevation: {
        "...size": import_getElevation3.getElevation
      }
    };
    var YStack2 = (0, import_core37.styled)(import_core37.Stack, {
      flexDirection: "column",
      name: "YStack",
      variants: variants2
    });
    var XStack2 = (0, import_core37.styled)(import_core37.Stack, {
      flexDirection: "row",
      name: "XStack",
      variants: variants2
    });
    var ZStack2 = (0, import_core37.styled)(
      YStack2,
      {
        name: "ZStack",
        position: "relative"
      },
      {
        neverFlatten: true,
        isZStack: true
      }
    );
  }
});

// node_modules/@tamagui/get-size/dist/cjs/index.js
var require_cjs10 = __commonJS({
  "node_modules/@tamagui/get-size/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    __export2(src_exports, {
      getSize: () => getSize,
      stepTokenUpOrDown: () => stepTokenUpOrDown2
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_core37 = require("@tamagui/core-node");
    var getSize = /* @__PURE__ */ __name((size4, shift3 = 0, bounds = [0]) => {
      return stepTokenUpOrDown2("size", size4, shift3, bounds);
    }, "getSize");
    var stepTokenUpOrDown2 = /* @__PURE__ */ __name((type, name = "$true", shift3 = 0, bounds = [0]) => {
      const tokens2 = (0, import_core37.getTokens)({ prefixed: true })[type];
      const keysOrdered = import_core37.tokensKeysOrdered.get(tokens2) || Object.keys(tokens2);
      const min3 = bounds[0] ?? 0;
      const max3 = bounds[1] ?? keysOrdered.length - 1;
      const currentIndex = keysOrdered.indexOf(name);
      if (name === "$true") {
        shift3 += shift3 === 0 ? 0 : shift3 > 0 ? 1 : -1;
      }
      const index3 = Math.min(max3, Math.max(min3, currentIndex + shift3));
      const key = keysOrdered[index3];
      return tokens2[key] || tokens2["$true"];
    }, "stepTokenUpOrDown");
  }
});

// node_modules/@tamagui/get-button-sized/dist/cjs/index.js
var require_cjs11 = __commonJS({
  "node_modules/@tamagui/get-button-sized/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    __export2(src_exports, {
      getButtonSized: () => getButtonSized5
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_get_size2 = require_cjs10();
    var getButtonSized5 = /* @__PURE__ */ __name((val2, { tokens: tokens2 }) => {
      if (typeof val2 === "number") {
        return {
          paddingHorizontal: val2 * 0.25,
          height: val2,
          borderRadius: val2 * 0.2
        };
      }
      const ySize = (0, import_get_size2.getSize)(val2, 0);
      const xSize = (0, import_get_size2.stepTokenUpOrDown)("space", val2);
      const radiusToken = tokens2.radius[val2] ?? tokens2.radius["$true"];
      return {
        paddingHorizontal: xSize,
        height: ySize,
        borderRadius: radiusToken
      };
    }, "getButtonSized");
  }
});

// node_modules/@tamagui/stacks/dist/cjs/variants.js
var require_variants = __commonJS({
  "node_modules/@tamagui/stacks/dist/cjs/variants.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var variants_exports = {};
    __export2(variants_exports, {
      bordered: () => bordered2,
      circular: () => circular2,
      elevate: () => elevate2,
      focusTheme: () => focusTheme2,
      hoverTheme: () => hoverTheme2,
      padded: () => padded2,
      pressTheme: () => pressTheme2,
      radiused: () => radiused2
    });
    module2.exports = __toCommonJS2(variants_exports);
    var import_getElevation3 = require_getElevation();
    var elevate2 = {
      true: (_, extras) => {
        return (0, import_getElevation3.getElevation)(extras.props["size"], extras);
      }
    };
    var bordered2 = /* @__PURE__ */ __name((val2, { props }) => {
      return {
        // TODO size it with size in '...size'
        borderWidth: typeof val2 === "number" ? val2 : 1,
        borderColor: "$borderColor",
        ...props.hoverTheme && {
          hoverStyle: {
            borderColor: "$borderColorHover"
          }
        },
        ...props.pressTheme && {
          pressStyle: {
            borderColor: "$borderColorPress"
          }
        },
        ...props.focusTheme && {
          focusStyle: {
            borderColor: "$borderColorFocus"
          }
        }
      };
    }, "bordered");
    var padded2 = {
      true: (_, extras) => {
        const { tokens: tokens2, props } = extras;
        return {
          padding: tokens2.space[props.size] || tokens2.space["$true"]
        };
      }
    };
    var radiused2 = {
      true: (_, extras) => {
        const { tokens: tokens2, props } = extras;
        return {
          borderRadius: tokens2.radius[props.size] || tokens2.radius["$true"]
        };
      }
    };
    var circular2 = {
      true: (_, { props, tokens: tokens2 }) => {
        const size4 = tokens2.size[props.size];
        return {
          width: size4,
          height: size4,
          maxWidth: size4,
          maxHeight: size4,
          minWidth: size4,
          minHeight: size4,
          borderRadius: 1e5,
          padding: 0
        };
      }
    };
    var hoverTheme2 = {
      true: {
        hoverStyle: {
          backgroundColor: "$backgroundHover",
          borderColor: "$borderColorHover"
        }
      },
      false: {}
    };
    var pressTheme2 = {
      true: {
        cursor: "pointer",
        pressStyle: {
          backgroundColor: "$backgroundPress",
          borderColor: "$borderColorPress"
        }
      },
      false: {}
    };
    var focusTheme2 = {
      true: {
        focusStyle: {
          backgroundColor: "$backgroundFocus",
          borderColor: "$borderColorFocus"
        }
      },
      false: {}
    };
  }
});

// node_modules/@tamagui/stacks/dist/cjs/SizableStack.js
var require_SizableStack = __commonJS({
  "node_modules/@tamagui/stacks/dist/cjs/SizableStack.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var SizableStack_exports = {};
    __export2(SizableStack_exports, {
      SizableStack: () => SizableStack2
    });
    module2.exports = __toCommonJS2(SizableStack_exports);
    var import_core37 = require("@tamagui/core-node");
    var import_get_button_sized5 = require_cjs11();
    var import_Stacks3 = require_Stacks();
    var import_variants3 = require_variants();
    var SizableStack2 = (0, import_core37.styled)(import_Stacks3.YStack, {
      name: "SizableStack",
      backgroundColor: "$background",
      flexDirection: "row",
      flexShrink: 1,
      variants: {
        hoverTheme: import_variants3.hoverTheme,
        pressTheme: import_variants3.pressTheme,
        focusTheme: import_variants3.focusTheme,
        circular: import_variants3.circular,
        elevate: import_variants3.elevate,
        bordered: import_variants3.bordered,
        size: {
          "...size": import_get_button_sized5.getButtonSized
        }
      }
    });
  }
});

// node_modules/@tamagui/stacks/dist/cjs/ThemeableStack.js
var require_ThemeableStack = __commonJS({
  "node_modules/@tamagui/stacks/dist/cjs/ThemeableStack.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var ThemeableStack_exports = {};
    __export2(ThemeableStack_exports, {
      ThemeableStack: () => ThemeableStack2
    });
    module2.exports = __toCommonJS2(ThemeableStack_exports);
    var import_core37 = require("@tamagui/core-node");
    var import_Stacks3 = require_Stacks();
    var import_variants3 = require_variants();
    var chromelessStyle2 = {
      backgroundColor: "transparent",
      borderColor: "transparent",
      shadowColor: "transparent"
    };
    var ThemeableStack2 = (0, import_core37.styled)(import_Stacks3.YStack, {
      name: "SizableStack",
      variants: {
        backgrounded: {
          true: {
            backgroundColor: "$background"
          }
        },
        radiused: import_variants3.radiused,
        hoverTheme: import_variants3.hoverTheme,
        pressTheme: import_variants3.pressTheme,
        focusTheme: import_variants3.focusTheme,
        circular: import_variants3.circular,
        padded: import_variants3.padded,
        elevate: import_variants3.elevate,
        bordered: import_variants3.bordered,
        transparent: {
          true: {
            backgroundColor: "transparent"
          }
        },
        chromeless: {
          true: chromelessStyle2,
          all: {
            ...chromelessStyle2,
            hoverStyle: chromelessStyle2,
            pressStyle: chromelessStyle2,
            focusStyle: chromelessStyle2
          }
        }
      }
    });
  }
});

// node_modules/@tamagui/stacks/dist/cjs/index.js
var require_cjs12 = __commonJS({
  "node_modules/@tamagui/stacks/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Stacks(), module2.exports);
    __reExport2(src_exports, require_SizableStack(), module2.exports);
    __reExport2(src_exports, require_ThemeableStack(), module2.exports);
  }
});

// node_modules/@tamagui/portal/dist/cjs/Portal.js
var require_Portal = __commonJS({
  "node_modules/@tamagui/portal/dist/cjs/Portal.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Portal_exports = {};
    __export2(Portal_exports, {
      Portal: () => Portal
    });
    module2.exports = __toCommonJS2(Portal_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_polyfill_dev = require_polyfill_dev();
    var import_core37 = require("@tamagui/core-node");
    var import_stacks8 = require_cjs12();
    var React17 = __toESM2(require("react"));
    var import_react_dom4 = require("react-dom");
    var Portal = /* @__PURE__ */ __name(({ host = ((_a) => (_a = globalThis.document) == null ? void 0 : _a.body)(), ...props }) => {
      const contents = /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        import_stacks8.YStack,
        {
          contain: "strict",
          fullscreen: true,
          position: import_core37.isWeb ? "fixed" : "absolute",
          maxWidth: import_core37.isWeb ? "100vw" : "100%",
          maxHeight: import_core37.isWeb ? "100vh" : "100%",
          pointerEvents: "none",
          ...props
        }
      );
      const [hostElement, setHostElement] = React17.useState(null);
      (0, import_core37.useIsomorphicLayoutEffect)(() => {
        setHostElement(host);
      }, [host]);
      if (hostElement) {
        return (0, import_react_dom4.createPortal)(contents, hostElement);
      }
      return null;
    }, "Portal");
  }
});

// node_modules/@tamagui/portal/dist/cjs/PortalProps.js
var require_PortalProps = __commonJS({
  "node_modules/@tamagui/portal/dist/cjs/PortalProps.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var PortalProps_exports = {};
    module2.exports = __toCommonJS2(PortalProps_exports);
  }
});

// node_modules/@tamagui/portal/dist/cjs/GorhomPortal.js
var require_GorhomPortal = __commonJS({
  "node_modules/@tamagui/portal/dist/cjs/GorhomPortal.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var GorhomPortal_exports = {};
    __export2(GorhomPortal_exports, {
      ACTIONS: () => ACTIONS,
      INITIAL_STATE: () => INITIAL_STATE,
      PortalHost: () => PortalHost2,
      PortalItem: () => PortalItem2,
      PortalProvider: () => PortalProvider3,
      usePortal: () => usePortal
    });
    module2.exports = __toCommonJS2(GorhomPortal_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_core37 = require("@tamagui/core-node");
    var import_react30 = __toESM2(require("react"));
    var ACTIONS = /* @__PURE__ */ ((ACTIONS2) => {
      ACTIONS2[ACTIONS2["REGISTER_HOST"] = 0] = "REGISTER_HOST";
      ACTIONS2[ACTIONS2["DEREGISTER_HOST"] = 1] = "DEREGISTER_HOST";
      ACTIONS2[ACTIONS2["ADD_UPDATE_PORTAL"] = 2] = "ADD_UPDATE_PORTAL";
      ACTIONS2[ACTIONS2["REMOVE_PORTAL"] = 3] = "REMOVE_PORTAL";
      return ACTIONS2;
    })(ACTIONS || {});
    var INITIAL_STATE = {};
    var registerHost = /* @__PURE__ */ __name((state, hostName) => {
      if (!(hostName in state)) {
        state[hostName] = [];
      }
      return state;
    }, "registerHost");
    var deregisterHost = /* @__PURE__ */ __name((state, hostName) => {
      delete state[hostName];
      return state;
    }, "deregisterHost");
    var addUpdatePortal = /* @__PURE__ */ __name((state, hostName, portalName, node) => {
      if (!(hostName in state)) {
        state = registerHost(state, hostName);
      }
      const index3 = state[hostName].findIndex((item) => item.name === portalName);
      if (index3 !== -1) {
        state[hostName][index3].node = node;
      } else {
        state[hostName].push({
          name: portalName,
          node
        });
      }
      return state;
    }, "addUpdatePortal");
    var removePortal = /* @__PURE__ */ __name((state, hostName, portalName) => {
      if (!(hostName in state)) {
        console.log(
          `Failed to remove portal '${portalName}', '${hostName}' was not registered!`
        );
        return state;
      }
      const index3 = state[hostName].findIndex((item) => item.name === portalName);
      if (index3 !== -1)
        state[hostName].splice(index3, 1);
      return state;
    }, "removePortal");
    var reducer = /* @__PURE__ */ __name((state, action) => {
      const { type } = action;
      switch (type) {
        case 0:
          return registerHost({ ...state }, action.hostName);
        case 1:
          return deregisterHost({ ...state }, action.hostName);
        case 2:
          return addUpdatePortal(
            { ...state },
            action.hostName,
            action.portalName,
            action.node
          );
        case 3:
          return removePortal(
            { ...state },
            action.hostName,
            action.portalName
          );
        default:
          return state;
      }
    }, "reducer");
    var PortalStateContext = (0, import_react30.createContext)(null);
    var PortalDispatchContext = (0, import_react30.createContext)(null);
    var usePortalState = /* @__PURE__ */ __name((hostName) => {
      const state = (0, import_react30.useContext)(PortalStateContext);
      if (state === null) {
        throw new Error(
          "'PortalStateContext' cannot be null, please add 'PortalProvider' to the root component."
        );
      }
      return state[hostName] || [];
    }, "usePortalState");
    var usePortal = /* @__PURE__ */ __name((hostName = "root") => {
      const dispatch = (0, import_react30.useContext)(PortalDispatchContext);
      if (dispatch === null) {
        throw new Error(
          "'PortalDispatchContext' cannot be null, please add 'PortalProvider' to the root component."
        );
      }
      const registerHost2 = (0, import_react30.useCallback)(() => {
        dispatch({
          type: 0,
          hostName
        });
      }, []);
      const deregisterHost2 = (0, import_react30.useCallback)(() => {
        dispatch({
          type: 1,
          hostName
        });
      }, []);
      const addUpdatePortal2 = (0, import_react30.useCallback)((name, node) => {
        dispatch({
          type: 2,
          hostName,
          portalName: name,
          node
        });
      }, []);
      const removePortal2 = (0, import_react30.useCallback)((name) => {
        dispatch({
          type: 3,
          hostName,
          portalName: name
        });
      }, []);
      return {
        registerHost: registerHost2,
        deregisterHost: deregisterHost2,
        addPortal: addUpdatePortal2,
        updatePortal: addUpdatePortal2,
        removePortal: removePortal2
      };
    }, "usePortal");
    var PortalProviderComponent = /* @__PURE__ */ __name(({
      rootHostName = "root",
      shouldAddRootHost = true,
      children
    }) => {
      const [state, dispatch] = (0, import_react30.useReducer)(reducer, INITIAL_STATE);
      const transitionDispatch = (0, import_react30.useMemo)(() => {
        const next = /* @__PURE__ */ __name((value) => {
          (0, import_react30.startTransition)(() => {
            dispatch(value);
          });
        }, "next");
        return next;
      }, [dispatch]);
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(PortalDispatchContext.Provider, { value: transitionDispatch, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(PortalStateContext.Provider, { value: state, children: [
        children,
        shouldAddRootHost && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(PortalHost2, { name: rootHostName })
      ] }) });
    }, "PortalProviderComponent");
    var PortalProvider3 = (0, import_react30.memo)(PortalProviderComponent);
    PortalProvider3.displayName = "PortalProvider";
    var PortalHostComponent = /* @__PURE__ */ __name((props) => {
      const { name, forwardProps } = props;
      const isServer2 = !(0, import_core37.useDidFinishSSR)();
      const state = usePortalState(name);
      const { registerHost: registerHost2, deregisterHost: deregisterHost2 } = usePortal(props.name);
      (0, import_react30.useEffect)(() => {
        if (isServer2)
          return;
        registerHost2();
        return () => {
          deregisterHost2();
        };
      }, [isServer2]);
      if (forwardProps) {
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_jsx_runtime12.Fragment, { children: state.map((item) => {
          let next = item.node;
          if (forwardProps) {
            return import_react30.default.Children.map(next, (child) => {
              return import_react30.default.isValidElement(child) ? import_react30.default.cloneElement(child, { key: child.key, ...forwardProps }) : child;
            });
          }
          return next;
        }) });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_jsx_runtime12.Fragment, { children: state.map((item) => item.node) });
    }, "PortalHostComponent");
    var PortalHost2 = (0, import_react30.memo)(PortalHostComponent);
    PortalHost2.displayName = "PortalHost";
    var PortalComponent = /* @__PURE__ */ __name((props) => {
      const {
        name: _providedName,
        hostName,
        handleOnMount: _providedHandleOnMount,
        handleOnUnmount: _providedHandleOnUnmount,
        handleOnUpdate: _providedHandleOnUpdate,
        children
      } = props;
      const { addPortal: addUpdatePortal2, removePortal: removePortal2 } = usePortal(hostName);
      const id = (0, import_react30.useId)();
      const name = _providedName || id;
      const handleOnMount = (0, import_core37.useEvent)(() => {
        if (_providedHandleOnMount) {
          _providedHandleOnMount(() => addUpdatePortal2(name, children));
        } else {
          addUpdatePortal2(name, children);
        }
      });
      const handleOnUnmount = (0, import_core37.useEvent)(() => {
        if (_providedHandleOnUnmount) {
          _providedHandleOnUnmount(() => removePortal2(name));
        } else {
          removePortal2(name);
        }
      });
      const handleOnUpdate = (0, import_core37.useEvent)(() => {
        if (_providedHandleOnUpdate) {
          _providedHandleOnUpdate(() => addUpdatePortal2(name, children));
        } else {
          addUpdatePortal2(name, children);
        }
      });
      (0, import_core37.useIsomorphicLayoutEffect)(() => {
        handleOnMount();
        return () => {
          handleOnUnmount();
        };
      }, []);
      (0, import_react30.useEffect)(() => {
        handleOnUpdate();
      }, [children]);
      return null;
    }, "PortalComponent");
    var PortalItem2 = (0, import_react30.memo)(PortalComponent);
    PortalItem2.displayName = "Portal";
  }
});

// node_modules/@tamagui/portal/dist/cjs/index.js
var require_cjs13 = __commonJS({
  "node_modules/@tamagui/portal/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Portal(), module2.exports);
    __reExport2(src_exports, require_PortalProps(), module2.exports);
    __reExport2(src_exports, require_GorhomPortal(), module2.exports);
  }
});

// node_modules/tslib/tslib.es6.mjs
var tslib_es6_exports = {};
__export(tslib_es6_exports, {
  __addDisposableResource: () => __addDisposableResource,
  __assign: () => __assign,
  __asyncDelegator: () => __asyncDelegator,
  __asyncGenerator: () => __asyncGenerator,
  __asyncValues: () => __asyncValues,
  __await: () => __await,
  __awaiter: () => __awaiter,
  __classPrivateFieldGet: () => __classPrivateFieldGet,
  __classPrivateFieldIn: () => __classPrivateFieldIn,
  __classPrivateFieldSet: () => __classPrivateFieldSet,
  __createBinding: () => __createBinding,
  __decorate: () => __decorate,
  __disposeResources: () => __disposeResources,
  __esDecorate: () => __esDecorate,
  __exportStar: () => __exportStar,
  __extends: () => __extends,
  __generator: () => __generator,
  __importDefault: () => __importDefault,
  __importStar: () => __importStar,
  __makeTemplateObject: () => __makeTemplateObject,
  __metadata: () => __metadata,
  __param: () => __param,
  __propKey: () => __propKey,
  __read: () => __read,
  __rest: () => __rest,
  __runInitializers: () => __runInitializers,
  __setFunctionName: () => __setFunctionName,
  __spread: () => __spread,
  __spreadArray: () => __spreadArray,
  __spreadArrays: () => __spreadArrays,
  __values: () => __values,
  default: () => tslib_es6_default
});
function __extends(d, b) {
  if (typeof b !== "function" && b !== null)
    throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  __name(__, "__");
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
function __rest(s, e) {
  var t = {};
  for (var p in s)
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
      t[p] = s[p];
  if (s != null && typeof Object.getOwnPropertySymbols === "function")
    for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
      if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
        t[p[i]] = s[p[i]];
    }
  return t;
}
function __decorate(decorators, target, key, desc) {
  var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function")
    r = Reflect.decorate(decorators, target, key, desc);
  else
    for (var i = decorators.length - 1; i >= 0; i--)
      if (d = decorators[i])
        r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __param(paramIndex, decorator) {
  return function(target, key) {
    decorator(target, key, paramIndex);
  };
}
function __esDecorate(ctor, descriptorIn, decorators, contextIn, initializers, extraInitializers) {
  function accept(f) {
    if (f !== void 0 && typeof f !== "function")
      throw new TypeError("Function expected");
    return f;
  }
  __name(accept, "accept");
  var kind = contextIn.kind, key = kind === "getter" ? "get" : kind === "setter" ? "set" : "value";
  var target = !descriptorIn && ctor ? contextIn["static"] ? ctor : ctor.prototype : null;
  var descriptor = descriptorIn || (target ? Object.getOwnPropertyDescriptor(target, contextIn.name) : {});
  var _, done = false;
  for (var i = decorators.length - 1; i >= 0; i--) {
    var context = {};
    for (var p in contextIn)
      context[p] = p === "access" ? {} : contextIn[p];
    for (var p in contextIn.access)
      context.access[p] = contextIn.access[p];
    context.addInitializer = function(f) {
      if (done)
        throw new TypeError("Cannot add initializers after decoration has completed");
      extraInitializers.push(accept(f || null));
    };
    var result = (0, decorators[i])(kind === "accessor" ? { get: descriptor.get, set: descriptor.set } : descriptor[key], context);
    if (kind === "accessor") {
      if (result === void 0)
        continue;
      if (result === null || typeof result !== "object")
        throw new TypeError("Object expected");
      if (_ = accept(result.get))
        descriptor.get = _;
      if (_ = accept(result.set))
        descriptor.set = _;
      if (_ = accept(result.init))
        initializers.unshift(_);
    } else if (_ = accept(result)) {
      if (kind === "field")
        initializers.unshift(_);
      else
        descriptor[key] = _;
    }
  }
  if (target)
    Object.defineProperty(target, contextIn.name, descriptor);
  done = true;
}
function __runInitializers(thisArg, initializers, value) {
  var useValue2 = arguments.length > 2;
  for (var i = 0; i < initializers.length; i++) {
    value = useValue2 ? initializers[i].call(thisArg, value) : initializers[i].call(thisArg);
  }
  return useValue2 ? value : void 0;
}
function __propKey(x) {
  return typeof x === "symbol" ? x : "".concat(x);
}
function __setFunctionName(f, name, prefix) {
  if (typeof name === "symbol")
    name = name.description ? "[".concat(name.description, "]") : "";
  return Object.defineProperty(f, "name", { configurable: true, value: prefix ? "".concat(prefix, " ", name) : name });
}
function __metadata(metadataKey, metadataValue) {
  if (typeof Reflect === "object" && typeof Reflect.metadata === "function")
    return Reflect.metadata(metadataKey, metadataValue);
}
function __awaiter(thisArg, _arguments, P, generator) {
  function adopt(value) {
    return value instanceof P ? value : new P(function(resolve) {
      resolve(value);
    });
  }
  __name(adopt, "adopt");
  return new (P || (P = Promise))(function(resolve, reject) {
    function fulfilled(value) {
      try {
        step(generator.next(value));
      } catch (e) {
        reject(e);
      }
    }
    __name(fulfilled, "fulfilled");
    function rejected(value) {
      try {
        step(generator["throw"](value));
      } catch (e) {
        reject(e);
      }
    }
    __name(rejected, "rejected");
    function step(result) {
      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
    }
    __name(step, "step");
    step((generator = generator.apply(thisArg, _arguments || [])).next());
  });
}
function __generator(thisArg, body) {
  var _ = { label: 0, sent: function() {
    if (t[0] & 1)
      throw t[1];
    return t[1];
  }, trys: [], ops: [] }, f, y, t, g;
  return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() {
    return this;
  }), g;
  function verb(n) {
    return function(v) {
      return step([n, v]);
    };
  }
  __name(verb, "verb");
  function step(op) {
    if (f)
      throw new TypeError("Generator is already executing.");
    while (g && (g = 0, op[0] && (_ = 0)), _)
      try {
        if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done)
          return t;
        if (y = 0, t)
          op = [op[0] & 2, t.value];
        switch (op[0]) {
          case 0:
          case 1:
            t = op;
            break;
          case 4:
            _.label++;
            return { value: op[1], done: false };
          case 5:
            _.label++;
            y = op[1];
            op = [0];
            continue;
          case 7:
            op = _.ops.pop();
            _.trys.pop();
            continue;
          default:
            if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {
              _ = 0;
              continue;
            }
            if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {
              _.label = op[1];
              break;
            }
            if (op[0] === 6 && _.label < t[1]) {
              _.label = t[1];
              t = op;
              break;
            }
            if (t && _.label < t[2]) {
              _.label = t[2];
              _.ops.push(op);
              break;
            }
            if (t[2])
              _.ops.pop();
            _.trys.pop();
            continue;
        }
        op = body.call(thisArg, _);
      } catch (e) {
        op = [6, e];
        y = 0;
      } finally {
        f = t = 0;
      }
    if (op[0] & 5)
      throw op[1];
    return { value: op[0] ? op[1] : void 0, done: true };
  }
  __name(step, "step");
}
function __exportStar(m, o) {
  for (var p in m)
    if (p !== "default" && !Object.prototype.hasOwnProperty.call(o, p))
      __createBinding(o, m, p);
}
function __values(o) {
  var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
  if (m)
    return m.call(o);
  if (o && typeof o.length === "number")
    return {
      next: function() {
        if (o && i >= o.length)
          o = void 0;
        return { value: o && o[i++], done: !o };
      }
    };
  throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
}
function __read(o, n) {
  var m = typeof Symbol === "function" && o[Symbol.iterator];
  if (!m)
    return o;
  var i = m.call(o), r, ar = [], e;
  try {
    while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
      ar.push(r.value);
  } catch (error) {
    e = { error };
  } finally {
    try {
      if (r && !r.done && (m = i["return"]))
        m.call(i);
    } finally {
      if (e)
        throw e.error;
    }
  }
  return ar;
}
function __spread() {
  for (var ar = [], i = 0; i < arguments.length; i++)
    ar = ar.concat(__read(arguments[i]));
  return ar;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++)
    s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++)
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
      r[k] = a[j];
  return r;
}
function __spreadArray(to, from, pack) {
  if (pack || arguments.length === 2)
    for (var i = 0, l = from.length, ar; i < l; i++) {
      if (ar || !(i in from)) {
        if (!ar)
          ar = Array.prototype.slice.call(from, 0, i);
        ar[i] = from[i];
      }
    }
  return to.concat(ar || Array.prototype.slice.call(from));
}
function __await(v) {
  return this instanceof __await ? (this.v = v, this) : new __await(v);
}
function __asyncGenerator(thisArg, _arguments, generator) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var g = generator.apply(thisArg, _arguments || []), i, q = [];
  return i = {}, verb("next"), verb("throw"), verb("return", awaitReturn), i[Symbol.asyncIterator] = function() {
    return this;
  }, i;
  function awaitReturn(f) {
    return function(v) {
      return Promise.resolve(v).then(f, reject);
    };
  }
  __name(awaitReturn, "awaitReturn");
  function verb(n, f) {
    if (g[n]) {
      i[n] = function(v) {
        return new Promise(function(a, b) {
          q.push([n, v, a, b]) > 1 || resume(n, v);
        });
      };
      if (f)
        i[n] = f(i[n]);
    }
  }
  __name(verb, "verb");
  function resume(n, v) {
    try {
      step(g[n](v));
    } catch (e) {
      settle(q[0][3], e);
    }
  }
  __name(resume, "resume");
  function step(r) {
    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);
  }
  __name(step, "step");
  function fulfill(value) {
    resume("next", value);
  }
  __name(fulfill, "fulfill");
  function reject(value) {
    resume("throw", value);
  }
  __name(reject, "reject");
  function settle(f, v) {
    if (f(v), q.shift(), q.length)
      resume(q[0][0], q[0][1]);
  }
  __name(settle, "settle");
}
function __asyncDelegator(o) {
  var i, p;
  return i = {}, verb("next"), verb("throw", function(e) {
    throw e;
  }), verb("return"), i[Symbol.iterator] = function() {
    return this;
  }, i;
  function verb(n, f) {
    i[n] = o[n] ? function(v) {
      return (p = !p) ? { value: __await(o[n](v)), done: false } : f ? f(v) : v;
    } : f;
  }
  __name(verb, "verb");
}
function __asyncValues(o) {
  if (!Symbol.asyncIterator)
    throw new TypeError("Symbol.asyncIterator is not defined.");
  var m = o[Symbol.asyncIterator], i;
  return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function() {
    return this;
  }, i);
  function verb(n) {
    i[n] = o[n] && function(v) {
      return new Promise(function(resolve, reject) {
        v = o[n](v), settle(resolve, reject, v.done, v.value);
      });
    };
  }
  __name(verb, "verb");
  function settle(resolve, reject, d, v) {
    Promise.resolve(v).then(function(v2) {
      resolve({ value: v2, done: d });
    }, reject);
  }
  __name(settle, "settle");
}
function __makeTemplateObject(cooked, raw) {
  if (Object.defineProperty) {
    Object.defineProperty(cooked, "raw", { value: raw });
  } else {
    cooked.raw = raw;
  }
  return cooked;
}
function __importStar(mod) {
  if (mod && mod.__esModule)
    return mod;
  var result = {};
  if (mod != null) {
    for (var k in mod)
      if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k))
        __createBinding(result, mod, k);
  }
  __setModuleDefault(result, mod);
  return result;
}
function __importDefault(mod) {
  return mod && mod.__esModule ? mod : { default: mod };
}
function __classPrivateFieldGet(receiver, state, kind, f) {
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a getter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot read private member from an object whose class did not declare it");
  return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
}
function __classPrivateFieldSet(receiver, state, value, kind, f) {
  if (kind === "m")
    throw new TypeError("Private method is not writable");
  if (kind === "a" && !f)
    throw new TypeError("Private accessor was defined without a setter");
  if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver))
    throw new TypeError("Cannot write private member to an object whose class did not declare it");
  return kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value), value;
}
function __classPrivateFieldIn(state, receiver) {
  if (receiver === null || typeof receiver !== "object" && typeof receiver !== "function")
    throw new TypeError("Cannot use 'in' operator on non-object");
  return typeof state === "function" ? receiver === state : state.has(receiver);
}
function __addDisposableResource(env, value, async) {
  if (value !== null && value !== void 0) {
    if (typeof value !== "object" && typeof value !== "function")
      throw new TypeError("Object expected.");
    var dispose, inner2;
    if (async) {
      if (!Symbol.asyncDispose)
        throw new TypeError("Symbol.asyncDispose is not defined.");
      dispose = value[Symbol.asyncDispose];
    }
    if (dispose === void 0) {
      if (!Symbol.dispose)
        throw new TypeError("Symbol.dispose is not defined.");
      dispose = value[Symbol.dispose];
      if (async)
        inner2 = dispose;
    }
    if (typeof dispose !== "function")
      throw new TypeError("Object not disposable.");
    if (inner2)
      dispose = /* @__PURE__ */ __name(function() {
        try {
          inner2.call(this);
        } catch (e) {
          return Promise.reject(e);
        }
      }, "dispose");
    env.stack.push({ value, dispose, async });
  } else if (async) {
    env.stack.push({ async: true });
  }
  return value;
}
function __disposeResources(env) {
  function fail(e) {
    env.error = env.hasError ? new _SuppressedError(e, env.error, "An error was suppressed during disposal.") : e;
    env.hasError = true;
  }
  __name(fail, "fail");
  function next() {
    while (env.stack.length) {
      var rec = env.stack.pop();
      try {
        var result = rec.dispose && rec.dispose.call(rec.value);
        if (rec.async)
          return Promise.resolve(result).then(next, function(e) {
            fail(e);
            return next();
          });
      } catch (e) {
        fail(e);
      }
    }
    if (env.hasError)
      throw env.error;
  }
  __name(next, "next");
  return next();
}
var extendStatics, __assign, __createBinding, __setModuleDefault, _SuppressedError, tslib_es6_default;
var init_tslib_es6 = __esm({
  "node_modules/tslib/tslib.es6.mjs"() {
    extendStatics = /* @__PURE__ */ __name(function(d, b) {
      extendStatics = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(d2, b2) {
        d2.__proto__ = b2;
      } || function(d2, b2) {
        for (var p in b2)
          if (Object.prototype.hasOwnProperty.call(b2, p))
            d2[p] = b2[p];
      };
      return extendStatics(d, b);
    }, "extendStatics");
    __name(__extends, "__extends");
    __assign = /* @__PURE__ */ __name(function() {
      __assign = Object.assign || /* @__PURE__ */ __name(function __assign2(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
          s = arguments[i];
          for (var p in s)
            if (Object.prototype.hasOwnProperty.call(s, p))
              t[p] = s[p];
        }
        return t;
      }, "__assign");
      return __assign.apply(this, arguments);
    }, "__assign");
    __name(__rest, "__rest");
    __name(__decorate, "__decorate");
    __name(__param, "__param");
    __name(__esDecorate, "__esDecorate");
    __name(__runInitializers, "__runInitializers");
    __name(__propKey, "__propKey");
    __name(__setFunctionName, "__setFunctionName");
    __name(__metadata, "__metadata");
    __name(__awaiter, "__awaiter");
    __name(__generator, "__generator");
    __createBinding = Object.create ? function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      var desc = Object.getOwnPropertyDescriptor(m, k);
      if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
        desc = { enumerable: true, get: function() {
          return m[k];
        } };
      }
      Object.defineProperty(o, k2, desc);
    } : function(o, m, k, k2) {
      if (k2 === void 0)
        k2 = k;
      o[k2] = m[k];
    };
    __name(__exportStar, "__exportStar");
    __name(__values, "__values");
    __name(__read, "__read");
    __name(__spread, "__spread");
    __name(__spreadArrays, "__spreadArrays");
    __name(__spreadArray, "__spreadArray");
    __name(__await, "__await");
    __name(__asyncGenerator, "__asyncGenerator");
    __name(__asyncDelegator, "__asyncDelegator");
    __name(__asyncValues, "__asyncValues");
    __name(__makeTemplateObject, "__makeTemplateObject");
    __setModuleDefault = Object.create ? function(o, v) {
      Object.defineProperty(o, "default", { enumerable: true, value: v });
    } : function(o, v) {
      o["default"] = v;
    };
    __name(__importStar, "__importStar");
    __name(__importDefault, "__importDefault");
    __name(__classPrivateFieldGet, "__classPrivateFieldGet");
    __name(__classPrivateFieldSet, "__classPrivateFieldSet");
    __name(__classPrivateFieldIn, "__classPrivateFieldIn");
    __name(__addDisposableResource, "__addDisposableResource");
    _SuppressedError = typeof SuppressedError === "function" ? SuppressedError : function(error, suppressed, message) {
      var e = new Error(message);
      return e.name = "SuppressedError", e.error = error, e.suppressed = suppressed, e;
    };
    __name(__disposeResources, "__disposeResources");
    tslib_es6_default = {
      __extends,
      __assign,
      __rest,
      __decorate,
      __param,
      __metadata,
      __awaiter,
      __generator,
      __createBinding,
      __exportStar,
      __values,
      __read,
      __spread,
      __spreadArrays,
      __spreadArray,
      __await,
      __asyncGenerator,
      __asyncDelegator,
      __asyncValues,
      __makeTemplateObject,
      __importStar,
      __importDefault,
      __classPrivateFieldGet,
      __classPrivateFieldSet,
      __classPrivateFieldIn,
      __addDisposableResource,
      __disposeResources
    };
  }
});

// node_modules/react-remove-scroll-bar/dist/es5/constants.js
var require_constants = __commonJS({
  "node_modules/react-remove-scroll-bar/dist/es5/constants.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.removedBarSizeVariable = exports.noScrollbarsClassName = exports.fullWidthClassName = exports.zeroRightClassName = void 0;
    exports.zeroRightClassName = "right-scroll-bar-position";
    exports.fullWidthClassName = "width-before-scroll-bar";
    exports.noScrollbarsClassName = "with-scroll-bars-hidden";
    exports.removedBarSizeVariable = "--removed-body-scroll-bar-size";
  }
});

// node_modules/use-callback-ref/dist/es5/assignRef.js
var require_assignRef = __commonJS({
  "node_modules/use-callback-ref/dist/es5/assignRef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.assignRef = void 0;
    function assignRef(ref, value) {
      if (typeof ref === "function") {
        ref(value);
      } else if (ref) {
        ref.current = value;
      }
      return ref;
    }
    __name(assignRef, "assignRef");
    exports.assignRef = assignRef;
  }
});

// node_modules/use-callback-ref/dist/es5/useRef.js
var require_useRef = __commonJS({
  "node_modules/use-callback-ref/dist/es5/useRef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useCallbackRef = void 0;
    var react_1 = require("react");
    function useCallbackRef(initialValue, callback) {
      var ref = (0, react_1.useState)(function() {
        return {
          // value
          value: initialValue,
          // last callback
          callback,
          // "memoized" public interface
          facade: {
            get current() {
              return ref.value;
            },
            set current(value) {
              var last = ref.value;
              if (last !== value) {
                ref.value = value;
                ref.callback(value, last);
              }
            }
          }
        };
      })[0];
      ref.callback = callback;
      return ref.facade;
    }
    __name(useCallbackRef, "useCallbackRef");
    exports.useCallbackRef = useCallbackRef;
  }
});

// node_modules/use-callback-ref/dist/es5/createRef.js
var require_createRef = __commonJS({
  "node_modules/use-callback-ref/dist/es5/createRef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createCallbackRef = void 0;
    function createCallbackRef(callback) {
      var current = null;
      return {
        get current() {
          return current;
        },
        set current(value) {
          var last = current;
          if (last !== value) {
            current = value;
            callback(value, last);
          }
        }
      };
    }
    __name(createCallbackRef, "createCallbackRef");
    exports.createCallbackRef = createCallbackRef;
  }
});

// node_modules/use-callback-ref/dist/es5/mergeRef.js
var require_mergeRef = __commonJS({
  "node_modules/use-callback-ref/dist/es5/mergeRef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.mergeRefs = void 0;
    var assignRef_1 = require_assignRef();
    var createRef_1 = require_createRef();
    function mergeRefs(refs) {
      return (0, createRef_1.createCallbackRef)(function(newValue) {
        return refs.forEach(function(ref) {
          return (0, assignRef_1.assignRef)(ref, newValue);
        });
      });
    }
    __name(mergeRefs, "mergeRefs");
    exports.mergeRefs = mergeRefs;
  }
});

// node_modules/use-callback-ref/dist/es5/useMergeRef.js
var require_useMergeRef = __commonJS({
  "node_modules/use-callback-ref/dist/es5/useMergeRef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useMergeRefs = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var React17 = tslib_1.__importStar(require("react"));
    var assignRef_1 = require_assignRef();
    var useRef_1 = require_useRef();
    var useIsomorphicLayoutEffect3 = typeof window !== "undefined" ? React17.useLayoutEffect : React17.useEffect;
    var currentValues = /* @__PURE__ */ new WeakMap();
    function useMergeRefs2(refs, defaultValue2) {
      var callbackRef = (0, useRef_1.useCallbackRef)(defaultValue2 || null, function(newValue) {
        return refs.forEach(function(ref) {
          return (0, assignRef_1.assignRef)(ref, newValue);
        });
      });
      useIsomorphicLayoutEffect3(function() {
        var oldValue = currentValues.get(callbackRef);
        if (oldValue) {
          var prevRefs_1 = new Set(oldValue);
          var nextRefs_1 = new Set(refs);
          var current_1 = callbackRef.current;
          prevRefs_1.forEach(function(ref) {
            if (!nextRefs_1.has(ref)) {
              (0, assignRef_1.assignRef)(ref, null);
            }
          });
          nextRefs_1.forEach(function(ref) {
            if (!prevRefs_1.has(ref)) {
              (0, assignRef_1.assignRef)(ref, current_1);
            }
          });
        }
        currentValues.set(callbackRef, refs);
      }, [refs]);
      return callbackRef;
    }
    __name(useMergeRefs2, "useMergeRefs");
    exports.useMergeRefs = useMergeRefs2;
  }
});

// node_modules/use-callback-ref/dist/es5/useTransformRef.js
var require_useTransformRef = __commonJS({
  "node_modules/use-callback-ref/dist/es5/useTransformRef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useTransformRef = void 0;
    var assignRef_1 = require_assignRef();
    var useRef_1 = require_useRef();
    function useTransformRef(ref, transformer) {
      return (0, useRef_1.useCallbackRef)(null, function(value) {
        return (0, assignRef_1.assignRef)(ref, transformer(value));
      });
    }
    __name(useTransformRef, "useTransformRef");
    exports.useTransformRef = useTransformRef;
  }
});

// node_modules/use-callback-ref/dist/es5/transformRef.js
var require_transformRef = __commonJS({
  "node_modules/use-callback-ref/dist/es5/transformRef.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.transformRef = void 0;
    var assignRef_1 = require_assignRef();
    var createRef_1 = require_createRef();
    function transformRef(ref, transformer) {
      return (0, createRef_1.createCallbackRef)(function(value) {
        return (0, assignRef_1.assignRef)(ref, transformer(value));
      });
    }
    __name(transformRef, "transformRef");
    exports.transformRef = transformRef;
  }
});

// node_modules/use-callback-ref/dist/es5/refToCallback.js
var require_refToCallback = __commonJS({
  "node_modules/use-callback-ref/dist/es5/refToCallback.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useRefToCallback = exports.refToCallback = void 0;
    function refToCallback(ref) {
      return function(newValue) {
        if (typeof ref === "function") {
          ref(newValue);
        } else if (ref) {
          ref.current = newValue;
        }
      };
    }
    __name(refToCallback, "refToCallback");
    exports.refToCallback = refToCallback;
    var nullCallback = /* @__PURE__ */ __name(function() {
      return null;
    }, "nullCallback");
    var weakMem = /* @__PURE__ */ new WeakMap();
    var weakMemoize = /* @__PURE__ */ __name(function(ref) {
      var usedRef = ref || nullCallback;
      var storedRef = weakMem.get(usedRef);
      if (storedRef) {
        return storedRef;
      }
      var cb = refToCallback(usedRef);
      weakMem.set(usedRef, cb);
      return cb;
    }, "weakMemoize");
    function useRefToCallback(ref) {
      return weakMemoize(ref);
    }
    __name(useRefToCallback, "useRefToCallback");
    exports.useRefToCallback = useRefToCallback;
  }
});

// node_modules/use-callback-ref/dist/es5/index.js
var require_es52 = __commonJS({
  "node_modules/use-callback-ref/dist/es5/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useRefToCallback = exports.refToCallback = exports.transformRef = exports.useTransformRef = exports.useMergeRefs = exports.mergeRefs = exports.createCallbackRef = exports.useCallbackRef = exports.assignRef = void 0;
    var assignRef_1 = require_assignRef();
    Object.defineProperty(exports, "assignRef", { enumerable: true, get: function() {
      return assignRef_1.assignRef;
    } });
    var useRef_1 = require_useRef();
    Object.defineProperty(exports, "useCallbackRef", { enumerable: true, get: function() {
      return useRef_1.useCallbackRef;
    } });
    var createRef_1 = require_createRef();
    Object.defineProperty(exports, "createCallbackRef", { enumerable: true, get: function() {
      return createRef_1.createCallbackRef;
    } });
    var mergeRef_1 = require_mergeRef();
    Object.defineProperty(exports, "mergeRefs", { enumerable: true, get: function() {
      return mergeRef_1.mergeRefs;
    } });
    var useMergeRef_1 = require_useMergeRef();
    Object.defineProperty(exports, "useMergeRefs", { enumerable: true, get: function() {
      return useMergeRef_1.useMergeRefs;
    } });
    var useTransformRef_1 = require_useTransformRef();
    Object.defineProperty(exports, "useTransformRef", { enumerable: true, get: function() {
      return useTransformRef_1.useTransformRef;
    } });
    var transformRef_1 = require_transformRef();
    Object.defineProperty(exports, "transformRef", { enumerable: true, get: function() {
      return transformRef_1.transformRef;
    } });
    var refToCallback_1 = require_refToCallback();
    Object.defineProperty(exports, "refToCallback", { enumerable: true, get: function() {
      return refToCallback_1.refToCallback;
    } });
    Object.defineProperty(exports, "useRefToCallback", { enumerable: true, get: function() {
      return refToCallback_1.useRefToCallback;
    } });
  }
});

// node_modules/detect-node-es/es5/node.js
var require_node = __commonJS({
  "node_modules/detect-node-es/es5/node.js"(exports, module2) {
    module2.exports.isNode = Object.prototype.toString.call(typeof process !== "undefined" ? process : 0) === "[object process]";
  }
});

// node_modules/use-sidecar/dist/es5/env.js
var require_env = __commonJS({
  "node_modules/use-sidecar/dist/es5/env.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.env = void 0;
    var detect_node_es_1 = require_node();
    exports.env = {
      isNode: detect_node_es_1.isNode,
      forceCache: false
    };
  }
});

// node_modules/use-sidecar/dist/es5/hook.js
var require_hook = __commonJS({
  "node_modules/use-sidecar/dist/es5/hook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.useSidecar = void 0;
    var react_1 = require("react");
    var env_1 = require_env();
    var cache = /* @__PURE__ */ new WeakMap();
    var NO_OPTIONS = {};
    function useSidecar(importer, effect) {
      var options = effect && effect.options || NO_OPTIONS;
      if (env_1.env.isNode && !options.ssr) {
        return [null, null];
      }
      return useRealSidecar(importer, effect);
    }
    __name(useSidecar, "useSidecar");
    exports.useSidecar = useSidecar;
    function useRealSidecar(importer, effect) {
      var options = effect && effect.options || NO_OPTIONS;
      var couldUseCache = env_1.env.forceCache || env_1.env.isNode && !!options.ssr || !options.async;
      var _a = (0, react_1.useState)(couldUseCache ? function() {
        return cache.get(importer);
      } : void 0), Car = _a[0], setCar = _a[1];
      var _b = (0, react_1.useState)(null), error = _b[0], setError = _b[1];
      (0, react_1.useEffect)(function() {
        if (!Car) {
          importer().then(function(car) {
            var resolved = effect ? effect.read() : car.default || car;
            if (!resolved) {
              console.error("Sidecar error: with importer", importer);
              var error_1;
              if (effect) {
                console.error("Sidecar error: with medium", effect);
                error_1 = new Error("Sidecar medium was not found");
              } else {
                error_1 = new Error("Sidecar was not found in exports");
              }
              setError(function() {
                return error_1;
              });
              throw error_1;
            }
            cache.set(importer, resolved);
            setCar(function() {
              return resolved;
            });
          }, function(e) {
            return setError(function() {
              return e;
            });
          });
        }
      }, []);
      return [Car, error];
    }
    __name(useRealSidecar, "useRealSidecar");
  }
});

// node_modules/use-sidecar/dist/es5/hoc.js
var require_hoc = __commonJS({
  "node_modules/use-sidecar/dist/es5/hoc.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.sidecar = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var React17 = tslib_1.__importStar(require("react"));
    var hook_1 = require_hook();
    function sidecar(importer, errorComponent) {
      var ErrorCase = /* @__PURE__ */ __name(function() {
        return errorComponent;
      }, "ErrorCase");
      return /* @__PURE__ */ __name(function Sidecar(props) {
        var _a = (0, hook_1.useSidecar)(importer, props.sideCar), Car = _a[0], error = _a[1];
        if (error && errorComponent) {
          return ErrorCase;
        }
        return Car ? React17.createElement(Car, tslib_1.__assign({}, props)) : null;
      }, "Sidecar");
    }
    __name(sidecar, "sidecar");
    exports.sidecar = sidecar;
  }
});

// node_modules/use-sidecar/dist/es5/config.js
var require_config = __commonJS({
  "node_modules/use-sidecar/dist/es5/config.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.setConfig = exports.config = void 0;
    exports.config = {
      onError: function(e) {
        return console.error(e);
      }
    };
    var setConfig = /* @__PURE__ */ __name(function(conf) {
      Object.assign(exports.config, conf);
    }, "setConfig");
    exports.setConfig = setConfig;
  }
});

// node_modules/use-sidecar/dist/es5/medium.js
var require_medium = __commonJS({
  "node_modules/use-sidecar/dist/es5/medium.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.createSidecarMedium = exports.createMedium = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    function ItoI(a) {
      return a;
    }
    __name(ItoI, "ItoI");
    function innerCreateMedium(defaults, middleware) {
      if (middleware === void 0) {
        middleware = ItoI;
      }
      var buffer = [];
      var assigned = false;
      var medium = {
        read: function() {
          if (assigned) {
            throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
          }
          if (buffer.length) {
            return buffer[buffer.length - 1];
          }
          return defaults;
        },
        useMedium: function(data) {
          var item = middleware(data, assigned);
          buffer.push(item);
          return function() {
            buffer = buffer.filter(function(x) {
              return x !== item;
            });
          };
        },
        assignSyncMedium: function(cb) {
          assigned = true;
          while (buffer.length) {
            var cbs = buffer;
            buffer = [];
            cbs.forEach(cb);
          }
          buffer = {
            push: function(x) {
              return cb(x);
            },
            filter: function() {
              return buffer;
            }
          };
        },
        assignMedium: function(cb) {
          assigned = true;
          var pendingQueue = [];
          if (buffer.length) {
            var cbs = buffer;
            buffer = [];
            cbs.forEach(cb);
            pendingQueue = buffer;
          }
          var executeQueue = /* @__PURE__ */ __name(function() {
            var cbs2 = pendingQueue;
            pendingQueue = [];
            cbs2.forEach(cb);
          }, "executeQueue");
          var cycle = /* @__PURE__ */ __name(function() {
            return Promise.resolve().then(executeQueue);
          }, "cycle");
          cycle();
          buffer = {
            push: function(x) {
              pendingQueue.push(x);
              cycle();
            },
            filter: function(filter) {
              pendingQueue = pendingQueue.filter(filter);
              return buffer;
            }
          };
        }
      };
      return medium;
    }
    __name(innerCreateMedium, "innerCreateMedium");
    function createMedium(defaults, middleware) {
      if (middleware === void 0) {
        middleware = ItoI;
      }
      return innerCreateMedium(defaults, middleware);
    }
    __name(createMedium, "createMedium");
    exports.createMedium = createMedium;
    function createSidecarMedium(options) {
      if (options === void 0) {
        options = {};
      }
      var medium = innerCreateMedium(null);
      medium.options = tslib_1.__assign({ async: true, ssr: false }, options);
      return medium;
    }
    __name(createSidecarMedium, "createSidecarMedium");
    exports.createSidecarMedium = createSidecarMedium;
  }
});

// node_modules/use-sidecar/dist/es5/renderProp.js
var require_renderProp = __commonJS({
  "node_modules/use-sidecar/dist/es5/renderProp.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.renderCar = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var React17 = tslib_1.__importStar(require("react"));
    var react_1 = require("react");
    function renderCar(WrappedComponent, defaults) {
      function State(_a) {
        var stateRef = _a.stateRef, props = _a.props;
        var renderTarget = (0, react_1.useCallback)(/* @__PURE__ */ __name(function SideTarget() {
          var args = [];
          for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
          }
          (0, react_1.useLayoutEffect)(function() {
            stateRef.current(args);
          });
          return null;
        }, "SideTarget"), []);
        return React17.createElement(WrappedComponent, tslib_1.__assign({}, props, { children: renderTarget }));
      }
      __name(State, "State");
      var Children = React17.memo(function(_a) {
        var stateRef = _a.stateRef, defaultState = _a.defaultState, children = _a.children;
        var _b = (0, react_1.useState)(defaultState.current), state = _b[0], setState = _b[1];
        (0, react_1.useEffect)(function() {
          stateRef.current = setState;
        }, []);
        return children.apply(void 0, state);
      }, function() {
        return true;
      });
      return /* @__PURE__ */ __name(function Combiner(props) {
        var defaultState = React17.useRef(defaults(props));
        var ref = React17.useRef(function(state) {
          return defaultState.current = state;
        });
        return React17.createElement(
          React17.Fragment,
          null,
          React17.createElement(State, { stateRef: ref, props }),
          React17.createElement(Children, { stateRef: ref, defaultState, children: props.children })
        );
      }, "Combiner");
    }
    __name(renderCar, "renderCar");
    exports.renderCar = renderCar;
  }
});

// node_modules/use-sidecar/dist/es5/exports.js
var require_exports = __commonJS({
  "node_modules/use-sidecar/dist/es5/exports.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.exportSidecar = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var React17 = tslib_1.__importStar(require("react"));
    var SideCar = /* @__PURE__ */ __name(function(_a) {
      var sideCar = _a.sideCar, rest = tslib_1.__rest(_a, ["sideCar"]);
      if (!sideCar) {
        throw new Error("Sidecar: please provide `sideCar` property to import the right car");
      }
      var Target = sideCar.read();
      if (!Target) {
        throw new Error("Sidecar medium not found");
      }
      return React17.createElement(Target, tslib_1.__assign({}, rest));
    }, "SideCar");
    SideCar.isSideCarExport = true;
    function exportSidecar(medium, exported) {
      medium.useMedium(exported);
      return SideCar;
    }
    __name(exportSidecar, "exportSidecar");
    exports.exportSidecar = exportSidecar;
  }
});

// node_modules/use-sidecar/dist/es5/index.js
var require_es53 = __commonJS({
  "node_modules/use-sidecar/dist/es5/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.exportSidecar = exports.renderCar = exports.createSidecarMedium = exports.createMedium = exports.setConfig = exports.useSidecar = exports.sidecar = void 0;
    var hoc_1 = require_hoc();
    Object.defineProperty(exports, "sidecar", { enumerable: true, get: function() {
      return hoc_1.sidecar;
    } });
    var hook_1 = require_hook();
    Object.defineProperty(exports, "useSidecar", { enumerable: true, get: function() {
      return hook_1.useSidecar;
    } });
    var config_1 = require_config();
    Object.defineProperty(exports, "setConfig", { enumerable: true, get: function() {
      return config_1.setConfig;
    } });
    var medium_1 = require_medium();
    Object.defineProperty(exports, "createMedium", { enumerable: true, get: function() {
      return medium_1.createMedium;
    } });
    Object.defineProperty(exports, "createSidecarMedium", { enumerable: true, get: function() {
      return medium_1.createSidecarMedium;
    } });
    var renderProp_1 = require_renderProp();
    Object.defineProperty(exports, "renderCar", { enumerable: true, get: function() {
      return renderProp_1.renderCar;
    } });
    var exports_1 = require_exports();
    Object.defineProperty(exports, "exportSidecar", { enumerable: true, get: function() {
      return exports_1.exportSidecar;
    } });
  }
});

// node_modules/react-remove-scroll/dist/es5/medium.js
var require_medium2 = __commonJS({
  "node_modules/react-remove-scroll/dist/es5/medium.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.effectCar = void 0;
    var use_sidecar_1 = require_es53();
    exports.effectCar = (0, use_sidecar_1.createSidecarMedium)();
  }
});

// node_modules/react-remove-scroll/dist/es5/UI.js
var require_UI = __commonJS({
  "node_modules/react-remove-scroll/dist/es5/UI.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoveScroll = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var React17 = tslib_1.__importStar(require("react"));
    var constants_1 = require_constants();
    var use_callback_ref_1 = require_es52();
    var medium_1 = require_medium2();
    var nothing = /* @__PURE__ */ __name(function() {
      return;
    }, "nothing");
    var RemoveScroll2 = React17.forwardRef(function(props, parentRef) {
      var ref = React17.useRef(null);
      var _a = React17.useState({
        onScrollCapture: nothing,
        onWheelCapture: nothing,
        onTouchMoveCapture: nothing
      }), callbacks = _a[0], setCallbacks = _a[1];
      var forwardProps = props.forwardProps, children = props.children, className = props.className, removeScrollBar = props.removeScrollBar, enabled = props.enabled, shards = props.shards, sideCar = props.sideCar, noIsolation = props.noIsolation, inert = props.inert, allowPinchZoom = props.allowPinchZoom, _b = props.as, Container = _b === void 0 ? "div" : _b, gapMode = props.gapMode, rest = tslib_1.__rest(props, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as", "gapMode"]);
      var SideCar = sideCar;
      var containerRef = (0, use_callback_ref_1.useMergeRefs)([ref, parentRef]);
      var containerProps = tslib_1.__assign(tslib_1.__assign({}, rest), callbacks);
      return React17.createElement(
        React17.Fragment,
        null,
        enabled && React17.createElement(SideCar, { sideCar: medium_1.effectCar, removeScrollBar, shards, noIsolation, inert, setCallbacks, allowPinchZoom: !!allowPinchZoom, lockRef: ref, gapMode }),
        forwardProps ? React17.cloneElement(React17.Children.only(children), tslib_1.__assign(tslib_1.__assign({}, containerProps), { ref: containerRef })) : React17.createElement(Container, tslib_1.__assign({}, containerProps, { className, ref: containerRef }), children)
      );
    });
    exports.RemoveScroll = RemoveScroll2;
    RemoveScroll2.defaultProps = {
      enabled: true,
      removeScrollBar: true,
      inert: false
    };
    RemoveScroll2.classNames = {
      fullWidth: constants_1.fullWidthClassName,
      zeroRight: constants_1.zeroRightClassName
    };
  }
});

// node_modules/get-nonce/dist/es5/index.js
var require_es54 = __commonJS({
  "node_modules/get-nonce/dist/es5/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var currentNonce;
    exports.setNonce = function(nonce) {
      currentNonce = nonce;
    };
    exports.getNonce = function() {
      if (currentNonce) {
        return currentNonce;
      }
      if (typeof __webpack_nonce__ !== "undefined") {
        return __webpack_nonce__;
      }
      return void 0;
    };
  }
});

// node_modules/react-style-singleton/dist/es5/singleton.js
var require_singleton = __commonJS({
  "node_modules/react-style-singleton/dist/es5/singleton.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.stylesheetSingleton = void 0;
    var get_nonce_1 = require_es54();
    function makeStyleTag() {
      if (!document)
        return null;
      var tag = document.createElement("style");
      tag.type = "text/css";
      var nonce = (0, get_nonce_1.getNonce)();
      if (nonce) {
        tag.setAttribute("nonce", nonce);
      }
      return tag;
    }
    __name(makeStyleTag, "makeStyleTag");
    function injectStyles(tag, css) {
      if (tag.styleSheet) {
        tag.styleSheet.cssText = css;
      } else {
        tag.appendChild(document.createTextNode(css));
      }
    }
    __name(injectStyles, "injectStyles");
    function insertStyleTag(tag) {
      var head = document.head || document.getElementsByTagName("head")[0];
      head.appendChild(tag);
    }
    __name(insertStyleTag, "insertStyleTag");
    var stylesheetSingleton = /* @__PURE__ */ __name(function() {
      var counter = 0;
      var stylesheet = null;
      return {
        add: function(style) {
          if (counter == 0) {
            if (stylesheet = makeStyleTag()) {
              injectStyles(stylesheet, style);
              insertStyleTag(stylesheet);
            }
          }
          counter++;
        },
        remove: function() {
          counter--;
          if (!counter && stylesheet) {
            stylesheet.parentNode && stylesheet.parentNode.removeChild(stylesheet);
            stylesheet = null;
          }
        }
      };
    }, "stylesheetSingleton");
    exports.stylesheetSingleton = stylesheetSingleton;
  }
});

// node_modules/react-style-singleton/dist/es5/hook.js
var require_hook2 = __commonJS({
  "node_modules/react-style-singleton/dist/es5/hook.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.styleHookSingleton = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var React17 = tslib_1.__importStar(require("react"));
    var singleton_1 = require_singleton();
    var styleHookSingleton = /* @__PURE__ */ __name(function() {
      var sheet = (0, singleton_1.stylesheetSingleton)();
      return function(styles, isDynamic) {
        React17.useEffect(function() {
          sheet.add(styles);
          return function() {
            sheet.remove();
          };
        }, [styles && isDynamic]);
      };
    }, "styleHookSingleton");
    exports.styleHookSingleton = styleHookSingleton;
  }
});

// node_modules/react-style-singleton/dist/es5/component.js
var require_component = __commonJS({
  "node_modules/react-style-singleton/dist/es5/component.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.styleSingleton = void 0;
    var hook_1 = require_hook2();
    var styleSingleton = /* @__PURE__ */ __name(function() {
      var useStyle2 = (0, hook_1.styleHookSingleton)();
      var Sheet = /* @__PURE__ */ __name(function(_a) {
        var styles = _a.styles, dynamic = _a.dynamic;
        useStyle2(styles, dynamic);
        return null;
      }, "Sheet");
      return Sheet;
    }, "styleSingleton");
    exports.styleSingleton = styleSingleton;
  }
});

// node_modules/react-style-singleton/dist/es5/index.js
var require_es55 = __commonJS({
  "node_modules/react-style-singleton/dist/es5/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.styleHookSingleton = exports.stylesheetSingleton = exports.styleSingleton = void 0;
    var component_1 = require_component();
    Object.defineProperty(exports, "styleSingleton", { enumerable: true, get: function() {
      return component_1.styleSingleton;
    } });
    var singleton_1 = require_singleton();
    Object.defineProperty(exports, "stylesheetSingleton", { enumerable: true, get: function() {
      return singleton_1.stylesheetSingleton;
    } });
    var hook_1 = require_hook2();
    Object.defineProperty(exports, "styleHookSingleton", { enumerable: true, get: function() {
      return hook_1.styleHookSingleton;
    } });
  }
});

// node_modules/react-remove-scroll-bar/dist/es5/utils.js
var require_utils = __commonJS({
  "node_modules/react-remove-scroll-bar/dist/es5/utils.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getGapWidth = exports.zeroGap = void 0;
    exports.zeroGap = {
      left: 0,
      top: 0,
      right: 0,
      gap: 0
    };
    var parse = /* @__PURE__ */ __name(function(x) {
      return parseInt(x || "", 10) || 0;
    }, "parse");
    var getOffset = /* @__PURE__ */ __name(function(gapMode) {
      var cs = window.getComputedStyle(document.body);
      var left = cs[gapMode === "padding" ? "paddingLeft" : "marginLeft"];
      var top = cs[gapMode === "padding" ? "paddingTop" : "marginTop"];
      var right = cs[gapMode === "padding" ? "paddingRight" : "marginRight"];
      return [parse(left), parse(top), parse(right)];
    }, "getOffset");
    var getGapWidth = /* @__PURE__ */ __name(function(gapMode) {
      if (gapMode === void 0) {
        gapMode = "margin";
      }
      if (typeof window === "undefined") {
        return exports.zeroGap;
      }
      var offsets = getOffset(gapMode);
      var documentWidth = document.documentElement.clientWidth;
      var windowWidth = window.innerWidth;
      return {
        left: offsets[0],
        top: offsets[1],
        right: offsets[2],
        gap: Math.max(0, windowWidth - documentWidth + offsets[2] - offsets[0])
      };
    }, "getGapWidth");
    exports.getGapWidth = getGapWidth;
  }
});

// node_modules/react-remove-scroll-bar/dist/es5/component.js
var require_component2 = __commonJS({
  "node_modules/react-remove-scroll-bar/dist/es5/component.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoveScrollBar = exports.useLockAttribute = exports.lockAttribute = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var React17 = tslib_1.__importStar(require("react"));
    var react_style_singleton_1 = require_es55();
    var constants_1 = require_constants();
    var utils_1 = require_utils();
    var Style = (0, react_style_singleton_1.styleSingleton)();
    exports.lockAttribute = "data-scroll-locked";
    var getStyles = /* @__PURE__ */ __name(function(_a, allowRelative, gapMode, important) {
      var left = _a.left, top = _a.top, right = _a.right, gap = _a.gap;
      if (gapMode === void 0) {
        gapMode = "margin";
      }
      return "\n  .".concat(constants_1.noScrollbarsClassName, " {\n   overflow: hidden ").concat(important, ";\n   padding-right: ").concat(gap, "px ").concat(important, ";\n  }\n  body[").concat(exports.lockAttribute, "] {\n    overflow: hidden ").concat(important, ";\n    overscroll-behavior: contain;\n    ").concat([
        allowRelative && "position: relative ".concat(important, ";"),
        gapMode === "margin" && "\n    padding-left: ".concat(left, "px;\n    padding-top: ").concat(top, "px;\n    padding-right: ").concat(right, "px;\n    margin-left:0;\n    margin-top:0;\n    margin-right: ").concat(gap, "px ").concat(important, ";\n    "),
        gapMode === "padding" && "padding-right: ".concat(gap, "px ").concat(important, ";")
      ].filter(Boolean).join(""), "\n  }\n  \n  .").concat(constants_1.zeroRightClassName, " {\n    right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(constants_1.fullWidthClassName, " {\n    margin-right: ").concat(gap, "px ").concat(important, ";\n  }\n  \n  .").concat(constants_1.zeroRightClassName, " .").concat(constants_1.zeroRightClassName, " {\n    right: 0 ").concat(important, ";\n  }\n  \n  .").concat(constants_1.fullWidthClassName, " .").concat(constants_1.fullWidthClassName, " {\n    margin-right: 0 ").concat(important, ";\n  }\n  \n  body[").concat(exports.lockAttribute, "] {\n    ").concat(constants_1.removedBarSizeVariable, ": ").concat(gap, "px;\n  }\n");
    }, "getStyles");
    var getCurrentUseCounter = /* @__PURE__ */ __name(function() {
      var counter = parseInt(document.body.getAttribute(exports.lockAttribute) || "0", 10);
      return isFinite(counter) ? counter : 0;
    }, "getCurrentUseCounter");
    var useLockAttribute = /* @__PURE__ */ __name(function() {
      React17.useEffect(function() {
        document.body.setAttribute(exports.lockAttribute, (getCurrentUseCounter() + 1).toString());
        return function() {
          var newCounter = getCurrentUseCounter() - 1;
          if (newCounter <= 0) {
            document.body.removeAttribute(exports.lockAttribute);
          } else {
            document.body.setAttribute(exports.lockAttribute, newCounter.toString());
          }
        };
      }, []);
    }, "useLockAttribute");
    exports.useLockAttribute = useLockAttribute;
    var RemoveScrollBar = /* @__PURE__ */ __name(function(_a) {
      var noRelative = _a.noRelative, noImportant = _a.noImportant, _b = _a.gapMode, gapMode = _b === void 0 ? "margin" : _b;
      (0, exports.useLockAttribute)();
      var gap = React17.useMemo(function() {
        return (0, utils_1.getGapWidth)(gapMode);
      }, [gapMode]);
      return React17.createElement(Style, { styles: getStyles(gap, !noRelative, gapMode, !noImportant ? "!important" : "") });
    }, "RemoveScrollBar");
    exports.RemoveScrollBar = RemoveScrollBar;
  }
});

// node_modules/react-remove-scroll-bar/dist/es5/index.js
var require_es56 = __commonJS({
  "node_modules/react-remove-scroll-bar/dist/es5/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.getGapWidth = exports.removedBarSizeVariable = exports.noScrollbarsClassName = exports.fullWidthClassName = exports.zeroRightClassName = exports.RemoveScrollBar = void 0;
    var component_1 = require_component2();
    Object.defineProperty(exports, "RemoveScrollBar", { enumerable: true, get: function() {
      return component_1.RemoveScrollBar;
    } });
    var constants_1 = require_constants();
    Object.defineProperty(exports, "zeroRightClassName", { enumerable: true, get: function() {
      return constants_1.zeroRightClassName;
    } });
    Object.defineProperty(exports, "fullWidthClassName", { enumerable: true, get: function() {
      return constants_1.fullWidthClassName;
    } });
    Object.defineProperty(exports, "noScrollbarsClassName", { enumerable: true, get: function() {
      return constants_1.noScrollbarsClassName;
    } });
    Object.defineProperty(exports, "removedBarSizeVariable", { enumerable: true, get: function() {
      return constants_1.removedBarSizeVariable;
    } });
    var utils_1 = require_utils();
    Object.defineProperty(exports, "getGapWidth", { enumerable: true, get: function() {
      return utils_1.getGapWidth;
    } });
  }
});

// node_modules/react-remove-scroll/dist/es5/aggresiveCapture.js
var require_aggresiveCapture = __commonJS({
  "node_modules/react-remove-scroll/dist/es5/aggresiveCapture.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.nonPassive = void 0;
    var passiveSupported = false;
    if (typeof window !== "undefined") {
      try {
        options = Object.defineProperty({}, "passive", {
          get: function() {
            passiveSupported = true;
            return true;
          }
        });
        window.addEventListener("test", options, options);
        window.removeEventListener("test", options, options);
      } catch (err) {
        passiveSupported = false;
      }
    }
    var options;
    exports.nonPassive = passiveSupported ? { passive: false } : false;
  }
});

// node_modules/react-remove-scroll/dist/es5/handleScroll.js
var require_handleScroll = __commonJS({
  "node_modules/react-remove-scroll/dist/es5/handleScroll.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.handleScroll = exports.locationCouldBeScrolled = void 0;
    var alwaysContainsScroll = /* @__PURE__ */ __name(function(node) {
      return node.tagName === "TEXTAREA";
    }, "alwaysContainsScroll");
    var elementCanBeScrolled = /* @__PURE__ */ __name(function(node, overflow) {
      if (!(node instanceof Element)) {
        return false;
      }
      var styles = window.getComputedStyle(node);
      return (
        // not-not-scrollable
        styles[overflow] !== "hidden" && // contains scroll inside self
        !(styles.overflowY === styles.overflowX && !alwaysContainsScroll(node) && styles[overflow] === "visible")
      );
    }, "elementCanBeScrolled");
    var elementCouldBeVScrolled = /* @__PURE__ */ __name(function(node) {
      return elementCanBeScrolled(node, "overflowY");
    }, "elementCouldBeVScrolled");
    var elementCouldBeHScrolled = /* @__PURE__ */ __name(function(node) {
      return elementCanBeScrolled(node, "overflowX");
    }, "elementCouldBeHScrolled");
    var locationCouldBeScrolled = /* @__PURE__ */ __name(function(axis, node) {
      var ownerDocument = node.ownerDocument;
      var current = node;
      do {
        if (typeof ShadowRoot !== "undefined" && current instanceof ShadowRoot) {
          current = current.host;
        }
        var isScrollable = elementCouldBeScrolled(axis, current);
        if (isScrollable) {
          var _a = getScrollVariables(axis, current), scrollHeight = _a[1], clientHeight = _a[2];
          if (scrollHeight > clientHeight) {
            return true;
          }
        }
        current = current.parentNode;
      } while (current && current !== ownerDocument.body);
      return false;
    }, "locationCouldBeScrolled");
    exports.locationCouldBeScrolled = locationCouldBeScrolled;
    var getVScrollVariables = /* @__PURE__ */ __name(function(_a) {
      var scrollTop = _a.scrollTop, scrollHeight = _a.scrollHeight, clientHeight = _a.clientHeight;
      return [
        scrollTop,
        scrollHeight,
        clientHeight
      ];
    }, "getVScrollVariables");
    var getHScrollVariables = /* @__PURE__ */ __name(function(_a) {
      var scrollLeft = _a.scrollLeft, scrollWidth = _a.scrollWidth, clientWidth = _a.clientWidth;
      return [
        scrollLeft,
        scrollWidth,
        clientWidth
      ];
    }, "getHScrollVariables");
    var elementCouldBeScrolled = /* @__PURE__ */ __name(function(axis, node) {
      return axis === "v" ? elementCouldBeVScrolled(node) : elementCouldBeHScrolled(node);
    }, "elementCouldBeScrolled");
    var getScrollVariables = /* @__PURE__ */ __name(function(axis, node) {
      return axis === "v" ? getVScrollVariables(node) : getHScrollVariables(node);
    }, "getScrollVariables");
    var getDirectionFactor = /* @__PURE__ */ __name(function(axis, direction) {
      return axis === "h" && direction === "rtl" ? -1 : 1;
    }, "getDirectionFactor");
    var handleScroll = /* @__PURE__ */ __name(function(axis, endTarget, event, sourceDelta, noOverscroll) {
      var directionFactor = getDirectionFactor(axis, window.getComputedStyle(endTarget).direction);
      var delta = directionFactor * sourceDelta;
      var target = event.target;
      var targetInLock = endTarget.contains(target);
      var shouldCancelScroll = false;
      var isDeltaPositive = delta > 0;
      var availableScroll = 0;
      var availableScrollTop = 0;
      do {
        var _a = getScrollVariables(axis, target), position = _a[0], scroll_1 = _a[1], capacity = _a[2];
        var elementScroll = scroll_1 - capacity - directionFactor * position;
        if (position || elementScroll) {
          if (elementCouldBeScrolled(axis, target)) {
            availableScroll += elementScroll;
            availableScrollTop += position;
          }
        }
        if (target instanceof ShadowRoot) {
          target = target.host;
        } else {
          target = target.parentNode;
        }
      } while (
        // portaled content
        !targetInLock && target !== document.body || // self content
        targetInLock && (endTarget.contains(target) || endTarget === target)
      );
      if (isDeltaPositive && (noOverscroll && Math.abs(availableScroll) < 1 || !noOverscroll && delta > availableScroll)) {
        shouldCancelScroll = true;
      } else if (!isDeltaPositive && (noOverscroll && Math.abs(availableScrollTop) < 1 || !noOverscroll && -delta > availableScrollTop)) {
        shouldCancelScroll = true;
      }
      return shouldCancelScroll;
    }, "handleScroll");
    exports.handleScroll = handleScroll;
  }
});

// node_modules/react-remove-scroll/dist/es5/SideEffect.js
var require_SideEffect = __commonJS({
  "node_modules/react-remove-scroll/dist/es5/SideEffect.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoveScrollSideCar = exports.getDeltaXY = exports.getTouchXY = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var React17 = tslib_1.__importStar(require("react"));
    var react_remove_scroll_bar_1 = require_es56();
    var react_style_singleton_1 = require_es55();
    var aggresiveCapture_1 = require_aggresiveCapture();
    var handleScroll_1 = require_handleScroll();
    var getTouchXY = /* @__PURE__ */ __name(function(event) {
      return "changedTouches" in event ? [event.changedTouches[0].clientX, event.changedTouches[0].clientY] : [0, 0];
    }, "getTouchXY");
    exports.getTouchXY = getTouchXY;
    var getDeltaXY = /* @__PURE__ */ __name(function(event) {
      return [event.deltaX, event.deltaY];
    }, "getDeltaXY");
    exports.getDeltaXY = getDeltaXY;
    var extractRef = /* @__PURE__ */ __name(function(ref) {
      return ref && "current" in ref ? ref.current : ref;
    }, "extractRef");
    var deltaCompare = /* @__PURE__ */ __name(function(x, y) {
      return x[0] === y[0] && x[1] === y[1];
    }, "deltaCompare");
    var generateStyle = /* @__PURE__ */ __name(function(id) {
      return "\n  .block-interactivity-".concat(id, " {pointer-events: none;}\n  .allow-interactivity-").concat(id, " {pointer-events: all;}\n");
    }, "generateStyle");
    var idCounter = 0;
    var lockStack = [];
    function RemoveScrollSideCar(props) {
      var shouldPreventQueue = React17.useRef([]);
      var touchStartRef = React17.useRef([0, 0]);
      var activeAxis = React17.useRef();
      var id = React17.useState(idCounter++)[0];
      var Style = React17.useState(react_style_singleton_1.styleSingleton)[0];
      var lastProps = React17.useRef(props);
      React17.useEffect(function() {
        lastProps.current = props;
      }, [props]);
      React17.useEffect(function() {
        if (props.inert) {
          document.body.classList.add("block-interactivity-".concat(id));
          var allow_1 = tslib_1.__spreadArray([props.lockRef.current], (props.shards || []).map(extractRef), true).filter(Boolean);
          allow_1.forEach(function(el) {
            return el.classList.add("allow-interactivity-".concat(id));
          });
          return function() {
            document.body.classList.remove("block-interactivity-".concat(id));
            allow_1.forEach(function(el) {
              return el.classList.remove("allow-interactivity-".concat(id));
            });
          };
        }
        return;
      }, [props.inert, props.lockRef.current, props.shards]);
      var shouldCancelEvent = React17.useCallback(function(event, parent) {
        if ("touches" in event && event.touches.length === 2) {
          return !lastProps.current.allowPinchZoom;
        }
        var touch = (0, exports.getTouchXY)(event);
        var touchStart = touchStartRef.current;
        var deltaX = "deltaX" in event ? event.deltaX : touchStart[0] - touch[0];
        var deltaY = "deltaY" in event ? event.deltaY : touchStart[1] - touch[1];
        var currentAxis;
        var target = event.target;
        var moveDirection = Math.abs(deltaX) > Math.abs(deltaY) ? "h" : "v";
        if ("touches" in event && moveDirection === "h" && target.type === "range") {
          return false;
        }
        var canBeScrolledInMainDirection = (0, handleScroll_1.locationCouldBeScrolled)(moveDirection, target);
        if (!canBeScrolledInMainDirection) {
          return true;
        }
        if (canBeScrolledInMainDirection) {
          currentAxis = moveDirection;
        } else {
          currentAxis = moveDirection === "v" ? "h" : "v";
          canBeScrolledInMainDirection = (0, handleScroll_1.locationCouldBeScrolled)(moveDirection, target);
        }
        if (!canBeScrolledInMainDirection) {
          return false;
        }
        if (!activeAxis.current && "changedTouches" in event && (deltaX || deltaY)) {
          activeAxis.current = currentAxis;
        }
        if (!currentAxis) {
          return true;
        }
        var cancelingAxis = activeAxis.current || currentAxis;
        return (0, handleScroll_1.handleScroll)(cancelingAxis, parent, event, cancelingAxis === "h" ? deltaX : deltaY, true);
      }, []);
      var shouldPrevent = React17.useCallback(function(_event) {
        var event = _event;
        if (!lockStack.length || lockStack[lockStack.length - 1] !== Style) {
          return;
        }
        var delta = "deltaY" in event ? (0, exports.getDeltaXY)(event) : (0, exports.getTouchXY)(event);
        var sourceEvent = shouldPreventQueue.current.filter(function(e) {
          return e.name === event.type && (e.target === event.target || event.target === e.shadowParent) && deltaCompare(e.delta, delta);
        })[0];
        if (sourceEvent && sourceEvent.should) {
          if (event.cancelable) {
            event.preventDefault();
          }
          return;
        }
        if (!sourceEvent) {
          var shardNodes = (lastProps.current.shards || []).map(extractRef).filter(Boolean).filter(function(node) {
            return node.contains(event.target);
          });
          var shouldStop = shardNodes.length > 0 ? shouldCancelEvent(event, shardNodes[0]) : !lastProps.current.noIsolation;
          if (shouldStop) {
            if (event.cancelable) {
              event.preventDefault();
            }
          }
        }
      }, []);
      var shouldCancel = React17.useCallback(function(name, delta, target, should) {
        var event = { name, delta, target, should, shadowParent: getOutermostShadowParent(target) };
        shouldPreventQueue.current.push(event);
        setTimeout(function() {
          shouldPreventQueue.current = shouldPreventQueue.current.filter(function(e) {
            return e !== event;
          });
        }, 1);
      }, []);
      var scrollTouchStart = React17.useCallback(function(event) {
        touchStartRef.current = (0, exports.getTouchXY)(event);
        activeAxis.current = void 0;
      }, []);
      var scrollWheel = React17.useCallback(function(event) {
        shouldCancel(event.type, (0, exports.getDeltaXY)(event), event.target, shouldCancelEvent(event, props.lockRef.current));
      }, []);
      var scrollTouchMove = React17.useCallback(function(event) {
        shouldCancel(event.type, (0, exports.getTouchXY)(event), event.target, shouldCancelEvent(event, props.lockRef.current));
      }, []);
      React17.useEffect(function() {
        lockStack.push(Style);
        props.setCallbacks({
          onScrollCapture: scrollWheel,
          onWheelCapture: scrollWheel,
          onTouchMoveCapture: scrollTouchMove
        });
        document.addEventListener("wheel", shouldPrevent, aggresiveCapture_1.nonPassive);
        document.addEventListener("touchmove", shouldPrevent, aggresiveCapture_1.nonPassive);
        document.addEventListener("touchstart", scrollTouchStart, aggresiveCapture_1.nonPassive);
        return function() {
          lockStack = lockStack.filter(function(inst) {
            return inst !== Style;
          });
          document.removeEventListener("wheel", shouldPrevent, aggresiveCapture_1.nonPassive);
          document.removeEventListener("touchmove", shouldPrevent, aggresiveCapture_1.nonPassive);
          document.removeEventListener("touchstart", scrollTouchStart, aggresiveCapture_1.nonPassive);
        };
      }, []);
      var removeScrollBar = props.removeScrollBar, inert = props.inert;
      return React17.createElement(
        React17.Fragment,
        null,
        inert ? React17.createElement(Style, { styles: generateStyle(id) }) : null,
        removeScrollBar ? React17.createElement(react_remove_scroll_bar_1.RemoveScrollBar, { gapMode: props.gapMode }) : null
      );
    }
    __name(RemoveScrollSideCar, "RemoveScrollSideCar");
    exports.RemoveScrollSideCar = RemoveScrollSideCar;
    function getOutermostShadowParent(node) {
      var shadowParent = null;
      while (node !== null) {
        if (node instanceof ShadowRoot) {
          shadowParent = node.host;
          node = node.host;
        }
        node = node.parentNode;
      }
      return shadowParent;
    }
    __name(getOutermostShadowParent, "getOutermostShadowParent");
  }
});

// node_modules/react-remove-scroll/dist/es5/sidecar.js
var require_sidecar = __commonJS({
  "node_modules/react-remove-scroll/dist/es5/sidecar.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var use_sidecar_1 = require_es53();
    var SideEffect_1 = require_SideEffect();
    var medium_1 = require_medium2();
    exports.default = (0, use_sidecar_1.exportSidecar)(medium_1.effectCar, SideEffect_1.RemoveScrollSideCar);
  }
});

// node_modules/react-remove-scroll/dist/es5/Combination.js
var require_Combination = __commonJS({
  "node_modules/react-remove-scroll/dist/es5/Combination.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var React17 = tslib_1.__importStar(require("react"));
    var UI_1 = require_UI();
    var sidecar_1 = tslib_1.__importDefault(require_sidecar());
    var ReactRemoveScroll = React17.forwardRef(function(props, ref) {
      return React17.createElement(UI_1.RemoveScroll, tslib_1.__assign({}, props, { ref, sideCar: sidecar_1.default }));
    });
    ReactRemoveScroll.classNames = UI_1.RemoveScroll.classNames;
    exports.default = ReactRemoveScroll;
  }
});

// node_modules/react-remove-scroll/dist/es5/index.js
var require_es57 = __commonJS({
  "node_modules/react-remove-scroll/dist/es5/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    exports.RemoveScroll = void 0;
    var tslib_1 = (init_tslib_es6(), __toCommonJS(tslib_es6_exports));
    var Combination_1 = tslib_1.__importDefault(require_Combination());
    exports.RemoveScroll = Combination_1.default;
  }
});

// node_modules/@tamagui/remove-scroll/dist/cjs/RemoveScroll.js
var require_RemoveScroll = __commonJS({
  "node_modules/@tamagui/remove-scroll/dist/cjs/RemoveScroll.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var RemoveScroll_exports = {};
    __export2(RemoveScroll_exports, {
      RemoveScroll: () => RemoveScroll2
    });
    module2.exports = __toCommonJS2(RemoveScroll_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_react_remove_scroll = require_es57();
    var RemoveScroll2 = /* @__PURE__ */ __name((props) => {
      if (!props.children)
        return null;
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_react_remove_scroll.RemoveScroll, { ...props });
    }, "RemoveScroll");
    RemoveScroll2.classNames = import_react_remove_scroll.RemoveScroll.classNames;
  }
});

// node_modules/@tamagui/remove-scroll/dist/cjs/index.js
var require_cjs14 = __commonJS({
  "node_modules/@tamagui/remove-scroll/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_RemoveScroll(), module2.exports);
  }
});

// node_modules/@tamagui/use-constant/dist/cjs/index.js
var require_cjs15 = __commonJS({
  "node_modules/@tamagui/use-constant/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    __export2(src_exports, {
      useConstant: () => useConstant
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_react30 = require("react");
    function useConstant(fn) {
      if (typeof document === "undefined") {
        return (0, import_react30.useMemo)(() => fn(), []);
      }
      const ref = (0, import_react30.useRef)();
      if (!ref.current) {
        ref.current = { v: fn() };
      }
      return ref.current.v;
    }
    __name(useConstant, "useConstant");
  }
});

// node_modules/@tamagui/use-controllable-state/dist/cjs/useControllableState.js
var require_useControllableState = __commonJS({
  "node_modules/@tamagui/use-controllable-state/dist/cjs/useControllableState.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var useControllableState_exports = {};
    __export2(useControllableState_exports, {
      useControllableState: () => useControllableState2
    });
    module2.exports = __toCommonJS2(useControllableState_exports);
    var import_use_event2 = require_cjs7();
    var import_react30 = require("react");
    var emptyCallbackFn2 = /* @__PURE__ */ __name((_) => _(), "emptyCallbackFn");
    function useControllableState2({
      prop,
      defaultProp,
      onChange: onChange2,
      strategy = "prop-wins",
      preventUpdate,
      transition
    }) {
      const [state, setState] = (0, import_react30.useState)(prop ?? defaultProp);
      const previous = (0, import_react30.useRef)(state);
      const propWins = strategy === "prop-wins" && prop !== void 0;
      const value = propWins ? prop : state;
      const onChangeCb = (0, import_use_event2.useEvent)(onChange2 || idFn4);
      const transitionFn = transition ? import_react30.startTransition : emptyCallbackFn2;
      (0, import_react30.useEffect)(() => {
        if (prop === void 0)
          return;
        previous.current = prop;
        transitionFn(() => {
          setState(prop);
        });
      }, [prop]);
      (0, import_react30.useEffect)(() => {
        if (propWins)
          return;
        if (state !== previous.current) {
          previous.current = state;
          onChangeCb(state);
        }
      }, [onChangeCb, state, propWins]);
      const setter = (0, import_use_event2.useEvent)((next) => {
        if (preventUpdate)
          return;
        if (propWins) {
          const nextValue = typeof next === "function" ? next(previous.current) : next;
          onChangeCb(nextValue);
        } else {
          transitionFn(() => {
            setState(next);
          });
        }
      });
      return [value, setter];
    }
    __name(useControllableState2, "useControllableState");
    var idFn4 = /* @__PURE__ */ __name(() => {
    }, "idFn");
  }
});

// node_modules/@tamagui/use-controllable-state/dist/cjs/index.js
var require_cjs16 = __commonJS({
  "node_modules/@tamagui/use-controllable-state/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_useControllableState(), module2.exports);
  }
});

// node_modules/@tamagui/use-keyboard-visible/dist/cjs/useKeyboardVisible.js
var require_useKeyboardVisible = __commonJS({
  "node_modules/@tamagui/use-keyboard-visible/dist/cjs/useKeyboardVisible.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var useKeyboardVisible_exports = {};
    __export2(useKeyboardVisible_exports, {
      useKeyboardVisible: () => useKeyboardVisible2
    });
    module2.exports = __toCommonJS2(useKeyboardVisible_exports);
    var import_react30 = require("react");
    var import_react_native28 = require("react-native-web-lite");
    var useKeyboardVisible2 = /* @__PURE__ */ __name(() => {
      const [isKeyboardVisible, setKeyboardVisible] = (0, import_react30.useState)(false);
      (0, import_react30.useEffect)(() => {
        const keyboardDidShowListener = import_react_native28.Keyboard.addListener("keyboardDidShow", () => {
          setKeyboardVisible(true);
        });
        const keyboardDidHideListener = import_react_native28.Keyboard.addListener("keyboardDidHide", () => {
          setKeyboardVisible(false);
        });
        return () => {
          keyboardDidHideListener.remove();
          keyboardDidShowListener.remove();
        };
      }, []);
      return isKeyboardVisible;
    }, "useKeyboardVisible");
  }
});

// node_modules/@tamagui/use-keyboard-visible/dist/cjs/index.js
var require_cjs17 = __commonJS({
  "node_modules/@tamagui/use-keyboard-visible/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    __export2(src_exports, {
      useKeyboardVisible: () => import_useKeyboardVisible.useKeyboardVisible
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_useKeyboardVisible = require_useKeyboardVisible();
  }
});

// node_modules/@tamagui/sheet/dist/cjs/constants.js
var require_constants2 = __commonJS({
  "node_modules/@tamagui/sheet/dist/cjs/constants.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var constants_exports = {};
    __export2(constants_exports, {
      SHEET_HANDLE_NAME: () => SHEET_HANDLE_NAME,
      SHEET_NAME: () => SHEET_NAME,
      constants: () => constants
    });
    module2.exports = __toCommonJS2(constants_exports);
    var constants = {};
    var SHEET_NAME = "Sheet";
    var SHEET_HANDLE_NAME = "SheetHandle";
  }
});

// node_modules/@tamagui/sheet/dist/cjs/SheetContext.js
var require_SheetContext = __commonJS({
  "node_modules/@tamagui/sheet/dist/cjs/SheetContext.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var SheetContext_exports = {};
    __export2(SheetContext_exports, {
      SheetProvider: () => SheetProvider,
      createSheetContext: () => createSheetContext,
      createSheetScope: () => createSheetScope2,
      useSheetContext: () => useSheetContext
    });
    module2.exports = __toCommonJS2(SheetContext_exports);
    var import_create_context5 = require_cjs3();
    var import_constants = require_constants2();
    var [createSheetContext, createSheetScope2] = (0, import_create_context5.createContextScope)(import_constants.SHEET_NAME);
    var [SheetProvider, useSheetContext] = createSheetContext(
      import_constants.SHEET_NAME,
      {}
    );
  }
});

// node_modules/@tamagui/scroll-view/dist/cjs/ScrollView.js
var require_ScrollView = __commonJS({
  "node_modules/@tamagui/scroll-view/dist/cjs/ScrollView.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var ScrollView_exports = {};
    __export2(ScrollView_exports, {
      ScrollView: () => ScrollView2
    });
    module2.exports = __toCommonJS2(ScrollView_exports);
    var import_stacks8 = require_cjs12();
    var import_web8 = require("@tamagui/core-node");
    var import_react_native28 = require("react-native-web-lite");
    (0, import_web8.setupReactNative)({
      ScrollView: import_react_native28.ScrollView
    });
    var ScrollView2 = (0, import_web8.styled)(
      import_react_native28.ScrollView,
      {
        name: "ScrollView",
        scrollEnabled: true,
        variants: {
          fullscreen: {
            true: import_stacks8.fullscreenStyle
          }
        }
      },
      {
        // this maybe not necesssary since setupReactNative is called?
        isReactNative: true
      }
    );
  }
});

// node_modules/@tamagui/scroll-view/dist/cjs/index.js
var require_cjs18 = __commonJS({
  "node_modules/@tamagui/scroll-view/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_ScrollView(), module2.exports);
  }
});

// node_modules/@tamagui/sheet/dist/cjs/SheetScrollView.js
var require_SheetScrollView = __commonJS({
  "node_modules/@tamagui/sheet/dist/cjs/SheetScrollView.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var SheetScrollView_exports = {};
    __export2(SheetScrollView_exports, {
      SheetScrollView: () => SheetScrollView
    });
    module2.exports = __toCommonJS2(SheetScrollView_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_core37 = require("@tamagui/core-node");
    var import_scroll_view = require_cjs18();
    var import_react30 = require("react");
    var import_SheetContext = require_SheetContext();
    var SHEET_SCROLL_VIEW_NAME = "SheetScrollView";
    var SheetScrollView = (0, import_react30.forwardRef)(
      ({ __scopeSheet, children, ...props }, ref) => {
        const { scrollBridge, position, snapPoints, frameSize, open } = (0, import_SheetContext.useSheetContext)(
          SHEET_SCROLL_VIEW_NAME,
          __scopeSheet
        );
        const scrollRef = (0, import_react30.useRef)(null);
        const percentOpened = snapPoints[position] ?? 0;
        const [percentToPadBottom, setPercentToPadBottom] = (0, import_react30.useState)(0);
        const next = 100 - percentOpened;
        if (open && next !== percentToPadBottom) {
          setPercentToPadBottom(next);
        }
        const state = (0, import_react30.useRef)({
          lastPageY: 0,
          dragAt: 0,
          dys: [],
          // store a few recent dys to get velocity on release
          isScrolling: false,
          isDragging: false
        });
        const release = /* @__PURE__ */ __name(() => {
          if (!state.current.isDragging) {
            return;
          }
          state.current.isDragging = false;
          scrollBridge.scrollStartY = -1;
          state.current.isScrolling = false;
          let vy = 0;
          if (state.current.dys.length) {
            const recentDys = state.current.dys.slice(-10);
            const dist = recentDys.length ? recentDys.reduce((a, b) => a + b, 0) : 0;
            const avgDy = dist / recentDys.length;
            vy = avgDy * 0.04;
          }
          state.current.dys = [];
          scrollBridge.release({
            dragAt: state.current.dragAt,
            vy
          });
        }, "release");
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(
          import_scroll_view.ScrollView,
          {
            ref: (0, import_core37.composeRefs)(scrollRef, ref),
            flex: 1,
            scrollEventThrottle: 8,
            onScroll: (e) => {
              const { y } = e.nativeEvent.contentOffset;
              scrollBridge.y = y;
              if (y > 0) {
                scrollBridge.scrollStartY = -1;
              }
            },
            onStartShouldSetResponder: () => {
              scrollBridge.scrollStartY = -1;
              state.current.isDragging = true;
              return true;
            },
            onMoveShouldSetResponder: () => false,
            onResponderRelease: release,
            className: "_ovs-contain",
            ...props,
            children: [
              (0, import_react30.useMemo)(() => children, [children]),
              /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_core37.Stack, { height: percentToPadBottom / 100 * frameSize, width: 0 })
            ]
          }
        );
      }
    );
  }
});

// node_modules/@tamagui/sheet/dist/cjs/Sheet.js
var require_Sheet = __commonJS({
  "node_modules/@tamagui/sheet/dist/cjs/Sheet.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Sheet_exports = {};
    __export2(Sheet_exports, {
      ControlledSheet: () => ControlledSheet2,
      Sheet: () => Sheet,
      SheetController: () => SheetController2,
      SheetFrame: () => SheetFrame,
      SheetFrameFrame: () => SheetFrameFrame,
      SheetHandle: () => SheetHandle,
      SheetHandleFrame: () => SheetHandleFrame,
      SheetOverlay: () => SheetOverlay,
      SheetOverlayFrame: () => SheetOverlayFrame,
      createSheetScope: () => import_SheetContext2.createSheetScope
    });
    module2.exports = __toCommonJS2(Sheet_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_adapt2 = require_cjs();
    var import_compose_refs3 = require_cjs2();
    var import_core37 = require("@tamagui/core-node");
    var import_portal3 = require_cjs13();
    var import_remove_scroll2 = require_cjs14();
    var import_stacks8 = require_cjs12();
    var import_use_constant = require_cjs15();
    var import_use_controllable_state2 = require_cjs16();
    var import_use_keyboard_visible = require_cjs17();
    var import_react30 = __toESM2(require("react"));
    var import_react_native28 = require("react-native-web-lite");
    var import_constants = require_constants2();
    var import_SheetContext = require_SheetContext();
    var import_SheetScrollView = require_SheetScrollView();
    var import_SheetContext2 = require_SheetContext();
    var SheetHandleFrame = (0, import_core37.styled)(import_stacks8.XStack, {
      name: import_constants.SHEET_HANDLE_NAME,
      height: 10,
      borderRadius: 100,
      backgroundColor: "$background",
      zIndex: 10,
      marginHorizontal: "35%",
      marginBottom: "$2",
      opacity: 0.5,
      hoverStyle: {
        opacity: 0.7
      },
      variants: {
        open: {
          true: {
            pointerEvents: "auto"
          },
          false: {
            opacity: 0,
            pointerEvents: "none"
          }
        }
      }
    });
    var SheetHandle = SheetHandleFrame.extractable(
      ({ __scopeSheet, ...props }) => {
        const context = (0, import_SheetContext.useSheetContext)(import_constants.SHEET_HANDLE_NAME, __scopeSheet);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          SheetHandleFrame,
          {
            onPress: () => {
              const max3 = context.snapPoints.length + (context.dismissOnSnapToBottom ? -1 : 0);
              const nextPos = (context.position + 1) % max3;
              context.setPosition(nextPos);
            },
            open: context.open,
            ...props
          }
        );
      }
    );
    var SHEET_OVERLAY_NAME = "SheetOverlay";
    var SheetOverlayFrame = (0, import_core37.styled)(import_stacks8.YStack, {
      name: SHEET_OVERLAY_NAME,
      backgroundColor: "$color10",
      fullscreen: true,
      opacity: 0.5,
      zIndex: 0,
      variants: {
        closed: {
          true: {
            opacity: 0,
            pointerEvents: "none"
          },
          false: {
            pointerEvents: "auto"
          }
        }
      }
    });
    var SheetOverlay = SheetOverlayFrame.extractable(
      ({ __scopeSheet, ...props }) => {
        const context = (0, import_SheetContext.useSheetContext)(SHEET_OVERLAY_NAME, __scopeSheet);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          SheetOverlayFrame,
          {
            closed: !context.open || context.hidden,
            ...props,
            onPress: (0, import_core37.mergeEvent)(
              props.onPress,
              context.dismissOnOverlayPress ? () => {
                context.setOpen(false);
              } : void 0
            )
          }
        );
      }
    );
    var selectionStyleSheet = import_core37.isClient ? document.createElement("style") : null;
    if (selectionStyleSheet) {
      document.head.appendChild(selectionStyleSheet);
    }
    var SheetFrameFrame = (0, import_core37.styled)(import_stacks8.YStack, {
      name: import_constants.SHEET_NAME,
      flex: 1,
      backgroundColor: "$background",
      borderTopLeftRadius: "$true",
      borderTopRightRadius: "$true",
      width: "100%",
      maxHeight: "100%",
      overflow: "hidden",
      pointerEvents: "auto"
    });
    var SheetFrame = SheetFrameFrame.extractable(
      (0, import_react30.forwardRef)(
        ({ __scopeSheet, ...props }, forwardedRef) => {
          const context = (0, import_SheetContext.useSheetContext)(import_constants.SHEET_NAME, __scopeSheet);
          const composedContentRef = (0, import_compose_refs3.useComposedRefs)(forwardedRef, context.contentRef);
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(SheetFrameFrame, { ref: composedContentRef, ...props });
        }
      )
    );
    var HIDDEN_SIZE = 1e4;
    var sheetComponents = {
      Handle: SheetHandle,
      Frame: SheetFrame,
      Overlay: SheetOverlay,
      ScrollView: import_SheetScrollView.SheetScrollView
    };
    var ParentSheetContext = (0, import_react30.createContext)({
      zIndex: 40
    });
    var useSheetContoller = /* @__PURE__ */ __name(() => {
      const controller = (0, import_react30.useContext)(SheetControllerContext);
      const isHidden = controller == null ? void 0 : controller.hidden;
      const isShowingNonSheet = isHidden && (controller == null ? void 0 : controller.open);
      return {
        controller,
        isHidden,
        isShowingNonSheet
      };
    }, "useSheetContoller");
    var Sheet = (0, import_core37.withStaticProperties)(
      (0, import_react30.forwardRef)(/* @__PURE__ */ __name(function Sheet2(props, ref) {
        const hydrated = (0, import_core37.useDidFinishSSR)();
        const { isShowingNonSheet } = useSheetContoller();
        if (isShowingNonSheet || !hydrated) {
          return null;
        }
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(SheetImplementation, { ref, ...props });
      }, "Sheet2")),
      sheetComponents
    );
    var SheetImplementation = (0, import_core37.themeable)(
      (0, import_react30.forwardRef)(/* @__PURE__ */ __name(function SheetImplementation2(props, ref) {
        const parentSheet = (0, import_react30.useContext)(ParentSheetContext);
        const { isHidden, controller } = useSheetContoller();
        const {
          __scopeSheet,
          snapPoints: snapPointsProp = [80],
          open: openProp,
          defaultOpen,
          children: childrenProp,
          position: positionProp,
          onPositionChange,
          onOpenChange,
          defaultPosition,
          dismissOnOverlayPress = true,
          animationConfig,
          dismissOnSnapToBottom = false,
          forceRemoveScrollEnabled = null,
          disableDrag: disableDragProp,
          modal = false,
          zIndex: zIndex2 = parentSheet.zIndex + 1,
          portalProps
        } = props;
        if (process.env.NODE_ENV === "development") {
          if (snapPointsProp.some((p) => p < 0 || p > 100)) {
            console.warn(
              "\u26A0\uFE0F Invalid snapPoint given, snapPoints must be between 0 and 100, equal to percent height of frame"
            );
          }
        }
        const driver = (0, import_core37.getAnimationDriver)();
        if (!driver) {
          throw new Error("Must set animations in tamagui.config.ts");
        }
        const disableDrag = disableDragProp ?? (controller == null ? void 0 : controller.disableDrag);
        const keyboardIsVisible = (0, import_use_keyboard_visible.useKeyboardVisible)();
        const themeName = (0, import_core37.useThemeName)();
        const contentRef = import_react30.default.useRef(null);
        const scrollBridge = (0, import_use_constant.useConstant)(() => ({
          enabled: false,
          y: 0,
          paneY: 0,
          paneMinY: 0,
          scrollStartY: -1,
          drag: () => {
          },
          release: () => {
          },
          scrollLock: false
        }));
        const onOpenChangeInternal = /* @__PURE__ */ __name((val2) => {
          var _a;
          (_a = controller == null ? void 0 : controller.onOpenChange) == null ? void 0 : _a.call(controller, val2);
          onOpenChange == null ? void 0 : onOpenChange(val2);
        }, "onOpenChangeInternal");
        const [open, setOpen] = (0, import_use_controllable_state2.useControllableState)({
          prop: (controller == null ? void 0 : controller.open) ?? openProp,
          defaultProp: true,
          onChange: onOpenChangeInternal,
          strategy: "most-recent-wins",
          transition: true
        });
        const [frameSize, setFrameSize] = (0, import_react30.useState)(0);
        const snapPoints = (0, import_react30.useMemo)(
          () => dismissOnSnapToBottom ? [...snapPointsProp, 0] : snapPointsProp,
          // eslint-disable-next-line react-hooks/exhaustive-deps
          [JSON.stringify(snapPointsProp), dismissOnSnapToBottom]
        );
        const [position_, setPosition_] = (0, import_use_controllable_state2.useControllableState)({
          prop: positionProp,
          defaultProp: defaultPosition || (open ? 0 : -1),
          onChange: onPositionChange,
          strategy: "most-recent-wins",
          transition: true
        });
        const position = open === false ? -1 : position_;
        if (open && dismissOnSnapToBottom && position === snapPoints.length - 1) {
          setPosition_(0);
        }
        const setPosition = (0, import_react30.useCallback)(
          (next) => {
            if (dismissOnSnapToBottom && next === snapPoints.length - 1) {
              setOpen(false);
            } else {
              setPosition_(next);
            }
          },
          [dismissOnSnapToBottom, snapPoints.length, setPosition_, setOpen]
        );
        const { useAnimatedNumber: useAnimatedNumber2, useAnimatedNumberReaction: useAnimatedNumberReaction2, useAnimatedNumberStyle: useAnimatedNumberStyle2 } = driver;
        const animatedNumber = useAnimatedNumber2(HIDDEN_SIZE);
        const at = (0, import_react30.useRef)(0);
        useAnimatedNumberReaction2(animatedNumber, (value) => {
          at.current = value;
          scrollBridge.paneY = value;
        });
        const [isResizing, setIsResizing] = (0, import_react30.useState)(true);
        (0, import_core37.useIsomorphicLayoutEffect)(() => {
          if (!isResizing) {
            setIsResizing(true);
          }
        }, [modal]);
        function stopSpring() {
          animatedNumber.stop();
          if (scrollBridge.onFinishAnimate) {
            scrollBridge.onFinishAnimate();
            scrollBridge.onFinishAnimate = void 0;
          }
        }
        __name(stopSpring, "stopSpring");
        const shouldSetPositionOpen = open && position < 0;
        (0, import_react30.useEffect)(() => {
          if (shouldSetPositionOpen) {
            setPosition(0);
          }
        }, [setPosition, shouldSetPositionOpen]);
        const positions = (0, import_react30.useMemo)(
          () => snapPoints.map((point) => getPercentSize(point, frameSize)),
          [frameSize, snapPoints]
        );
        const [opacity3, setOpacity] = (0, import_react30.useState)(open ? 1 : 0);
        if (open && opacity3 === 0) {
          setOpacity(1);
        }
        (0, import_react30.useEffect)(() => {
          if (!open) {
            const tm = setTimeout(() => {
              setOpacity(0);
            }, 400);
            return () => {
              clearTimeout(tm);
            };
          }
        }, [open]);
        const animateTo = (0, import_core37.useEvent)((position2) => {
          const current = animatedNumber.getValue();
          if (isHidden && open)
            return;
          if (!current)
            return;
          if (frameSize === 0)
            return;
          const hiddenValue = frameSize === 0 ? HIDDEN_SIZE : frameSize;
          const toValue = isHidden || position2 === -1 ? hiddenValue : positions[position2];
          if (at.current === toValue)
            return;
          stopSpring();
          if (isHidden || isResizing) {
            if (isResizing) {
              setIsResizing(false);
            }
            animatedNumber.setValue(toValue, {
              type: "timing",
              duration: 0
            });
            at.current = toValue;
            return;
          }
          const overshootClamping = at.current === HIDDEN_SIZE;
          animatedNumber.setValue(toValue, {
            ...animationConfig,
            type: "spring",
            overshootClamping
          });
        });
        (0, import_core37.useIsomorphicLayoutEffect)(() => {
          animateTo(position);
        }, [isHidden, frameSize, position, animateTo]);
        const [isShowingInnerSheet, setIsShowingInnerSheet] = (0, import_react30.useState)(false);
        const shouldHideParentSheet = !import_core37.isWeb && modal && isShowingInnerSheet;
        const parentSheetContext = (0, import_react30.useContext)(SheetInsideSheetContext);
        const onInnerSheet = (0, import_react30.useCallback)((hasChild) => {
          setIsShowingInnerSheet(hasChild);
        }, []);
        const panResponder = (0, import_react30.useMemo)(
          () => {
            if (disableDrag)
              return;
            if (!frameSize)
              return;
            if (isShowingInnerSheet)
              return;
            const minY = positions[0];
            scrollBridge.paneMinY = minY;
            let startY = at.current;
            function makeUnselectable(val2) {
              if (!selectionStyleSheet)
                return;
              if (!val2) {
                selectionStyleSheet.innerText = "";
              } else {
                selectionStyleSheet.innerText = ":root * { user-select: none !important; -webkit-user-select: none !important; }";
              }
            }
            __name(makeUnselectable, "makeUnselectable");
            const release = /* @__PURE__ */ __name(({ vy, dragAt }) => {
              isExternalDrag = false;
              previouslyScrolling = false;
              makeUnselectable(false);
              const at2 = dragAt + startY;
              const end = at2 + frameSize * vy * 0.2;
              let closestPoint = 0;
              let dist = Infinity;
              for (let i = 0; i < positions.length; i++) {
                const position2 = positions[i];
                const curDist = end > position2 ? end - position2 : position2 - end;
                if (curDist < dist) {
                  dist = curDist;
                  closestPoint = i;
                }
              }
              setPosition(closestPoint);
              animateTo(closestPoint);
            }, "release");
            const finish = /* @__PURE__ */ __name((_e, state) => {
              release({
                vy: state.vy,
                dragAt: state.dy
              });
            }, "finish");
            let previouslyScrolling = false;
            const onMoveShouldSet = /* @__PURE__ */ __name((_e, { dy }) => {
              const isScrolled = scrollBridge.y !== 0;
              const isDraggingUp = dy < 0;
              const isNearTop = scrollBridge.paneY - 5 <= scrollBridge.paneMinY;
              if (isScrolled) {
                previouslyScrolling = true;
                return false;
              }
              if (isNearTop) {
                if (!isScrolled && isDraggingUp) {
                  return false;
                }
              }
              return Math.abs(dy) > 5;
            }, "onMoveShouldSet");
            const grant = /* @__PURE__ */ __name(() => {
              makeUnselectable(true);
              stopSpring();
              startY = at.current;
            }, "grant");
            let isExternalDrag = false;
            scrollBridge.drag = (dy) => {
              if (!isExternalDrag) {
                isExternalDrag = true;
                grant();
              }
              const to = dy + startY;
              animatedNumber.setValue(resisted(to, minY), { type: "direct" });
            };
            scrollBridge.release = release;
            return import_react_native28.PanResponder.create({
              onMoveShouldSetPanResponder: onMoveShouldSet,
              onPanResponderGrant: grant,
              onPanResponderMove: (_e, { dy }) => {
                const toFull = dy + startY;
                const to = resisted(toFull, minY);
                animatedNumber.setValue(to, { type: "direct" });
              },
              onPanResponderEnd: finish,
              onPanResponderTerminate: finish,
              onPanResponderRelease: finish
            });
          },
          // eslint-disable-next-line react-hooks/exhaustive-deps
          [disableDrag, isShowingInnerSheet, animateTo, frameSize, positions, setPosition]
        );
        let handleComponent = null;
        let overlayComponent = null;
        let frameComponent = null;
        import_react30.default.Children.forEach(childrenProp, (child) => {
          var _a, _b;
          if ((0, import_react30.isValidElement)(child)) {
            const name = (_b = (_a = child.type) == null ? void 0 : _a["staticConfig"]) == null ? void 0 : _b.componentName;
            switch (name) {
              case "SheetHandle":
                handleComponent = child;
                break;
              case "Sheet":
                frameComponent = child;
                break;
              case "SheetOverlay":
                overlayComponent = child;
                break;
              default:
                console.warn("Warning: passed invalid child to Sheet", child);
            }
          }
        });
        const animatedStyle = useAnimatedNumberStyle2(animatedNumber, (val2) => {
          const translateY = frameSize === 0 ? HIDDEN_SIZE : val2;
          return {
            transform: [{ translateY }]
          };
        });
        const AnimatedView2 = driver["NumberView"] ?? driver.View;
        (0, import_core37.useIsomorphicLayoutEffect)(() => {
          if (!(parentSheetContext && open))
            return;
          parentSheetContext(true);
          return () => {
            parentSheetContext(false);
          };
        }, [parentSheetContext, open]);
        const nextParentContext = (0, import_react30.useMemo)(
          () => ({
            zIndex: zIndex2
          }),
          [zIndex2]
        );
        const handleLayout = (0, import_react30.useCallback)((e) => {
          var _a;
          let next = (_a = e.nativeEvent) == null ? void 0 : _a.layout.height;
          if (import_core37.isWeb && import_core37.isTouchable && !open) {
            next += 100;
          }
          if (!next)
            return;
          setFrameSize((prev) => {
            const isBigChange = Math.abs(prev - next) > 20;
            if (!keyboardIsVisible) {
              setIsResizing(isBigChange);
            }
            return next;
          });
        }, [keyboardIsVisible]);
        const removeScrollEnabled = forceRemoveScrollEnabled ?? (open && modal);
        const contents = /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(ParentSheetContext.Provider, { value: nextParentContext, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(
          import_SheetContext.SheetProvider,
          {
            modal,
            contentRef,
            frameSize,
            dismissOnOverlayPress,
            dismissOnSnapToBottom,
            open,
            hidden: !!isHidden,
            scope: __scopeSheet,
            position,
            snapPoints,
            setPosition,
            setOpen,
            scrollBridge,
            children: [
              isResizing || shouldHideParentSheet ? null : overlayComponent,
              /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(
                AnimatedView2,
                {
                  ref,
                  ...panResponder == null ? void 0 : panResponder.panHandlers,
                  onLayout: handleLayout,
                  pointerEvents: open && !shouldHideParentSheet ? "auto" : "none",
                  style: [
                    {
                      position: "absolute",
                      zIndex: zIndex2,
                      width: "100%",
                      height: "100%",
                      opacity: opacity3
                    },
                    animatedStyle
                  ],
                  children: [
                    handleComponent,
                    /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
                      import_remove_scroll2.RemoveScroll,
                      {
                        forwardProps: true,
                        enabled: removeScrollEnabled,
                        allowPinchZoom: true,
                        shards: [contentRef],
                        removeScrollBar: false,
                        children: isResizing ? /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_jsx_runtime12.Fragment, {}) : frameComponent
                      }
                    )
                  ]
                }
              )
            ]
          }
        ) });
        const adaptContext = (0, import_react30.useContext)(import_adapt2.AdaptParentContext);
        if (modal) {
          const modalContents = /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_portal3.Portal, { zIndex: zIndex2, ...portalProps, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_core37.Theme, { forceClassName: true, name: themeName, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_adapt2.AdaptParentContext.Provider, { value: adaptContext, children: contents }) }) });
          if (import_core37.isWeb) {
            return modalContents;
          }
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(SheetInsideSheetContext.Provider, { value: onInnerSheet, children: modalContents });
        }
        return contents;
      }, "SheetImplementation2")),
      { componentName: "Sheet" }
    );
    var SheetInsideSheetContext = (0, import_react30.createContext)(null);
    var ControlledSheet2 = Sheet;
    function getPercentSize(point, frameSize) {
      if (!frameSize)
        return 0;
      if (point === void 0) {
        console.warn("No snapPoint");
        return 0;
      }
      const pct = point / 100;
      const next = Math.round(frameSize - pct * frameSize);
      return next;
    }
    __name(getPercentSize, "getPercentSize");
    function resisted(y, minY, maxOverflow = 25) {
      if (y < minY) {
        const past = minY - y;
        const pctPast = Math.min(maxOverflow, past) / maxOverflow;
        const diminishBy = 1.1 - Math.pow(0.1, pctPast);
        const extra = -diminishBy * maxOverflow;
        return minY + extra;
      }
      return y;
    }
    __name(resisted, "resisted");
    var SheetControllerContext = (0, import_react30.createContext)(null);
    var SheetController2 = /* @__PURE__ */ __name(({
      children,
      onOpenChange: onOpenChangeProp,
      ...value
    }) => {
      const onOpenChange = (0, import_core37.useEvent)(onOpenChangeProp);
      const memoValue = (0, import_react30.useMemo)(
        () => ({
          open: value.open,
          hidden: value.hidden,
          disableDrag: value.disableDrag,
          onOpenChange
        }),
        [onOpenChange, value.open, value.hidden, value.disableDrag]
      );
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(SheetControllerContext.Provider, { value: memoValue, children });
    }, "SheetController");
  }
});

// node_modules/@tamagui/sheet/dist/cjs/index.js
var require_cjs19 = __commonJS({
  "node_modules/@tamagui/sheet/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Sheet(), module2.exports);
  }
});

// node_modules/@tamagui/get-font-sized/dist/cjs/index.js
var require_cjs20 = __commonJS({
  "node_modules/@tamagui/get-font-sized/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    __export2(src_exports, {
      getFontSized: () => getFontSized4
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_core37 = require("@tamagui/core-node");
    var getFontSized4 = /* @__PURE__ */ __name((sizeTokenIn = "$true", { fonts, props }) => {
      var _a, _b, _c;
      const family = (0, import_core37.getVariableValue)(props.fontFamily) || "$body";
      const font = fonts[family] || fonts["$body"];
      if (!font) {
        if (process.env.NODE_ENV === "development") {
          console.warn("\u26A0\uFE0F no font found", {
            family,
            fontTokens: Object.keys(fonts),
            sizeTokenIn
          });
        }
        return {};
      }
      const fontFamily = font.family;
      const sizeToken = sizeTokenIn === "$true" ? getDefaultSizeToken(font) : sizeTokenIn;
      const fontSize = props.fontSize || font.size[sizeToken];
      const lineHeight = props.lineHeight || font.lineHeight[sizeToken];
      const fontWeight = props.fontWeight || font.weight[sizeToken];
      const letterSpacing = props.letterSpacing || font.letterSpacing[sizeToken];
      const fontStyle = props.fontStyle || ((_a = font.style) == null ? void 0 : _a[sizeToken]);
      const textTransform = props.textTransform || ((_b = font.transform) == null ? void 0 : _b[sizeToken]);
      const color3 = props.color || ((_c = font.color) == null ? void 0 : _c[sizeToken]);
      const style = {
        color: color3,
        fontStyle,
        textTransform,
        fontFamily,
        fontWeight,
        letterSpacing,
        fontSize,
        lineHeight
      };
      if (process.env.NODE_ENV === "development") {
        if (props["debug"]) {
          console.groupCollapsed("  \u{1F539} getFontSized", sizeTokenIn, sizeToken);
          console.log({ style, props, font });
          console.groupEnd();
        }
      }
      return style;
    }, "getFontSized");
    var cache = /* @__PURE__ */ new WeakMap();
    function getDefaultSizeToken(font) {
      if (typeof font === "object" && cache.has(font)) {
        return cache.get(font);
      }
      const sizeTokens = "$true" in font.size ? font.size : (0, import_core37.getTokens)().size;
      const sizeDefault = sizeTokens["$true"];
      const sizeDefaultSpecific = sizeDefault ? Object.keys(sizeTokens).find(
        (x) => x !== "$true" && sizeTokens[x]["val"] === sizeDefault["val"]
      ) : null;
      if (!sizeDefault || !sizeDefaultSpecific) {
        if (process.env.NODE_ENV === "development") {
          console.warn(`No default size is set in your tokens for the "true" key, fonts will be inconsistent.

      Fix this by having consistent tokens across fonts and sizes and setting a true key for your size tokens, or
      set true keys for all your font tokens: "size", "lineHeight", "fontStyle", etc.`);
        }
        return Object.keys(font.size)[3];
      }
      cache.set(font, sizeDefaultSpecific);
      return sizeDefaultSpecific;
    }
    __name(getDefaultSizeToken, "getDefaultSizeToken");
  }
});

// node_modules/@tamagui/text/dist/cjs/SizableText.js
var require_SizableText = __commonJS({
  "node_modules/@tamagui/text/dist/cjs/SizableText.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var SizableText_exports = {};
    __export2(SizableText_exports, {
      SizableText: () => SizableText2
    });
    module2.exports = __toCommonJS2(SizableText_exports);
    var import_get_font_sized4 = require_cjs20();
    var import_web8 = require("@tamagui/core-node");
    var SizableText2 = (0, import_web8.styled)(import_web8.Text, {
      name: "SizableText",
      fontFamily: "$body",
      variants: {
        size: import_get_font_sized4.getFontSized
      },
      defaultVariants: {
        size: "$true"
      }
    });
  }
});

// node_modules/@tamagui/text/dist/cjs/Paragraph.js
var require_Paragraph = __commonJS({
  "node_modules/@tamagui/text/dist/cjs/Paragraph.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Paragraph_exports = {};
    __export2(Paragraph_exports, {
      Paragraph: () => Paragraph2
    });
    module2.exports = __toCommonJS2(Paragraph_exports);
    var import_web8 = require("@tamagui/core-node");
    var import_SizableText2 = require_SizableText();
    var Paragraph2 = (0, import_web8.styled)(import_SizableText2.SizableText, {
      name: "Paragraph",
      tag: "p",
      userSelect: "auto",
      color: "$color",
      size: "$true"
    });
  }
});

// node_modules/@tamagui/text/dist/cjs/Headings.js
var require_Headings = __commonJS({
  "node_modules/@tamagui/text/dist/cjs/Headings.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Headings_exports = {};
    __export2(Headings_exports, {
      H1: () => H12,
      H2: () => H22,
      H3: () => H32,
      H4: () => H42,
      H5: () => H52,
      H6: () => H62,
      Heading: () => Heading2
    });
    module2.exports = __toCommonJS2(Headings_exports);
    var import_web8 = require("@tamagui/core-node");
    var import_Paragraph2 = require_Paragraph();
    var Heading2 = (0, import_web8.styled)(import_Paragraph2.Paragraph, {
      tag: "span",
      name: "Heading",
      accessibilityRole: "header",
      fontFamily: "$heading",
      size: "$8",
      margin: 0
    });
    var H12 = (0, import_web8.styled)(Heading2, {
      name: "H1",
      tag: "h1",
      size: "$10"
    });
    var H22 = (0, import_web8.styled)(Heading2, {
      name: "H2",
      tag: "h2",
      size: "$9"
    });
    var H32 = (0, import_web8.styled)(Heading2, {
      name: "H3",
      tag: "h3",
      size: "$8"
    });
    var H42 = (0, import_web8.styled)(Heading2, {
      name: "H4",
      tag: "h4",
      size: "$7"
    });
    var H52 = (0, import_web8.styled)(Heading2, {
      name: "H5",
      tag: "h5",
      size: "$6"
    });
    var H62 = (0, import_web8.styled)(Heading2, {
      name: "H6",
      tag: "h6",
      size: "$5"
    });
  }
});

// node_modules/@tamagui/text/dist/cjs/wrapChildrenInText.js
var require_wrapChildrenInText = __commonJS({
  "node_modules/@tamagui/text/dist/cjs/wrapChildrenInText.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var wrapChildrenInText_exports = {};
    __export2(wrapChildrenInText_exports, {
      wrapChildrenInText: () => wrapChildrenInText2
    });
    module2.exports = __toCommonJS2(wrapChildrenInText_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_react30 = __toESM2(require("react"));
    function wrapChildrenInText2(TextComponent, propsIn, extraProps) {
      const {
        children,
        textProps,
        size: size4,
        noTextWrap,
        color: color3,
        fontFamily,
        fontSize,
        fontWeight,
        letterSpacing,
        textAlign
      } = propsIn;
      if (noTextWrap || !children) {
        return [children];
      }
      const allChildren = import_react30.default.Children.toArray(children);
      const nextChildren = [];
      let lastIsString = false;
      const props = {
        ...extraProps
      };
      if (color3)
        props.color = color3;
      if (fontFamily)
        props.fontFamily = fontFamily;
      if (fontSize)
        props.fontSize = fontSize;
      if (fontWeight)
        props.fontWeight = fontWeight;
      if (letterSpacing)
        props.letterSpacing = letterSpacing;
      if (textAlign)
        props.textAlign = textAlign;
      if (size4)
        props.size = size4;
      function concatStringChildren() {
        if (!lastIsString)
          return;
        const index3 = nextChildren.length - 1;
        const childrenStrings = nextChildren[index3];
        nextChildren[index3] = /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(TextComponent, { ...props, ...textProps, children: childrenStrings }, index3);
      }
      __name(concatStringChildren, "concatStringChildren");
      for (const child of allChildren) {
        const last = nextChildren[nextChildren.length - 1];
        const isString = typeof child === "string";
        if (isString) {
          if (lastIsString) {
            last.push(child);
          } else {
            nextChildren.push([child]);
          }
        } else {
          concatStringChildren();
          nextChildren.push(child);
        }
        lastIsString = isString;
      }
      concatStringChildren();
      return nextChildren;
    }
    __name(wrapChildrenInText2, "wrapChildrenInText");
  }
});

// node_modules/@tamagui/text/dist/cjs/types.js
var require_types = __commonJS({
  "node_modules/@tamagui/text/dist/cjs/types.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var types_exports = {};
    module2.exports = __toCommonJS2(types_exports);
  }
});

// node_modules/@tamagui/text/dist/cjs/index.js
var require_cjs21 = __commonJS({
  "node_modules/@tamagui/text/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_SizableText(), module2.exports);
    __reExport2(src_exports, require_Paragraph(), module2.exports);
    __reExport2(src_exports, require_Headings(), module2.exports);
    __reExport2(src_exports, require_wrapChildrenInText(), module2.exports);
    __reExport2(src_exports, require_types(), module2.exports);
  }
});

// node_modules/@tamagui/dialog/dist/cjs/Dialog.js
var require_Dialog = __commonJS({
  "node_modules/@tamagui/dialog/dist/cjs/Dialog.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Dialog_exports = {};
    __export2(Dialog_exports, {
      Dialog: () => Dialog3,
      DialogClose: () => DialogClose2,
      DialogContent: () => DialogContent2,
      DialogDescription: () => DialogDescription2,
      DialogOverlay: () => DialogOverlay2,
      DialogPortal: () => DialogPortal2,
      DialogPortalFrame: () => DialogPortalFrame2,
      DialogSheetContents: () => DialogSheetContents2,
      DialogTitle: () => DialogTitle2,
      DialogTrigger: () => DialogTrigger2,
      DialogWarningProvider: () => DialogWarningProvider2,
      createDialogScope: () => createDialogScope2
    });
    module2.exports = __toCommonJS2(Dialog_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_adapt2 = require_cjs();
    var import_animate_presence2 = require_cjs5();
    var import_aria_hidden3 = require_cjs6();
    var import_compose_refs3 = require_cjs2();
    var import_core37 = require("@tamagui/core-node");
    var import_create_context5 = require_cjs3();
    var import_dismissable2 = require_cjs8();
    var import_focus_scope2 = require_cjs9();
    var import_portal3 = require_cjs13();
    var import_remove_scroll2 = require_cjs14();
    var import_sheet2 = require_cjs19();
    var import_stacks8 = require_cjs12();
    var import_text5 = require_cjs21();
    var import_use_controllable_state2 = require_cjs16();
    var React17 = __toESM2(require("react"));
    var DIALOG_NAME2 = "Dialog";
    var [createDialogContext2, createDialogScope2] = (0, import_create_context5.createContextScope)(DIALOG_NAME2);
    var [DialogProvider2, useDialogContext2] = createDialogContext2(DIALOG_NAME2);
    var TRIGGER_NAME3 = "DialogTrigger";
    var DialogTriggerFrame2 = (0, import_core37.styled)(import_stacks8.YStack, {
      name: TRIGGER_NAME3
    });
    var DialogTrigger2 = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopeDialog, ...triggerProps } = props;
        const context = useDialogContext2(TRIGGER_NAME3, __scopeDialog);
        const composedTriggerRef = (0, import_compose_refs3.useComposedRefs)(forwardedRef, context.triggerRef);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          DialogTriggerFrame2,
          {
            tag: "button",
            "aria-haspopup": "dialog",
            "aria-expanded": context.open,
            "aria-controls": context.contentId,
            "data-state": getState2(context.open),
            ...triggerProps,
            ref: composedTriggerRef,
            onPress: (0, import_core37.composeEventHandlers)(props.onPress, context.onOpenToggle)
          }
        );
      }
    );
    DialogTrigger2.displayName = TRIGGER_NAME3;
    var PORTAL_NAME2 = "DialogPortal";
    var [PortalProvider3, usePortalContext3] = createDialogContext2(
      PORTAL_NAME2,
      {
        forceMount: void 0
      }
    );
    var DialogPortalFrame2 = (0, import_core37.styled)(import_stacks8.YStack, {
      alignItems: "center",
      justifyContent: "center",
      fullscreen: true,
      zIndex: 100,
      ...import_core37.isWeb && {
        maxHeight: "100vh",
        position: "fixed"
      }
    });
    var DialogPortalItem2 = /* @__PURE__ */ __name((props) => {
      const themeName = (0, import_core37.useThemeName)();
      const context = useDialogContext2(PORTAL_NAME2, props.__scopeDialog);
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_portal3.PortalItem, { hostName: props.hostName, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(DialogPortalItemContent2, { ...props, themeName, context }) });
    }, "DialogPortalItem");
    function DialogPortalItemContent2(props) {
      const {
        __scopeDialog,
        children,
        context,
        themeName,
        space: space2,
        spaceDirection,
        separator
      } = props;
      let childrenSpaced = children;
      if (space2 || separator) {
        childrenSpaced = (0, import_core37.spacedChildren)({
          children,
          separator,
          space: space2,
          direction: spaceDirection
        });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(DialogProvider2, { scope: __scopeDialog, ...context, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_core37.Theme, { name: themeName, children: childrenSpaced }) });
    }
    __name(DialogPortalItemContent2, "DialogPortalItemContent");
    var DialogPortal2 = /* @__PURE__ */ __name((props) => {
      const { __scopeDialog, forceMount, children, ...frameProps } = props;
      const context = useDialogContext2(PORTAL_NAME2, __scopeDialog);
      const isShowing = forceMount || context.open;
      const [isFullyHidden, setIsFullyHidden] = React17.useState(!isShowing);
      if (isShowing && isFullyHidden) {
        setIsFullyHidden(false);
      }
      const contents = /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        import_animate_presence2.AnimatePresence,
        {
          onExitComplete: () => {
            setIsFullyHidden(true);
          },
          children: isShowing ? children : null
        }
      );
      const isSheet = useShowDialogSheet2(context);
      if (isSheet) {
        return children;
      }
      if (context.modal) {
        if (isFullyHidden) {
          return null;
        }
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(DialogPortalItem2, { __scopeDialog, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(PortalProvider3, { scope: __scopeDialog, forceMount, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(DialogPortalFrame2, { pointerEvents: isShowing ? "auto" : "none", ...frameProps, children: contents }) }) });
      }
      return contents;
    }, "DialogPortal");
    DialogPortal2.displayName = PORTAL_NAME2;
    var OVERLAY_NAME2 = "DialogOverlay";
    var DialogOverlayFrame2 = (0, import_core37.styled)(import_stacks8.ThemeableStack, {
      name: OVERLAY_NAME2,
      backgrounded: true,
      fullscreen: true
    });
    var DialogOverlay2 = React17.forwardRef(
      ({ __scopeDialog, ...props }, forwardedRef) => {
        const portalContext = usePortalContext3(OVERLAY_NAME2, __scopeDialog);
        const { forceMount = portalContext.forceMount, ...overlayProps } = props;
        const context = useDialogContext2(OVERLAY_NAME2, __scopeDialog);
        const showSheet = useShowDialogSheet2(context);
        if (!forceMount) {
          if (!context.modal || showSheet) {
            return null;
          }
        }
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(DialogOverlayImpl2, { context, ...overlayProps, ref: forwardedRef });
      }
    );
    DialogOverlay2.displayName = OVERLAY_NAME2;
    var DialogOverlayImpl2 = React17.forwardRef(
      (props, forwardedRef) => {
        const { context, ...overlayProps } = props;
        return (
          // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`
          // ie. when `Overlay` and `Content` are siblings
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            DialogOverlayFrame2,
            {
              "data-state": getState2(context.open),
              pointerEvents: context.open ? "auto" : "none",
              ...overlayProps,
              ref: forwardedRef
            }
          )
        );
      }
    );
    var CONTENT_NAME2 = "DialogContent";
    var DialogContentFrame2 = (0, import_core37.styled)(import_stacks8.ThemeableStack, {
      name: CONTENT_NAME2,
      tag: "dialog",
      position: "relative",
      backgrounded: true,
      padded: true,
      radiused: true,
      elevate: true,
      variants: {
        size: {
          "...size": (val2, extras) => {
            return {};
          }
        }
      },
      defaultVariants: {
        size: "$true"
      }
    });
    var DialogContent2 = DialogContentFrame2.extractable(
      React17.forwardRef(
        ({ __scopeDialog, ...props }, forwardedRef) => {
          const portalContext = usePortalContext3(CONTENT_NAME2, __scopeDialog);
          const { forceMount = portalContext.forceMount, ...contentProps } = props;
          const context = useDialogContext2(CONTENT_NAME2, __scopeDialog);
          const contents = context.modal ? /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(DialogContentModal2, { context, ...contentProps, ref: forwardedRef }) : /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(DialogContentNonModal2, { context, ...contentProps, ref: forwardedRef });
          if (!import_core37.isWeb) {
            return contents;
          }
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            import_remove_scroll2.RemoveScroll,
            {
              forwardProps: true,
              enabled: context.open,
              allowPinchZoom: context.allowPinchZoom,
              shards: [context.contentRef],
              removeScrollBar: false,
              children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { className: "_dsp_contents", children: contents })
            }
          );
        }
      )
    );
    DialogContent2.displayName = CONTENT_NAME2;
    var DialogContentModal2 = React17.forwardRef(
      ({ children, context, ...props }, forwardedRef) => {
        const contentRef = React17.useRef(null);
        const composedRefs = (0, import_compose_refs3.useComposedRefs)(forwardedRef, context.contentRef, contentRef);
        if (import_core37.isWeb) {
          React17.useEffect(() => {
            if (!context.open)
              return;
            const content = contentRef.current;
            if (content)
              return (0, import_aria_hidden3.hideOthers)(content);
          }, [context.open]);
        }
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          DialogContentImpl2,
          {
            ...props,
            context,
            ref: composedRefs,
            disableOutsidePointerEvents: true,
            onCloseAutoFocus: (0, import_core37.composeEventHandlers)(props.onCloseAutoFocus, (event) => {
              var _a;
              event.preventDefault();
              (_a = context.triggerRef.current) == null ? void 0 : _a.focus();
            }),
            onPointerDownOutside: (0, import_core37.composeEventHandlers)(
              props.onPointerDownOutside,
              (event) => {
                const originalEvent = event["detail"].originalEvent;
                const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
                const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
                if (isRightClick)
                  event.preventDefault();
              }
            ),
            onFocusOutside: (0, import_core37.composeEventHandlers)(
              props.onFocusOutside,
              (event) => event.preventDefault()
            ),
            children
          }
        );
      }
    );
    var DialogContentNonModal2 = React17.forwardRef(
      (props, forwardedRef) => {
        const hasInteractedOutsideRef = React17.useRef(false);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          DialogContentImpl2,
          {
            ...props,
            ref: forwardedRef,
            trapFocus: false,
            disableOutsidePointerEvents: false,
            onCloseAutoFocus: (event) => {
              var _a, _b;
              (_a = props.onCloseAutoFocus) == null ? void 0 : _a.call(props, event);
              if (!event.defaultPrevented) {
                if (!hasInteractedOutsideRef.current) {
                  (_b = props.context.triggerRef.current) == null ? void 0 : _b.focus();
                }
                event.preventDefault();
              }
              hasInteractedOutsideRef.current = false;
            },
            onInteractOutside: (event) => {
              var _a;
              (_a = props.onInteractOutside) == null ? void 0 : _a.call(props, event);
              if (!event.defaultPrevented)
                hasInteractedOutsideRef.current = true;
              const target = event.target;
              const trigger = props.context.triggerRef.current;
              if (!(trigger instanceof HTMLElement))
                return;
              const targetIsTrigger = trigger.contains(target);
              if (targetIsTrigger)
                event.preventDefault();
            }
          }
        );
      }
    );
    var DialogContentImpl2 = React17.forwardRef(
      (props, forwardedRef) => {
        const {
          __scopeDialog,
          trapFocus,
          onOpenAutoFocus,
          onCloseAutoFocus,
          disableOutsidePointerEvents,
          onEscapeKeyDown,
          onPointerDownOutside,
          onFocusOutside,
          onInteractOutside,
          context,
          ...contentProps
        } = props;
        const contentRef = React17.useRef(null);
        const composedRefs = (0, import_compose_refs3.useComposedRefs)(forwardedRef, contentRef);
        const showSheet = useShowDialogSheet2(context);
        const contents = /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          DialogContentFrame2,
          {
            id: context.contentId,
            "aria-describedby": context.descriptionId,
            "aria-labelledby": context.titleId,
            "data-state": getState2(context.open),
            ...contentProps
          }
        );
        if (showSheet) {
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(DialogPortalItem2, { hostName: getSheetContentsName2(context), children: contentProps.children });
        }
        if (!import_core37.isWeb) {
          return contents;
        }
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            import_focus_scope2.FocusScope,
            {
              loop: true,
              trapped: trapFocus,
              onMountAutoFocus: onOpenAutoFocus,
              forceUnmount: !context.open,
              onUnmountAutoFocus: onCloseAutoFocus,
              children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
                import_dismissable2.Dismissable,
                {
                  disableOutsidePointerEvents: context.open && disableOutsidePointerEvents,
                  forceUnmount: !context.open,
                  onEscapeKeyDown,
                  onPointerDownOutside,
                  onFocusOutside,
                  onInteractOutside,
                  ref: composedRefs,
                  onDismiss: () => context.onOpenChange(false),
                  children: contents
                }
              )
            }
          ),
          process.env.NODE_ENV === "development" && /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(TitleWarning2, { titleId: context.titleId }),
            /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
              DescriptionWarning2,
              {
                contentRef,
                descriptionId: context.descriptionId
              }
            )
          ] })
        ] });
      }
    );
    var TITLE_NAME2 = "DialogTitle";
    var DialogTitleFrame2 = (0, import_core37.styled)(import_text5.H2, {
      name: TITLE_NAME2
    });
    var DialogTitle2 = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopeDialog, ...titleProps } = props;
        const context = useDialogContext2(TITLE_NAME2, __scopeDialog);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(DialogTitleFrame2, { id: context.titleId, ...titleProps, ref: forwardedRef });
      }
    );
    DialogTitle2.displayName = TITLE_NAME2;
    var DialogDescriptionFrame2 = (0, import_core37.styled)(import_text5.Paragraph, {
      name: "DialogDescription"
    });
    var DESCRIPTION_NAME2 = "DialogDescription";
    var DialogDescription2 = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopeDialog, ...descriptionProps } = props;
        const context = useDialogContext2(DESCRIPTION_NAME2, __scopeDialog);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          DialogDescriptionFrame2,
          {
            id: context.descriptionId,
            ...descriptionProps,
            ref: forwardedRef
          }
        );
      }
    );
    DialogDescription2.displayName = DESCRIPTION_NAME2;
    var CLOSE_NAME2 = "DialogClose";
    var DialogClose2 = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopeDialog, displayWhenAdapted, ...closeProps } = props;
        const context = useDialogContext2(CLOSE_NAME2, __scopeDialog, {
          warn: false,
          fallback: {}
        });
        const isSheet = useShowDialogSheet2(context);
        if (isSheet && !displayWhenAdapted) {
          return null;
        }
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          import_stacks8.YStack,
          {
            tag: "button",
            accessibilityLabel: "Dialog Close",
            ...closeProps,
            ref: forwardedRef,
            onPress: (0, import_core37.composeEventHandlers)(
              props.onPress,
              () => context.onOpenChange(false)
            )
          }
        );
      }
    );
    DialogClose2.displayName = CLOSE_NAME2;
    function getState2(open) {
      return open ? "open" : "closed";
    }
    __name(getState2, "getState");
    var TITLE_WARNING_NAME2 = "DialogTitleWarning";
    var [DialogWarningProvider2, useWarningContext2] = (0, import_create_context5.createContext)(TITLE_WARNING_NAME2, {
      contentName: CONTENT_NAME2,
      titleName: TITLE_NAME2,
      docsSlug: "dialog"
    });
    var TitleWarning2 = /* @__PURE__ */ __name(({ titleId }) => {
      if (process.env.NODE_ENV === "development") {
        const titleWarningContext = useWarningContext2(TITLE_WARNING_NAME2);
        const MESSAGE = `\`${titleWarningContext.contentName}\` requires a \`${titleWarningContext.titleName}\` for the component to be accessible for screen reader users.

If you want to hide the \`${titleWarningContext.titleName}\`, you can wrap it with our VisuallyHidden component.

For more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;
        React17.useEffect(() => {
          if (!import_core37.isWeb)
            return;
          if (titleId) {
            const hasTitle = document.getElementById(titleId);
            if (!hasTitle) {
              console.warn(MESSAGE);
            }
          }
        }, [MESSAGE, titleId]);
      }
      return null;
    }, "TitleWarning");
    var DESCRIPTION_WARNING_NAME2 = "DialogDescriptionWarning";
    var DescriptionWarning2 = /* @__PURE__ */ __name(({
      contentRef,
      descriptionId
    }) => {
      if (process.env.NODE_ENV === "development") {
        const descriptionWarningContext = useWarningContext2(DESCRIPTION_WARNING_NAME2);
        const MESSAGE = `Warning: Missing \`Description\` or \`aria-describedby={undefined}\` for {${descriptionWarningContext.contentName}}.`;
        React17.useEffect(() => {
          if (!import_core37.isWeb)
            return;
          const contentNode = contentRef.current;
          if (!(contentNode instanceof HTMLElement)) {
            return;
          }
          const describedById = contentNode.getAttribute("aria-describedby");
          if (descriptionId && describedById) {
            const hasDescription = document.getElementById(descriptionId);
            if (!hasDescription) {
              console.warn(MESSAGE);
            }
          }
        }, [MESSAGE, contentRef, descriptionId]);
      }
      return null;
    }, "DescriptionWarning");
    var Dialog3 = (0, import_core37.withStaticProperties)(
      React17.forwardRef(/* @__PURE__ */ __name(function Dialog22(props, ref) {
        const {
          __scopeDialog,
          children,
          open: openProp,
          defaultOpen = false,
          onOpenChange,
          modal = true,
          allowPinchZoom = false
        } = props;
        const scopeId = (0, import_core37.useId)();
        const contentId = (0, import_core37.useId)();
        const titleId = (0, import_core37.useId)();
        const descriptionId = (0, import_core37.useId)();
        const scopeKey = __scopeDialog ? Object.keys(__scopeDialog)[0] : scopeId;
        const sheetContentsName = getSheetContentsName2({ scopeKey, contentId });
        const triggerRef = React17.useRef(null);
        const contentRef = React17.useRef(null);
        const [open, setOpen] = (0, import_use_controllable_state2.useControllableState)({
          prop: openProp,
          defaultProp: defaultOpen,
          onChange: onOpenChange
        });
        const onOpenToggle = React17.useCallback(
          () => setOpen((prevOpen) => !prevOpen),
          [setOpen]
        );
        const context = {
          scope: __scopeDialog,
          scopeKey,
          triggerRef,
          contentRef,
          contentId,
          titleId,
          descriptionId,
          open,
          onOpenChange: setOpen,
          onOpenToggle,
          modal,
          allowPinchZoom
        };
        const { when, AdaptProvider } = (0, import_adapt2.useAdaptParent)({
          Contents: React17.useCallback(
            (props2) => {
              return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_portal3.PortalHost, { forwardProps: props2, name: sheetContentsName });
            },
            [sheetContentsName]
          )
        });
        React17.useImperativeHandle(
          ref,
          () => ({
            open: setOpen
          }),
          [setOpen]
        );
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(AdaptProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(DialogProvider2, { ...context, sheetBreakpoint: when, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(DialogSheetController2, { onOpenChange: setOpen, __scopeDialog, children }) }) });
      }, "Dialog2")),
      {
        Trigger: DialogTrigger2,
        Portal: DialogPortal2,
        Overlay: DialogOverlay2,
        Content: DialogContent2,
        Title: DialogTitle2,
        Description: DialogDescription2,
        Close: DialogClose2,
        Sheet: import_sheet2.ControlledSheet,
        Adapt: import_adapt2.Adapt
      }
    );
    var SHEET_CONTENTS_NAME2 = "DialogSheetContents";
    var DialogSheetContents2 = /* @__PURE__ */ __name(({
      name,
      ...props
    }) => {
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_portal3.PortalHost, { forwardProps: props, name });
    }, "DialogSheetContents");
    DialogSheetContents2.displayName = SHEET_CONTENTS_NAME2;
    var getSheetContentsName2 = /* @__PURE__ */ __name(({
      scopeKey,
      contentId
    }) => `${scopeKey || contentId}SheetContents`, "getSheetContentsName");
    var DialogSheetController2 = /* @__PURE__ */ __name((props) => {
      const context = useDialogContext2("DialogSheetController", props.__scopeDialog);
      const showSheet = useShowDialogSheet2(context);
      const breakpointActive = useSheetBreakpointActive2(context);
      const getShowSheet = (0, import_core37.useGet)(showSheet);
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        import_sheet2.SheetController,
        {
          onOpenChange: (val2) => {
            if (getShowSheet()) {
              props.onOpenChange(val2);
            }
          },
          open: context.open,
          hidden: breakpointActive === false,
          children: props.children
        }
      );
    }, "DialogSheetController");
    var useSheetBreakpointActive2 = /* @__PURE__ */ __name((context) => {
      const media2 = (0, import_core37.useMedia)();
      if (!context.sheetBreakpoint)
        return false;
      if (context.sheetBreakpoint === true)
        return true;
      return media2[context.sheetBreakpoint];
    }, "useSheetBreakpointActive");
    var useShowDialogSheet2 = /* @__PURE__ */ __name((context) => {
      const breakpointActive = useSheetBreakpointActive2(context);
      return context.open === false ? false : breakpointActive;
    }, "useShowDialogSheet");
  }
});

// node_modules/@tamagui/dialog/dist/cjs/index.js
var require_cjs22 = __commonJS({
  "node_modules/@tamagui/dialog/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Dialog(), module2.exports);
  }
});

// node_modules/@tamagui/alert-dialog/dist/cjs/AlertDialog.js
var require_AlertDialog = __commonJS({
  "node_modules/@tamagui/alert-dialog/dist/cjs/AlertDialog.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var AlertDialog_exports = {};
    __export2(AlertDialog_exports, {
      AlertDialog: () => AlertDialog,
      AlertDialogAction: () => AlertDialogAction,
      AlertDialogCancel: () => AlertDialogCancel,
      AlertDialogContent: () => AlertDialogContent,
      AlertDialogDescription: () => AlertDialogDescription,
      AlertDialogOverlay: () => AlertDialogOverlay,
      AlertDialogPortal: () => AlertDialogPortal,
      AlertDialogTitle: () => AlertDialogTitle,
      AlertDialogTrigger: () => AlertDialogTrigger,
      createAlertDialogScope: () => createAlertDialogScope
    });
    module2.exports = __toCommonJS2(AlertDialog_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_compose_refs3 = require_cjs2();
    var import_core37 = require("@tamagui/core-node");
    var import_create_context5 = require_cjs3();
    var import_dialog = require_cjs22();
    var import_stacks8 = require_cjs12();
    var import_use_controllable_state2 = require_cjs16();
    var React17 = __toESM2(require("react"));
    var import_react_native28 = require("react-native-web-lite");
    var ROOT_NAME = "AlertDialog";
    var [createAlertDialogContext, createAlertDialogScope] = (0, import_create_context5.createContextScope)(ROOT_NAME, [
      import_dialog.createDialogScope
    ]);
    var useDialogScope = (0, import_dialog.createDialogScope)();
    var TRIGGER_NAME3 = "AlertDialogTrigger";
    var NativeAlertDialogTriggerFrame = (0, import_core37.styled)(import_stacks8.YStack, {
      name: "DialogTrigger"
    });
    var AlertDialogTrigger = React17.forwardRef(
      (props, forwardedRef) => {
        if (props["__native"]) {
          const { __native, onPress, __onPress, ...rest } = props;
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            NativeAlertDialogTriggerFrame,
            {
              ...rest,
              onPress: (0, import_core37.composeEventHandlers)(onPress, __onPress)
            }
          );
        }
        const { __scopeAlertDialog, ...triggerProps } = props;
        const dialogScope = useDialogScope(__scopeAlertDialog);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_dialog.DialogTrigger, { ...dialogScope, ...triggerProps, ref: forwardedRef });
      }
    );
    AlertDialogTrigger.displayName = TRIGGER_NAME3;
    var PORTAL_NAME2 = "AlertDialogPortal";
    var AlertDialogPortal = /* @__PURE__ */ __name((props) => {
      const { __scopeAlertDialog, ...portalProps } = props;
      const dialogScope = useDialogScope(__scopeAlertDialog);
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_dialog.DialogPortal, { ...dialogScope, ...portalProps });
    }, "AlertDialogPortal");
    AlertDialogPortal.displayName = PORTAL_NAME2;
    var OVERLAY_NAME2 = "AlertDialogOverlay";
    var AlertDialogOverlay = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopeAlertDialog, ...overlayProps } = props;
        const dialogScope = useDialogScope(__scopeAlertDialog);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_dialog.DialogOverlay, { ...dialogScope, ...overlayProps, ref: forwardedRef });
      }
    );
    AlertDialogOverlay.displayName = OVERLAY_NAME2;
    var CONTENT_NAME2 = "AlertDialogContent";
    var [AlertDialogContentProvider, useAlertDialogContentContext] = createAlertDialogContext(CONTENT_NAME2);
    var AlertDialogContent = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopeAlertDialog, children, ...contentProps } = props;
        const dialogScope = useDialogScope(__scopeAlertDialog);
        const contentRef = React17.useRef(null);
        const composedRefs = (0, import_compose_refs3.useComposedRefs)(forwardedRef, contentRef);
        const cancelRef = React17.useRef(null);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          import_dialog.DialogWarningProvider,
          {
            contentName: CONTENT_NAME2,
            titleName: TITLE_NAME2,
            docsSlug: "alert-dialog",
            children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(AlertDialogContentProvider, { scope: __scopeAlertDialog, cancelRef, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(
              import_dialog.DialogContent,
              {
                role: "alertdialog",
                ...dialogScope,
                ...contentProps,
                ref: composedRefs,
                onOpenAutoFocus: (0, import_core37.composeEventHandlers)(
                  contentProps.onOpenAutoFocus,
                  (event) => {
                    var _a;
                    event.preventDefault();
                    if (import_core37.isWeb) {
                      (_a = cancelRef.current) == null ? void 0 : _a.focus({ preventScroll: true });
                    }
                  }
                ),
                onPointerDownOutside: (event) => event.preventDefault(),
                onInteractOutside: (event) => event.preventDefault(),
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_core37.Slottable, { children }),
                  process.env.NODE_ENV === "development" && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(DescriptionWarning2, { contentRef })
                ]
              }
            ) })
          }
        );
      }
    );
    AlertDialogContent.displayName = CONTENT_NAME2;
    var TITLE_NAME2 = "AlertDialogTitle";
    var AlertDialogTitle = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopeAlertDialog, ...titleProps } = props;
        const dialogScope = useDialogScope(__scopeAlertDialog);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_dialog.DialogTitle, { ...dialogScope, ...titleProps, ref: forwardedRef });
      }
    );
    AlertDialogTitle.displayName = TITLE_NAME2;
    var DESCRIPTION_NAME2 = "AlertDialogDescription";
    var AlertDialogDescription = React17.forwardRef((props, forwardedRef) => {
      const { __scopeAlertDialog, ...descriptionProps } = props;
      const dialogScope = useDialogScope(__scopeAlertDialog);
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_dialog.DialogDescription, { ...dialogScope, ...descriptionProps, ref: forwardedRef });
    });
    AlertDialogDescription.displayName = DESCRIPTION_NAME2;
    var ACTION_NAME = "AlertDialogAction";
    var AlertDialogAction = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopeAlertDialog, ...actionProps } = props;
        const dialogScope = useDialogScope(__scopeAlertDialog);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_dialog.DialogClose, { ...dialogScope, ...actionProps, ref: forwardedRef });
      }
    );
    AlertDialogAction.displayName = ACTION_NAME;
    var CANCEL_NAME = "AlertDialogCancel";
    var AlertDialogCancel = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopeAlertDialog, ...cancelProps } = props;
        const { cancelRef } = useAlertDialogContentContext(CANCEL_NAME, __scopeAlertDialog);
        const dialogScope = useDialogScope(__scopeAlertDialog);
        const ref = (0, import_compose_refs3.useComposedRefs)(forwardedRef, cancelRef);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_dialog.DialogClose, { ...dialogScope, ...cancelProps, ref });
      }
    );
    AlertDialogCancel.displayName = CANCEL_NAME;
    var DescriptionWarning2 = /* @__PURE__ */ __name(({ contentRef }) => {
      if (process.env.NODE_ENV === "development") {
        React17.useEffect(() => {
          var _a;
          if (!import_core37.isWeb)
            return;
          const hasDescription = document.getElementById(
            // @ts-ignore
            // eslint-disable-next-line @typescript-eslint/no-non-null-asserted-optional-chain
            (_a = contentRef.current) == null ? void 0 : _a.getAttribute("aria-describedby")
          );
          if (!hasDescription) {
            console.warn(`\`${CONTENT_NAME2}\` requires a description for the component to be accessible for screen reader users.
  
        You can add a description to the \`${CONTENT_NAME2}\` by passing a \`${DESCRIPTION_NAME2}\` component as a child, which also benefits sighted users by adding visible context to the dialog.
        
        Alternatively, you can use your own component as a description by assigning it an \`id\` and passing the same value to the \`aria-describedby\` prop in \`${CONTENT_NAME2}\`. If the description is confusing or duplicative for sighted users, you can use the \`@radix-ui/react-visually-hidden\` primitive as a wrapper around your description component.
        
        For more information, see https://tamagui.dev/docs/components/alert-dialog`);
          }
        }, [contentRef]);
      }
      return null;
    }, "DescriptionWarning");
    var AlertDialogInner = /* @__PURE__ */ __name((props) => {
      const { __scopeAlertDialog, native, ...alertDialogProps } = props;
      const dialogScope = useDialogScope(__scopeAlertDialog);
      if (process.env.TAMAGUI_TARGET === "native") {
        const [open, setOpen] = (0, import_use_controllable_state2.useControllableState)({
          prop: props.open,
          defaultProp: props.defaultOpen || false,
          onChange: props.onOpenChange,
          transition: true
        });
        let triggerElement = null;
        let title = "";
        let description = "";
        const buttons = [];
        forEachChildDeep(React17.Children.toArray(props.children), (child) => {
          if (!React17.isValidElement(child))
            return false;
          const name = (0, import_core37.isTamaguiElement)(child) ? child.type.staticConfig.componentName : child.type["displayName"];
          switch (name) {
            case TRIGGER_NAME3: {
              triggerElement = React17.cloneElement(child, {
                __native: true
              });
              return false;
            }
            case TITLE_NAME2: {
              title = getStringChildren(child);
              return false;
            }
            case DESCRIPTION_NAME2: {
              description = getStringChildren(child);
              return false;
            }
            case ACTION_NAME:
            case CANCEL_NAME: {
              const style = name === ACTION_NAME ? "default" : "cancel";
              const text = getStringChildren(child);
              const onPress = /* @__PURE__ */ __name(() => {
                var _a;
                const childProps = child.props;
                (_a = childProps == null ? void 0 : childProps.onPress) == null ? void 0 : _a.call(childProps, { native: true });
                setOpen(false);
              }, "onPress");
              buttons.push({
                style,
                text,
                // @ts-ignore
                onPress
              });
              return false;
            }
            default: {
              return true;
            }
          }
        });
        (0, import_core37.useIsomorphicLayoutEffect)(() => {
          if (!open || !native)
            return;
          if (title || description) {
            import_react_native28.Alert.alert(title, description, buttons);
          }
        }, [native, open]);
        if (native) {
          return React17.cloneElement(triggerElement, {
            __onPress: () => {
              setOpen(true);
            }
          });
        }
      }
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_dialog.Dialog, { ...dialogScope, ...alertDialogProps, modal: true });
    }, "AlertDialogInner");
    function forEachChildDeep(children, onChild) {
      for (const child of children) {
        if (!React17.isValidElement(child))
          continue;
        if (!onChild(child))
          continue;
        if (child.props.children) {
          forEachChildDeep(React17.Children.toArray(child.props.children), onChild);
        }
      }
    }
    __name(forEachChildDeep, "forEachChildDeep");
    function getStringChildren(child) {
      let string = "";
      forEachChildDeep(React17.Children.toArray(child), (child2) => {
        if (typeof child2.props.children === "string") {
          string = child2.props.children;
          return false;
        }
        return true;
      });
      return string;
    }
    __name(getStringChildren, "getStringChildren");
    var AlertDialog = (0, import_core37.withStaticProperties)(AlertDialogInner, {
      Trigger: AlertDialogTrigger,
      Portal: AlertDialogPortal,
      Overlay: AlertDialogOverlay,
      Content: AlertDialogContent,
      Action: AlertDialogAction,
      Cancel: AlertDialogCancel,
      Title: AlertDialogTitle,
      Description: AlertDialogDescription
    });
    AlertDialog.displayName = ROOT_NAME;
  }
});

// node_modules/@tamagui/alert-dialog/dist/cjs/index.js
var require_cjs23 = __commonJS({
  "node_modules/@tamagui/alert-dialog/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_AlertDialog(), module2.exports);
  }
});

// node_modules/@tamagui/image/dist/cjs/Image.js
var require_Image = __commonJS({
  "node_modules/@tamagui/image/dist/cjs/Image.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Image_exports = {};
    __export2(Image_exports, {
      Image: () => Image3
    });
    module2.exports = __toCommonJS2(Image_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_core37 = require("@tamagui/core-node");
    var import_react_native28 = require("react-native-web-lite");
    (0, import_core37.setupReactNative)({
      Image: import_react_native28.Image
    });
    var StyledImage = (0, import_core37.styled)(import_react_native28.Image, {
      name: "Image",
      position: "relative",
      source: { uri: "" },
      zIndex: 1
    });
    var Image3 = StyledImage.extractable((inProps) => {
      const props = (0, import_core37.useMediaPropsActive)(inProps);
      const { src, ...rest } = props;
      const source = typeof src === "string" ? { uri: src, ...import_core37.isWeb && { width: props.width, height: props.height } } : src;
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(StyledImage, { source, ...rest });
    });
  }
});

// node_modules/@tamagui/image/dist/cjs/index.js
var require_cjs24 = __commonJS({
  "node_modules/@tamagui/image/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Image(), module2.exports);
  }
});

// node_modules/@tamagui/shapes/dist/cjs/getShapeSize.js
var require_getShapeSize = __commonJS({
  "node_modules/@tamagui/shapes/dist/cjs/getShapeSize.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var getShapeSize_exports = {};
    __export2(getShapeSize_exports, {
      getShapeSize: () => getShapeSize2
    });
    module2.exports = __toCommonJS2(getShapeSize_exports);
    var getShapeSize2 = /* @__PURE__ */ __name((size4, { tokens: tokens2 }) => {
      const width = tokens2.size[size4] ?? size4;
      const height = tokens2.size[size4] ?? size4;
      return {
        width,
        height,
        minWidth: width,
        maxWidth: width,
        maxHeight: height,
        minHeight: height
      };
    }, "getShapeSize");
  }
});

// node_modules/@tamagui/shapes/dist/cjs/Square.js
var require_Square = __commonJS({
  "node_modules/@tamagui/shapes/dist/cjs/Square.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Square_exports = {};
    __export2(Square_exports, {
      Square: () => Square2
    });
    module2.exports = __toCommonJS2(Square_exports);
    var import_stacks8 = require_cjs12();
    var import_web8 = require("@tamagui/core-node");
    var import_getShapeSize = require_getShapeSize();
    var Square2 = (0, import_web8.styled)(import_stacks8.ThemeableStack, {
      name: "Square",
      alignItems: "center",
      justifyContent: "center",
      variants: {
        circular: {
          true: {
            borderRadius: 1e5
          }
        },
        size: {
          "...size": import_getShapeSize.getShapeSize
        }
      }
    });
  }
});

// node_modules/@tamagui/shapes/dist/cjs/Circle.js
var require_Circle = __commonJS({
  "node_modules/@tamagui/shapes/dist/cjs/Circle.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Circle_exports = {};
    __export2(Circle_exports, {
      Circle: () => Circle
    });
    module2.exports = __toCommonJS2(Circle_exports);
    var import_web8 = require("@tamagui/core-node");
    var import_Square = require_Square();
    var Circle = (0, import_web8.styled)(import_Square.Square, {
      name: "Circle",
      circular: true
    });
  }
});

// node_modules/@tamagui/shapes/dist/cjs/index.js
var require_cjs25 = __commonJS({
  "node_modules/@tamagui/shapes/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Square(), module2.exports);
    __reExport2(src_exports, require_Circle(), module2.exports);
    __reExport2(src_exports, require_getShapeSize(), module2.exports);
  }
});

// node_modules/@tamagui/font-size/dist/cjs/getFontSize.js
var require_getFontSize = __commonJS({
  "node_modules/@tamagui/font-size/dist/cjs/getFontSize.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var getFontSize_exports = {};
    __export2(getFontSize_exports, {
      getFontSize: () => getFontSize2,
      getFontSizeToken: () => getFontSizeToken,
      getFontSizeVariable: () => getFontSizeVariable
    });
    module2.exports = __toCommonJS2(getFontSize_exports);
    var import_core37 = require("@tamagui/core-node");
    var getFontSize2 = /* @__PURE__ */ __name((inSize, opts) => {
      const res = getFontSizeVariable(inSize, opts);
      if ((0, import_core37.isVariable)(res)) {
        return +res.val;
      }
      return res ? +res : 16;
    }, "getFontSize");
    var getFontSizeVariable = /* @__PURE__ */ __name((inSize, opts) => {
      const token = getFontSizeToken(inSize, opts);
      if (!token) {
        return inSize;
      }
      const conf = (0, import_core37.getConfig)();
      return conf.fontsParsed[(opts == null ? void 0 : opts.font) || "$body"].size[token];
    }, "getFontSizeVariable");
    var getFontSizeToken = /* @__PURE__ */ __name((inSize, opts) => {
      if (typeof inSize === "number") {
        return null;
      }
      const relativeSize = (opts == null ? void 0 : opts.relativeSize) || 0;
      const conf = (0, import_core37.getConfig)();
      const fontSize = conf.fontsParsed[(opts == null ? void 0 : opts.font) || "$body"].size;
      const size4 = inSize || ("$true" in fontSize ? "$true" : "$4");
      const sizeTokens = Object.keys(fontSize);
      let foundIndex = sizeTokens.indexOf(size4);
      if (foundIndex === -1) {
        if (size4.endsWith(".5")) {
          foundIndex = sizeTokens.indexOf(size4.replace(".5", ""));
        }
      }
      if (process.env.NODE_ENV === "development") {
        if (foundIndex === -1) {
          console.warn("No font size found", size4, opts, "in size tokens", sizeTokens);
        }
      }
      const tokenIndex = Math.min(
        Math.max(0, foundIndex + relativeSize),
        sizeTokens.length - 1
      );
      return sizeTokens[tokenIndex] ?? size4;
    }, "getFontSizeToken");
  }
});

// node_modules/@tamagui/font-size/dist/cjs/index.js
var require_cjs26 = __commonJS({
  "node_modules/@tamagui/font-size/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_getFontSize(), module2.exports);
  }
});

// node_modules/@tamagui/helpers/dist/cjs/clamp.js
var require_clamp = __commonJS({
  "node_modules/@tamagui/helpers/dist/cjs/clamp.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var clamp_exports = {};
    __export2(clamp_exports, {
      clamp: () => clamp2
    });
    module2.exports = __toCommonJS2(clamp_exports);
    function clamp2(value, [min3, max3]) {
      return Math.min(max3, Math.max(min3, value));
    }
    __name(clamp2, "clamp");
  }
});

// node_modules/@tamagui/helpers/dist/cjs/composeEventHandlers.js
var require_composeEventHandlers = __commonJS({
  "node_modules/@tamagui/helpers/dist/cjs/composeEventHandlers.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var composeEventHandlers_exports = {};
    __export2(composeEventHandlers_exports, {
      composeEventHandlers: () => composeEventHandlers3
    });
    module2.exports = __toCommonJS2(composeEventHandlers_exports);
    function composeEventHandlers3(og, next, { checkDefaultPrevented = true } = {}) {
      if (!og || !next) {
        return next || og;
      }
      return /* @__PURE__ */ __name(function composedEventHandler(event) {
        og == null ? void 0 : og(event);
        if (!event || !(checkDefaultPrevented && "defaultPrevented" in event) || // @ts-ignore
        "defaultPrevented" in event && !event.defaultPrevented) {
          return next == null ? void 0 : next(event);
        }
      }, "composedEventHandler");
    }
    __name(composeEventHandlers3, "composeEventHandlers");
  }
});

// node_modules/@tamagui/helpers/dist/cjs/concatClassName.js
var require_concatClassName = __commonJS({
  "node_modules/@tamagui/helpers/dist/cjs/concatClassName.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var concatClassName_exports = {};
    __export2(concatClassName_exports, {
      concatClassName: () => concatClassName
    });
    module2.exports = __toCommonJS2(concatClassName_exports);
    function concatClassName(_cn) {
      const args = arguments;
      const usedPrefixes = [];
      let final = "";
      const len = args.length;
      let propObjects = null;
      for (let x = len; x >= 0; x--) {
        const cns = args[x];
        if (!cns)
          continue;
        if (!Array.isArray(cns) && typeof cns !== "string") {
          propObjects = propObjects || [];
          propObjects.push(cns);
          continue;
        }
        const names2 = Array.isArray(cns) ? cns : cns.split(" ");
        const numNames = names2.length;
        for (let i = numNames - 1; i >= 0; i--) {
          const name = names2[i];
          if (!name || name === " ")
            continue;
          if (name[0] !== "_") {
            final = name + " " + final;
            continue;
          }
          const splitIndex = name.indexOf("-");
          if (splitIndex < 1) {
            final = name + " " + final;
            continue;
          }
          const nextChar = name[splitIndex + 1];
          const isMediaQuery = nextChar === "_";
          const styleKey = name.slice(1, name.lastIndexOf("-"));
          const mediaKey = isMediaQuery ? name.slice(splitIndex + 2, splitIndex + 7) : null;
          const uid = mediaKey ? styleKey + mediaKey : styleKey;
          if (usedPrefixes.indexOf(uid) > -1) {
            continue;
          }
          usedPrefixes.push(uid);
          const propName = styleKey;
          if (propName && propObjects) {
            if (propObjects.some((po) => {
              if (mediaKey) {
                const propKey = pseudoInvert[mediaKey];
                return po && po[propKey] && propName in po[propKey] && po[propKey] !== null;
              }
              const res = po && propName in po && po[propName] !== null;
              return res;
            })) {
              continue;
            }
          }
          final = name + " " + final;
        }
      }
      return final;
    }
    __name(concatClassName, "concatClassName");
    var pseudoInvert = {
      hover: "hoverStyle",
      focus: "focusStyle",
      press: "pressStyle"
    };
  }
});

// node_modules/@tamagui/helpers/dist/cjs/validStyleProps.js
var require_validStyleProps = __commonJS({
  "node_modules/@tamagui/helpers/dist/cjs/validStyleProps.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var validStyleProps_exports = {};
    __export2(validStyleProps_exports, {
      stylePropsAll: () => stylePropsAll,
      stylePropsText: () => stylePropsText,
      stylePropsTextOnly: () => stylePropsTextOnly,
      stylePropsTransform: () => stylePropsTransform,
      stylePropsView: () => stylePropsView,
      validPseudoKeys: () => validPseudoKeys,
      validStyles: () => validStyles,
      validStylesOnBaseProps: () => validStylesOnBaseProps
    });
    module2.exports = __toCommonJS2(validStyleProps_exports);
    var stylePropsTransform = Object.freeze({
      x: true,
      y: true,
      scale: true,
      perspective: true,
      scaleX: true,
      scaleY: true,
      skewX: true,
      skewY: true,
      matrix: true,
      rotate: true,
      rotateY: true,
      rotateX: true,
      rotateZ: true
    });
    var validStylesOnBaseProps = Object.freeze({
      placeholderTextColor: true
    });
    var stylePropsView = Object.freeze({
      backfaceVisibility: true,
      backgroundColor: true,
      borderBottomColor: true,
      borderBottomEndRadius: true,
      borderBottomLeftRadius: true,
      borderBottomRightRadius: true,
      borderBottomStartRadius: true,
      borderBottomWidth: true,
      borderColor: true,
      borderEndColor: true,
      borderLeftColor: true,
      borderLeftWidth: true,
      borderRadius: true,
      borderRightColor: true,
      borderRightWidth: true,
      borderStartColor: true,
      borderStyle: true,
      borderTopColor: true,
      borderTopEndRadius: true,
      borderTopLeftRadius: true,
      borderTopRightRadius: true,
      borderTopStartRadius: true,
      borderTopWidth: true,
      borderWidth: true,
      opacity: true,
      transform: true,
      alignContent: true,
      alignItems: true,
      alignSelf: true,
      aspectRatio: true,
      borderEndWidth: true,
      borderStartWidth: true,
      bottom: true,
      display: true,
      end: true,
      flex: true,
      flexBasis: true,
      flexDirection: true,
      flexGrow: true,
      flexShrink: true,
      flexWrap: true,
      gap: true,
      gapColumn: true,
      gapRow: true,
      height: true,
      justifyContent: true,
      left: true,
      margin: true,
      marginBottom: true,
      marginEnd: true,
      marginHorizontal: true,
      marginLeft: true,
      marginRight: true,
      marginStart: true,
      marginTop: true,
      marginVertical: true,
      maxHeight: true,
      maxWidth: true,
      minHeight: true,
      minWidth: true,
      overflow: true,
      padding: true,
      paddingBottom: true,
      paddingEnd: true,
      paddingHorizontal: true,
      paddingLeft: true,
      paddingRight: true,
      paddingStart: true,
      paddingTop: true,
      paddingVertical: true,
      position: true,
      right: true,
      start: true,
      top: true,
      width: true,
      zIndex: true,
      direction: true,
      shadowColor: true,
      shadowOffset: true,
      shadowOpacity: true,
      shadowRadius: true,
      ...validStylesOnBaseProps,
      ...stylePropsTransform,
      // allow a few web only ones
      ...process.env.TAMAGUI_TARGET === "web" && {
        // RN doesn't support specific border styles per-edge
        borderBottomStyle: true,
        borderTopStyle: true,
        borderLeftStyle: true,
        borderRightStyle: true,
        overflowX: true,
        overflowY: true,
        userSelect: true,
        cursor: true,
        contain: true,
        pointerEvents: true,
        boxSizing: true,
        boxShadow: true,
        outlineColor: true,
        outlineStyle: true,
        outlineOffset: true,
        outlineWidth: true
      }
    });
    var stylePropsTextOnly = Object.freeze({
      color: true,
      fontFamily: true,
      fontSize: true,
      fontStyle: true,
      fontWeight: true,
      letterSpacing: true,
      lineHeight: true,
      textAlign: true,
      textDecorationLine: true,
      textDecorationStyle: true,
      textDecorationColor: true,
      textShadowColor: true,
      textShadowOffset: true,
      textShadowRadius: true,
      textTransform: true,
      // allow some web only ones
      ...process.env.TAMAGUI_TARGET === "web" && {
        whiteSpace: true,
        wordWrap: true,
        textOverflow: true,
        textDecorationDistance: true,
        userSelect: true,
        selectable: true,
        cursor: true,
        WebkitLineClamp: true,
        WebkitBoxOrient: true
      }
    });
    var stylePropsText = Object.freeze({
      ...stylePropsView,
      ...stylePropsTextOnly
    });
    var stylePropsAll = stylePropsText;
    var validPseudoKeys = Object.freeze({
      enterStyle: true,
      exitStyle: true,
      hoverStyle: true,
      pressStyle: true,
      focusStyle: true
    });
    var validStyles = Object.freeze({
      ...validPseudoKeys,
      ...stylePropsView
    });
  }
});

// node_modules/@tamagui/helpers/dist/cjs/types.js
var require_types2 = __commonJS({
  "node_modules/@tamagui/helpers/dist/cjs/types.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var types_exports = {};
    module2.exports = __toCommonJS2(types_exports);
  }
});

// node_modules/@tamagui/simple-hash/dist/cjs/index.js
var require_cjs27 = __commonJS({
  "node_modules/@tamagui/simple-hash/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    __export2(src_exports, {
      isValidCSSCharCode: () => isValidCSSCharCode,
      simpleHash: () => simpleHash
    });
    module2.exports = __toCommonJS2(src_exports);
    var simpleHash = /* @__PURE__ */ __name((str, hashMin = 10) => {
      let hash = 0;
      let valids = "";
      const len = str.length;
      for (let i = 0; i < len; i++) {
        const char = str.charCodeAt(i);
        if (isValidCSSCharCode(char) && len <= hashMin) {
          valids += str[i];
        } else {
          hash = (hash << 5) - hash + char;
          hash &= hash;
        }
      }
      return valids + (hash ? new Uint32Array([hash])[0].toString(36) : "");
    }, "simpleHash");
    function isValidCSSCharCode(code) {
      return (
        // A-Z
        code >= 65 && code <= 90 || // a-z
        code >= 97 && code <= 122 || // _
        code === 95 || // -
        code === 45 || // 0-9
        code >= 48 && code <= 57
      );
    }
    __name(isValidCSSCharCode, "isValidCSSCharCode");
  }
});

// node_modules/@tamagui/helpers/dist/cjs/index.js
var require_cjs28 = __commonJS({
  "node_modules/@tamagui/helpers/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_clamp(), module2.exports);
    __reExport2(src_exports, require_composeEventHandlers(), module2.exports);
    __reExport2(src_exports, require_concatClassName(), module2.exports);
    __reExport2(src_exports, require_validStyleProps(), module2.exports);
    __reExport2(src_exports, require_types2(), module2.exports);
    __reExport2(src_exports, require_cjs27(), module2.exports);
  }
});

// node_modules/@tamagui/helpers-tamagui/dist/cjs/prevent.js
var require_prevent = __commonJS({
  "node_modules/@tamagui/helpers-tamagui/dist/cjs/prevent.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var prevent_exports = {};
    __export2(prevent_exports, {
      prevent: () => prevent
    });
    module2.exports = __toCommonJS2(prevent_exports);
    var prevent = /* @__PURE__ */ __name((e) => [e.preventDefault(), e.stopPropagation()], "prevent");
  }
});

// node_modules/@tamagui/helpers-tamagui/dist/cjs/getSpace.js
var require_getSpace = __commonJS({
  "node_modules/@tamagui/helpers-tamagui/dist/cjs/getSpace.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var getSpace_exports = {};
    __export2(getSpace_exports, {
      getSpace: () => getSpace
    });
    module2.exports = __toCommonJS2(getSpace_exports);
    var import_core37 = require("@tamagui/core-node");
    var getSpace = /* @__PURE__ */ __name((token, sizeUpOrDownBy = 0) => {
      const spaces2 = (0, import_core37.getTokens)().space;
      const spaceNames = Object.keys(spaces2);
      const key = spaceNames[Math.max(0, spaceNames.indexOf(String(token || "$true")) + sizeUpOrDownBy)];
      return spaces2[key] || spaces2["$true"];
    }, "getSpace");
  }
});

// node_modules/@tamagui/helpers-tamagui/dist/cjs/useCurrentColor.js
var require_useCurrentColor = __commonJS({
  "node_modules/@tamagui/helpers-tamagui/dist/cjs/useCurrentColor.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var useCurrentColor_exports = {};
    __export2(useCurrentColor_exports, {
      useCurrentColor: () => useCurrentColor
    });
    module2.exports = __toCommonJS2(useCurrentColor_exports);
    var import_core37 = require("@tamagui/core-node");
    var useCurrentColor = /* @__PURE__ */ __name((colorProp) => {
      const theme = (0, import_core37.useTheme)();
      return (0, import_core37.variableToString)(theme[colorProp] || colorProp || theme.color);
    }, "useCurrentColor");
  }
});

// node_modules/@tamagui/helpers-tamagui/dist/cjs/useGetThemedIcon.js
var require_useGetThemedIcon = __commonJS({
  "node_modules/@tamagui/helpers-tamagui/dist/cjs/useGetThemedIcon.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var useGetThemedIcon_exports = {};
    __export2(useGetThemedIcon_exports, {
      useGetThemedIcon: () => useGetThemedIcon2
    });
    module2.exports = __toCommonJS2(useGetThemedIcon_exports);
    var import_react30 = require("react");
    var import_useCurrentColor = require_useCurrentColor();
    var useGetThemedIcon2 = /* @__PURE__ */ __name((props) => {
      const color3 = (0, import_useCurrentColor.useCurrentColor)(props.color);
      return (el) => {
        if (!el)
          return el;
        if ((0, import_react30.isValidElement)(el)) {
          return (0, import_react30.cloneElement)(el, {
            ...props,
            // @ts-expect-error
            ...el.props
          });
        }
        return (0, import_react30.createElement)(el, props);
      };
    }, "useGetThemedIcon");
  }
});

// node_modules/@tamagui/helpers-tamagui/dist/cjs/index.js
var require_cjs29 = __commonJS({
  "node_modules/@tamagui/helpers-tamagui/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_cjs28(), module2.exports);
    __reExport2(src_exports, require_prevent(), module2.exports);
    __reExport2(src_exports, require_getSpace(), module2.exports);
    __reExport2(src_exports, require_useCurrentColor(), module2.exports);
    __reExport2(src_exports, require_useGetThemedIcon(), module2.exports);
  }
});

// node_modules/performant-array-to-tree/build/arrayToTree.min.js
var require_arrayToTree_min = __commonJS({
  "node_modules/performant-array-to-tree/build/arrayToTree.min.js"(exports) {
    "use strict";
    var __assign2 = exports && exports.__assign || function() {
      return (__assign2 = Object.assign || function(e) {
        for (var r, t = 1, n = arguments.length; t < n; t++)
          for (var o in r = arguments[t])
            Object.prototype.hasOwnProperty.call(r, o) && (e[o] = r[o]);
        return e;
      }).apply(this, arguments);
    };
    var defaultConfig = (Object.defineProperty(exports, "__esModule", { value: true }), { id: "id", parentId: "parentId", dataField: "data", childrenField: "children", throwIfOrphans: false, rootParentIds: { "": !(exports.countNodes = exports.arrayToTree = void 0) }, nestedIds: true, assign: false });
    function arrayToTree(c, e) {
      void 0 === e && (e = {});
      for (var r, t = __assign2(__assign2({}, defaultConfig), e), n = [], o = {}, a = t.throwIfOrphans ? /* @__PURE__ */ new Set() : null, s = 0, h = c; s < h.length; s++) {
        var i = h[s], d = t.nestedIds ? getNestedProperty(i, t.id) : i[t.id], l = t.nestedIds ? getNestedProperty(i, t.parentId) : i[t.parentId];
        if (t.rootParentIds[d])
          throw new Error("The item array contains a node whose parentId both exists in another node and is in " + '`rootParentIds` (`itemId`: "'.concat(d, '", `rootParentIds`: ').concat(Object.keys(t.rootParentIds).map(function(e2) {
            return '"'.concat(e2, '"');
          }).join(", "), ")."));
        Object.prototype.hasOwnProperty.call(o, d) || (o[d] = ((r = {})[t.childrenField] = [], r)), a && a.delete(d), t.dataField ? o[d][t.dataField] = i : t.assign ? o[d] = Object.assign(i, ((r = {})[t.childrenField] = o[d][t.childrenField], r)) : o[d] = __assign2(__assign2({}, i), ((i = {})[t.childrenField] = o[d][t.childrenField], i));
        i = o[d];
        null == l || t.rootParentIds[l] ? n.push(i) : (Object.prototype.hasOwnProperty.call(o, l) || (o[l] = ((d = {})[t.childrenField] = [], d), a && a.add(l)), o[l][t.childrenField].push(i));
      }
      if (null != a && a.size)
        throw new Error("The items array contains orphans that point to the following parentIds: " + "[".concat(Array.from(a), "]. These parentIds do not exist in the items array. Hint: prevent orphans to result ") + "in an error by passing the following option: { throwIfOrphans: false }");
      if (t.throwIfOrphans && countNodes(n, t.childrenField) < Object.keys(o).length)
        throw new Error("The items array contains nodes with a circular parent/child relationship.");
      return n;
    }
    __name(arrayToTree, "arrayToTree");
    function countNodes(e, t) {
      return e.reduce(function(e2, r) {
        return e2 + 1 + (r[t] && countNodes(r[t], t));
      }, 0);
    }
    __name(countNodes, "countNodes");
    function getNestedProperty(e, r) {
      return r.split(".").reduce(function(e2, r2) {
        return e2 && e2[r2];
      }, e);
    }
    __name(getNestedProperty, "getNestedProperty");
    exports.arrayToTree = arrayToTree, exports.countNodes = countNodes;
  }
});

// node_modules/zustand/esm/vanilla.mjs
var import_meta, createStoreImpl, createStore;
var init_vanilla = __esm({
  "node_modules/zustand/esm/vanilla.mjs"() {
    import_meta = {};
    createStoreImpl = /* @__PURE__ */ __name((createState) => {
      let state;
      const listeners = /* @__PURE__ */ new Set();
      const setState = /* @__PURE__ */ __name((partial, replace) => {
        const nextState = typeof partial === "function" ? partial(state) : partial;
        if (!Object.is(nextState, state)) {
          const previousState = state;
          state = (replace != null ? replace : typeof nextState !== "object" || nextState === null) ? nextState : Object.assign({}, state, nextState);
          listeners.forEach((listener3) => listener3(state, previousState));
        }
      }, "setState");
      const getState2 = /* @__PURE__ */ __name(() => state, "getState");
      const getInitialState = /* @__PURE__ */ __name(() => initialState, "getInitialState");
      const subscribe = /* @__PURE__ */ __name((listener3) => {
        listeners.add(listener3);
        return () => listeners.delete(listener3);
      }, "subscribe");
      const destroy = /* @__PURE__ */ __name(() => {
        if ((import_meta.env ? import_meta.env.MODE : void 0) !== "production") {
          console.warn(
            "[DEPRECATED] The `destroy` method will be unsupported in a future version. Instead use unsubscribe function returned by subscribe. Everything will be garbage-collected if store is garbage-collected."
          );
        }
        listeners.clear();
      }, "destroy");
      const api = { setState, getState: getState2, getInitialState, subscribe, destroy };
      const initialState = state = createState(setState, getState2, api);
      return api;
    }, "createStoreImpl");
    createStore = /* @__PURE__ */ __name((createState) => createState ? createStoreImpl(createState) : createStoreImpl, "createStore");
  }
});

// node_modules/zustand/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js
var require_use_sync_external_store_shim_production_min = __commonJS({
  "node_modules/zustand/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js"(exports) {
    "use strict";
    var e = require("react");
    function h(a, b) {
      return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
    }
    __name(h, "h");
    var k = "function" === typeof Object.is ? Object.is : h;
    var l = e.useState;
    var m = e.useEffect;
    var n = e.useLayoutEffect;
    var p = e.useDebugValue;
    function q(a, b) {
      var d = b(), f = l({ inst: { value: d, getSnapshot: b } }), c = f[0].inst, g = f[1];
      n(function() {
        c.value = d;
        c.getSnapshot = b;
        r(c) && g({ inst: c });
      }, [a, d, b]);
      m(function() {
        r(c) && g({ inst: c });
        return a(function() {
          r(c) && g({ inst: c });
        });
      }, [a]);
      p(d);
      return d;
    }
    __name(q, "q");
    function r(a) {
      var b = a.getSnapshot;
      a = a.value;
      try {
        var d = b();
        return !k(a, d);
      } catch (f) {
        return true;
      }
    }
    __name(r, "r");
    function t(a, b) {
      return b();
    }
    __name(t, "t");
    var u = "undefined" === typeof window || "undefined" === typeof window.document || "undefined" === typeof window.document.createElement ? t : q;
    exports.useSyncExternalStore = void 0 !== e.useSyncExternalStore ? e.useSyncExternalStore : u;
  }
});

// node_modules/zustand/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js
var require_use_sync_external_store_shim_development = __commonJS({
  "node_modules/zustand/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim.development.js"(exports) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React17 = require("react");
        var ReactSharedInternals = React17.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        function error(format) {
          {
            {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        __name(error, "error");
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        __name(printWarning, "printWarning");
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        __name(is, "is");
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var useState6 = React17.useState, useEffect18 = React17.useEffect, useLayoutEffect4 = React17.useLayoutEffect, useDebugValue2 = React17.useDebugValue;
        var didWarnOld18Alpha = false;
        var didWarnUncachedGetSnapshot = false;
        function useSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          {
            if (!didWarnOld18Alpha) {
              if (React17.startTransition !== void 0) {
                didWarnOld18Alpha = true;
                error("You are using an outdated, pre-release alpha of React 18 that does not support useSyncExternalStore. The use-sync-external-store shim will not work correctly. Upgrade to a newer pre-release.");
              }
            }
          }
          var value = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedValue = getSnapshot();
              if (!objectIs(value, cachedValue)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var _useState = useState6({
            inst: {
              value,
              getSnapshot
            }
          }), inst = _useState[0].inst, forceUpdate = _useState[1];
          useLayoutEffect4(function() {
            inst.value = value;
            inst.getSnapshot = getSnapshot;
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
          }, [subscribe, value, getSnapshot]);
          useEffect18(function() {
            if (checkIfSnapshotChanged(inst)) {
              forceUpdate({
                inst
              });
            }
            var handleStoreChange = /* @__PURE__ */ __name(function() {
              if (checkIfSnapshotChanged(inst)) {
                forceUpdate({
                  inst
                });
              }
            }, "handleStoreChange");
            return subscribe(handleStoreChange);
          }, [subscribe]);
          useDebugValue2(value);
          return value;
        }
        __name(useSyncExternalStore, "useSyncExternalStore");
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        __name(checkIfSnapshotChanged, "checkIfSnapshotChanged");
        function useSyncExternalStore$1(subscribe, getSnapshot, getServerSnapshot) {
          return getSnapshot();
        }
        __name(useSyncExternalStore$1, "useSyncExternalStore$1");
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var isServerEnvironment = !canUseDOM;
        var shim = isServerEnvironment ? useSyncExternalStore$1 : useSyncExternalStore;
        var useSyncExternalStore$2 = React17.useSyncExternalStore !== void 0 ? React17.useSyncExternalStore : shim;
        exports.useSyncExternalStore = useSyncExternalStore$2;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/zustand/node_modules/use-sync-external-store/shim/index.js
var require_shim = __commonJS({
  "node_modules/zustand/node_modules/use-sync-external-store/shim/index.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_use_sync_external_store_shim_production_min();
    } else {
      module2.exports = require_use_sync_external_store_shim_development();
    }
  }
});

// node_modules/zustand/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.production.min.js
var require_with_selector_production_min = __commonJS({
  "node_modules/zustand/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.production.min.js"(exports) {
    "use strict";
    var h = require("react");
    var n = require_shim();
    function p(a, b) {
      return a === b && (0 !== a || 1 / a === 1 / b) || a !== a && b !== b;
    }
    __name(p, "p");
    var q = "function" === typeof Object.is ? Object.is : p;
    var r = n.useSyncExternalStore;
    var t = h.useRef;
    var u = h.useEffect;
    var v = h.useMemo;
    var w = h.useDebugValue;
    exports.useSyncExternalStoreWithSelector = function(a, b, e, l, g) {
      var c = t(null);
      if (null === c.current) {
        var f = { hasValue: false, value: null };
        c.current = f;
      } else
        f = c.current;
      c = v(function() {
        function a2(a3) {
          if (!c2) {
            c2 = true;
            d2 = a3;
            a3 = l(a3);
            if (void 0 !== g && f.hasValue) {
              var b2 = f.value;
              if (g(b2, a3))
                return k = b2;
            }
            return k = a3;
          }
          b2 = k;
          if (q(d2, a3))
            return b2;
          var e2 = l(a3);
          if (void 0 !== g && g(b2, e2))
            return b2;
          d2 = a3;
          return k = e2;
        }
        __name(a2, "a");
        var c2 = false, d2, k, m = void 0 === e ? null : e;
        return [function() {
          return a2(b());
        }, null === m ? void 0 : function() {
          return a2(m());
        }];
      }, [b, e, l, g]);
      var d = r(a, c[0], c[1]);
      u(function() {
        f.hasValue = true;
        f.value = d;
      }, [d]);
      w(d);
      return d;
    };
  }
});

// node_modules/zustand/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js
var require_with_selector_development = __commonJS({
  "node_modules/zustand/node_modules/use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js"(exports) {
    "use strict";
    if (process.env.NODE_ENV !== "production") {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React17 = require("react");
        var shim = require_shim();
        function is(x, y) {
          return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
        }
        __name(is, "is");
        var objectIs = typeof Object.is === "function" ? Object.is : is;
        var useSyncExternalStore = shim.useSyncExternalStore;
        var useRef18 = React17.useRef, useEffect18 = React17.useEffect, useMemo3 = React17.useMemo, useDebugValue2 = React17.useDebugValue;
        function useSyncExternalStoreWithSelector2(subscribe, getSnapshot, getServerSnapshot, selector, isEqual) {
          var instRef = useRef18(null);
          var inst;
          if (instRef.current === null) {
            inst = {
              hasValue: false,
              value: null
            };
            instRef.current = inst;
          } else {
            inst = instRef.current;
          }
          var _useMemo = useMemo3(function() {
            var hasMemo = false;
            var memoizedSnapshot;
            var memoizedSelection;
            var memoizedSelector = /* @__PURE__ */ __name(function(nextSnapshot) {
              if (!hasMemo) {
                hasMemo = true;
                memoizedSnapshot = nextSnapshot;
                var _nextSelection = selector(nextSnapshot);
                if (isEqual !== void 0) {
                  if (inst.hasValue) {
                    var currentSelection = inst.value;
                    if (isEqual(currentSelection, _nextSelection)) {
                      memoizedSelection = currentSelection;
                      return currentSelection;
                    }
                  }
                }
                memoizedSelection = _nextSelection;
                return _nextSelection;
              }
              var prevSnapshot = memoizedSnapshot;
              var prevSelection = memoizedSelection;
              if (objectIs(prevSnapshot, nextSnapshot)) {
                return prevSelection;
              }
              var nextSelection = selector(nextSnapshot);
              if (isEqual !== void 0 && isEqual(prevSelection, nextSelection)) {
                return prevSelection;
              }
              memoizedSnapshot = nextSnapshot;
              memoizedSelection = nextSelection;
              return nextSelection;
            }, "memoizedSelector");
            var maybeGetServerSnapshot = getServerSnapshot === void 0 ? null : getServerSnapshot;
            var getSnapshotWithSelector = /* @__PURE__ */ __name(function() {
              return memoizedSelector(getSnapshot());
            }, "getSnapshotWithSelector");
            var getServerSnapshotWithSelector = maybeGetServerSnapshot === null ? void 0 : function() {
              return memoizedSelector(maybeGetServerSnapshot());
            };
            return [getSnapshotWithSelector, getServerSnapshotWithSelector];
          }, [getSnapshot, getServerSnapshot, selector, isEqual]), getSelection = _useMemo[0], getServerSelection = _useMemo[1];
          var value = useSyncExternalStore(subscribe, getSelection, getServerSelection);
          useEffect18(function() {
            inst.hasValue = true;
            inst.value = value;
          }, [value]);
          useDebugValue2(value);
          return value;
        }
        __name(useSyncExternalStoreWithSelector2, "useSyncExternalStoreWithSelector");
        exports.useSyncExternalStoreWithSelector = useSyncExternalStoreWithSelector2;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/zustand/node_modules/use-sync-external-store/shim/with-selector.js
var require_with_selector = __commonJS({
  "node_modules/zustand/node_modules/use-sync-external-store/shim/with-selector.js"(exports, module2) {
    "use strict";
    if (process.env.NODE_ENV === "production") {
      module2.exports = require_with_selector_production_min();
    } else {
      module2.exports = require_with_selector_development();
    }
  }
});

// node_modules/zustand/esm/index.js
var esm_exports = {};
__export(esm_exports, {
  create: () => create,
  createStore: () => createStore,
  default: () => react2,
  useStore: () => useStore
});
function useStore(api, selector = identity, equalityFn) {
  if (process.env.NODE_ENV !== "production" && equalityFn && !didWarnAboutEqualityFn) {
    console.warn(
      "[DEPRECATED] Use `createWithEqualityFn` instead of `create` or use `useStoreWithEqualityFn` instead of `useStore`. They can be imported from 'zustand/traditional'. https://github.com/pmndrs/zustand/discussions/1937"
    );
    didWarnAboutEqualityFn = true;
  }
  const slice = useSyncExternalStoreWithSelector(
    api.subscribe,
    api.getState,
    api.getServerState || api.getInitialState,
    selector,
    equalityFn
  );
  useDebugValue(slice);
  return slice;
}
var import_react7, import_with_selector, useDebugValue, useSyncExternalStoreWithSelector, didWarnAboutEqualityFn, identity, createImpl, create, react2;
var init_esm = __esm({
  "node_modules/zustand/esm/index.js"() {
    init_vanilla();
    init_vanilla();
    import_react7 = __toESM(require("react"));
    import_with_selector = __toESM(require_with_selector());
    ({ useDebugValue } = import_react7.default);
    ({ useSyncExternalStoreWithSelector } = import_with_selector.default);
    didWarnAboutEqualityFn = false;
    identity = /* @__PURE__ */ __name((arg) => arg, "identity");
    __name(useStore, "useStore");
    createImpl = /* @__PURE__ */ __name((createState) => {
      if (process.env.NODE_ENV !== "production" && typeof createState !== "function") {
        console.warn(
          "[DEPRECATED] Passing a vanilla store will be unsupported in a future version. Instead use `import { useStore } from 'zustand'`."
        );
      }
      const api = typeof createState === "function" ? createStore(createState) : createState;
      const useBoundStore = /* @__PURE__ */ __name((selector, equalityFn) => useStore(api, selector, equalityFn), "useBoundStore");
      Object.assign(useBoundStore, api);
      return useBoundStore;
    }, "createImpl");
    create = /* @__PURE__ */ __name((createState) => createState ? createImpl(createState) : createImpl, "create");
    react2 = /* @__PURE__ */ __name((createState) => {
      if (process.env.NODE_ENV !== "production") {
        console.warn(
          "[DEPRECATED] Default export is deprecated. Instead use `import { create } from 'zustand'`."
        );
      }
      return create(createState);
    }, "react");
  }
});

// node_modules/reforest/dist/index.js
var require_dist3 = __commonJS({
  "node_modules/reforest/dist/index.js"(exports, module2) {
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    __export2(src_exports, {
      cleanAndSortTree: () => cleanAndSortTree,
      compareIndexPaths: () => compareIndexPaths,
      flattenChildren: () => flattenChildren,
      mapToChildren: () => mapToChildren,
      parseIndexPath: () => parseIndexPath,
      sortMapByIndexPath: () => sortMapByIndexPath,
      useIndex: () => useIndex,
      useIndexedChildren: () => useIndexedChildren,
      useRovingIndex: () => useRovingIndex,
      useTree: () => useTree,
      useTreeNode: () => useTreeNode,
      useTreeState: () => useTreeState
    });
    module2.exports = __toCommonJS2(src_exports);
    var React32 = __toESM2(require("react"));
    var React17 = __toESM2(require("react"));
    var PrerenderContext = React17.createContext(false);
    PrerenderContext.displayName = "PrerenderContext";
    var MaxIndexContext = React17.createContext([]);
    MaxIndexContext.displayName = "MaxIndexContext";
    var IndexContext = React17.createContext(null);
    IndexContext.displayName = "IndexContext";
    var TreeStateContext = React17.createContext(null);
    TreeStateContext.displayName = "TreeStateContext";
    var React22 = __toESM2(require("react"));
    var import_performant_array_to_tree = require_arrayToTree_min();
    var isServer2 = typeof window === "undefined";
    var useIsomorphicLayoutEffect3 = isServer2 ? React22.useEffect : React22.useLayoutEffect;
    function parseIndexPath(indexPathString) {
      return indexPathString.split(".").map((index3) => parseInt(index3, 10));
    }
    __name(parseIndexPath, "parseIndexPath");
    function compareIndexPaths(a = "", b = "") {
      var _a, _b;
      let aArray = a.split(".").map(Number);
      let bArray = b.split(".").map(Number);
      if (aArray.includes(NaN) || bArray.includes(NaN)) {
        throw new Error("Version contains parts that are not numbers");
      }
      const maxLength = Math.max(a.length, b.length);
      for (let index3 = 0; index3 < maxLength; index3++) {
        const difference = ((_a = aArray[index3]) != null ? _a : 0) - ((_b = bArray[index3]) != null ? _b : 0);
        if (difference === 0) {
          continue;
        }
        return difference > 0 ? 1 : -1;
      }
      return 0;
    }
    __name(compareIndexPaths, "compareIndexPaths");
    function cleanAndSortTree(tree) {
      var _a;
      if (((_a = tree.children) == null ? void 0 : _a.length) > 0) {
        tree.children.sort((a, b) => compareIndexPaths(a.indexPathString, b.indexPathString));
        return {
          ...tree.data,
          children: tree.children.map(cleanAndSortTree)
        };
      }
      return tree.data;
    }
    __name(cleanAndSortTree, "cleanAndSortTree");
    function mapToChildren(dataMap) {
      const parsedValues = Array.from(dataMap.entries()).map(([indexPathString, data]) => {
        const parentIndexPathString = parseIndexPath(indexPathString).slice(0, -1).join(".");
        return {
          data,
          parentId: parentIndexPathString,
          id: indexPathString
        };
      });
      const tree = (0, import_performant_array_to_tree.arrayToTree)(parsedValues, { dataField: null });
      const cleanedTree = cleanAndSortTree({ children: tree });
      return cleanedTree ? cleanedTree.children : [];
    }
    __name(mapToChildren, "mapToChildren");
    function sortMapByIndexPath(treeMap) {
      const sortedEntries = Array.from(treeMap.entries()).sort((a, b) => compareIndexPaths(a[0], b[0]));
      return new Map(sortedEntries);
    }
    __name(sortMapByIndexPath, "sortMapByIndexPath");
    function flattenChildren(children) {
      const flatChildren = children.flatMap(
        (child) => child.children ? flattenChildren(child.children) : [child]
      );
      return flatChildren;
    }
    __name(flattenChildren, "flattenChildren");
    function useIndex() {
      const maxIndexPath = React32.useContext(MaxIndexContext);
      const indexPathString = React32.useContext(IndexContext);
      return React32.useMemo(() => {
        if (indexPathString === null) {
          return null;
        }
        const indexPath = parseIndexPath(indexPathString);
        const maxIndex = maxIndexPath[maxIndexPath.length - 1];
        const index3 = indexPath[indexPath.length - 1];
        return {
          maxIndex,
          maxIndexPath,
          index: index3,
          indexPath,
          indexPathString,
          isFirst: index3 === 0,
          isLast: index3 === maxIndex,
          isEven: index3 % 2 === 0,
          isOdd: Math.abs(index3 % 2) === 1
        };
      }, [maxIndexPath, indexPathString]);
    }
    __name(useIndex, "useIndex");
    function useIndexedChildren(children) {
      const parentMaxIndexPath = React32.useContext(MaxIndexContext);
      const indexPathString = React32.useContext(IndexContext);
      const childrenCount = React32.Children.count(children);
      const maxIndexPath = React32.useMemo(
        () => parentMaxIndexPath.concat(childrenCount - 1),
        [childrenCount]
      );
      return /* @__PURE__ */ React32.createElement(MaxIndexContext.Provider, { value: maxIndexPath }, React32.Children.map(
        children,
        (child, index3) => React32.isValidElement(child) ? /* @__PURE__ */ React32.createElement(
          IndexContext.Provider,
          {
            key: child.key,
            value: indexPathString ? `${indexPathString}.${index3.toString()}` : index3.toString()
          },
          child
        ) : child
      ));
    }
    __name(useIndexedChildren, "useIndexedChildren");
    var React42 = __toESM2(require("react"));
    function useRovingIndex({
      contain = true,
      defaultIndex = 0,
      maxIndex = Infinity,
      wrap = false
    }) {
      const [activeIndex, setLocalActiveIndex] = React42.useState(defaultIndex);
      const getNextIndex = React42.useCallback(
        (nextIndex) => {
          if (wrap) {
            return (nextIndex % maxIndex + maxIndex) % maxIndex;
          }
          if (contain) {
            return nextIndex > maxIndex ? maxIndex : nextIndex < 0 ? 0 : nextIndex;
          }
          return nextIndex;
        },
        [maxIndex, wrap]
      );
      const moveActiveIndex = React42.useCallback(
        (amountToMove) => {
          setLocalActiveIndex((currentIndex) => getNextIndex(currentIndex + amountToMove));
        },
        [getNextIndex]
      );
      const setActiveIndex = React42.useCallback(
        (nextIndex) => {
          setLocalActiveIndex(getNextIndex(nextIndex));
        },
        [getNextIndex]
      );
      const moveBackward = React42.useCallback(() => moveActiveIndex(-1), [moveActiveIndex]);
      const moveForward = React42.useCallback(() => moveActiveIndex(1), [moveActiveIndex]);
      return {
        activeIndex,
        moveActiveIndex,
        setActiveIndex,
        moveBackward,
        moveForward,
        moveBackwardDisabled: activeIndex <= 0,
        moveForwardDisabled: activeIndex >= maxIndex
      };
    }
    __name(useRovingIndex, "useRovingIndex");
    var React52 = __toESM2(require("react"));
    var import_zustand = (init_esm(), __toCommonJS(esm_exports));
    function useTreeState(selector) {
      const treeStateContext = React52.useContext(TreeStateContext);
      const [treeState] = React52.useState(
        () => treeStateContext || (0, import_zustand.create)((set, get) => ({
          treeMap: /* @__PURE__ */ new Map(),
          prerenderedTreeIds: /* @__PURE__ */ new Map(),
          shouldPrerender: true,
          setTreeData: (id, data) => {
            const { treeMap } = get();
            treeMap.set(id, data);
            set({ treeMap: sortMapByIndexPath(treeMap) });
          },
          deleteTreeData: (id) => {
            const { treeMap } = get();
            treeMap.delete(id);
            set({ treeMap: sortMapByIndexPath(treeMap) });
          }
        }))
      );
      return selector ? treeState(selector) : treeState;
    }
    __name(useTreeState, "useTreeState");
    function PrerenderTree({ children }) {
      const treeState = useTreeState();
      const shouldPrerender = treeState((state) => state.shouldPrerender);
      useIsomorphicLayoutEffect3(() => {
        treeState.setState({
          prerenderedTreeIds: /* @__PURE__ */ new Map(),
          shouldPrerender: false
        });
      }, []);
      return shouldPrerender ? /* @__PURE__ */ React52.createElement(PrerenderContext.Provider, { value: true }, children) : null;
    }
    __name(PrerenderTree, "PrerenderTree");
    function useTree(children, treeState) {
      const treeStateContext = React52.useContext(TreeStateContext);
      const treeStateLocal = useTreeState();
      const parsedTreeState = treeStateContext || treeState || treeStateLocal;
      const isPrerender = React52.useContext(PrerenderContext);
      const isRoot = treeStateContext === null;
      const indexedChildren = useIndexedChildren(children);
      const childrenToRender = isRoot ? /* @__PURE__ */ React52.createElement(TreeStateContext.Provider, { value: parsedTreeState }, /* @__PURE__ */ React52.createElement(PrerenderTree, null, indexedChildren), indexedChildren) : indexedChildren;
      return {
        children: childrenToRender,
        useStore: parsedTreeState,
        isPrerender,
        isRoot
      };
    }
    __name(useTree, "useTree");
    function useTreeNode(getData, dependencies = []) {
      const isPrerender = React52.useContext(PrerenderContext);
      const treeStateContext = React52.useContext(TreeStateContext);
      if (treeStateContext === null) {
        throw new Error("useTreeNode must be used in a descendant component of useTree.");
      }
      const { deleteTreeData, prerenderedTreeIds, setTreeData, treeMap } = treeStateContext.getState();
      const { indexPathString } = useIndex();
      const generatedId = React52.useId().slice(1, -1);
      const treeId = prerenderedTreeIds.get(indexPathString) || generatedId;
      const treeData = React52.useMemo(
        () => Object.assign({ treeId }, getData()),
        dependencies.concat(treeId)
      );
      if (isPrerender) {
        treeMap.set(indexPathString, treeData);
        prerenderedTreeIds.set(indexPathString, treeId);
      } else {
        React52.useEffect(() => {
          setTreeData(indexPathString, treeData);
          return () => {
            deleteTreeData(indexPathString);
          };
        }, [indexPathString, treeData]);
      }
      return {
        id: treeId,
        data: treeData,
        indexPathString,
        isPrerender
      };
    }
    __name(useTreeNode, "useTreeNode");
  }
});

// node_modules/@tamagui/group/dist/cjs/Group.js
var require_Group = __commonJS({
  "node_modules/@tamagui/group/dist/cjs/Group.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Group_exports = {};
    __export2(Group_exports, {
      Group: () => Group,
      GroupFrame: () => GroupFrame,
      XGroup: () => XGroup,
      YGroup: () => YGroup,
      useGroupItem: () => useGroupItem
    });
    module2.exports = __toCommonJS2(Group_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_core37 = require("@tamagui/core-node");
    var import_create_context5 = require_cjs3();
    var import_stacks8 = require_cjs12();
    var import_use_controllable_state2 = require_cjs16();
    var import_react30 = __toESM2(require("react"));
    var import_react_native28 = require("react-native-web-lite");
    var import_reforest = require_dist3();
    var GROUP_NAME = "Group";
    var [createGroupContext, createGroupScope] = (0, import_create_context5.createContextScope)(GROUP_NAME);
    var [GroupProvider, useGroupContext] = createGroupContext(GROUP_NAME);
    var GroupFrame = (0, import_core37.styled)(import_stacks8.ThemeableStack, {
      name: "GroupFrame",
      variants: {
        unstyled: {
          false: {
            size: "$true",
            y: 0,
            backgroundColor: "$background"
          }
        },
        size: (val2, { tokens: tokens2 }) => {
          const borderRadius = tokens2.radius[val2] ?? val2 ?? tokens2.radius["$true"];
          return {
            borderRadius
          };
        }
      },
      defaultVariants: {
        unstyled: false
      }
    });
    function createGroup(verticalDefault) {
      return (0, import_core37.withStaticProperties)(
        (0, import_react30.forwardRef)((props, ref) => {
          const activeProps = (0, import_core37.useMediaPropsActive)(props);
          const {
            __scopeGroup,
            children: childrenProp,
            space: space2,
            size: size4 = "$true",
            spaceDirection,
            separator,
            scrollable,
            axis = verticalDefault ? "vertical" : "horizontal",
            disabled: disabledProp,
            disablePassBorderRadius: disablePassBorderRadiusProp,
            borderRadius,
            forceUseItem,
            ...restProps
          } = (0, import_core37.getExpandedShorthands)(activeProps);
          const vertical = axis === "vertical";
          const [itemChildrenCount, setItemChildrenCount] = (0, import_use_controllable_state2.useControllableState)({
            defaultProp: forceUseItem ? 1 : 0
          });
          const isUsingItems = true;
          const radius2 = borderRadius ?? (size4 ? (0, import_core37.getVariableValue)((0, import_core37.getTokens)().radius[size4]) - 1 : void 0);
          const hasRadius = radius2 !== void 0;
          const disablePassBorderRadius = disablePassBorderRadiusProp ?? !hasRadius;
          if (!isUsingItems)
            console.log("screw up!");
          const childrenArray = import_react30.Children.toArray(childrenProp);
          const children = isUsingItems ? childrenProp : childrenArray.map((child, i) => {
            if (!(0, import_react30.isValidElement)(child)) {
              return child;
            }
            const disabled = child.props.disabled ?? disabledProp;
            const isFirst = i === 0;
            const isLast = i === childrenArray.length - 1;
            const radiusStyles = disablePassBorderRadius === true ? null : getBorderRadius({
              isFirst,
              isLast,
              radius: radius2,
              vertical,
              disable: disablePassBorderRadius
            });
            const props2 = {
              disabled,
              ...(0, import_core37.isTamaguiElement)(child) ? radiusStyles : { style: radiusStyles }
            };
            return cloneElementWithPropOrder(child, props2);
          });
          const indexedChildren = (0, import_reforest.useIndexedChildren)(
            (0, import_core37.spacedChildren)({
              direction: spaceDirection,
              separator,
              space: space2,
              children
            })
          );
          const onItemMount = import_react30.default.useCallback(
            () => setItemChildrenCount((prev) => prev + 1),
            []
          );
          const onItemUnmount = import_react30.default.useCallback(
            () => setItemChildrenCount((prev) => prev - 1),
            []
          );
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            GroupProvider,
            {
              disablePassBorderRadius,
              vertical: axis === "vertical",
              radius: radius2,
              disabled: disabledProp,
              onItemMount,
              onItemUnmount,
              scope: __scopeGroup,
              children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
                GroupFrame,
                {
                  ref,
                  size: size4,
                  flexDirection: axis === "horizontal" ? "row" : "column",
                  borderRadius,
                  ...restProps,
                  children: wrapScroll({ ...activeProps, axis }, indexedChildren)
                }
              )
            }
          );
        }),
        {
          Item: GroupItem
        }
      );
    }
    __name(createGroup, "createGroup");
    var GroupItem = /* @__PURE__ */ __name((props) => {
      var _a;
      const { __scopeGroup, children } = props;
      const groupItemProps = useGroupItem(
        { disabled: (0, import_react30.isValidElement)(children) ? children.props.disabled : void 0 },
        __scopeGroup
      );
      if (!(0, import_react30.isValidElement)(children)) {
        return children;
      }
      if ((0, import_core37.isTamaguiElement)(children)) {
        return import_react30.default.cloneElement(children, groupItemProps);
      }
      return import_react30.default.cloneElement(children, {
        style: {
          ...(_a = children.props) == null ? void 0 : _a["style"],
          ...groupItemProps
        }
      });
    }, "GroupItem");
    var useGroupItem = /* @__PURE__ */ __name((childrenProps, __scopeGroup) => {
      const treeIndex = (0, import_reforest.useIndex)();
      const context = useGroupContext("GroupItem", __scopeGroup);
      import_react30.default.useEffect(() => {
        context.onItemMount();
        return () => {
          context.onItemUnmount();
        };
      }, []);
      if (!treeIndex) {
        throw Error("<Group.Item/> should only be used within a <Group/>");
      }
      const isFirst = treeIndex.index === 0;
      const isLast = treeIndex.index === treeIndex.maxIndex;
      const disabled = childrenProps.disabled ?? context.disabled;
      let propsToPass = {
        disabled
      };
      if (context.disablePassBorderRadius !== true) {
        const borderRadius = getBorderRadius({
          radius: context.radius,
          isFirst,
          isLast,
          vertical: context.vertical,
          disable: context.disablePassBorderRadius
        });
        return { ...propsToPass, ...borderRadius };
      }
      return propsToPass;
    }, "useGroupItem");
    var Group = createGroup(true);
    var YGroup = Group;
    var XGroup = createGroup(false);
    var wrapScroll = /* @__PURE__ */ __name(({ scrollable, axis, showScrollIndicator = false }, children) => {
      if (scrollable)
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          import_react_native28.ScrollView,
          {
            ...axis === "vertical" && {
              showsVerticalScrollIndicator: showScrollIndicator
            },
            ...axis === "horizontal" && {
              horizontal: true,
              showsHorizontalScrollIndicator: showScrollIndicator
            },
            children
          }
        );
      return children;
    }, "wrapScroll");
    var getBorderRadius = /* @__PURE__ */ __name(({
      isFirst,
      isLast,
      radius: radius2,
      vertical,
      disable
    }) => {
      return {
        borderTopLeftRadius: isFirst && disable !== "top" && disable !== "start" ? radius2 : 0,
        borderTopRightRadius: disable !== "top" && disable !== "end" && (vertical && isFirst || !vertical && isLast) ? radius2 : 0,
        borderBottomLeftRadius: disable !== "bottom" && disable !== "start" && (vertical && isLast || !vertical && isFirst) ? radius2 : 0,
        borderBottomRightRadius: isLast && disable !== "bottom" && disable !== "end" ? radius2 : 0
      };
    }, "getBorderRadius");
    var cloneElementWithPropOrder = /* @__PURE__ */ __name((child, props) => {
      const next = (0, import_core37.mergeProps)(child.props, props, false, (0, import_core37.getConfig)().shorthands)[0];
      return import_react30.default.cloneElement({ ...child, props: null }, next);
    }, "cloneElementWithPropOrder");
  }
});

// node_modules/@tamagui/group/dist/cjs/index.js
var require_cjs30 = __commonJS({
  "node_modules/@tamagui/group/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Group(), module2.exports);
  }
});

// node_modules/@tamagui/focusable/dist/cjs/registerFocusable.js
var require_registerFocusable = __commonJS({
  "node_modules/@tamagui/focusable/dist/cjs/registerFocusable.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var registerFocusable_exports = {};
    __export2(registerFocusable_exports, {
      focusFocusable: () => focusFocusable2,
      registerFocusable: () => registerFocusable,
      unregisterFocusable: () => unregisterFocusable
    });
    module2.exports = __toCommonJS2(registerFocusable_exports);
    var registerFocusable = /* @__PURE__ */ __name((id, input) => () => {
    }, "registerFocusable");
    var unregisterFocusable = /* @__PURE__ */ __name((id) => {
    }, "unregisterFocusable");
    var focusFocusable2 = /* @__PURE__ */ __name((id) => {
    }, "focusFocusable");
  }
});

// node_modules/@tamagui/focusable/dist/cjs/focusableInputHOC.js
var require_focusableInputHOC = __commonJS({
  "node_modules/@tamagui/focusable/dist/cjs/focusableInputHOC.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var focusableInputHOC_exports = {};
    __export2(focusableInputHOC_exports, {
      focusableInputHOC: () => focusableInputHOC3
    });
    module2.exports = __toCommonJS2(focusableInputHOC_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_compose_refs3 = require_cjs2();
    var import_web8 = require("@tamagui/core-node");
    var import_react30 = require("react");
    var import_registerFocusable = require_registerFocusable();
    function focusableInputHOC3(Component) {
      const component = Component.extractable(
        (0, import_react30.forwardRef)(
          (props, ref) => {
            const isInput = (0, import_web8.isTamaguiComponent)(Component) && Component.staticConfig.isInput;
            const inputValue = (0, import_react30.useRef)(props.value || props.defaultValue || "");
            const unregisterFocusable = (0, import_react30.useRef)();
            const inputRef = (0, import_react30.useCallback)(
              (input) => {
                var _a;
                if (!props.id)
                  return;
                if (!input)
                  return;
                (_a = unregisterFocusable.current) == null ? void 0 : _a.call(unregisterFocusable);
                unregisterFocusable.current = (0, import_registerFocusable.registerFocusable)(props.id, {
                  focus: input.focus,
                  ...isInput && {
                    // react-native doesn't support programmatic .select()
                    focusAndSelect() {
                      input.focus();
                      if (input.setSelection && typeof inputValue.current === "string") {
                        input.setSelection(0, inputValue.current.length);
                      }
                    }
                  }
                });
              },
              [isInput, props.id]
            );
            const combinedRefs = (0, import_compose_refs3.composeRefs)(ref, inputRef);
            (0, import_react30.useEffect)(() => {
              return () => {
                var _a;
                (_a = unregisterFocusable.current) == null ? void 0 : _a.call(unregisterFocusable);
              };
            }, []);
            const onChangeText = (0, import_web8.useEvent)((value) => {
              var _a;
              inputValue.current = value;
              (_a = props.onChangeText) == null ? void 0 : _a.call(props, value);
            });
            const finalProps = isInput ? {
              ...props,
              onChangeText
            } : props;
            return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Component, { ref: combinedRefs, ...finalProps });
          }
        )
      );
      return component;
    }
    __name(focusableInputHOC3, "focusableInputHOC");
  }
});

// node_modules/@tamagui/focusable/dist/cjs/focusable.js
var require_focusable = __commonJS({
  "node_modules/@tamagui/focusable/dist/cjs/focusable.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var focusable_exports = {};
    module2.exports = __toCommonJS2(focusable_exports);
  }
});

// node_modules/@tamagui/focusable/dist/cjs/index.js
var require_cjs31 = __commonJS({
  "node_modules/@tamagui/focusable/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_registerFocusable(), module2.exports);
    __reExport2(src_exports, require_focusableInputHOC(), module2.exports);
    __reExport2(src_exports, require_focusable(), module2.exports);
  }
});

// node_modules/@tamagui/list-item/dist/cjs/ListItem.js
var require_ListItem = __commonJS({
  "node_modules/@tamagui/list-item/dist/cjs/ListItem.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var ListItem_exports = {};
    __export2(ListItem_exports, {
      ListItem: () => ListItem,
      ListItemFrame: () => ListItemFrame,
      ListItemSubtitle: () => ListItemSubtitle,
      ListItemText: () => ListItemText,
      ListItemTitle: () => ListItemTitle,
      listItemStaticConfig: () => listItemStaticConfig,
      useListItem: () => useListItem
    });
    module2.exports = __toCommonJS2(ListItem_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_core37 = require("@tamagui/core-node");
    var import_font_size2 = require_cjs26();
    var import_helpers_tamagui2 = require_cjs29();
    var import_stacks8 = require_cjs12();
    var import_text5 = require_cjs21();
    var import_react30 = require("react");
    var NAME3 = "ListItem";
    var ListItemFrame = (0, import_core37.styled)(import_stacks8.ThemeableStack, {
      name: NAME3,
      tag: "li",
      variants: {
        unstyled: {
          false: {
            size: "$true",
            alignItems: "center",
            flexWrap: "nowrap",
            width: "100%",
            borderColor: "$borderColor",
            maxWidth: "100%",
            overflow: "hidden",
            flexDirection: "row",
            backgroundColor: "$backgroundStrong"
          }
        },
        size: {
          "...size": (val2, { tokens: tokens2 }) => {
            return {
              minHeight: tokens2.size[val2],
              paddingHorizontal: tokens2.space[val2],
              paddingVertical: (0, import_helpers_tamagui2.getSpace)(val2, -2)
            };
          }
        },
        active: {
          true: {
            hoverStyle: {
              backgroundColor: "$background"
            }
          }
        },
        disabled: {
          true: {
            opacity: 0.5,
            // TODO breaking types
            pointerEvents: "none"
          }
        }
      },
      defaultVariants: {
        unstyled: false
      }
    });
    var ListItemText = (0, import_core37.styled)(import_text5.SizableText, {
      name: "ListItemText",
      variants: {
        unstyled: {
          false: {
            color: "$color",
            userSelect: "none",
            flexGrow: 1,
            flexShrink: 1,
            ellipse: true,
            cursor: "default"
          }
        }
      },
      defaultVariants: {
        unstyled: false
      }
    });
    var ListItemSubtitle = (0, import_core37.styled)(ListItemText, {
      name: "ListItemSubtitle",
      variants: {
        unstyled: {
          false: {
            opacity: 0.6,
            maxWidth: "100%",
            size: "$3",
            color: "$color"
          }
        }
      },
      defaultVariants: {
        unstyled: false
      }
    });
    var ListItemTitle = (0, import_core37.styled)(ListItemText, {
      name: "ListItemTitle"
    });
    var useListItem = /* @__PURE__ */ __name((props, {
      Text: Text6 = ListItemText,
      Subtitle = ListItemSubtitle,
      Title = ListItemTitle
    } = { Text: ListItemText, Subtitle: ListItemSubtitle, Title: ListItemTitle }) => {
      const {
        children,
        icon,
        iconAfter,
        noTextWrap,
        theme: themeName,
        space: space2,
        spaceFlex,
        scaleIcon = 1,
        scaleSpace = 1,
        subTitle,
        // text props
        color: color3,
        fontWeight,
        letterSpacing,
        fontSize,
        fontFamily,
        textAlign,
        textProps,
        title,
        ...rest
      } = props;
      const mediaActiveProps = (0, import_core37.useMediaPropsActive)(props);
      const size4 = mediaActiveProps.size || "$true";
      const subtitleSize = `$${+String(size4).replace("$", "") - 1}`;
      const iconSize = (0, import_font_size2.getFontSize)(size4) * scaleIcon;
      const getThemedIcon = (0, import_helpers_tamagui2.useGetThemedIcon)({ size: iconSize, color: color3 });
      const [themedIcon, themedIconAfter] = [icon, iconAfter].map(getThemedIcon);
      const spaceSize = (0, import_core37.getVariableValue)((0, import_core37.getTokens)().space[mediaActiveProps.space] ?? iconSize) * scaleSpace;
      const contents = (0, import_text5.wrapChildrenInText)(Text6, mediaActiveProps);
      return {
        props: {
          fontFamily,
          ...rest,
          children: /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [
            themedIcon ? /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [
              themedIcon,
              /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_core37.Spacer, { size: spaceSize })
            ] }) : null,
            title || subTitle ? /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(import_stacks8.YStack, { flex: 1, children: [
              noTextWrap === "all" ? title : /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Title, { size: size4, children: title }),
              subTitle ? /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_jsx_runtime12.Fragment, { children: typeof subTitle === "string" && noTextWrap !== "all" ? (
                // TODO can use theme but we need to standardize to alt themes
                // or standardize on subtle colors in themes
                /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Subtitle, { size: subtitleSize, children: subTitle })
              ) : subTitle }) : null,
              contents
            ] }) : contents,
            themedIconAfter ? /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [
              /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_core37.Spacer, { size: spaceSize }),
              themedIconAfter
            ] }) : null
          ] })
        }
      };
    }, "useListItem");
    var ListItemComponent = (0, import_react30.forwardRef)((props, ref) => {
      const { props: listItemProps } = useListItem(props);
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(ListItemFrame, { ref, justifyContent: "space-between", ...listItemProps });
    });
    var listItemStaticConfig = {
      inlineProps: /* @__PURE__ */ new Set([
        // text props go here (can't really optimize them, but we never fully extract listItem anyway)
        "color",
        "fontWeight",
        "fontSize",
        "fontFamily",
        "letterSpacing",
        "textAlign"
      ])
    };
    var ListItem = (0, import_core37.withStaticProperties)(
      ListItemFrame.extractable(
        (0, import_core37.themeable)(ListItemComponent, { componentName: NAME3 }),
        listItemStaticConfig
      ),
      {
        Text: ListItemText,
        Subtitle: ListItemSubtitle
      }
    );
  }
});

// node_modules/@tamagui/list-item/dist/cjs/index.js
var require_cjs32 = __commonJS({
  "node_modules/@tamagui/list-item/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_ListItem(), module2.exports);
  }
});

// node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs
function clamp(start, value, end) {
  return max(start, min(value, end));
}
function evaluate(value, param) {
  return typeof value === "function" ? value(param) : value;
}
function getSide(placement) {
  return placement.split("-")[0];
}
function getAlignment(placement) {
  return placement.split("-")[1];
}
function getOppositeAxis(axis) {
  return axis === "x" ? "y" : "x";
}
function getAxisLength(axis) {
  return axis === "y" ? "height" : "width";
}
function getSideAxis(placement) {
  return ["top", "bottom"].includes(getSide(placement)) ? "y" : "x";
}
function getAlignmentAxis(placement) {
  return getOppositeAxis(getSideAxis(placement));
}
function getAlignmentSides(placement, rects, rtl) {
  if (rtl === void 0) {
    rtl = false;
  }
  const alignment = getAlignment(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const length = getAxisLength(alignmentAxis);
  let mainAlignmentSide = alignmentAxis === "x" ? alignment === (rtl ? "end" : "start") ? "right" : "left" : alignment === "start" ? "bottom" : "top";
  if (rects.reference[length] > rects.floating[length]) {
    mainAlignmentSide = getOppositePlacement(mainAlignmentSide);
  }
  return [mainAlignmentSide, getOppositePlacement(mainAlignmentSide)];
}
function getExpandedPlacements(placement) {
  const oppositePlacement = getOppositePlacement(placement);
  return [getOppositeAlignmentPlacement(placement), oppositePlacement, getOppositeAlignmentPlacement(oppositePlacement)];
}
function getOppositeAlignmentPlacement(placement) {
  return placement.replace(/start|end/g, (alignment) => oppositeAlignmentMap[alignment]);
}
function getSideList(side, isStart, rtl) {
  const lr = ["left", "right"];
  const rl = ["right", "left"];
  const tb = ["top", "bottom"];
  const bt = ["bottom", "top"];
  switch (side) {
    case "top":
    case "bottom":
      if (rtl)
        return isStart ? rl : lr;
      return isStart ? lr : rl;
    case "left":
    case "right":
      return isStart ? tb : bt;
    default:
      return [];
  }
}
function getOppositeAxisPlacements(placement, flipAlignment, direction, rtl) {
  const alignment = getAlignment(placement);
  let list = getSideList(getSide(placement), direction === "start", rtl);
  if (alignment) {
    list = list.map((side) => side + "-" + alignment);
    if (flipAlignment) {
      list = list.concat(list.map(getOppositeAlignmentPlacement));
    }
  }
  return list;
}
function getOppositePlacement(placement) {
  return placement.replace(/left|right|bottom|top/g, (side) => oppositeSideMap[side]);
}
function expandPaddingObject(padding) {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0,
    ...padding
  };
}
function getPaddingObject(padding) {
  return typeof padding !== "number" ? expandPaddingObject(padding) : {
    top: padding,
    right: padding,
    bottom: padding,
    left: padding
  };
}
function rectToClientRect(rect) {
  const {
    x,
    y,
    width,
    height
  } = rect;
  return {
    width,
    height,
    top: y,
    left: x,
    right: x + width,
    bottom: y + height,
    x,
    y
  };
}
var sides, alignments, placements, min, max, round, floor, createCoords, oppositeSideMap, oppositeAlignmentMap;
var init_floating_ui_utils = __esm({
  "node_modules/@floating-ui/utils/dist/floating-ui.utils.mjs"() {
    sides = ["top", "right", "bottom", "left"];
    alignments = ["start", "end"];
    placements = /* @__PURE__ */ sides.reduce((acc2, side) => acc2.concat(side, side + "-" + alignments[0], side + "-" + alignments[1]), []);
    min = Math.min;
    max = Math.max;
    round = Math.round;
    floor = Math.floor;
    createCoords = /* @__PURE__ */ __name((v) => ({
      x: v,
      y: v
    }), "createCoords");
    oppositeSideMap = {
      left: "right",
      right: "left",
      bottom: "top",
      top: "bottom"
    };
    oppositeAlignmentMap = {
      start: "end",
      end: "start"
    };
    __name(clamp, "clamp");
    __name(evaluate, "evaluate");
    __name(getSide, "getSide");
    __name(getAlignment, "getAlignment");
    __name(getOppositeAxis, "getOppositeAxis");
    __name(getAxisLength, "getAxisLength");
    __name(getSideAxis, "getSideAxis");
    __name(getAlignmentAxis, "getAlignmentAxis");
    __name(getAlignmentSides, "getAlignmentSides");
    __name(getExpandedPlacements, "getExpandedPlacements");
    __name(getOppositeAlignmentPlacement, "getOppositeAlignmentPlacement");
    __name(getSideList, "getSideList");
    __name(getOppositeAxisPlacements, "getOppositeAxisPlacements");
    __name(getOppositePlacement, "getOppositePlacement");
    __name(expandPaddingObject, "expandPaddingObject");
    __name(getPaddingObject, "getPaddingObject");
    __name(rectToClientRect, "rectToClientRect");
  }
});

// node_modules/@floating-ui/core/dist/floating-ui.core.mjs
function computeCoordsFromPlacement(_ref, placement, rtl) {
  let {
    reference,
    floating
  } = _ref;
  const sideAxis = getSideAxis(placement);
  const alignmentAxis = getAlignmentAxis(placement);
  const alignLength = getAxisLength(alignmentAxis);
  const side = getSide(placement);
  const isVertical = sideAxis === "y";
  const commonX = reference.x + reference.width / 2 - floating.width / 2;
  const commonY = reference.y + reference.height / 2 - floating.height / 2;
  const commonAlign = reference[alignLength] / 2 - floating[alignLength] / 2;
  let coords;
  switch (side) {
    case "top":
      coords = {
        x: commonX,
        y: reference.y - floating.height
      };
      break;
    case "bottom":
      coords = {
        x: commonX,
        y: reference.y + reference.height
      };
      break;
    case "right":
      coords = {
        x: reference.x + reference.width,
        y: commonY
      };
      break;
    case "left":
      coords = {
        x: reference.x - floating.width,
        y: commonY
      };
      break;
    default:
      coords = {
        x: reference.x,
        y: reference.y
      };
  }
  switch (getAlignment(placement)) {
    case "start":
      coords[alignmentAxis] -= commonAlign * (rtl && isVertical ? -1 : 1);
      break;
    case "end":
      coords[alignmentAxis] += commonAlign * (rtl && isVertical ? -1 : 1);
      break;
  }
  return coords;
}
async function detectOverflow(state, options) {
  var _await$platform$isEle;
  if (options === void 0) {
    options = {};
  }
  const {
    x,
    y,
    platform: platform2,
    rects,
    elements,
    strategy
  } = state;
  const {
    boundary = "clippingAncestors",
    rootBoundary = "viewport",
    elementContext = "floating",
    altBoundary = false,
    padding = 0
  } = evaluate(options, state);
  const paddingObject = getPaddingObject(padding);
  const altContext = elementContext === "floating" ? "reference" : "floating";
  const element = elements[altBoundary ? altContext : elementContext];
  const clippingClientRect = rectToClientRect(await platform2.getClippingRect({
    element: ((_await$platform$isEle = await (platform2.isElement == null ? void 0 : platform2.isElement(element))) != null ? _await$platform$isEle : true) ? element : element.contextElement || await (platform2.getDocumentElement == null ? void 0 : platform2.getDocumentElement(elements.floating)),
    boundary,
    rootBoundary,
    strategy
  }));
  const rect = elementContext === "floating" ? {
    x,
    y,
    width: rects.floating.width,
    height: rects.floating.height
  } : rects.reference;
  const offsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(elements.floating));
  const offsetScale = await (platform2.isElement == null ? void 0 : platform2.isElement(offsetParent)) ? await (platform2.getScale == null ? void 0 : platform2.getScale(offsetParent)) || {
    x: 1,
    y: 1
  } : {
    x: 1,
    y: 1
  };
  const elementClientRect = rectToClientRect(platform2.convertOffsetParentRelativeRectToViewportRelativeRect ? await platform2.convertOffsetParentRelativeRectToViewportRelativeRect({
    elements,
    rect,
    offsetParent,
    strategy
  }) : rect);
  return {
    top: (clippingClientRect.top - elementClientRect.top + paddingObject.top) / offsetScale.y,
    bottom: (elementClientRect.bottom - clippingClientRect.bottom + paddingObject.bottom) / offsetScale.y,
    left: (clippingClientRect.left - elementClientRect.left + paddingObject.left) / offsetScale.x,
    right: (elementClientRect.right - clippingClientRect.right + paddingObject.right) / offsetScale.x
  };
}
function getPlacementList(alignment, autoAlignment, allowedPlacements) {
  const allowedPlacementsSortedByAlignment = alignment ? [...allowedPlacements.filter((placement) => getAlignment(placement) === alignment), ...allowedPlacements.filter((placement) => getAlignment(placement) !== alignment)] : allowedPlacements.filter((placement) => getSide(placement) === placement);
  return allowedPlacementsSortedByAlignment.filter((placement) => {
    if (alignment) {
      return getAlignment(placement) === alignment || (autoAlignment ? getOppositeAlignmentPlacement(placement) !== placement : false);
    }
    return true;
  });
}
function getSideOffsets(overflow, rect) {
  return {
    top: overflow.top - rect.height,
    right: overflow.right - rect.width,
    bottom: overflow.bottom - rect.height,
    left: overflow.left - rect.width
  };
}
function isAnySideFullyClipped(overflow) {
  return sides.some((side) => overflow[side] >= 0);
}
function getBoundingRect(rects) {
  const minX = min(...rects.map((rect) => rect.left));
  const minY = min(...rects.map((rect) => rect.top));
  const maxX = max(...rects.map((rect) => rect.right));
  const maxY = max(...rects.map((rect) => rect.bottom));
  return {
    x: minX,
    y: minY,
    width: maxX - minX,
    height: maxY - minY
  };
}
function getRectsByLine(rects) {
  const sortedRects = rects.slice().sort((a, b) => a.y - b.y);
  const groups = [];
  let prevRect = null;
  for (let i = 0; i < sortedRects.length; i++) {
    const rect = sortedRects[i];
    if (!prevRect || rect.y - prevRect.y > prevRect.height / 2) {
      groups.push([rect]);
    } else {
      groups[groups.length - 1].push(rect);
    }
    prevRect = rect;
  }
  return groups.map((rect) => rectToClientRect(getBoundingRect(rect)));
}
async function convertValueToCoords(state, options) {
  const {
    placement,
    platform: platform2,
    elements
  } = state;
  const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
  const side = getSide(placement);
  const alignment = getAlignment(placement);
  const isVertical = getSideAxis(placement) === "y";
  const mainAxisMulti = ["left", "top"].includes(side) ? -1 : 1;
  const crossAxisMulti = rtl && isVertical ? -1 : 1;
  const rawValue = evaluate(options, state);
  let {
    mainAxis,
    crossAxis,
    alignmentAxis
  } = typeof rawValue === "number" ? {
    mainAxis: rawValue,
    crossAxis: 0,
    alignmentAxis: null
  } : {
    mainAxis: 0,
    crossAxis: 0,
    alignmentAxis: null,
    ...rawValue
  };
  if (alignment && typeof alignmentAxis === "number") {
    crossAxis = alignment === "end" ? alignmentAxis * -1 : alignmentAxis;
  }
  return isVertical ? {
    x: crossAxis * crossAxisMulti,
    y: mainAxis * mainAxisMulti
  } : {
    x: mainAxis * mainAxisMulti,
    y: crossAxis * crossAxisMulti
  };
}
var computePosition, arrow, autoPlacement, flip, hide, inline, offset, shift, limitShift, size;
var init_floating_ui_core = __esm({
  "node_modules/@floating-ui/core/dist/floating-ui.core.mjs"() {
    init_floating_ui_utils();
    init_floating_ui_utils();
    __name(computeCoordsFromPlacement, "computeCoordsFromPlacement");
    computePosition = /* @__PURE__ */ __name(async (reference, floating, config) => {
      const {
        placement = "bottom",
        strategy = "absolute",
        middleware = [],
        platform: platform2
      } = config;
      const validMiddleware = middleware.filter(Boolean);
      const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(floating));
      let rects = await platform2.getElementRects({
        reference,
        floating,
        strategy
      });
      let {
        x,
        y
      } = computeCoordsFromPlacement(rects, placement, rtl);
      let statefulPlacement = placement;
      let middlewareData = {};
      let resetCount = 0;
      for (let i = 0; i < validMiddleware.length; i++) {
        const {
          name,
          fn
        } = validMiddleware[i];
        const {
          x: nextX,
          y: nextY,
          data,
          reset
        } = await fn({
          x,
          y,
          initialPlacement: placement,
          placement: statefulPlacement,
          strategy,
          middlewareData,
          rects,
          platform: platform2,
          elements: {
            reference,
            floating
          }
        });
        x = nextX != null ? nextX : x;
        y = nextY != null ? nextY : y;
        middlewareData = {
          ...middlewareData,
          [name]: {
            ...middlewareData[name],
            ...data
          }
        };
        if (reset && resetCount <= 50) {
          resetCount++;
          if (typeof reset === "object") {
            if (reset.placement) {
              statefulPlacement = reset.placement;
            }
            if (reset.rects) {
              rects = reset.rects === true ? await platform2.getElementRects({
                reference,
                floating,
                strategy
              }) : reset.rects;
            }
            ({
              x,
              y
            } = computeCoordsFromPlacement(rects, statefulPlacement, rtl));
          }
          i = -1;
        }
      }
      return {
        x,
        y,
        placement: statefulPlacement,
        strategy,
        middlewareData
      };
    }, "computePosition");
    __name(detectOverflow, "detectOverflow");
    arrow = /* @__PURE__ */ __name((options) => ({
      name: "arrow",
      options,
      async fn(state) {
        const {
          x,
          y,
          placement,
          rects,
          platform: platform2,
          elements,
          middlewareData
        } = state;
        const {
          element,
          padding = 0
        } = evaluate(options, state) || {};
        if (element == null) {
          return {};
        }
        const paddingObject = getPaddingObject(padding);
        const coords = {
          x,
          y
        };
        const axis = getAlignmentAxis(placement);
        const length = getAxisLength(axis);
        const arrowDimensions = await platform2.getDimensions(element);
        const isYAxis = axis === "y";
        const minProp = isYAxis ? "top" : "left";
        const maxProp = isYAxis ? "bottom" : "right";
        const clientProp = isYAxis ? "clientHeight" : "clientWidth";
        const endDiff = rects.reference[length] + rects.reference[axis] - coords[axis] - rects.floating[length];
        const startDiff = coords[axis] - rects.reference[axis];
        const arrowOffsetParent = await (platform2.getOffsetParent == null ? void 0 : platform2.getOffsetParent(element));
        let clientSize = arrowOffsetParent ? arrowOffsetParent[clientProp] : 0;
        if (!clientSize || !await (platform2.isElement == null ? void 0 : platform2.isElement(arrowOffsetParent))) {
          clientSize = elements.floating[clientProp] || rects.floating[length];
        }
        const centerToReference = endDiff / 2 - startDiff / 2;
        const largestPossiblePadding = clientSize / 2 - arrowDimensions[length] / 2 - 1;
        const minPadding = min(paddingObject[minProp], largestPossiblePadding);
        const maxPadding = min(paddingObject[maxProp], largestPossiblePadding);
        const min$1 = minPadding;
        const max3 = clientSize - arrowDimensions[length] - maxPadding;
        const center = clientSize / 2 - arrowDimensions[length] / 2 + centerToReference;
        const offset3 = clamp(min$1, center, max3);
        const shouldAddOffset = !middlewareData.arrow && getAlignment(placement) != null && center !== offset3 && rects.reference[length] / 2 - (center < min$1 ? minPadding : maxPadding) - arrowDimensions[length] / 2 < 0;
        const alignmentOffset = shouldAddOffset ? center < min$1 ? center - min$1 : center - max3 : 0;
        return {
          [axis]: coords[axis] + alignmentOffset,
          data: {
            [axis]: offset3,
            centerOffset: center - offset3 - alignmentOffset,
            ...shouldAddOffset && {
              alignmentOffset
            }
          },
          reset: shouldAddOffset
        };
      }
    }), "arrow");
    __name(getPlacementList, "getPlacementList");
    autoPlacement = /* @__PURE__ */ __name(function(options) {
      if (options === void 0) {
        options = {};
      }
      return {
        name: "autoPlacement",
        options,
        async fn(state) {
          var _middlewareData$autoP, _middlewareData$autoP2, _placementsThatFitOnE;
          const {
            rects,
            middlewareData,
            placement,
            platform: platform2,
            elements
          } = state;
          const {
            crossAxis = false,
            alignment,
            allowedPlacements = placements,
            autoAlignment = true,
            ...detectOverflowOptions
          } = evaluate(options, state);
          const placements$1 = alignment !== void 0 || allowedPlacements === placements ? getPlacementList(alignment || null, autoAlignment, allowedPlacements) : allowedPlacements;
          const overflow = await detectOverflow(state, detectOverflowOptions);
          const currentIndex = ((_middlewareData$autoP = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP.index) || 0;
          const currentPlacement = placements$1[currentIndex];
          if (currentPlacement == null) {
            return {};
          }
          const alignmentSides = getAlignmentSides(currentPlacement, rects, await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)));
          if (placement !== currentPlacement) {
            return {
              reset: {
                placement: placements$1[0]
              }
            };
          }
          const currentOverflows = [overflow[getSide(currentPlacement)], overflow[alignmentSides[0]], overflow[alignmentSides[1]]];
          const allOverflows = [...((_middlewareData$autoP2 = middlewareData.autoPlacement) == null ? void 0 : _middlewareData$autoP2.overflows) || [], {
            placement: currentPlacement,
            overflows: currentOverflows
          }];
          const nextPlacement = placements$1[currentIndex + 1];
          if (nextPlacement) {
            return {
              data: {
                index: currentIndex + 1,
                overflows: allOverflows
              },
              reset: {
                placement: nextPlacement
              }
            };
          }
          const placementsSortedByMostSpace = allOverflows.map((d) => {
            const alignment2 = getAlignment(d.placement);
            return [d.placement, alignment2 && crossAxis ? (
              // Check along the mainAxis and main crossAxis side.
              d.overflows.slice(0, 2).reduce((acc2, v) => acc2 + v, 0)
            ) : (
              // Check only the mainAxis.
              d.overflows[0]
            ), d.overflows];
          }).sort((a, b) => a[1] - b[1]);
          const placementsThatFitOnEachSide = placementsSortedByMostSpace.filter((d) => d[2].slice(
            0,
            // Aligned placements should not check their opposite crossAxis
            // side.
            getAlignment(d[0]) ? 2 : 3
          ).every((v) => v <= 0));
          const resetPlacement = ((_placementsThatFitOnE = placementsThatFitOnEachSide[0]) == null ? void 0 : _placementsThatFitOnE[0]) || placementsSortedByMostSpace[0][0];
          if (resetPlacement !== placement) {
            return {
              data: {
                index: currentIndex + 1,
                overflows: allOverflows
              },
              reset: {
                placement: resetPlacement
              }
            };
          }
          return {};
        }
      };
    }, "autoPlacement");
    flip = /* @__PURE__ */ __name(function(options) {
      if (options === void 0) {
        options = {};
      }
      return {
        name: "flip",
        options,
        async fn(state) {
          var _middlewareData$arrow, _middlewareData$flip;
          const {
            placement,
            middlewareData,
            rects,
            initialPlacement,
            platform: platform2,
            elements
          } = state;
          const {
            mainAxis: checkMainAxis = true,
            crossAxis: checkCrossAxis = true,
            fallbackPlacements: specifiedFallbackPlacements,
            fallbackStrategy = "bestFit",
            fallbackAxisSideDirection = "none",
            flipAlignment = true,
            ...detectOverflowOptions
          } = evaluate(options, state);
          if ((_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
            return {};
          }
          const side = getSide(placement);
          const initialSideAxis = getSideAxis(initialPlacement);
          const isBasePlacement = getSide(initialPlacement) === initialPlacement;
          const rtl = await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating));
          const fallbackPlacements = specifiedFallbackPlacements || (isBasePlacement || !flipAlignment ? [getOppositePlacement(initialPlacement)] : getExpandedPlacements(initialPlacement));
          const hasFallbackAxisSideDirection = fallbackAxisSideDirection !== "none";
          if (!specifiedFallbackPlacements && hasFallbackAxisSideDirection) {
            fallbackPlacements.push(...getOppositeAxisPlacements(initialPlacement, flipAlignment, fallbackAxisSideDirection, rtl));
          }
          const placements2 = [initialPlacement, ...fallbackPlacements];
          const overflow = await detectOverflow(state, detectOverflowOptions);
          const overflows = [];
          let overflowsData = ((_middlewareData$flip = middlewareData.flip) == null ? void 0 : _middlewareData$flip.overflows) || [];
          if (checkMainAxis) {
            overflows.push(overflow[side]);
          }
          if (checkCrossAxis) {
            const sides2 = getAlignmentSides(placement, rects, rtl);
            overflows.push(overflow[sides2[0]], overflow[sides2[1]]);
          }
          overflowsData = [...overflowsData, {
            placement,
            overflows
          }];
          if (!overflows.every((side2) => side2 <= 0)) {
            var _middlewareData$flip2, _overflowsData$filter;
            const nextIndex = (((_middlewareData$flip2 = middlewareData.flip) == null ? void 0 : _middlewareData$flip2.index) || 0) + 1;
            const nextPlacement = placements2[nextIndex];
            if (nextPlacement) {
              return {
                data: {
                  index: nextIndex,
                  overflows: overflowsData
                },
                reset: {
                  placement: nextPlacement
                }
              };
            }
            let resetPlacement = (_overflowsData$filter = overflowsData.filter((d) => d.overflows[0] <= 0).sort((a, b) => a.overflows[1] - b.overflows[1])[0]) == null ? void 0 : _overflowsData$filter.placement;
            if (!resetPlacement) {
              switch (fallbackStrategy) {
                case "bestFit": {
                  var _overflowsData$filter2;
                  const placement2 = (_overflowsData$filter2 = overflowsData.filter((d) => {
                    if (hasFallbackAxisSideDirection) {
                      const currentSideAxis = getSideAxis(d.placement);
                      return currentSideAxis === initialSideAxis || // Create a bias to the `y` side axis due to horizontal
                      // reading directions favoring greater width.
                      currentSideAxis === "y";
                    }
                    return true;
                  }).map((d) => [d.placement, d.overflows.filter((overflow2) => overflow2 > 0).reduce((acc2, overflow2) => acc2 + overflow2, 0)]).sort((a, b) => a[1] - b[1])[0]) == null ? void 0 : _overflowsData$filter2[0];
                  if (placement2) {
                    resetPlacement = placement2;
                  }
                  break;
                }
                case "initialPlacement":
                  resetPlacement = initialPlacement;
                  break;
              }
            }
            if (placement !== resetPlacement) {
              return {
                reset: {
                  placement: resetPlacement
                }
              };
            }
          }
          return {};
        }
      };
    }, "flip");
    __name(getSideOffsets, "getSideOffsets");
    __name(isAnySideFullyClipped, "isAnySideFullyClipped");
    hide = /* @__PURE__ */ __name(function(options) {
      if (options === void 0) {
        options = {};
      }
      return {
        name: "hide",
        options,
        async fn(state) {
          const {
            rects
          } = state;
          const {
            strategy = "referenceHidden",
            ...detectOverflowOptions
          } = evaluate(options, state);
          switch (strategy) {
            case "referenceHidden": {
              const overflow = await detectOverflow(state, {
                ...detectOverflowOptions,
                elementContext: "reference"
              });
              const offsets = getSideOffsets(overflow, rects.reference);
              return {
                data: {
                  referenceHiddenOffsets: offsets,
                  referenceHidden: isAnySideFullyClipped(offsets)
                }
              };
            }
            case "escaped": {
              const overflow = await detectOverflow(state, {
                ...detectOverflowOptions,
                altBoundary: true
              });
              const offsets = getSideOffsets(overflow, rects.floating);
              return {
                data: {
                  escapedOffsets: offsets,
                  escaped: isAnySideFullyClipped(offsets)
                }
              };
            }
            default: {
              return {};
            }
          }
        }
      };
    }, "hide");
    __name(getBoundingRect, "getBoundingRect");
    __name(getRectsByLine, "getRectsByLine");
    inline = /* @__PURE__ */ __name(function(options) {
      if (options === void 0) {
        options = {};
      }
      return {
        name: "inline",
        options,
        async fn(state) {
          const {
            placement,
            elements,
            rects,
            platform: platform2,
            strategy
          } = state;
          const {
            padding = 2,
            x,
            y
          } = evaluate(options, state);
          const nativeClientRects = Array.from(await (platform2.getClientRects == null ? void 0 : platform2.getClientRects(elements.reference)) || []);
          const clientRects = getRectsByLine(nativeClientRects);
          const fallback = rectToClientRect(getBoundingRect(nativeClientRects));
          const paddingObject = getPaddingObject(padding);
          function getBoundingClientRect2() {
            if (clientRects.length === 2 && clientRects[0].left > clientRects[1].right && x != null && y != null) {
              return clientRects.find((rect) => x > rect.left - paddingObject.left && x < rect.right + paddingObject.right && y > rect.top - paddingObject.top && y < rect.bottom + paddingObject.bottom) || fallback;
            }
            if (clientRects.length >= 2) {
              if (getSideAxis(placement) === "y") {
                const firstRect = clientRects[0];
                const lastRect = clientRects[clientRects.length - 1];
                const isTop = getSide(placement) === "top";
                const top2 = firstRect.top;
                const bottom2 = lastRect.bottom;
                const left2 = isTop ? firstRect.left : lastRect.left;
                const right2 = isTop ? firstRect.right : lastRect.right;
                const width2 = right2 - left2;
                const height2 = bottom2 - top2;
                return {
                  top: top2,
                  bottom: bottom2,
                  left: left2,
                  right: right2,
                  width: width2,
                  height: height2,
                  x: left2,
                  y: top2
                };
              }
              const isLeftSide = getSide(placement) === "left";
              const maxRight = max(...clientRects.map((rect) => rect.right));
              const minLeft = min(...clientRects.map((rect) => rect.left));
              const measureRects = clientRects.filter((rect) => isLeftSide ? rect.left === minLeft : rect.right === maxRight);
              const top = measureRects[0].top;
              const bottom = measureRects[measureRects.length - 1].bottom;
              const left = minLeft;
              const right = maxRight;
              const width = right - left;
              const height = bottom - top;
              return {
                top,
                bottom,
                left,
                right,
                width,
                height,
                x: left,
                y: top
              };
            }
            return fallback;
          }
          __name(getBoundingClientRect2, "getBoundingClientRect");
          const resetRects = await platform2.getElementRects({
            reference: {
              getBoundingClientRect: getBoundingClientRect2
            },
            floating: elements.floating,
            strategy
          });
          if (rects.reference.x !== resetRects.reference.x || rects.reference.y !== resetRects.reference.y || rects.reference.width !== resetRects.reference.width || rects.reference.height !== resetRects.reference.height) {
            return {
              reset: {
                rects: resetRects
              }
            };
          }
          return {};
        }
      };
    }, "inline");
    __name(convertValueToCoords, "convertValueToCoords");
    offset = /* @__PURE__ */ __name(function(options) {
      if (options === void 0) {
        options = 0;
      }
      return {
        name: "offset",
        options,
        async fn(state) {
          var _middlewareData$offse, _middlewareData$arrow;
          const {
            x,
            y,
            placement,
            middlewareData
          } = state;
          const diffCoords = await convertValueToCoords(state, options);
          if (placement === ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse.placement) && (_middlewareData$arrow = middlewareData.arrow) != null && _middlewareData$arrow.alignmentOffset) {
            return {};
          }
          return {
            x: x + diffCoords.x,
            y: y + diffCoords.y,
            data: {
              ...diffCoords,
              placement
            }
          };
        }
      };
    }, "offset");
    shift = /* @__PURE__ */ __name(function(options) {
      if (options === void 0) {
        options = {};
      }
      return {
        name: "shift",
        options,
        async fn(state) {
          const {
            x,
            y,
            placement
          } = state;
          const {
            mainAxis: checkMainAxis = true,
            crossAxis: checkCrossAxis = false,
            limiter = {
              fn: (_ref) => {
                let {
                  x: x2,
                  y: y2
                } = _ref;
                return {
                  x: x2,
                  y: y2
                };
              }
            },
            ...detectOverflowOptions
          } = evaluate(options, state);
          const coords = {
            x,
            y
          };
          const overflow = await detectOverflow(state, detectOverflowOptions);
          const crossAxis = getSideAxis(getSide(placement));
          const mainAxis = getOppositeAxis(crossAxis);
          let mainAxisCoord = coords[mainAxis];
          let crossAxisCoord = coords[crossAxis];
          if (checkMainAxis) {
            const minSide = mainAxis === "y" ? "top" : "left";
            const maxSide = mainAxis === "y" ? "bottom" : "right";
            const min3 = mainAxisCoord + overflow[minSide];
            const max3 = mainAxisCoord - overflow[maxSide];
            mainAxisCoord = clamp(min3, mainAxisCoord, max3);
          }
          if (checkCrossAxis) {
            const minSide = crossAxis === "y" ? "top" : "left";
            const maxSide = crossAxis === "y" ? "bottom" : "right";
            const min3 = crossAxisCoord + overflow[minSide];
            const max3 = crossAxisCoord - overflow[maxSide];
            crossAxisCoord = clamp(min3, crossAxisCoord, max3);
          }
          const limitedCoords = limiter.fn({
            ...state,
            [mainAxis]: mainAxisCoord,
            [crossAxis]: crossAxisCoord
          });
          return {
            ...limitedCoords,
            data: {
              x: limitedCoords.x - x,
              y: limitedCoords.y - y
            }
          };
        }
      };
    }, "shift");
    limitShift = /* @__PURE__ */ __name(function(options) {
      if (options === void 0) {
        options = {};
      }
      return {
        options,
        fn(state) {
          const {
            x,
            y,
            placement,
            rects,
            middlewareData
          } = state;
          const {
            offset: offset3 = 0,
            mainAxis: checkMainAxis = true,
            crossAxis: checkCrossAxis = true
          } = evaluate(options, state);
          const coords = {
            x,
            y
          };
          const crossAxis = getSideAxis(placement);
          const mainAxis = getOppositeAxis(crossAxis);
          let mainAxisCoord = coords[mainAxis];
          let crossAxisCoord = coords[crossAxis];
          const rawOffset = evaluate(offset3, state);
          const computedOffset = typeof rawOffset === "number" ? {
            mainAxis: rawOffset,
            crossAxis: 0
          } : {
            mainAxis: 0,
            crossAxis: 0,
            ...rawOffset
          };
          if (checkMainAxis) {
            const len = mainAxis === "y" ? "height" : "width";
            const limitMin = rects.reference[mainAxis] - rects.floating[len] + computedOffset.mainAxis;
            const limitMax = rects.reference[mainAxis] + rects.reference[len] - computedOffset.mainAxis;
            if (mainAxisCoord < limitMin) {
              mainAxisCoord = limitMin;
            } else if (mainAxisCoord > limitMax) {
              mainAxisCoord = limitMax;
            }
          }
          if (checkCrossAxis) {
            var _middlewareData$offse, _middlewareData$offse2;
            const len = mainAxis === "y" ? "width" : "height";
            const isOriginSide = ["top", "left"].includes(getSide(placement));
            const limitMin = rects.reference[crossAxis] - rects.floating[len] + (isOriginSide ? ((_middlewareData$offse = middlewareData.offset) == null ? void 0 : _middlewareData$offse[crossAxis]) || 0 : 0) + (isOriginSide ? 0 : computedOffset.crossAxis);
            const limitMax = rects.reference[crossAxis] + rects.reference[len] + (isOriginSide ? 0 : ((_middlewareData$offse2 = middlewareData.offset) == null ? void 0 : _middlewareData$offse2[crossAxis]) || 0) - (isOriginSide ? computedOffset.crossAxis : 0);
            if (crossAxisCoord < limitMin) {
              crossAxisCoord = limitMin;
            } else if (crossAxisCoord > limitMax) {
              crossAxisCoord = limitMax;
            }
          }
          return {
            [mainAxis]: mainAxisCoord,
            [crossAxis]: crossAxisCoord
          };
        }
      };
    }, "limitShift");
    size = /* @__PURE__ */ __name(function(options) {
      if (options === void 0) {
        options = {};
      }
      return {
        name: "size",
        options,
        async fn(state) {
          const {
            placement,
            rects,
            platform: platform2,
            elements
          } = state;
          const {
            apply = /* @__PURE__ */ __name(() => {
            }, "apply"),
            ...detectOverflowOptions
          } = evaluate(options, state);
          const overflow = await detectOverflow(state, detectOverflowOptions);
          const side = getSide(placement);
          const alignment = getAlignment(placement);
          const isYAxis = getSideAxis(placement) === "y";
          const {
            width,
            height
          } = rects.floating;
          let heightSide;
          let widthSide;
          if (side === "top" || side === "bottom") {
            heightSide = side;
            widthSide = alignment === (await (platform2.isRTL == null ? void 0 : platform2.isRTL(elements.floating)) ? "start" : "end") ? "left" : "right";
          } else {
            widthSide = side;
            heightSide = alignment === "end" ? "top" : "bottom";
          }
          const maximumClippingHeight = height - overflow.top - overflow.bottom;
          const maximumClippingWidth = width - overflow.left - overflow.right;
          const overflowAvailableHeight = min(height - overflow[heightSide], maximumClippingHeight);
          const overflowAvailableWidth = min(width - overflow[widthSide], maximumClippingWidth);
          const noShift = !state.middlewareData.shift;
          let availableHeight = overflowAvailableHeight;
          let availableWidth = overflowAvailableWidth;
          if (isYAxis) {
            availableWidth = alignment || noShift ? min(overflowAvailableWidth, maximumClippingWidth) : maximumClippingWidth;
          } else {
            availableHeight = alignment || noShift ? min(overflowAvailableHeight, maximumClippingHeight) : maximumClippingHeight;
          }
          if (noShift && !alignment) {
            const xMin = max(overflow.left, 0);
            const xMax = max(overflow.right, 0);
            const yMin = max(overflow.top, 0);
            const yMax = max(overflow.bottom, 0);
            if (isYAxis) {
              availableWidth = width - 2 * (xMin !== 0 || xMax !== 0 ? xMin + xMax : max(overflow.left, overflow.right));
            } else {
              availableHeight = height - 2 * (yMin !== 0 || yMax !== 0 ? yMin + yMax : max(overflow.top, overflow.bottom));
            }
          }
          await apply({
            ...state,
            availableWidth,
            availableHeight
          });
          const nextDimensions = await platform2.getDimensions(elements.floating);
          if (width !== nextDimensions.width || height !== nextDimensions.height) {
            return {
              reset: {
                rects: true
              }
            };
          }
          return {};
        }
      };
    }, "size");
  }
});

// node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs
function getNodeName(node) {
  if (isNode(node)) {
    return (node.nodeName || "").toLowerCase();
  }
  return "#document";
}
function getWindow(node) {
  var _node$ownerDocument;
  return (node == null || (_node$ownerDocument = node.ownerDocument) == null ? void 0 : _node$ownerDocument.defaultView) || window;
}
function getDocumentElement(node) {
  var _ref;
  return (_ref = (isNode(node) ? node.ownerDocument : node.document) || window.document) == null ? void 0 : _ref.documentElement;
}
function isNode(value) {
  return value instanceof Node || value instanceof getWindow(value).Node;
}
function isElement(value) {
  return value instanceof Element || value instanceof getWindow(value).Element;
}
function isHTMLElement(value) {
  return value instanceof HTMLElement || value instanceof getWindow(value).HTMLElement;
}
function isShadowRoot(value) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  return value instanceof ShadowRoot || value instanceof getWindow(value).ShadowRoot;
}
function isOverflowElement(element) {
  const {
    overflow,
    overflowX,
    overflowY,
    display
  } = getComputedStyle2(element);
  return /auto|scroll|overlay|hidden|clip/.test(overflow + overflowY + overflowX) && !["inline", "contents"].includes(display);
}
function isTableElement(element) {
  return ["table", "td", "th"].includes(getNodeName(element));
}
function isTopLayer(element) {
  return [":popover-open", ":modal"].some((selector) => {
    try {
      return element.matches(selector);
    } catch (e) {
      return false;
    }
  });
}
function isContainingBlock(element) {
  const webkit = isWebKit();
  const css = getComputedStyle2(element);
  return css.transform !== "none" || css.perspective !== "none" || (css.containerType ? css.containerType !== "normal" : false) || !webkit && (css.backdropFilter ? css.backdropFilter !== "none" : false) || !webkit && (css.filter ? css.filter !== "none" : false) || ["transform", "perspective", "filter"].some((value) => (css.willChange || "").includes(value)) || ["paint", "layout", "strict", "content"].some((value) => (css.contain || "").includes(value));
}
function getContainingBlock(element) {
  let currentNode = getParentNode(element);
  while (isHTMLElement(currentNode) && !isLastTraversableNode(currentNode)) {
    if (isTopLayer(currentNode)) {
      return null;
    }
    if (isContainingBlock(currentNode)) {
      return currentNode;
    }
    currentNode = getParentNode(currentNode);
  }
  return null;
}
function isWebKit() {
  if (typeof CSS === "undefined" || !CSS.supports)
    return false;
  return CSS.supports("-webkit-backdrop-filter", "none");
}
function isLastTraversableNode(node) {
  return ["html", "body", "#document"].includes(getNodeName(node));
}
function getComputedStyle2(element) {
  return getWindow(element).getComputedStyle(element);
}
function getNodeScroll(element) {
  if (isElement(element)) {
    return {
      scrollLeft: element.scrollLeft,
      scrollTop: element.scrollTop
    };
  }
  return {
    scrollLeft: element.scrollX,
    scrollTop: element.scrollY
  };
}
function getParentNode(node) {
  if (getNodeName(node) === "html") {
    return node;
  }
  const result = (
    // Step into the shadow DOM of the parent of a slotted node.
    node.assignedSlot || // DOM Element detected.
    node.parentNode || // ShadowRoot detected.
    isShadowRoot(node) && node.host || // Fallback.
    getDocumentElement(node)
  );
  return isShadowRoot(result) ? result.host : result;
}
function getNearestOverflowAncestor(node) {
  const parentNode = getParentNode(node);
  if (isLastTraversableNode(parentNode)) {
    return node.ownerDocument ? node.ownerDocument.body : node.body;
  }
  if (isHTMLElement(parentNode) && isOverflowElement(parentNode)) {
    return parentNode;
  }
  return getNearestOverflowAncestor(parentNode);
}
function getOverflowAncestors(node, list, traverseIframes) {
  var _node$ownerDocument2;
  if (list === void 0) {
    list = [];
  }
  if (traverseIframes === void 0) {
    traverseIframes = true;
  }
  const scrollableAncestor = getNearestOverflowAncestor(node);
  const isBody = scrollableAncestor === ((_node$ownerDocument2 = node.ownerDocument) == null ? void 0 : _node$ownerDocument2.body);
  const win = getWindow(scrollableAncestor);
  if (isBody) {
    return list.concat(win, win.visualViewport || [], isOverflowElement(scrollableAncestor) ? scrollableAncestor : [], win.frameElement && traverseIframes ? getOverflowAncestors(win.frameElement) : []);
  }
  return list.concat(scrollableAncestor, getOverflowAncestors(scrollableAncestor, [], traverseIframes));
}
var init_floating_ui_utils_dom = __esm({
  "node_modules/@floating-ui/utils/dist/floating-ui.utils.dom.mjs"() {
    __name(getNodeName, "getNodeName");
    __name(getWindow, "getWindow");
    __name(getDocumentElement, "getDocumentElement");
    __name(isNode, "isNode");
    __name(isElement, "isElement");
    __name(isHTMLElement, "isHTMLElement");
    __name(isShadowRoot, "isShadowRoot");
    __name(isOverflowElement, "isOverflowElement");
    __name(isTableElement, "isTableElement");
    __name(isTopLayer, "isTopLayer");
    __name(isContainingBlock, "isContainingBlock");
    __name(getContainingBlock, "getContainingBlock");
    __name(isWebKit, "isWebKit");
    __name(isLastTraversableNode, "isLastTraversableNode");
    __name(getComputedStyle2, "getComputedStyle");
    __name(getNodeScroll, "getNodeScroll");
    __name(getParentNode, "getParentNode");
    __name(getNearestOverflowAncestor, "getNearestOverflowAncestor");
    __name(getOverflowAncestors, "getOverflowAncestors");
  }
});

// node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs
function getCssDimensions(element) {
  const css = getComputedStyle2(element);
  let width = parseFloat(css.width) || 0;
  let height = parseFloat(css.height) || 0;
  const hasOffset = isHTMLElement(element);
  const offsetWidth = hasOffset ? element.offsetWidth : width;
  const offsetHeight = hasOffset ? element.offsetHeight : height;
  const shouldFallback = round(width) !== offsetWidth || round(height) !== offsetHeight;
  if (shouldFallback) {
    width = offsetWidth;
    height = offsetHeight;
  }
  return {
    width,
    height,
    $: shouldFallback
  };
}
function unwrapElement(element) {
  return !isElement(element) ? element.contextElement : element;
}
function getScale(element) {
  const domElement = unwrapElement(element);
  if (!isHTMLElement(domElement)) {
    return createCoords(1);
  }
  const rect = domElement.getBoundingClientRect();
  const {
    width,
    height,
    $
  } = getCssDimensions(domElement);
  let x = ($ ? round(rect.width) : rect.width) / width;
  let y = ($ ? round(rect.height) : rect.height) / height;
  if (!x || !Number.isFinite(x)) {
    x = 1;
  }
  if (!y || !Number.isFinite(y)) {
    y = 1;
  }
  return {
    x,
    y
  };
}
function getVisualOffsets(element) {
  const win = getWindow(element);
  if (!isWebKit() || !win.visualViewport) {
    return noOffsets;
  }
  return {
    x: win.visualViewport.offsetLeft,
    y: win.visualViewport.offsetTop
  };
}
function shouldAddVisualOffsets(element, isFixed, floatingOffsetParent) {
  if (isFixed === void 0) {
    isFixed = false;
  }
  if (!floatingOffsetParent || isFixed && floatingOffsetParent !== getWindow(element)) {
    return false;
  }
  return isFixed;
}
function getBoundingClientRect(element, includeScale, isFixedStrategy, offsetParent) {
  if (includeScale === void 0) {
    includeScale = false;
  }
  if (isFixedStrategy === void 0) {
    isFixedStrategy = false;
  }
  const clientRect = element.getBoundingClientRect();
  const domElement = unwrapElement(element);
  let scale = createCoords(1);
  if (includeScale) {
    if (offsetParent) {
      if (isElement(offsetParent)) {
        scale = getScale(offsetParent);
      }
    } else {
      scale = getScale(element);
    }
  }
  const visualOffsets = shouldAddVisualOffsets(domElement, isFixedStrategy, offsetParent) ? getVisualOffsets(domElement) : createCoords(0);
  let x = (clientRect.left + visualOffsets.x) / scale.x;
  let y = (clientRect.top + visualOffsets.y) / scale.y;
  let width = clientRect.width / scale.x;
  let height = clientRect.height / scale.y;
  if (domElement) {
    const win = getWindow(domElement);
    const offsetWin = offsetParent && isElement(offsetParent) ? getWindow(offsetParent) : offsetParent;
    let currentWin = win;
    let currentIFrame = currentWin.frameElement;
    while (currentIFrame && offsetParent && offsetWin !== currentWin) {
      const iframeScale = getScale(currentIFrame);
      const iframeRect = currentIFrame.getBoundingClientRect();
      const css = getComputedStyle2(currentIFrame);
      const left = iframeRect.left + (currentIFrame.clientLeft + parseFloat(css.paddingLeft)) * iframeScale.x;
      const top = iframeRect.top + (currentIFrame.clientTop + parseFloat(css.paddingTop)) * iframeScale.y;
      x *= iframeScale.x;
      y *= iframeScale.y;
      width *= iframeScale.x;
      height *= iframeScale.y;
      x += left;
      y += top;
      currentWin = getWindow(currentIFrame);
      currentIFrame = currentWin.frameElement;
    }
  }
  return rectToClientRect({
    width,
    height,
    x,
    y
  });
}
function convertOffsetParentRelativeRectToViewportRelativeRect(_ref) {
  let {
    elements,
    rect,
    offsetParent,
    strategy
  } = _ref;
  const isFixed = strategy === "fixed";
  const documentElement = getDocumentElement(offsetParent);
  const topLayer = elements ? isTopLayer(elements.floating) : false;
  if (offsetParent === documentElement || topLayer && isFixed) {
    return rect;
  }
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  let scale = createCoords(1);
  const offsets = createCoords(0);
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isHTMLElement(offsetParent)) {
      const offsetRect = getBoundingClientRect(offsetParent);
      scale = getScale(offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    }
  }
  return {
    width: rect.width * scale.x,
    height: rect.height * scale.y,
    x: rect.x * scale.x - scroll.scrollLeft * scale.x + offsets.x,
    y: rect.y * scale.y - scroll.scrollTop * scale.y + offsets.y
  };
}
function getClientRects(element) {
  return Array.from(element.getClientRects());
}
function getWindowScrollBarX(element) {
  return getBoundingClientRect(getDocumentElement(element)).left + getNodeScroll(element).scrollLeft;
}
function getDocumentRect(element) {
  const html = getDocumentElement(element);
  const scroll = getNodeScroll(element);
  const body = element.ownerDocument.body;
  const width = max(html.scrollWidth, html.clientWidth, body.scrollWidth, body.clientWidth);
  const height = max(html.scrollHeight, html.clientHeight, body.scrollHeight, body.clientHeight);
  let x = -scroll.scrollLeft + getWindowScrollBarX(element);
  const y = -scroll.scrollTop;
  if (getComputedStyle2(body).direction === "rtl") {
    x += max(html.clientWidth, body.clientWidth) - width;
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getViewportRect(element, strategy) {
  const win = getWindow(element);
  const html = getDocumentElement(element);
  const visualViewport = win.visualViewport;
  let width = html.clientWidth;
  let height = html.clientHeight;
  let x = 0;
  let y = 0;
  if (visualViewport) {
    width = visualViewport.width;
    height = visualViewport.height;
    const visualViewportBased = isWebKit();
    if (!visualViewportBased || visualViewportBased && strategy === "fixed") {
      x = visualViewport.offsetLeft;
      y = visualViewport.offsetTop;
    }
  }
  return {
    width,
    height,
    x,
    y
  };
}
function getInnerBoundingClientRect(element, strategy) {
  const clientRect = getBoundingClientRect(element, true, strategy === "fixed");
  const top = clientRect.top + element.clientTop;
  const left = clientRect.left + element.clientLeft;
  const scale = isHTMLElement(element) ? getScale(element) : createCoords(1);
  const width = element.clientWidth * scale.x;
  const height = element.clientHeight * scale.y;
  const x = left * scale.x;
  const y = top * scale.y;
  return {
    width,
    height,
    x,
    y
  };
}
function getClientRectFromClippingAncestor(element, clippingAncestor, strategy) {
  let rect;
  if (clippingAncestor === "viewport") {
    rect = getViewportRect(element, strategy);
  } else if (clippingAncestor === "document") {
    rect = getDocumentRect(getDocumentElement(element));
  } else if (isElement(clippingAncestor)) {
    rect = getInnerBoundingClientRect(clippingAncestor, strategy);
  } else {
    const visualOffsets = getVisualOffsets(element);
    rect = {
      ...clippingAncestor,
      x: clippingAncestor.x - visualOffsets.x,
      y: clippingAncestor.y - visualOffsets.y
    };
  }
  return rectToClientRect(rect);
}
function hasFixedPositionAncestor(element, stopNode) {
  const parentNode = getParentNode(element);
  if (parentNode === stopNode || !isElement(parentNode) || isLastTraversableNode(parentNode)) {
    return false;
  }
  return getComputedStyle2(parentNode).position === "fixed" || hasFixedPositionAncestor(parentNode, stopNode);
}
function getClippingElementAncestors(element, cache) {
  const cachedResult = cache.get(element);
  if (cachedResult) {
    return cachedResult;
  }
  let result = getOverflowAncestors(element, [], false).filter((el) => isElement(el) && getNodeName(el) !== "body");
  let currentContainingBlockComputedStyle = null;
  const elementIsFixed = getComputedStyle2(element).position === "fixed";
  let currentNode = elementIsFixed ? getParentNode(element) : element;
  while (isElement(currentNode) && !isLastTraversableNode(currentNode)) {
    const computedStyle = getComputedStyle2(currentNode);
    const currentNodeIsContaining = isContainingBlock(currentNode);
    if (!currentNodeIsContaining && computedStyle.position === "fixed") {
      currentContainingBlockComputedStyle = null;
    }
    const shouldDropCurrentNode = elementIsFixed ? !currentNodeIsContaining && !currentContainingBlockComputedStyle : !currentNodeIsContaining && computedStyle.position === "static" && !!currentContainingBlockComputedStyle && ["absolute", "fixed"].includes(currentContainingBlockComputedStyle.position) || isOverflowElement(currentNode) && !currentNodeIsContaining && hasFixedPositionAncestor(element, currentNode);
    if (shouldDropCurrentNode) {
      result = result.filter((ancestor) => ancestor !== currentNode);
    } else {
      currentContainingBlockComputedStyle = computedStyle;
    }
    currentNode = getParentNode(currentNode);
  }
  cache.set(element, result);
  return result;
}
function getClippingRect(_ref) {
  let {
    element,
    boundary,
    rootBoundary,
    strategy
  } = _ref;
  const elementClippingAncestors = boundary === "clippingAncestors" ? isTopLayer(element) ? [] : getClippingElementAncestors(element, this._c) : [].concat(boundary);
  const clippingAncestors = [...elementClippingAncestors, rootBoundary];
  const firstClippingAncestor = clippingAncestors[0];
  const clippingRect = clippingAncestors.reduce((accRect, clippingAncestor) => {
    const rect = getClientRectFromClippingAncestor(element, clippingAncestor, strategy);
    accRect.top = max(rect.top, accRect.top);
    accRect.right = min(rect.right, accRect.right);
    accRect.bottom = min(rect.bottom, accRect.bottom);
    accRect.left = max(rect.left, accRect.left);
    return accRect;
  }, getClientRectFromClippingAncestor(element, firstClippingAncestor, strategy));
  return {
    width: clippingRect.right - clippingRect.left,
    height: clippingRect.bottom - clippingRect.top,
    x: clippingRect.left,
    y: clippingRect.top
  };
}
function getDimensions(element) {
  const {
    width,
    height
  } = getCssDimensions(element);
  return {
    width,
    height
  };
}
function getRectRelativeToOffsetParent(element, offsetParent, strategy) {
  const isOffsetParentAnElement = isHTMLElement(offsetParent);
  const documentElement = getDocumentElement(offsetParent);
  const isFixed = strategy === "fixed";
  const rect = getBoundingClientRect(element, true, isFixed, offsetParent);
  let scroll = {
    scrollLeft: 0,
    scrollTop: 0
  };
  const offsets = createCoords(0);
  if (isOffsetParentAnElement || !isOffsetParentAnElement && !isFixed) {
    if (getNodeName(offsetParent) !== "body" || isOverflowElement(documentElement)) {
      scroll = getNodeScroll(offsetParent);
    }
    if (isOffsetParentAnElement) {
      const offsetRect = getBoundingClientRect(offsetParent, true, isFixed, offsetParent);
      offsets.x = offsetRect.x + offsetParent.clientLeft;
      offsets.y = offsetRect.y + offsetParent.clientTop;
    } else if (documentElement) {
      offsets.x = getWindowScrollBarX(documentElement);
    }
  }
  const x = rect.left + scroll.scrollLeft - offsets.x;
  const y = rect.top + scroll.scrollTop - offsets.y;
  return {
    x,
    y,
    width: rect.width,
    height: rect.height
  };
}
function isStaticPositioned(element) {
  return getComputedStyle2(element).position === "static";
}
function getTrueOffsetParent(element, polyfill) {
  if (!isHTMLElement(element) || getComputedStyle2(element).position === "fixed") {
    return null;
  }
  if (polyfill) {
    return polyfill(element);
  }
  return element.offsetParent;
}
function getOffsetParent(element, polyfill) {
  const win = getWindow(element);
  if (isTopLayer(element)) {
    return win;
  }
  if (!isHTMLElement(element)) {
    let svgOffsetParent = getParentNode(element);
    while (svgOffsetParent && !isLastTraversableNode(svgOffsetParent)) {
      if (isElement(svgOffsetParent) && !isStaticPositioned(svgOffsetParent)) {
        return svgOffsetParent;
      }
      svgOffsetParent = getParentNode(svgOffsetParent);
    }
    return win;
  }
  let offsetParent = getTrueOffsetParent(element, polyfill);
  while (offsetParent && isTableElement(offsetParent) && isStaticPositioned(offsetParent)) {
    offsetParent = getTrueOffsetParent(offsetParent, polyfill);
  }
  if (offsetParent && isLastTraversableNode(offsetParent) && isStaticPositioned(offsetParent) && !isContainingBlock(offsetParent)) {
    return win;
  }
  return offsetParent || getContainingBlock(element) || win;
}
function isRTL(element) {
  return getComputedStyle2(element).direction === "rtl";
}
function observeMove(element, onMove) {
  let io = null;
  let timeoutId2;
  const root = getDocumentElement(element);
  function cleanup() {
    var _io;
    clearTimeout(timeoutId2);
    (_io = io) == null || _io.disconnect();
    io = null;
  }
  __name(cleanup, "cleanup");
  function refresh(skip2, threshold) {
    if (skip2 === void 0) {
      skip2 = false;
    }
    if (threshold === void 0) {
      threshold = 1;
    }
    cleanup();
    const {
      left,
      top,
      width,
      height
    } = element.getBoundingClientRect();
    if (!skip2) {
      onMove();
    }
    if (!width || !height) {
      return;
    }
    const insetTop = floor(top);
    const insetRight = floor(root.clientWidth - (left + width));
    const insetBottom = floor(root.clientHeight - (top + height));
    const insetLeft = floor(left);
    const rootMargin = -insetTop + "px " + -insetRight + "px " + -insetBottom + "px " + -insetLeft + "px";
    const options = {
      rootMargin,
      threshold: max(0, min(1, threshold)) || 1
    };
    let isFirstUpdate = true;
    function handleObserve(entries) {
      const ratio = entries[0].intersectionRatio;
      if (ratio !== threshold) {
        if (!isFirstUpdate) {
          return refresh();
        }
        if (!ratio) {
          timeoutId2 = setTimeout(() => {
            refresh(false, 1e-7);
          }, 1e3);
        } else {
          refresh(false, ratio);
        }
      }
      isFirstUpdate = false;
    }
    __name(handleObserve, "handleObserve");
    try {
      io = new IntersectionObserver(handleObserve, {
        ...options,
        // Handle <iframe>s
        root: root.ownerDocument
      });
    } catch (e) {
      io = new IntersectionObserver(handleObserve, options);
    }
    io.observe(element);
  }
  __name(refresh, "refresh");
  refresh(true);
  return cleanup;
}
function autoUpdate(reference, floating, update, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    ancestorScroll = true,
    ancestorResize = true,
    elementResize = typeof ResizeObserver === "function",
    layoutShift = typeof IntersectionObserver === "function",
    animationFrame = false
  } = options;
  const referenceEl = unwrapElement(reference);
  const ancestors = ancestorScroll || ancestorResize ? [...referenceEl ? getOverflowAncestors(referenceEl) : [], ...getOverflowAncestors(floating)] : [];
  ancestors.forEach((ancestor) => {
    ancestorScroll && ancestor.addEventListener("scroll", update, {
      passive: true
    });
    ancestorResize && ancestor.addEventListener("resize", update);
  });
  const cleanupIo = referenceEl && layoutShift ? observeMove(referenceEl, update) : null;
  let reobserveFrame = -1;
  let resizeObserver = null;
  if (elementResize) {
    resizeObserver = new ResizeObserver((_ref) => {
      let [firstEntry] = _ref;
      if (firstEntry && firstEntry.target === referenceEl && resizeObserver) {
        resizeObserver.unobserve(floating);
        cancelAnimationFrame(reobserveFrame);
        reobserveFrame = requestAnimationFrame(() => {
          var _resizeObserver;
          (_resizeObserver = resizeObserver) == null || _resizeObserver.observe(floating);
        });
      }
      update();
    });
    if (referenceEl && !animationFrame) {
      resizeObserver.observe(referenceEl);
    }
    resizeObserver.observe(floating);
  }
  let frameId;
  let prevRefRect = animationFrame ? getBoundingClientRect(reference) : null;
  if (animationFrame) {
    frameLoop();
  }
  function frameLoop() {
    const nextRefRect = getBoundingClientRect(reference);
    if (prevRefRect && (nextRefRect.x !== prevRefRect.x || nextRefRect.y !== prevRefRect.y || nextRefRect.width !== prevRefRect.width || nextRefRect.height !== prevRefRect.height)) {
      update();
    }
    prevRefRect = nextRefRect;
    frameId = requestAnimationFrame(frameLoop);
  }
  __name(frameLoop, "frameLoop");
  update();
  return () => {
    var _resizeObserver2;
    ancestors.forEach((ancestor) => {
      ancestorScroll && ancestor.removeEventListener("scroll", update);
      ancestorResize && ancestor.removeEventListener("resize", update);
    });
    cleanupIo == null || cleanupIo();
    (_resizeObserver2 = resizeObserver) == null || _resizeObserver2.disconnect();
    resizeObserver = null;
    if (animationFrame) {
      cancelAnimationFrame(frameId);
    }
  };
}
var noOffsets, getElementRects, platform, detectOverflow2, offset2, autoPlacement2, shift2, flip2, size2, hide2, arrow2, inline2, limitShift2, computePosition2;
var init_floating_ui_dom = __esm({
  "node_modules/@floating-ui/dom/dist/floating-ui.dom.mjs"() {
    init_floating_ui_core();
    init_floating_ui_utils();
    init_floating_ui_utils_dom();
    init_floating_ui_utils_dom();
    __name(getCssDimensions, "getCssDimensions");
    __name(unwrapElement, "unwrapElement");
    __name(getScale, "getScale");
    noOffsets = /* @__PURE__ */ createCoords(0);
    __name(getVisualOffsets, "getVisualOffsets");
    __name(shouldAddVisualOffsets, "shouldAddVisualOffsets");
    __name(getBoundingClientRect, "getBoundingClientRect");
    __name(convertOffsetParentRelativeRectToViewportRelativeRect, "convertOffsetParentRelativeRectToViewportRelativeRect");
    __name(getClientRects, "getClientRects");
    __name(getWindowScrollBarX, "getWindowScrollBarX");
    __name(getDocumentRect, "getDocumentRect");
    __name(getViewportRect, "getViewportRect");
    __name(getInnerBoundingClientRect, "getInnerBoundingClientRect");
    __name(getClientRectFromClippingAncestor, "getClientRectFromClippingAncestor");
    __name(hasFixedPositionAncestor, "hasFixedPositionAncestor");
    __name(getClippingElementAncestors, "getClippingElementAncestors");
    __name(getClippingRect, "getClippingRect");
    __name(getDimensions, "getDimensions");
    __name(getRectRelativeToOffsetParent, "getRectRelativeToOffsetParent");
    __name(isStaticPositioned, "isStaticPositioned");
    __name(getTrueOffsetParent, "getTrueOffsetParent");
    __name(getOffsetParent, "getOffsetParent");
    getElementRects = /* @__PURE__ */ __name(async function(data) {
      const getOffsetParentFn = this.getOffsetParent || getOffsetParent;
      const getDimensionsFn = this.getDimensions;
      const floatingDimensions = await getDimensionsFn(data.floating);
      return {
        reference: getRectRelativeToOffsetParent(data.reference, await getOffsetParentFn(data.floating), data.strategy),
        floating: {
          x: 0,
          y: 0,
          width: floatingDimensions.width,
          height: floatingDimensions.height
        }
      };
    }, "getElementRects");
    __name(isRTL, "isRTL");
    platform = {
      convertOffsetParentRelativeRectToViewportRelativeRect,
      getDocumentElement,
      getClippingRect,
      getOffsetParent,
      getElementRects,
      getClientRects,
      getDimensions,
      getScale,
      isElement,
      isRTL
    };
    __name(observeMove, "observeMove");
    __name(autoUpdate, "autoUpdate");
    detectOverflow2 = detectOverflow;
    offset2 = offset;
    autoPlacement2 = autoPlacement;
    shift2 = shift;
    flip2 = flip;
    size2 = size;
    hide2 = hide;
    arrow2 = arrow;
    inline2 = inline;
    limitShift2 = limitShift;
    computePosition2 = /* @__PURE__ */ __name((reference, floating, options) => {
      const cache = /* @__PURE__ */ new Map();
      const mergedOptions = {
        platform,
        ...options
      };
      const platformWithCache = {
        ...mergedOptions.platform,
        _c: cache
      };
      return computePosition(reference, floating, {
        ...mergedOptions,
        platform: platformWithCache
      });
    }, "computePosition");
  }
});

// node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.esm.js
var floating_ui_react_dom_esm_exports = {};
__export(floating_ui_react_dom_esm_exports, {
  arrow: () => arrow3,
  autoPlacement: () => autoPlacement2,
  autoUpdate: () => autoUpdate,
  computePosition: () => computePosition2,
  detectOverflow: () => detectOverflow2,
  flip: () => flip2,
  getOverflowAncestors: () => getOverflowAncestors,
  hide: () => hide2,
  inline: () => inline2,
  limitShift: () => limitShift2,
  offset: () => offset2,
  platform: () => platform,
  shift: () => shift2,
  size: () => size2,
  useFloating: () => useFloating2
});
function deepEqual(a, b) {
  if (a === b) {
    return true;
  }
  if (typeof a !== typeof b) {
    return false;
  }
  if (typeof a === "function" && a.toString() === b.toString()) {
    return true;
  }
  let length, i, keys;
  if (a && b && typeof a == "object") {
    if (Array.isArray(a)) {
      length = a.length;
      if (length != b.length)
        return false;
      for (i = length; i-- !== 0; ) {
        if (!deepEqual(a[i], b[i])) {
          return false;
        }
      }
      return true;
    }
    keys = Object.keys(a);
    length = keys.length;
    if (length !== Object.keys(b).length) {
      return false;
    }
    for (i = length; i-- !== 0; ) {
      if (!Object.prototype.hasOwnProperty.call(b, keys[i])) {
        return false;
      }
    }
    for (i = length; i-- !== 0; ) {
      const key = keys[i];
      if (key === "_owner" && a.$$typeof) {
        continue;
      }
      if (!deepEqual(a[key], b[key])) {
        return false;
      }
    }
    return true;
  }
  return a !== a && b !== b;
}
function useLatestRef(value) {
  const ref = React8.useRef(value);
  index(() => {
    ref.current = value;
  });
  return ref;
}
function useFloating2(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    placement = "bottom",
    strategy = "absolute",
    middleware = [],
    platform: platform2,
    whileElementsMounted,
    open
  } = options;
  const [data, setData] = React8.useState({
    x: null,
    y: null,
    strategy,
    placement,
    middlewareData: {},
    isPositioned: false
  });
  const [latestMiddleware, setLatestMiddleware] = React8.useState(middleware);
  if (!deepEqual(latestMiddleware, middleware)) {
    setLatestMiddleware(middleware);
  }
  const referenceRef = React8.useRef(null);
  const floatingRef = React8.useRef(null);
  const dataRef = React8.useRef(data);
  const whileElementsMountedRef = useLatestRef(whileElementsMounted);
  const platformRef = useLatestRef(platform2);
  const [reference, _setReference] = React8.useState(null);
  const [floating, _setFloating] = React8.useState(null);
  const setReference = React8.useCallback((node) => {
    if (referenceRef.current !== node) {
      referenceRef.current = node;
      _setReference(node);
    }
  }, []);
  const setFloating = React8.useCallback((node) => {
    if (floatingRef.current !== node) {
      floatingRef.current = node;
      _setFloating(node);
    }
  }, []);
  const update = React8.useCallback(() => {
    if (!referenceRef.current || !floatingRef.current) {
      return;
    }
    const config = {
      placement,
      strategy,
      middleware: latestMiddleware
    };
    if (platformRef.current) {
      config.platform = platformRef.current;
    }
    computePosition2(referenceRef.current, floatingRef.current, config).then((data2) => {
      const fullData = {
        ...data2,
        isPositioned: true
      };
      if (isMountedRef.current && !deepEqual(dataRef.current, fullData)) {
        dataRef.current = fullData;
        ReactDOM.flushSync(() => {
          setData(fullData);
        });
      }
    });
  }, [latestMiddleware, placement, strategy, platformRef]);
  index(() => {
    if (open === false && dataRef.current.isPositioned) {
      dataRef.current.isPositioned = false;
      setData((data2) => ({
        ...data2,
        isPositioned: false
      }));
    }
  }, [open]);
  const isMountedRef = React8.useRef(false);
  index(() => {
    isMountedRef.current = true;
    return () => {
      isMountedRef.current = false;
    };
  }, []);
  index(() => {
    if (reference && floating) {
      if (whileElementsMountedRef.current) {
        return whileElementsMountedRef.current(reference, floating, update);
      } else {
        update();
      }
    }
  }, [reference, floating, update, whileElementsMountedRef]);
  const refs = React8.useMemo(() => ({
    reference: referenceRef,
    floating: floatingRef,
    setReference,
    setFloating
  }), [setReference, setFloating]);
  const elements = React8.useMemo(() => ({
    reference,
    floating
  }), [reference, floating]);
  return React8.useMemo(() => ({
    ...data,
    update,
    refs,
    elements,
    reference: setReference,
    floating: setFloating
  }), [data, update, refs, elements, setReference, setFloating]);
}
var React8, import_react8, ReactDOM, arrow3, index;
var init_floating_ui_react_dom_esm = __esm({
  "node_modules/@floating-ui/react-dom/dist/floating-ui.react-dom.esm.js"() {
    init_floating_ui_dom();
    init_floating_ui_dom();
    React8 = __toESM(require("react"));
    import_react8 = require("react");
    ReactDOM = __toESM(require("react-dom"));
    arrow3 = /* @__PURE__ */ __name((options) => {
      const {
        element,
        padding
      } = options;
      function isRef(value) {
        return Object.prototype.hasOwnProperty.call(value, "current");
      }
      __name(isRef, "isRef");
      return {
        name: "arrow",
        options,
        fn(args) {
          if (isRef(element)) {
            if (element.current != null) {
              return arrow2({
                element: element.current,
                padding
              }).fn(args);
            }
            return {};
          } else if (element) {
            return arrow2({
              element,
              padding
            }).fn(args);
          }
          return {};
        }
      };
    }, "arrow");
    index = typeof document !== "undefined" ? import_react8.useLayoutEffect : import_react8.useEffect;
    __name(deepEqual, "deepEqual");
    __name(useLatestRef, "useLatestRef");
    __name(useFloating2, "useFloating");
  }
});

// node_modules/@tamagui/floating/dist/cjs/Floating.js
var require_Floating = __commonJS({
  "node_modules/@tamagui/floating/dist/cjs/Floating.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Floating_exports = {};
    module2.exports = __toCommonJS2(Floating_exports);
    __reExport2(Floating_exports, (init_floating_ui_react_dom_esm(), __toCommonJS(floating_ui_react_dom_esm_exports)), module2.exports);
  }
});

// node_modules/@tamagui/floating/dist/cjs/useFloating.js
var require_useFloating = __commonJS({
  "node_modules/@tamagui/floating/dist/cjs/useFloating.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var useFloating_exports = {};
    __export2(useFloating_exports, {
      FloatingOverrideContext: () => FloatingOverrideContext2,
      useFloating: () => useFloating4
    });
    module2.exports = __toCommonJS2(useFloating_exports);
    var import_react30 = require("react");
    var Floating = __toESM2(require_Floating());
    var FloatingOverrideContext2 = (0, import_react30.createContext)(null);
    var useFloating4 = /* @__PURE__ */ __name((props) => {
      var _a;
      const context = (0, import_react30.useContext)(FloatingOverrideContext2);
      return (_a = context || Floating.useFloating) == null ? void 0 : _a(props);
    }, "useFloating");
  }
});

// node_modules/@tamagui/floating/dist/cjs/index.js
var require_cjs33 = __commonJS({
  "node_modules/@tamagui/floating/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    __export2(src_exports, {
      FloatingOverrideContext: () => import_useFloating.FloatingOverrideContext,
      useFloating: () => import_useFloating.useFloating
    });
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Floating(), module2.exports);
    var import_useFloating = require_useFloating();
  }
});

// node_modules/@tamagui/popper/dist/cjs/Popper.js
var require_Popper = __commonJS({
  "node_modules/@tamagui/popper/dist/cjs/Popper.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Popper_exports = {};
    __export2(Popper_exports, {
      Popper: () => Popper,
      PopperAnchor: () => PopperAnchor,
      PopperArrow: () => PopperArrow,
      PopperContent: () => PopperContent,
      PopperContentFrame: () => PopperContentFrame,
      PopperProvider: () => PopperProvider,
      createPopperScope: () => createPopperScope,
      usePopperContext: () => usePopperContext
    });
    module2.exports = __toCommonJS2(Popper_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_compose_refs3 = require_cjs2();
    var import_core37 = require("@tamagui/core-node");
    var import_create_context5 = require_cjs3();
    var import_floating = require_cjs33();
    var import_get_size2 = require_cjs10();
    var import_stacks8 = require_cjs12();
    var React17 = __toESM2(require("react"));
    var import_react_native28 = require("react-native-web-lite");
    var POPPER_NAME = "Popper";
    var [createPopperContext, createScope] = (0, import_create_context5.createContextScope)(POPPER_NAME);
    var createPopperScope = createScope;
    var [PopperProvider, usePopperContext] = createPopperContext(POPPER_NAME);
    function Popper(props) {
      const {
        __scopePopper,
        children,
        size: size4,
        strategy = "absolute",
        placement = "bottom",
        stayInFrame,
        allowFlip
      } = props;
      const [isMounted, setIsMounted] = React17.useState(false);
      (0, import_core37.useIsomorphicLayoutEffect)(() => {
        setIsMounted(true);
      }, []);
      const anchorRef = React17.useRef();
      const [arrowEl, setArrow] = React17.useState(null);
      const [arrowSize, setArrowSize] = React17.useState(0);
      const arrowRef = React17.useRef();
      const floating = (0, import_floating.useFloating)({
        strategy,
        placement,
        sameScrollView: false,
        // this only takes effect on native
        middleware: [
          stayInFrame ? (0, import_floating.shift)(typeof stayInFrame === "boolean" ? {} : stayInFrame) : null,
          allowFlip ? (0, import_floating.flip)(typeof allowFlip === "boolean" ? {} : allowFlip) : null,
          arrowEl ? (0, import_floating.arrow)({ element: arrowEl }) : null,
          arrowSize ? (0, import_floating.offset)(arrowSize) : null
        ].filter(Boolean)
      });
      const { refs, middlewareData } = floating;
      const composedArrowRefs = (0, import_compose_refs3.useComposedRefs)(arrowRef, setArrow);
      (0, import_core37.useIsomorphicLayoutEffect)(() => {
        floating.reference(anchorRef.current);
      }, [anchorRef]);
      if (import_core37.isWeb) {
        React17.useEffect(() => {
          if (!(refs.reference.current && refs.floating.current)) {
            return;
          }
          return (0, import_floating.autoUpdate)(refs.reference.current, refs.floating.current, floating.update);
        }, [floating.update, refs.floating, refs.reference]);
      } else {
        const dimensions = (0, import_react_native28.useWindowDimensions)();
        const [keyboardOpen, setKeyboardOpen] = React17.useState(false);
        React17.useEffect(() => {
          const showSubscription = import_react_native28.Keyboard.addListener("keyboardDidShow", () => {
            setKeyboardOpen(true);
          });
          const hideSubscription = import_react_native28.Keyboard.addListener("keyboardDidHide", () => {
            setKeyboardOpen(false);
          });
          return () => {
            showSubscription.remove();
            hideSubscription.remove();
          };
        }, []);
        (0, import_core37.useIsomorphicLayoutEffect)(() => {
          floating.update();
        }, [dimensions, keyboardOpen]);
      }
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        PopperProvider,
        {
          scope: __scopePopper,
          anchorRef,
          size: size4,
          arrowRef: composedArrowRefs,
          arrowStyle: middlewareData.arrow,
          onArrowSize: setArrowSize,
          isMounted,
          ...floating,
          children
        }
      );
    }
    __name(Popper, "Popper");
    var ANCHOR_NAME = "PopperAnchor";
    var PopperAnchor = import_stacks8.YStack.extractable(
      React17.forwardRef(/* @__PURE__ */ __name(function PopperAnchor2(props, forwardedRef) {
        const { __scopePopper, virtualRef, ...anchorProps } = props;
        const { anchorRef, getReferenceProps } = usePopperContext(ANCHOR_NAME, __scopePopper);
        const ref = React17.useRef(null);
        const composedRefs = (0, import_compose_refs3.useComposedRefs)(forwardedRef, ref, anchorRef);
        if (virtualRef) {
          return null;
        }
        const stackProps = {
          ref: composedRefs,
          ...anchorProps
        };
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_stacks8.YStack, { ...getReferenceProps ? getReferenceProps(stackProps) : stackProps });
      }, "PopperAnchor2"))
    );
    var CONTENT_NAME2 = "PopperContent";
    var PopperContentFrame = (0, import_core37.styled)(import_stacks8.ThemeableStack, {
      name: "PopperContent",
      variants: {
        unstyled: {
          false: {
            size: "$true",
            backgroundColor: "$background",
            alignItems: "center",
            radiused: true
          }
        },
        size: {
          "...size": (val2, { tokens: tokens2 }) => {
            return {
              padding: tokens2.space[val2],
              borderRadius: tokens2.radius[val2]
            };
          }
        }
      },
      defaultVariants: {
        unstyled: false
      }
    });
    var PopperContent = React17.forwardRef(
      /* @__PURE__ */ __name(function PopperContent2(props, forwardedRef) {
        const { __scopePopper, ...contentProps } = props;
        const { strategy, placement, floating, x, y, getFloatingProps, size: size4, isMounted } = usePopperContext(CONTENT_NAME2, __scopePopper);
        const contentRefs = (0, import_compose_refs3.useComposedRefs)(floating, forwardedRef);
        const contents = React17.useMemo(() => {
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            PopperContentFrame,
            {
              "data-placement": placement,
              "data-strategy": strategy,
              size: contentProps.size || size4,
              ...contentProps
            },
            "popper-content-frame"
          );
        }, [placement, strategy, props]);
        if (!isMounted) {
          return null;
        }
        const frameProps = {
          ref: contentRefs,
          x: x || 0,
          y: y || 0,
          position: strategy
        };
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          import_stacks8.YStack,
          {
            animateOnly: ["transform"],
            ...getFloatingProps ? getFloatingProps(frameProps) : frameProps,
            children: contents
          }
        );
      }, "PopperContent2")
    );
    var ARROW_NAME = "PopperArrow";
    var PopperArrowFrame = (0, import_core37.styled)(import_stacks8.YStack, {
      name: "PopperArrow",
      variants: {
        unstyled: {
          false: {
            borderColor: "$borderColor",
            backgroundColor: "$background",
            position: "relative"
          }
        }
      },
      defaultVariants: {
        unstyled: false
      }
    });
    var PopperArrowOuterFrame = (0, import_core37.styled)(import_stacks8.YStack, {
      name: "PopperArrowOuter",
      variants: {
        unstyled: {
          false: {
            position: "absolute",
            zIndex: -1,
            pointerEvents: "none",
            overflow: "hidden",
            alignItems: "center",
            justifyContent: "center"
          }
        }
      },
      defaultVariants: {
        unstyled: false
      }
    });
    var opposites = {
      top: "bottom",
      right: "left",
      bottom: "top",
      left: "right"
    };
    var PopperArrow = PopperArrowFrame.extractable(
      React17.forwardRef(/* @__PURE__ */ __name(function PopperArrow2(props, forwardedRef) {
        var _a, _b;
        const {
          __scopePopper,
          offset: offset22,
          size: sizeProp,
          borderWidth = 0,
          ...arrowProps
        } = props;
        const context = usePopperContext(ARROW_NAME, __scopePopper);
        const sizeVal = sizeProp ?? context.size;
        const sizeValResolved = (0, import_core37.getVariableValue)((0, import_get_size2.stepTokenUpOrDown)("space", sizeVal, -2, [2]));
        const size4 = +sizeValResolved;
        const { placement } = context;
        const refs = (0, import_compose_refs3.useComposedRefs)(context.arrowRef, forwardedRef);
        const x = ((_a = context.arrowStyle) == null ? void 0 : _a.x) || 0;
        const y = ((_b = context.arrowStyle) == null ? void 0 : _b.y) || 0;
        const primaryPlacement = placement ? placement.split("-")[0] : "top";
        const arrowStyle = { x, y, width: size4, height: size4 };
        const innerArrowStyle = {};
        const isVertical = primaryPlacement === "bottom" || primaryPlacement === "top";
        if (primaryPlacement) {
          arrowStyle[isVertical ? "width" : "height"] = size4 * 2;
          const oppSide = opposites[primaryPlacement];
          if (oppSide) {
            arrowStyle[oppSide] = -size4;
            innerArrowStyle[oppSide] = size4 / 2;
          }
          if (oppSide === "top" || oppSide === "bottom") {
            arrowStyle.left = 0;
          }
          if (oppSide === "left" || oppSide === "right") {
            arrowStyle.top = 0;
          }
        }
        (0, import_core37.useIsomorphicLayoutEffect)(() => {
          var _a2;
          (_a2 = context.onArrowSize) == null ? void 0 : _a2.call(context, size4);
        }, [size4, context.onArrowSize]);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(PopperArrowOuterFrame, { ref: refs, ...arrowStyle, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          PopperArrowFrame,
          {
            width: size4,
            height: size4,
            ...arrowProps,
            ...innerArrowStyle,
            rotate: "45deg",
            ...primaryPlacement === "bottom" && {
              borderBottomWidth: borderWidth,
              borderRightWidth: borderWidth
            },
            ...primaryPlacement === "top" && {
              borderTopWidth: borderWidth,
              borderLeftWidth: borderWidth
            },
            ...primaryPlacement === "right" && {
              borderTopWidth: borderWidth,
              borderRightWidth: borderWidth
            },
            ...primaryPlacement === "left" && {
              borderBottomWidth: borderWidth,
              borderLeftWidth: borderWidth
            }
          }
        ) });
      }, "PopperArrow2"))
    );
  }
});

// node_modules/@tamagui/popper/dist/cjs/index.js
var require_cjs34 = __commonJS({
  "node_modules/@tamagui/popper/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Popper(), module2.exports);
  }
});

// node_modules/tabbable/dist/index.js
var require_dist4 = __commonJS({
  "node_modules/tabbable/dist/index.js"(exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    var candidateSelectors = ["input:not([inert])", "select:not([inert])", "textarea:not([inert])", "a[href]:not([inert])", "button:not([inert])", "[tabindex]:not(slot):not([inert])", "audio[controls]:not([inert])", "video[controls]:not([inert])", '[contenteditable]:not([contenteditable="false"]):not([inert])', "details>summary:first-of-type:not([inert])", "details:not([inert])"];
    var candidateSelector = /* @__PURE__ */ candidateSelectors.join(",");
    var NoElement = typeof Element === "undefined";
    var matches = NoElement ? function() {
    } : Element.prototype.matches || Element.prototype.msMatchesSelector || Element.prototype.webkitMatchesSelector;
    var getRootNode = !NoElement && Element.prototype.getRootNode ? function(element) {
      var _element$getRootNode;
      return element === null || element === void 0 ? void 0 : (_element$getRootNode = element.getRootNode) === null || _element$getRootNode === void 0 ? void 0 : _element$getRootNode.call(element);
    } : function(element) {
      return element === null || element === void 0 ? void 0 : element.ownerDocument;
    };
    var isInert = /* @__PURE__ */ __name(function isInert2(node, lookUp) {
      var _node$getAttribute;
      if (lookUp === void 0) {
        lookUp = true;
      }
      var inertAtt = node === null || node === void 0 ? void 0 : (_node$getAttribute = node.getAttribute) === null || _node$getAttribute === void 0 ? void 0 : _node$getAttribute.call(node, "inert");
      var inert = inertAtt === "" || inertAtt === "true";
      var result = inert || lookUp && node && isInert2(node.parentNode);
      return result;
    }, "isInert");
    var isContentEditable = /* @__PURE__ */ __name(function isContentEditable2(node) {
      var _node$getAttribute2;
      var attValue = node === null || node === void 0 ? void 0 : (_node$getAttribute2 = node.getAttribute) === null || _node$getAttribute2 === void 0 ? void 0 : _node$getAttribute2.call(node, "contenteditable");
      return attValue === "" || attValue === "true";
    }, "isContentEditable");
    var getCandidates = /* @__PURE__ */ __name(function getCandidates2(el, includeContainer, filter) {
      if (isInert(el)) {
        return [];
      }
      var candidates = Array.prototype.slice.apply(el.querySelectorAll(candidateSelector));
      if (includeContainer && matches.call(el, candidateSelector)) {
        candidates.unshift(el);
      }
      candidates = candidates.filter(filter);
      return candidates;
    }, "getCandidates");
    var getCandidatesIteratively = /* @__PURE__ */ __name(function getCandidatesIteratively2(elements, includeContainer, options) {
      var candidates = [];
      var elementsToCheck = Array.from(elements);
      while (elementsToCheck.length) {
        var element = elementsToCheck.shift();
        if (isInert(element, false)) {
          continue;
        }
        if (element.tagName === "SLOT") {
          var assigned = element.assignedElements();
          var content = assigned.length ? assigned : element.children;
          var nestedCandidates = getCandidatesIteratively2(content, true, options);
          if (options.flatten) {
            candidates.push.apply(candidates, nestedCandidates);
          } else {
            candidates.push({
              scopeParent: element,
              candidates: nestedCandidates
            });
          }
        } else {
          var validCandidate = matches.call(element, candidateSelector);
          if (validCandidate && options.filter(element) && (includeContainer || !elements.includes(element))) {
            candidates.push(element);
          }
          var shadowRoot = element.shadowRoot || // check for an undisclosed shadow
          typeof options.getShadowRoot === "function" && options.getShadowRoot(element);
          var validShadowRoot = !isInert(shadowRoot, false) && (!options.shadowRootFilter || options.shadowRootFilter(element));
          if (shadowRoot && validShadowRoot) {
            var _nestedCandidates = getCandidatesIteratively2(shadowRoot === true ? element.children : shadowRoot.children, true, options);
            if (options.flatten) {
              candidates.push.apply(candidates, _nestedCandidates);
            } else {
              candidates.push({
                scopeParent: element,
                candidates: _nestedCandidates
              });
            }
          } else {
            elementsToCheck.unshift.apply(elementsToCheck, element.children);
          }
        }
      }
      return candidates;
    }, "getCandidatesIteratively");
    var hasTabIndex = /* @__PURE__ */ __name(function hasTabIndex2(node) {
      return !isNaN(parseInt(node.getAttribute("tabindex"), 10));
    }, "hasTabIndex");
    var getTabIndex = /* @__PURE__ */ __name(function getTabIndex2(node) {
      if (!node) {
        throw new Error("No node provided");
      }
      if (node.tabIndex < 0) {
        if ((/^(AUDIO|VIDEO|DETAILS)$/.test(node.tagName) || isContentEditable(node)) && !hasTabIndex(node)) {
          return 0;
        }
      }
      return node.tabIndex;
    }, "getTabIndex");
    var getSortOrderTabIndex = /* @__PURE__ */ __name(function getSortOrderTabIndex2(node, isScope) {
      var tabIndex = getTabIndex(node);
      if (tabIndex < 0 && isScope && !hasTabIndex(node)) {
        return 0;
      }
      return tabIndex;
    }, "getSortOrderTabIndex");
    var sortOrderedTabbables = /* @__PURE__ */ __name(function sortOrderedTabbables2(a, b) {
      return a.tabIndex === b.tabIndex ? a.documentOrder - b.documentOrder : a.tabIndex - b.tabIndex;
    }, "sortOrderedTabbables");
    var isInput = /* @__PURE__ */ __name(function isInput2(node) {
      return node.tagName === "INPUT";
    }, "isInput");
    var isHiddenInput = /* @__PURE__ */ __name(function isHiddenInput2(node) {
      return isInput(node) && node.type === "hidden";
    }, "isHiddenInput");
    var isDetailsWithSummary = /* @__PURE__ */ __name(function isDetailsWithSummary2(node) {
      var r = node.tagName === "DETAILS" && Array.prototype.slice.apply(node.children).some(function(child) {
        return child.tagName === "SUMMARY";
      });
      return r;
    }, "isDetailsWithSummary");
    var getCheckedRadio = /* @__PURE__ */ __name(function getCheckedRadio2(nodes, form) {
      for (var i = 0; i < nodes.length; i++) {
        if (nodes[i].checked && nodes[i].form === form) {
          return nodes[i];
        }
      }
    }, "getCheckedRadio");
    var isTabbableRadio = /* @__PURE__ */ __name(function isTabbableRadio2(node) {
      if (!node.name) {
        return true;
      }
      var radioScope = node.form || getRootNode(node);
      var queryRadios = /* @__PURE__ */ __name(function queryRadios2(name) {
        return radioScope.querySelectorAll('input[type="radio"][name="' + name + '"]');
      }, "queryRadios");
      var radioSet;
      if (typeof window !== "undefined" && typeof window.CSS !== "undefined" && typeof window.CSS.escape === "function") {
        radioSet = queryRadios(window.CSS.escape(node.name));
      } else {
        try {
          radioSet = queryRadios(node.name);
        } catch (err) {
          console.error("Looks like you have a radio button with a name attribute containing invalid CSS selector characters and need the CSS.escape polyfill: %s", err.message);
          return false;
        }
      }
      var checked = getCheckedRadio(radioSet, node.form);
      return !checked || checked === node;
    }, "isTabbableRadio");
    var isRadio = /* @__PURE__ */ __name(function isRadio2(node) {
      return isInput(node) && node.type === "radio";
    }, "isRadio");
    var isNonTabbableRadio = /* @__PURE__ */ __name(function isNonTabbableRadio2(node) {
      return isRadio(node) && !isTabbableRadio(node);
    }, "isNonTabbableRadio");
    var isNodeAttached = /* @__PURE__ */ __name(function isNodeAttached2(node) {
      var _nodeRoot;
      var nodeRoot = node && getRootNode(node);
      var nodeRootHost = (_nodeRoot = nodeRoot) === null || _nodeRoot === void 0 ? void 0 : _nodeRoot.host;
      var attached = false;
      if (nodeRoot && nodeRoot !== node) {
        var _nodeRootHost, _nodeRootHost$ownerDo, _node$ownerDocument;
        attached = !!((_nodeRootHost = nodeRootHost) !== null && _nodeRootHost !== void 0 && (_nodeRootHost$ownerDo = _nodeRootHost.ownerDocument) !== null && _nodeRootHost$ownerDo !== void 0 && _nodeRootHost$ownerDo.contains(nodeRootHost) || node !== null && node !== void 0 && (_node$ownerDocument = node.ownerDocument) !== null && _node$ownerDocument !== void 0 && _node$ownerDocument.contains(node));
        while (!attached && nodeRootHost) {
          var _nodeRoot2, _nodeRootHost2, _nodeRootHost2$ownerD;
          nodeRoot = getRootNode(nodeRootHost);
          nodeRootHost = (_nodeRoot2 = nodeRoot) === null || _nodeRoot2 === void 0 ? void 0 : _nodeRoot2.host;
          attached = !!((_nodeRootHost2 = nodeRootHost) !== null && _nodeRootHost2 !== void 0 && (_nodeRootHost2$ownerD = _nodeRootHost2.ownerDocument) !== null && _nodeRootHost2$ownerD !== void 0 && _nodeRootHost2$ownerD.contains(nodeRootHost));
        }
      }
      return attached;
    }, "isNodeAttached");
    var isZeroArea = /* @__PURE__ */ __name(function isZeroArea2(node) {
      var _node$getBoundingClie = node.getBoundingClientRect(), width = _node$getBoundingClie.width, height = _node$getBoundingClie.height;
      return width === 0 && height === 0;
    }, "isZeroArea");
    var isHidden = /* @__PURE__ */ __name(function isHidden2(node, _ref) {
      var displayCheck = _ref.displayCheck, getShadowRoot = _ref.getShadowRoot;
      if (getComputedStyle(node).visibility === "hidden") {
        return true;
      }
      var isDirectSummary = matches.call(node, "details>summary:first-of-type");
      var nodeUnderDetails = isDirectSummary ? node.parentElement : node;
      if (matches.call(nodeUnderDetails, "details:not([open]) *")) {
        return true;
      }
      if (!displayCheck || displayCheck === "full" || displayCheck === "legacy-full") {
        if (typeof getShadowRoot === "function") {
          var originalNode = node;
          while (node) {
            var parentElement = node.parentElement;
            var rootNode = getRootNode(node);
            if (parentElement && !parentElement.shadowRoot && getShadowRoot(parentElement) === true) {
              return isZeroArea(node);
            } else if (node.assignedSlot) {
              node = node.assignedSlot;
            } else if (!parentElement && rootNode !== node.ownerDocument) {
              node = rootNode.host;
            } else {
              node = parentElement;
            }
          }
          node = originalNode;
        }
        if (isNodeAttached(node)) {
          return !node.getClientRects().length;
        }
        if (displayCheck !== "legacy-full") {
          return true;
        }
      } else if (displayCheck === "non-zero-area") {
        return isZeroArea(node);
      }
      return false;
    }, "isHidden");
    var isDisabledFromFieldset = /* @__PURE__ */ __name(function isDisabledFromFieldset2(node) {
      if (/^(INPUT|BUTTON|SELECT|TEXTAREA)$/.test(node.tagName)) {
        var parentNode = node.parentElement;
        while (parentNode) {
          if (parentNode.tagName === "FIELDSET" && parentNode.disabled) {
            for (var i = 0; i < parentNode.children.length; i++) {
              var child = parentNode.children.item(i);
              if (child.tagName === "LEGEND") {
                return matches.call(parentNode, "fieldset[disabled] *") ? true : !child.contains(node);
              }
            }
            return true;
          }
          parentNode = parentNode.parentElement;
        }
      }
      return false;
    }, "isDisabledFromFieldset");
    var isNodeMatchingSelectorFocusable = /* @__PURE__ */ __name(function isNodeMatchingSelectorFocusable2(options, node) {
      if (node.disabled || // we must do an inert look up to filter out any elements inside an inert ancestor
      //  because we're limited in the type of selectors we can use in JSDom (see related
      //  note related to `candidateSelectors`)
      isInert(node) || isHiddenInput(node) || isHidden(node, options) || // For a details element with a summary, the summary element gets the focus
      isDetailsWithSummary(node) || isDisabledFromFieldset(node)) {
        return false;
      }
      return true;
    }, "isNodeMatchingSelectorFocusable");
    var isNodeMatchingSelectorTabbable = /* @__PURE__ */ __name(function isNodeMatchingSelectorTabbable2(options, node) {
      if (isNonTabbableRadio(node) || getTabIndex(node) < 0 || !isNodeMatchingSelectorFocusable(options, node)) {
        return false;
      }
      return true;
    }, "isNodeMatchingSelectorTabbable");
    var isValidShadowRootTabbable = /* @__PURE__ */ __name(function isValidShadowRootTabbable2(shadowHostNode) {
      var tabIndex = parseInt(shadowHostNode.getAttribute("tabindex"), 10);
      if (isNaN(tabIndex) || tabIndex >= 0) {
        return true;
      }
      return false;
    }, "isValidShadowRootTabbable");
    var sortByOrder = /* @__PURE__ */ __name(function sortByOrder2(candidates) {
      var regularTabbables = [];
      var orderedTabbables = [];
      candidates.forEach(function(item, i) {
        var isScope = !!item.scopeParent;
        var element = isScope ? item.scopeParent : item;
        var candidateTabindex = getSortOrderTabIndex(element, isScope);
        var elements = isScope ? sortByOrder2(item.candidates) : element;
        if (candidateTabindex === 0) {
          isScope ? regularTabbables.push.apply(regularTabbables, elements) : regularTabbables.push(element);
        } else {
          orderedTabbables.push({
            documentOrder: i,
            tabIndex: candidateTabindex,
            item,
            isScope,
            content: elements
          });
        }
      });
      return orderedTabbables.sort(sortOrderedTabbables).reduce(function(acc2, sortable) {
        sortable.isScope ? acc2.push.apply(acc2, sortable.content) : acc2.push(sortable.content);
        return acc2;
      }, []).concat(regularTabbables);
    }, "sortByOrder");
    var tabbable2 = /* @__PURE__ */ __name(function tabbable3(container, options) {
      options = options || {};
      var candidates;
      if (options.getShadowRoot) {
        candidates = getCandidatesIteratively([container], options.includeContainer, {
          filter: isNodeMatchingSelectorTabbable.bind(null, options),
          flatten: false,
          getShadowRoot: options.getShadowRoot,
          shadowRootFilter: isValidShadowRootTabbable
        });
      } else {
        candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorTabbable.bind(null, options));
      }
      return sortByOrder(candidates);
    }, "tabbable");
    var focusable = /* @__PURE__ */ __name(function focusable2(container, options) {
      options = options || {};
      var candidates;
      if (options.getShadowRoot) {
        candidates = getCandidatesIteratively([container], options.includeContainer, {
          filter: isNodeMatchingSelectorFocusable.bind(null, options),
          flatten: true,
          getShadowRoot: options.getShadowRoot
        });
      } else {
        candidates = getCandidates(container, options.includeContainer, isNodeMatchingSelectorFocusable.bind(null, options));
      }
      return candidates;
    }, "focusable");
    var isTabbable = /* @__PURE__ */ __name(function isTabbable2(node, options) {
      options = options || {};
      if (!node) {
        throw new Error("No node provided");
      }
      if (matches.call(node, candidateSelector) === false) {
        return false;
      }
      return isNodeMatchingSelectorTabbable(options, node);
    }, "isTabbable");
    var focusableCandidateSelector = /* @__PURE__ */ candidateSelectors.concat("iframe").join(",");
    var isFocusable = /* @__PURE__ */ __name(function isFocusable2(node, options) {
      options = options || {};
      if (!node) {
        throw new Error("No node provided");
      }
      if (matches.call(node, focusableCandidateSelector) === false) {
        return false;
      }
      return isNodeMatchingSelectorFocusable(options, node);
    }, "isFocusable");
    exports.focusable = focusable;
    exports.getTabIndex = getTabIndex;
    exports.isFocusable = isFocusable;
    exports.isTabbable = isTabbable;
    exports.tabbable = tabbable2;
  }
});

// node_modules/@floating-ui/react/dist/floating-ui.react.esm.js
var floating_ui_react_esm_exports = {};
__export(floating_ui_react_esm_exports, {
  FloatingDelayGroup: () => FloatingDelayGroup,
  FloatingFocusManager: () => FloatingFocusManager,
  FloatingNode: () => FloatingNode,
  FloatingOverlay: () => FloatingOverlay,
  FloatingPortal: () => FloatingPortal,
  FloatingTree: () => FloatingTree,
  arrow: () => arrow3,
  autoPlacement: () => autoPlacement2,
  autoUpdate: () => autoUpdate,
  computePosition: () => computePosition2,
  detectOverflow: () => detectOverflow2,
  flip: () => flip2,
  getOverflowAncestors: () => getOverflowAncestors,
  hide: () => hide2,
  inline: () => inline2,
  inner: () => inner,
  limitShift: () => limitShift2,
  offset: () => offset2,
  platform: () => platform,
  safePolygon: () => safePolygon,
  shift: () => shift2,
  size: () => size2,
  useClick: () => useClick,
  useDelayGroup: () => useDelayGroup,
  useDelayGroupContext: () => useDelayGroupContext,
  useDismiss: () => useDismiss,
  useFloating: () => useFloating3,
  useFloatingNodeId: () => useFloatingNodeId,
  useFloatingParentNodeId: () => useFloatingParentNodeId,
  useFloatingPortalNode: () => useFloatingPortalNode,
  useFloatingTree: () => useFloatingTree,
  useFocus: () => useFocus,
  useHover: () => useHover,
  useId: () => useId3,
  useInnerOffset: () => useInnerOffset,
  useInteractions: () => useInteractions,
  useListNavigation: () => useListNavigation,
  useMergeRefs: () => useMergeRefs,
  useRole: () => useRole,
  useTransitionStatus: () => useTransitionStatus,
  useTransitionStyles: () => useTransitionStyles,
  useTypeahead: () => useTypeahead
});
function useFloatingId() {
  const [id, setId] = React9.useState(() => serverHandoffComplete ? genId() : void 0);
  index2(() => {
    if (id == null) {
      setId(genId());
    }
  }, []);
  React9.useEffect(() => {
    if (!serverHandoffComplete) {
      serverHandoffComplete = true;
    }
  }, []);
  return id;
}
function createPubSub() {
  const map = /* @__PURE__ */ new Map();
  return {
    emit(event, data) {
      var _map$get;
      (_map$get = map.get(event)) == null ? void 0 : _map$get.forEach((handler) => handler(data));
    },
    on(event, listener3) {
      map.set(event, [...map.get(event) || [], listener3]);
    },
    off(event, listener3) {
      map.set(event, (map.get(event) || []).filter((l) => l !== listener3));
    }
  };
}
function getDocument(node) {
  return (node == null ? void 0 : node.ownerDocument) || document;
}
function getPlatform() {
  const uaData = navigator.userAgentData;
  if (uaData != null && uaData.platform) {
    return uaData.platform;
  }
  return navigator.platform;
}
function getUserAgent() {
  const uaData = navigator.userAgentData;
  if (uaData && Array.isArray(uaData.brands)) {
    return uaData.brands.map((_ref) => {
      let {
        brand,
        version: version2
      } = _ref;
      return brand + "/" + version2;
    }).join(" ");
  }
  return navigator.userAgent;
}
function getWindow2(value) {
  return getDocument(value).defaultView || window;
}
function isElement2(value) {
  return value ? value instanceof getWindow2(value).Element : false;
}
function isHTMLElement2(value) {
  return value ? value instanceof getWindow2(value).HTMLElement : false;
}
function isShadowRoot2(node) {
  if (typeof ShadowRoot === "undefined") {
    return false;
  }
  const OwnElement = getWindow2(node).ShadowRoot;
  return node instanceof OwnElement || node instanceof ShadowRoot;
}
function isVirtualClick(event) {
  if (event.mozInputSource === 0 && event.isTrusted) {
    return true;
  }
  const androidRe = /Android/i;
  if ((androidRe.test(getPlatform()) || androidRe.test(getUserAgent())) && event.pointerType) {
    return event.type === "click" && event.buttons === 1;
  }
  return event.detail === 0 && !event.pointerType;
}
function isVirtualPointerEvent(event) {
  return event.width === 0 && event.height === 0 || event.width === 1 && event.height === 1 && event.pressure === 0 && event.detail === 0 && event.pointerType !== "mouse" || // iOS VoiceOver returns 0.333• for width/height.
  event.width < 1 && event.height < 1 && event.pressure === 0 && event.detail === 0;
}
function isSafari() {
  return /apple/i.test(navigator.vendor);
}
function isMac() {
  return getPlatform().toLowerCase().startsWith("mac") && !navigator.maxTouchPoints;
}
function isMouseLikePointerType(pointerType, strict) {
  const values = ["mouse", "pen"];
  if (!strict) {
    values.push("", void 0);
  }
  return values.includes(pointerType);
}
function useLatestRef2(value) {
  const ref = (0, import_react9.useRef)(value);
  index2(() => {
    ref.current = value;
  });
  return ref;
}
function getDelay(value, prop, pointerType) {
  if (pointerType && !isMouseLikePointerType(pointerType)) {
    return 0;
  }
  if (typeof value === "number") {
    return value;
  }
  return value == null ? void 0 : value[prop];
}
function _extends() {
  _extends = Object.assign || function(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function activeElement$1(doc) {
  let activeElement2 = doc.activeElement;
  while (((_activeElement = activeElement2) == null ? void 0 : (_activeElement$shadow = _activeElement.shadowRoot) == null ? void 0 : _activeElement$shadow.activeElement) != null) {
    var _activeElement, _activeElement$shadow;
    activeElement2 = activeElement2.shadowRoot.activeElement;
  }
  return activeElement2;
}
function contains(parent, child) {
  if (!parent || !child) {
    return false;
  }
  const rootNode = child.getRootNode && child.getRootNode();
  if (parent.contains(child)) {
    return true;
  } else if (rootNode && isShadowRoot2(rootNode)) {
    let next = child;
    do {
      if (next && parent === next) {
        return true;
      }
      next = next.parentNode || next.host;
    } while (next);
  }
  return false;
}
function enqueueFocus(el, options) {
  if (options === void 0) {
    options = {};
  }
  const {
    preventScroll = false,
    cancelPrevious = true,
    sync = false
  } = options;
  cancelPrevious && cancelAnimationFrame(rafId);
  const exec = /* @__PURE__ */ __name(() => el == null ? void 0 : el.focus({
    preventScroll
  }), "exec");
  if (sync) {
    exec();
  } else {
    rafId = requestAnimationFrame(exec);
  }
}
function getAncestors(nodes, id) {
  var _nodes$find;
  let allAncestors = [];
  let currentParentId = (_nodes$find = nodes.find((node) => node.id === id)) == null ? void 0 : _nodes$find.parentId;
  while (currentParentId) {
    const currentNode = nodes.find((node) => node.id === currentParentId);
    currentParentId = currentNode == null ? void 0 : currentNode.parentId;
    if (currentNode) {
      allAncestors = allAncestors.concat(currentNode);
    }
  }
  return allAncestors;
}
function getChildren(nodes, id) {
  let allChildren = nodes.filter((node) => {
    var _node$context;
    return node.parentId === id && ((_node$context = node.context) == null ? void 0 : _node$context.open);
  }) || [];
  let currentChildren = allChildren;
  while (currentChildren.length) {
    currentChildren = nodes.filter((node) => {
      var _currentChildren;
      return (_currentChildren = currentChildren) == null ? void 0 : _currentChildren.some((n) => {
        var _node$context2;
        return node.parentId === n.id && ((_node$context2 = node.context) == null ? void 0 : _node$context2.open);
      });
    }) || [];
    allChildren = allChildren.concat(currentChildren);
  }
  return allChildren;
}
function getTarget(event) {
  if ("composedPath" in event) {
    return event.composedPath()[0];
  }
  return event.target;
}
function isTypeableElement(element) {
  return isHTMLElement2(element) && element.matches(TYPEABLE_SELECTOR);
}
function stopEvent(event) {
  event.preventDefault();
  event.stopPropagation();
}
function getTabbableIn(container, direction) {
  const allTabbable = (0, import_tabbable.tabbable)(container, getTabbableOptions());
  if (direction === "prev") {
    allTabbable.reverse();
  }
  const activeIndex = allTabbable.indexOf(activeElement$1(getDocument(container)));
  const nextTabbableElements = allTabbable.slice(activeIndex + 1);
  return nextTabbableElements[0];
}
function getNextTabbable() {
  return getTabbableIn(document.body, "next");
}
function getPreviousTabbable() {
  return getTabbableIn(document.body, "prev");
}
function isOutsideEvent(event, container) {
  const containerElement = container || event.currentTarget;
  const relatedTarget = event.relatedTarget;
  return !relatedTarget || !contains(containerElement, relatedTarget);
}
function disableFocusInside(container) {
  const tabbableElements = (0, import_tabbable.tabbable)(container, getTabbableOptions());
  tabbableElements.forEach((element) => {
    element.dataset.tabindex = element.getAttribute("tabindex") || "";
    element.setAttribute("tabindex", "-1");
  });
}
function enableFocusInside(container) {
  const elements = container.querySelectorAll("[data-tabindex]");
  elements.forEach((element) => {
    const tabindex = element.dataset.tabindex;
    delete element.dataset.tabindex;
    if (tabindex) {
      element.setAttribute("tabindex", tabindex);
    } else {
      element.removeAttribute("tabindex");
    }
  });
}
function useEvent2(callback) {
  const ref = React9.useRef(() => {
    if (process.env.NODE_ENV !== "production") {
      throw new Error("Cannot call an event handler while rendering.");
    }
  });
  useSafeInsertionEffect(() => {
    ref.current = callback;
  });
  return React9.useCallback(function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return ref.current == null ? void 0 : ref.current(...args);
  }, []);
}
function setActiveElementOnTab(event) {
  if (event.key === "Tab") {
    activeElement = event.target;
    clearTimeout(timeoutId);
  }
}
function isTabFocus(event) {
  const result = activeElement === event.relatedTarget;
  activeElement = event.relatedTarget;
  clearTimeout(timeoutId);
  return result;
}
function FloatingFocusManager(_ref) {
  let {
    context,
    children,
    order = ["content"],
    guards = true,
    initialFocus = 0,
    returnFocus = true,
    modal = true,
    visuallyHiddenDismiss = false,
    closeOnFocusOut = true
  } = _ref;
  const {
    refs,
    nodeId,
    onOpenChange,
    events,
    dataRef,
    elements: {
      domReference,
      floating
    }
  } = context;
  const orderRef = useLatestRef2(order);
  const tree = useFloatingTree();
  const portalContext = usePortalContext2();
  const [tabbableContentLength, setTabbableContentLength] = React9.useState(null);
  const ignoreInitialFocus = typeof initialFocus === "number" && initialFocus < 0;
  const startDismissButtonRef = React9.useRef(null);
  const endDismissButtonRef = React9.useRef(null);
  const preventReturnFocusRef = React9.useRef(false);
  const previouslyFocusedElementRef = React9.useRef(null);
  const isPointerDownRef = React9.useRef(false);
  const isInsidePortal = portalContext != null;
  const isTypeableCombobox = domReference && domReference.getAttribute("role") === "combobox" && isTypeableElement(domReference);
  const getTabbableContent = React9.useCallback(function(container) {
    if (container === void 0) {
      container = floating;
    }
    return container ? (0, import_tabbable.tabbable)(container, getTabbableOptions()) : [];
  }, [floating]);
  const getTabbableElements = React9.useCallback((container) => {
    const content = getTabbableContent(container);
    return orderRef.current.map((type) => {
      if (domReference && type === "reference") {
        return domReference;
      }
      if (floating && type === "floating") {
        return floating;
      }
      return content;
    }).filter(Boolean).flat();
  }, [domReference, floating, orderRef, getTabbableContent]);
  React9.useEffect(() => {
    if (!modal) {
      return;
    }
    function onKeyDown(event) {
      if (event.key === "Tab") {
        if (getTabbableContent().length === 0 && !isTypeableCombobox) {
          stopEvent(event);
        }
        const els = getTabbableElements();
        const target = getTarget(event);
        if (orderRef.current[0] === "reference" && target === domReference) {
          stopEvent(event);
          if (event.shiftKey) {
            enqueueFocus(els[els.length - 1]);
          } else {
            enqueueFocus(els[1]);
          }
        }
        if (orderRef.current[1] === "floating" && target === floating && event.shiftKey) {
          stopEvent(event);
          enqueueFocus(els[0]);
        }
      }
    }
    __name(onKeyDown, "onKeyDown");
    const doc = getDocument(floating);
    doc.addEventListener("keydown", onKeyDown);
    return () => {
      doc.removeEventListener("keydown", onKeyDown);
    };
  }, [domReference, floating, modal, orderRef, refs, isTypeableCombobox, getTabbableContent, getTabbableElements]);
  React9.useEffect(() => {
    if (!closeOnFocusOut) {
      return;
    }
    function handlePointerDown() {
      isPointerDownRef.current = true;
      setTimeout(() => {
        isPointerDownRef.current = false;
      });
    }
    __name(handlePointerDown, "handlePointerDown");
    function handleFocusOutside(event) {
      const relatedTarget = event.relatedTarget;
      const movedToUnrelatedNode = !(contains(domReference, relatedTarget) || contains(floating, relatedTarget) || contains(relatedTarget, floating) || contains(portalContext == null ? void 0 : portalContext.portalNode, relatedTarget) || relatedTarget != null && relatedTarget.hasAttribute("data-floating-ui-focus-guard") || tree && (getChildren(tree.nodesRef.current, nodeId).find((node) => {
        var _node$context, _node$context2;
        return contains((_node$context = node.context) == null ? void 0 : _node$context.elements.floating, relatedTarget) || contains((_node$context2 = node.context) == null ? void 0 : _node$context2.elements.domReference, relatedTarget);
      }) || getAncestors(tree.nodesRef.current, nodeId).find((node) => {
        var _node$context3, _node$context4;
        return ((_node$context3 = node.context) == null ? void 0 : _node$context3.elements.floating) === relatedTarget || ((_node$context4 = node.context) == null ? void 0 : _node$context4.elements.domReference) === relatedTarget;
      })));
      if (relatedTarget && movedToUnrelatedNode && !isPointerDownRef.current && // Fix React 18 Strict Mode returnFocus due to double rendering.
      relatedTarget !== previouslyFocusedElementRef.current) {
        preventReturnFocusRef.current = true;
        setTimeout(() => onOpenChange(false));
      }
    }
    __name(handleFocusOutside, "handleFocusOutside");
    if (floating && isHTMLElement2(domReference)) {
      domReference.addEventListener("focusout", handleFocusOutside);
      domReference.addEventListener("pointerdown", handlePointerDown);
      !modal && floating.addEventListener("focusout", handleFocusOutside);
      return () => {
        domReference.removeEventListener("focusout", handleFocusOutside);
        domReference.removeEventListener("pointerdown", handlePointerDown);
        !modal && floating.removeEventListener("focusout", handleFocusOutside);
      };
    }
  }, [domReference, floating, modal, nodeId, tree, portalContext, onOpenChange, closeOnFocusOut]);
  React9.useEffect(() => {
    var _portalContext$portal;
    const portalNodes = Array.from((portalContext == null ? void 0 : (_portalContext$portal = portalContext.portalNode) == null ? void 0 : _portalContext$portal.querySelectorAll("[data-floating-ui-portal]")) || []);
    function getDismissButtons() {
      return [startDismissButtonRef.current, endDismissButtonRef.current].filter(Boolean);
    }
    __name(getDismissButtons, "getDismissButtons");
    if (floating && modal) {
      const insideNodes = [floating, ...portalNodes, ...getDismissButtons()];
      const cleanup = (0, import_aria_hidden2.hideOthers)(orderRef.current.includes("reference") || isTypeableCombobox ? insideNodes.concat(domReference || []) : insideNodes);
      return () => {
        cleanup();
      };
    }
  }, [domReference, floating, modal, orderRef, portalContext, isTypeableCombobox]);
  React9.useEffect(() => {
    if (modal && !guards && floating) {
      const tabIndexValues = [];
      const options = getTabbableOptions();
      const allTabbable = (0, import_tabbable.tabbable)(getDocument(floating).body, options);
      const floatingTabbable = getTabbableElements();
      const elements = allTabbable.filter((el) => !floatingTabbable.includes(el));
      elements.forEach((el, i) => {
        tabIndexValues[i] = el.getAttribute("tabindex");
        el.setAttribute("tabindex", "-1");
      });
      return () => {
        elements.forEach((el, i) => {
          const value = tabIndexValues[i];
          if (value == null) {
            el.removeAttribute("tabindex");
          } else {
            el.setAttribute("tabindex", value);
          }
        });
      };
    }
  }, [floating, modal, guards, getTabbableElements]);
  index2(() => {
    if (!floating)
      return;
    const doc = getDocument(floating);
    let returnFocusValue = returnFocus;
    let preventReturnFocusScroll = false;
    const previouslyFocusedElement = activeElement$1(doc);
    const contextData = dataRef.current;
    previouslyFocusedElementRef.current = previouslyFocusedElement;
    const focusableElements = getTabbableElements(floating);
    const elToFocus = (typeof initialFocus === "number" ? focusableElements[initialFocus] : initialFocus.current) || floating;
    !ignoreInitialFocus && enqueueFocus(elToFocus, {
      preventScroll: elToFocus === floating
    });
    function onDismiss(payload) {
      if (payload.type === "escapeKey" && refs.domReference.current) {
        previouslyFocusedElementRef.current = refs.domReference.current;
      }
      if (["referencePress", "escapeKey"].includes(payload.type)) {
        return;
      }
      const returnFocus2 = payload.data.returnFocus;
      if (typeof returnFocus2 === "object") {
        returnFocusValue = true;
        preventReturnFocusScroll = returnFocus2.preventScroll;
      } else {
        returnFocusValue = returnFocus2;
      }
    }
    __name(onDismiss, "onDismiss");
    events.on("dismiss", onDismiss);
    return () => {
      events.off("dismiss", onDismiss);
      if (contains(floating, activeElement$1(doc)) && refs.domReference.current) {
        previouslyFocusedElementRef.current = refs.domReference.current;
      }
      if (returnFocusValue && isHTMLElement2(previouslyFocusedElementRef.current) && !preventReturnFocusRef.current) {
        if (!refs.domReference.current || isPointerDownRef.current) {
          enqueueFocus(previouslyFocusedElementRef.current, {
            // When dismissing nested floating elements, by the time the rAF has
            // executed, the menus will all have been unmounted. When they try
            // to get focused, the calls get ignored — leaving the root
            // reference focused as desired.
            cancelPrevious: false,
            preventScroll: preventReturnFocusScroll
          });
        } else {
          var _previouslyFocusedEle;
          contextData.__syncReturnFocus = true;
          (_previouslyFocusedEle = previouslyFocusedElementRef.current) == null ? void 0 : _previouslyFocusedEle.focus({
            preventScroll: preventReturnFocusScroll
          });
          setTimeout(() => {
            delete contextData.__syncReturnFocus;
          });
        }
      }
    };
  }, [floating, getTabbableElements, initialFocus, returnFocus, dataRef, refs, events, ignoreInitialFocus]);
  index2(() => {
    if (!portalContext)
      return;
    portalContext.setFocusManagerState({
      ...context,
      modal,
      closeOnFocusOut
      // Not concerned about the <RT> generic type.
    });
    return () => {
      portalContext.setFocusManagerState(null);
    };
  }, [portalContext, modal, closeOnFocusOut, context]);
  index2(() => {
    if (ignoreInitialFocus || !floating)
      return;
    function setState() {
      setTabbableContentLength(getTabbableContent().length);
    }
    __name(setState, "setState");
    setState();
    if (typeof MutationObserver === "function") {
      const observer = new MutationObserver(setState);
      observer.observe(floating, {
        childList: true,
        subtree: true
      });
      return () => {
        observer.disconnect();
      };
    }
  }, [floating, getTabbableContent, ignoreInitialFocus, refs]);
  const shouldRenderGuards = guards && (isInsidePortal || modal) && !isTypeableCombobox;
  function renderDismissButton(location) {
    return visuallyHiddenDismiss && modal ? /* @__PURE__ */ React9.createElement(VisuallyHiddenDismiss, {
      ref: location === "start" ? startDismissButtonRef : endDismissButtonRef,
      onClick: () => onOpenChange(false)
    }, typeof visuallyHiddenDismiss === "string" ? visuallyHiddenDismiss : "Dismiss") : null;
  }
  __name(renderDismissButton, "renderDismissButton");
  return /* @__PURE__ */ React9.createElement(React9.Fragment, null, shouldRenderGuards && /* @__PURE__ */ React9.createElement(FocusGuard, {
    "data-type": "inside",
    ref: portalContext == null ? void 0 : portalContext.beforeInsideRef,
    onFocus: (event) => {
      if (modal) {
        const els = getTabbableElements();
        enqueueFocus(order[0] === "reference" ? els[0] : els[els.length - 1]);
      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {
        preventReturnFocusRef.current = false;
        if (isOutsideEvent(event, portalContext.portalNode)) {
          const nextTabbable = getNextTabbable() || domReference;
          nextTabbable == null ? void 0 : nextTabbable.focus();
        } else {
          var _portalContext$before;
          (_portalContext$before = portalContext.beforeOutsideRef.current) == null ? void 0 : _portalContext$before.focus();
        }
      }
    }
  }), isTypeableCombobox ? null : renderDismissButton("start"), /* @__PURE__ */ React9.cloneElement(children, tabbableContentLength === 0 || order.includes("floating") ? {
    tabIndex: 0
  } : {}), renderDismissButton("end"), shouldRenderGuards && /* @__PURE__ */ React9.createElement(FocusGuard, {
    "data-type": "inside",
    ref: portalContext == null ? void 0 : portalContext.afterInsideRef,
    onFocus: (event) => {
      if (modal) {
        enqueueFocus(getTabbableElements()[0]);
      } else if (portalContext != null && portalContext.preserveTabOrder && portalContext.portalNode) {
        preventReturnFocusRef.current = true;
        if (isOutsideEvent(event, portalContext.portalNode)) {
          const prevTabbable = getPreviousTabbable() || domReference;
          prevTabbable == null ? void 0 : prevTabbable.focus();
        } else {
          var _portalContext$afterO;
          (_portalContext$afterO = portalContext.afterOutsideRef.current) == null ? void 0 : _portalContext$afterO.focus();
        }
      }
    }
  }));
}
function isButtonTarget(event) {
  return isHTMLElement2(event.target) && event.target.tagName === "BUTTON";
}
function isSpaceIgnored(element) {
  return isTypeableElement(element);
}
function isEventTargetWithin(event, node) {
  if (node == null) {
    return false;
  }
  if ("composedPath" in event) {
    return event.composedPath().includes(node);
  }
  const e = event;
  return e.target != null && node.contains(e.target);
}
function isDifferentRow(index3, cols, prevRow) {
  return Math.floor(index3 / cols) !== prevRow;
}
function isIndexOutOfBounds(listRef, index3) {
  return index3 < 0 || index3 >= listRef.current.length;
}
function findNonDisabledIndex(listRef, _temp) {
  let {
    startingIndex = -1,
    decrement = false,
    disabledIndices,
    amount = 1
  } = _temp === void 0 ? {} : _temp;
  const list = listRef.current;
  let index3 = startingIndex;
  do {
    var _list$index, _list$index2;
    index3 = index3 + (decrement ? -amount : amount);
  } while (index3 >= 0 && index3 <= list.length - 1 && (disabledIndices ? disabledIndices.includes(index3) : list[index3] == null || ((_list$index = list[index3]) == null ? void 0 : _list$index.hasAttribute("disabled")) || ((_list$index2 = list[index3]) == null ? void 0 : _list$index2.getAttribute("aria-disabled")) === "true"));
  return index3;
}
function doSwitch(orientation, vertical, horizontal) {
  switch (orientation) {
    case "vertical":
      return vertical;
    case "horizontal":
      return horizontal;
    default:
      return vertical || horizontal;
  }
}
function isMainOrientationKey(key, orientation) {
  const vertical = key === ARROW_UP || key === ARROW_DOWN;
  const horizontal = key === ARROW_LEFT || key === ARROW_RIGHT;
  return doSwitch(orientation, vertical, horizontal);
}
function isMainOrientationToEndKey(key, orientation, rtl) {
  const vertical = key === ARROW_DOWN;
  const horizontal = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;
  return doSwitch(orientation, vertical, horizontal) || key === "Enter" || key == " " || key === "";
}
function isCrossOrientationOpenKey(key, orientation, rtl) {
  const vertical = rtl ? key === ARROW_LEFT : key === ARROW_RIGHT;
  const horizontal = key === ARROW_DOWN;
  return doSwitch(orientation, vertical, horizontal);
}
function isCrossOrientationCloseKey(key, orientation, rtl) {
  const vertical = rtl ? key === ARROW_RIGHT : key === ARROW_LEFT;
  const horizontal = key === ARROW_UP;
  return doSwitch(orientation, vertical, horizontal);
}
function getMinIndex(listRef, disabledIndices) {
  return findNonDisabledIndex(listRef, {
    disabledIndices
  });
}
function getMaxIndex(listRef, disabledIndices) {
  return findNonDisabledIndex(listRef, {
    decrement: true,
    startingIndex: listRef.current.length,
    disabledIndices
  });
}
function useMergeRefs(refs) {
  return React9.useMemo(() => {
    if (refs.every((ref) => ref == null)) {
      return null;
    }
    return (value) => {
      refs.forEach((ref) => {
        if (typeof ref === "function") {
          ref(value);
        } else if (ref != null) {
          ref.current = value;
        }
      });
    };
  }, refs);
}
function useDelayUnmount(open, durationMs) {
  const [isMounted, setIsMounted] = React9.useState(open);
  if (open && !isMounted) {
    setIsMounted(true);
  }
  React9.useEffect(() => {
    if (!open) {
      const timeout = setTimeout(() => setIsMounted(false), durationMs);
      return () => clearTimeout(timeout);
    }
  }, [open, durationMs]);
  return isMounted;
}
function useTransitionStatus(_ref, _temp) {
  let {
    open,
    elements: {
      floating
    }
  } = _ref;
  let {
    duration = 250
  } = _temp === void 0 ? {} : _temp;
  const isNumberDuration = typeof duration === "number";
  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;
  const [initiated, setInitiated] = React9.useState(false);
  const [status, setStatus] = React9.useState("unmounted");
  const isMounted = useDelayUnmount(open, closeDuration);
  index2(() => {
    if (initiated && !isMounted) {
      setStatus("unmounted");
    }
  }, [initiated, isMounted]);
  index2(() => {
    if (!floating)
      return;
    if (open) {
      setStatus("initial");
      const frame = requestAnimationFrame(() => {
        setStatus("open");
      });
      return () => {
        cancelAnimationFrame(frame);
      };
    } else {
      setInitiated(true);
      setStatus("close");
    }
  }, [open, floating]);
  return {
    isMounted,
    status
  };
}
function useTransitionStyles(context, _temp2) {
  let {
    initial: unstable_initial = {
      opacity: 0
    },
    open: unstable_open,
    close: unstable_close,
    common: unstable_common,
    duration = 250
  } = _temp2 === void 0 ? {} : _temp2;
  const placement = context.placement;
  const side = placement.split("-")[0];
  const [styles, setStyles] = React9.useState({});
  const {
    isMounted,
    status
  } = useTransitionStatus(context, {
    duration
  });
  const initialRef = useLatestRef2(unstable_initial);
  const openRef = useLatestRef2(unstable_open);
  const closeRef = useLatestRef2(unstable_close);
  const commonRef = useLatestRef2(unstable_common);
  const isNumberDuration = typeof duration === "number";
  const openDuration = (isNumberDuration ? duration : duration.open) || 0;
  const closeDuration = (isNumberDuration ? duration : duration.close) || 0;
  index2(() => {
    const fnArgs = {
      side,
      placement
    };
    const initial = initialRef.current;
    const close = closeRef.current;
    const open = openRef.current;
    const common = commonRef.current;
    const initialStyles = typeof initial === "function" ? initial(fnArgs) : initial;
    const closeStyles = typeof close === "function" ? close(fnArgs) : close;
    const commonStyles = typeof common === "function" ? common(fnArgs) : common;
    const openStyles = (typeof open === "function" ? open(fnArgs) : open) || Object.keys(initialStyles).reduce((acc2, key) => {
      acc2[key] = "";
      return acc2;
    }, {});
    if (status === "initial" || status === "unmounted") {
      setStyles((styles2) => ({
        transitionProperty: styles2.transitionProperty,
        ...commonStyles,
        ...initialStyles
      }));
    }
    if (status === "open") {
      setStyles({
        transitionProperty: Object.keys(openStyles).map(camelCaseToKebabCase).join(","),
        transitionDuration: openDuration + "ms",
        ...commonStyles,
        ...openStyles
      });
    }
    if (status === "close") {
      const styles2 = closeStyles || initialStyles;
      setStyles({
        transitionProperty: Object.keys(styles2).map(camelCaseToKebabCase).join(","),
        transitionDuration: closeDuration + "ms",
        ...commonStyles,
        ...styles2
      });
    }
  }, [side, placement, closeDuration, closeRef, initialRef, openRef, commonRef, openDuration, status]);
  return {
    isMounted,
    styles
  };
}
function getArgsWithCustomFloatingHeight(state, height) {
  return {
    ...state,
    rects: {
      ...state.rects,
      floating: {
        ...state.rects.floating,
        height
      }
    }
  };
}
function isPointInPolygon(point, polygon) {
  const [x, y] = point;
  let isInside2 = false;
  const length = polygon.length;
  for (let i = 0, j = length - 1; i < length; j = i++) {
    const [xi, yi] = polygon[i] || [0, 0];
    const [xj, yj] = polygon[j] || [0, 0];
    const intersect = yi >= y !== yj >= y && x <= (xj - xi) * (y - yi) / (yj - yi) + xi;
    if (intersect) {
      isInside2 = !isInside2;
    }
  }
  return isInside2;
}
function isInside(point, rect) {
  return point[0] >= rect.x && point[0] <= rect.x + rect.width && point[1] >= rect.y && point[1] <= rect.y + rect.height;
}
function safePolygon(_temp) {
  let {
    restMs = 0,
    buffer = 0.5,
    blockPointerEvents = false
  } = _temp === void 0 ? {} : _temp;
  let timeoutId2;
  let isInsideRect = false;
  let hasLanded = false;
  const fn = /* @__PURE__ */ __name((_ref) => {
    let {
      x,
      y,
      placement,
      elements,
      onClose,
      nodeId,
      tree
    } = _ref;
    return /* @__PURE__ */ __name(function onMouseMove(event) {
      function close() {
        clearTimeout(timeoutId2);
        onClose();
      }
      __name(close, "close");
      clearTimeout(timeoutId2);
      if (!elements.domReference || !elements.floating || placement == null || x == null || y == null) {
        return;
      }
      const {
        clientX,
        clientY
      } = event;
      const clientPoint = [clientX, clientY];
      const target = getTarget(event);
      const isLeave = event.type === "mouseleave";
      const isOverFloatingEl = contains(elements.floating, target);
      const isOverReferenceEl = contains(elements.domReference, target);
      const refRect = elements.domReference.getBoundingClientRect();
      const rect = elements.floating.getBoundingClientRect();
      const side = placement.split("-")[0];
      const cursorLeaveFromRight = x > rect.right - rect.width / 2;
      const cursorLeaveFromBottom = y > rect.bottom - rect.height / 2;
      const isOverReferenceRect = isInside(clientPoint, refRect);
      if (isOverFloatingEl) {
        hasLanded = true;
        if (!isLeave) {
          return;
        }
      }
      if (isOverReferenceEl) {
        hasLanded = false;
      }
      if (isOverReferenceEl && !isLeave) {
        hasLanded = true;
        return;
      }
      if (isLeave && isElement2(event.relatedTarget) && contains(elements.floating, event.relatedTarget)) {
        return;
      }
      if (tree && getChildren(tree.nodesRef.current, nodeId).some((_ref2) => {
        let {
          context
        } = _ref2;
        return context == null ? void 0 : context.open;
      })) {
        return;
      }
      if (side === "top" && y >= refRect.bottom - 1 || side === "bottom" && y <= refRect.top + 1 || side === "left" && x >= refRect.right - 1 || side === "right" && x <= refRect.left + 1) {
        return close();
      }
      let rectPoly = [];
      switch (side) {
        case "top":
          rectPoly = [[rect.left, refRect.top + 1], [rect.left, rect.bottom - 1], [rect.right, rect.bottom - 1], [rect.right, refRect.top + 1]];
          isInsideRect = clientX >= rect.left && clientX <= rect.right && clientY >= rect.top && clientY <= refRect.top + 1;
          break;
        case "bottom":
          rectPoly = [[rect.left, rect.top + 1], [rect.left, refRect.bottom - 1], [rect.right, refRect.bottom - 1], [rect.right, rect.top + 1]];
          isInsideRect = clientX >= rect.left && clientX <= rect.right && clientY >= refRect.bottom - 1 && clientY <= rect.bottom;
          break;
        case "left":
          rectPoly = [[rect.right - 1, rect.bottom], [rect.right - 1, rect.top], [refRect.left + 1, rect.top], [refRect.left + 1, rect.bottom]];
          isInsideRect = clientX >= rect.left && clientX <= refRect.left + 1 && clientY >= rect.top && clientY <= rect.bottom;
          break;
        case "right":
          rectPoly = [[refRect.right - 1, rect.bottom], [refRect.right - 1, rect.top], [rect.left + 1, rect.top], [rect.left + 1, rect.bottom]];
          isInsideRect = clientX >= refRect.right - 1 && clientX <= rect.right && clientY >= rect.top && clientY <= rect.bottom;
          break;
      }
      function getPolygon(_ref3) {
        let [x2, y2] = _ref3;
        const isFloatingWider = rect.width > refRect.width;
        const isFloatingTaller = rect.height > refRect.height;
        switch (side) {
          case "top": {
            const cursorPointOne = [isFloatingWider ? x2 + buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 + buffer + 1];
            const cursorPointTwo = [isFloatingWider ? x2 - buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 + buffer + 1];
            const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.bottom - buffer : isFloatingWider ? rect.bottom - buffer : rect.top], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.bottom - buffer : rect.top : rect.bottom - buffer]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
          case "bottom": {
            const cursorPointOne = [isFloatingWider ? x2 + buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 - buffer];
            const cursorPointTwo = [isFloatingWider ? x2 - buffer / 2 : cursorLeaveFromRight ? x2 + buffer * 4 : x2 - buffer * 4, y2 - buffer];
            const commonPoints = [[rect.left, cursorLeaveFromRight ? rect.top + buffer : isFloatingWider ? rect.top + buffer : rect.bottom], [rect.right, cursorLeaveFromRight ? isFloatingWider ? rect.top + buffer : rect.bottom : rect.top + buffer]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
          case "left": {
            const cursorPointOne = [x2 + buffer + 1, isFloatingTaller ? y2 + buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const cursorPointTwo = [x2 + buffer + 1, isFloatingTaller ? y2 - buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const commonPoints = [[cursorLeaveFromBottom ? rect.right - buffer : isFloatingTaller ? rect.right - buffer : rect.left, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.right - buffer : rect.left : rect.right - buffer, rect.bottom]];
            return [...commonPoints, cursorPointOne, cursorPointTwo];
          }
          case "right": {
            const cursorPointOne = [x2 - buffer, isFloatingTaller ? y2 + buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const cursorPointTwo = [x2 - buffer, isFloatingTaller ? y2 - buffer / 2 : cursorLeaveFromBottom ? y2 + buffer * 4 : y2 - buffer * 4];
            const commonPoints = [[cursorLeaveFromBottom ? rect.left + buffer : isFloatingTaller ? rect.left + buffer : rect.right, rect.top], [cursorLeaveFromBottom ? isFloatingTaller ? rect.left + buffer : rect.right : rect.left + buffer, rect.bottom]];
            return [cursorPointOne, cursorPointTwo, ...commonPoints];
          }
        }
      }
      __name(getPolygon, "getPolygon");
      const poly2 = isInsideRect ? rectPoly : getPolygon([x, y]);
      if (isInsideRect) {
        return;
      } else if (hasLanded && !isOverReferenceRect) {
        return close();
      }
      if (!isPointInPolygon([clientX, clientY], poly2)) {
        close();
      } else if (restMs && !hasLanded) {
        timeoutId2 = setTimeout(close, restMs);
      }
    }, "onMouseMove");
  }, "fn");
  fn.__options = {
    blockPointerEvents
  };
  return fn;
}
function useFloating3(options) {
  if (options === void 0) {
    options = {};
  }
  const {
    open = false,
    onOpenChange: unstable_onOpenChange,
    nodeId
  } = options;
  const position = useFloating2(options);
  const tree = useFloatingTree();
  const domReferenceRef = React9.useRef(null);
  const dataRef = React9.useRef({});
  const events = React9.useState(() => createPubSub())[0];
  const [domReference, setDomReference] = React9.useState(null);
  const setPositionReference = React9.useCallback((node) => {
    const positionReference = isElement2(node) ? {
      getBoundingClientRect: () => node.getBoundingClientRect(),
      contextElement: node
    } : node;
    position.refs.setReference(positionReference);
  }, [position.refs]);
  const setReference = React9.useCallback((node) => {
    if (isElement2(node) || node === null) {
      domReferenceRef.current = node;
      setDomReference(node);
    }
    if (isElement2(position.refs.reference.current) || position.refs.reference.current === null || // Don't allow setting virtual elements using the old technique back to
    // `null` to support `positionReference` + an unstable `reference`
    // callback ref.
    node !== null && !isElement2(node)) {
      position.refs.setReference(node);
    }
  }, [position.refs]);
  const refs = React9.useMemo(() => ({
    ...position.refs,
    setReference,
    setPositionReference,
    domReference: domReferenceRef
  }), [position.refs, setReference, setPositionReference]);
  const elements = React9.useMemo(() => ({
    ...position.elements,
    domReference
  }), [position.elements, domReference]);
  const onOpenChange = useEvent2(unstable_onOpenChange);
  const context = React9.useMemo(() => ({
    ...position,
    refs,
    elements,
    dataRef,
    nodeId,
    events,
    open,
    onOpenChange
  }), [position, nodeId, events, open, onOpenChange, refs, elements]);
  index2(() => {
    const node = tree == null ? void 0 : tree.nodesRef.current.find((node2) => node2.id === nodeId);
    if (node) {
      node.context = context;
    }
  });
  return React9.useMemo(() => ({
    ...position,
    context,
    refs,
    reference: setReference,
    positionReference: setPositionReference
  }), [position, refs, context, setReference, setPositionReference]);
}
function mergeProps(userProps, propsList, elementKey) {
  const map = /* @__PURE__ */ new Map();
  return {
    ...elementKey === "floating" && {
      tabIndex: -1
    },
    ...userProps,
    ...propsList.map((value) => value ? value[elementKey] : null).concat(userProps).reduce((acc2, props) => {
      if (!props) {
        return acc2;
      }
      Object.entries(props).forEach((_ref) => {
        let [key, value] = _ref;
        if (key.indexOf("on") === 0) {
          if (!map.has(key)) {
            map.set(key, []);
          }
          if (typeof value === "function") {
            var _map$get;
            (_map$get = map.get(key)) == null ? void 0 : _map$get.push(value);
            acc2[key] = function() {
              var _map$get2;
              for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
                args[_key] = arguments[_key];
              }
              (_map$get2 = map.get(key)) == null ? void 0 : _map$get2.forEach((fn) => fn(...args));
            };
          }
        } else {
          acc2[key] = value;
        }
      });
      return acc2;
    }, {})
  };
}
var React9, import_react9, import_aria_hidden2, import_tabbable, import_react_dom, index2, serverHandoffComplete, count, genId, useReactId, useId3, FloatingNodeContext, FloatingTreeContext, useFloatingParentNodeId, useFloatingTree, useFloatingNodeId, FloatingNode, FloatingTree, safePolygonIdentifier, useHover, FloatingDelayGroupContext, useDelayGroupContext, FloatingDelayGroup, useDelayGroup, rafId, TYPEABLE_SELECTOR, getTabbableOptions, useInsertionEffect, useSafeInsertionEffect, HIDDEN_STYLES, activeElement, timeoutId, FocusGuard, PortalContext, useFloatingPortalNode, FloatingPortal, usePortalContext2, VisuallyHiddenDismiss, identifier, FloatingOverlay, useClick, bubbleHandlerKeys, captureHandlerKeys, normalizeBubblesProp, useDismiss, useFocus, isPreventScrollSupported, ARROW_UP, ARROW_DOWN, ARROW_LEFT, ARROW_RIGHT, useListNavigation, useRole, camelCaseToKebabCase, useTypeahead, inner, useInnerOffset, useInteractions;
var init_floating_ui_react_esm = __esm({
  "node_modules/@floating-ui/react/dist/floating-ui.react.esm.js"() {
    React9 = __toESM(require("react"));
    import_react9 = require("react");
    import_aria_hidden2 = __toESM(require_es5());
    import_tabbable = __toESM(require_dist4());
    import_react_dom = require("react-dom");
    init_floating_ui_react_dom_esm();
    init_floating_ui_react_dom_esm();
    index2 = typeof document !== "undefined" ? import_react9.useLayoutEffect : import_react9.useEffect;
    serverHandoffComplete = false;
    count = 0;
    genId = /* @__PURE__ */ __name(() => "floating-ui-" + count++, "genId");
    __name(useFloatingId, "useFloatingId");
    useReactId = React9[/* @__PURE__ */ "useId".toString()];
    useId3 = useReactId || useFloatingId;
    __name(createPubSub, "createPubSub");
    FloatingNodeContext = /* @__PURE__ */ React9.createContext(null);
    FloatingTreeContext = /* @__PURE__ */ React9.createContext(null);
    useFloatingParentNodeId = /* @__PURE__ */ __name(() => {
      var _React$useContext;
      return ((_React$useContext = React9.useContext(FloatingNodeContext)) == null ? void 0 : _React$useContext.id) || null;
    }, "useFloatingParentNodeId");
    useFloatingTree = /* @__PURE__ */ __name(() => React9.useContext(FloatingTreeContext), "useFloatingTree");
    useFloatingNodeId = /* @__PURE__ */ __name((customParentId) => {
      const id = useId3();
      const tree = useFloatingTree();
      const reactParentId = useFloatingParentNodeId();
      const parentId = customParentId || reactParentId;
      index2(() => {
        const node = {
          id,
          parentId
        };
        tree == null ? void 0 : tree.addNode(node);
        return () => {
          tree == null ? void 0 : tree.removeNode(node);
        };
      }, [tree, id, parentId]);
      return id;
    }, "useFloatingNodeId");
    FloatingNode = /* @__PURE__ */ __name((_ref) => {
      let {
        children,
        id
      } = _ref;
      const parentId = useFloatingParentNodeId();
      return /* @__PURE__ */ React9.createElement(FloatingNodeContext.Provider, {
        value: React9.useMemo(() => ({
          id,
          parentId
        }), [id, parentId])
      }, children);
    }, "FloatingNode");
    FloatingTree = /* @__PURE__ */ __name((_ref2) => {
      let {
        children
      } = _ref2;
      const nodesRef = React9.useRef([]);
      const addNode = React9.useCallback((node) => {
        nodesRef.current = [...nodesRef.current, node];
      }, []);
      const removeNode = React9.useCallback((node) => {
        nodesRef.current = nodesRef.current.filter((n) => n !== node);
      }, []);
      const events = React9.useState(() => createPubSub())[0];
      return /* @__PURE__ */ React9.createElement(FloatingTreeContext.Provider, {
        value: React9.useMemo(() => ({
          nodesRef,
          addNode,
          removeNode,
          events
        }), [nodesRef, addNode, removeNode, events])
      }, children);
    }, "FloatingTree");
    __name(getDocument, "getDocument");
    __name(getPlatform, "getPlatform");
    __name(getUserAgent, "getUserAgent");
    __name(getWindow2, "getWindow");
    __name(isElement2, "isElement");
    __name(isHTMLElement2, "isHTMLElement");
    __name(isShadowRoot2, "isShadowRoot");
    __name(isVirtualClick, "isVirtualClick");
    __name(isVirtualPointerEvent, "isVirtualPointerEvent");
    __name(isSafari, "isSafari");
    __name(isMac, "isMac");
    __name(isMouseLikePointerType, "isMouseLikePointerType");
    __name(useLatestRef2, "useLatestRef");
    safePolygonIdentifier = "data-floating-ui-safe-polygon";
    __name(getDelay, "getDelay");
    useHover = /* @__PURE__ */ __name(function(context, _temp) {
      let {
        enabled = true,
        delay = 0,
        handleClose = null,
        mouseOnly = false,
        restMs = 0,
        move = true
      } = _temp === void 0 ? {} : _temp;
      const {
        open,
        onOpenChange,
        dataRef,
        events,
        elements: {
          domReference,
          floating
        },
        refs
      } = context;
      const tree = useFloatingTree();
      const parentId = useFloatingParentNodeId();
      const handleCloseRef = useLatestRef2(handleClose);
      const delayRef = useLatestRef2(delay);
      const pointerTypeRef = React9.useRef();
      const timeoutRef = React9.useRef();
      const handlerRef = React9.useRef();
      const restTimeoutRef = React9.useRef();
      const blockMouseMoveRef = React9.useRef(true);
      const performedPointerEventsMutationRef = React9.useRef(false);
      const unbindMouseMoveRef = React9.useRef(() => {
      });
      const isHoverOpen = React9.useCallback(() => {
        var _dataRef$current$open;
        const type = (_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type;
        return (type == null ? void 0 : type.includes("mouse")) && type !== "mousedown";
      }, [dataRef]);
      React9.useEffect(() => {
        if (!enabled) {
          return;
        }
        function onDismiss() {
          clearTimeout(timeoutRef.current);
          clearTimeout(restTimeoutRef.current);
          blockMouseMoveRef.current = true;
        }
        __name(onDismiss, "onDismiss");
        events.on("dismiss", onDismiss);
        return () => {
          events.off("dismiss", onDismiss);
        };
      }, [enabled, events]);
      React9.useEffect(() => {
        if (!enabled || !handleCloseRef.current || !open) {
          return;
        }
        function onLeave() {
          if (isHoverOpen()) {
            onOpenChange(false);
          }
        }
        __name(onLeave, "onLeave");
        const html = getDocument(floating).documentElement;
        html.addEventListener("mouseleave", onLeave);
        return () => {
          html.removeEventListener("mouseleave", onLeave);
        };
      }, [floating, open, onOpenChange, enabled, handleCloseRef, dataRef, isHoverOpen]);
      const closeWithDelay = React9.useCallback(function(runElseBranch) {
        if (runElseBranch === void 0) {
          runElseBranch = true;
        }
        const closeDelay = getDelay(delayRef.current, "close", pointerTypeRef.current);
        if (closeDelay && !handlerRef.current) {
          clearTimeout(timeoutRef.current);
          timeoutRef.current = setTimeout(() => onOpenChange(false), closeDelay);
        } else if (runElseBranch) {
          clearTimeout(timeoutRef.current);
          onOpenChange(false);
        }
      }, [delayRef, onOpenChange]);
      const cleanupMouseMoveHandler = React9.useCallback(() => {
        unbindMouseMoveRef.current();
        handlerRef.current = void 0;
      }, []);
      const clearPointerEvents = React9.useCallback(() => {
        if (performedPointerEventsMutationRef.current) {
          const body = getDocument(refs.floating.current).body;
          body.style.pointerEvents = "";
          body.removeAttribute(safePolygonIdentifier);
          performedPointerEventsMutationRef.current = false;
        }
      }, [refs]);
      React9.useEffect(() => {
        if (!enabled) {
          return;
        }
        function isClickLikeOpenEvent() {
          return dataRef.current.openEvent ? ["click", "mousedown"].includes(dataRef.current.openEvent.type) : false;
        }
        __name(isClickLikeOpenEvent, "isClickLikeOpenEvent");
        function onMouseEnter(event) {
          clearTimeout(timeoutRef.current);
          blockMouseMoveRef.current = false;
          if (mouseOnly && !isMouseLikePointerType(pointerTypeRef.current) || restMs > 0 && getDelay(delayRef.current, "open") === 0) {
            return;
          }
          dataRef.current.openEvent = event;
          const openDelay = getDelay(delayRef.current, "open", pointerTypeRef.current);
          if (openDelay) {
            timeoutRef.current = setTimeout(() => {
              onOpenChange(true);
            }, openDelay);
          } else {
            onOpenChange(true);
          }
        }
        __name(onMouseEnter, "onMouseEnter");
        function onMouseLeave(event) {
          if (isClickLikeOpenEvent()) {
            return;
          }
          unbindMouseMoveRef.current();
          const doc = getDocument(floating);
          clearTimeout(restTimeoutRef.current);
          if (handleCloseRef.current) {
            if (!open) {
              clearTimeout(timeoutRef.current);
            }
            handlerRef.current = handleCloseRef.current({
              ...context,
              tree,
              x: event.clientX,
              y: event.clientY,
              onClose() {
                clearPointerEvents();
                cleanupMouseMoveHandler();
                closeWithDelay();
              }
            });
            const handler = handlerRef.current;
            doc.addEventListener("mousemove", handler);
            unbindMouseMoveRef.current = () => {
              doc.removeEventListener("mousemove", handler);
            };
            return;
          }
          closeWithDelay();
        }
        __name(onMouseLeave, "onMouseLeave");
        function onScrollMouseLeave(event) {
          if (isClickLikeOpenEvent()) {
            return;
          }
          handleCloseRef.current == null ? void 0 : handleCloseRef.current({
            ...context,
            tree,
            x: event.clientX,
            y: event.clientY,
            onClose() {
              clearPointerEvents();
              cleanupMouseMoveHandler();
              closeWithDelay();
            }
          })(event);
        }
        __name(onScrollMouseLeave, "onScrollMouseLeave");
        if (isElement2(domReference)) {
          const ref = domReference;
          open && ref.addEventListener("mouseleave", onScrollMouseLeave);
          floating == null ? void 0 : floating.addEventListener("mouseleave", onScrollMouseLeave);
          move && ref.addEventListener("mousemove", onMouseEnter, {
            once: true
          });
          ref.addEventListener("mouseenter", onMouseEnter);
          ref.addEventListener("mouseleave", onMouseLeave);
          return () => {
            open && ref.removeEventListener("mouseleave", onScrollMouseLeave);
            floating == null ? void 0 : floating.removeEventListener("mouseleave", onScrollMouseLeave);
            move && ref.removeEventListener("mousemove", onMouseEnter);
            ref.removeEventListener("mouseenter", onMouseEnter);
            ref.removeEventListener("mouseleave", onMouseLeave);
          };
        }
      }, [domReference, floating, enabled, context, mouseOnly, restMs, move, closeWithDelay, cleanupMouseMoveHandler, clearPointerEvents, onOpenChange, open, tree, delayRef, handleCloseRef, dataRef]);
      index2(() => {
        var _handleCloseRef$curre;
        if (!enabled) {
          return;
        }
        if (open && (_handleCloseRef$curre = handleCloseRef.current) != null && _handleCloseRef$curre.__options.blockPointerEvents && isHoverOpen()) {
          const body = getDocument(floating).body;
          body.setAttribute(safePolygonIdentifier, "");
          body.style.pointerEvents = "none";
          performedPointerEventsMutationRef.current = true;
          if (isElement2(domReference) && floating) {
            var _tree$nodesRef$curren, _tree$nodesRef$curren2;
            const ref = domReference;
            const parentFloating = tree == null ? void 0 : (_tree$nodesRef$curren = tree.nodesRef.current.find((node) => node.id === parentId)) == null ? void 0 : (_tree$nodesRef$curren2 = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren2.elements.floating;
            if (parentFloating) {
              parentFloating.style.pointerEvents = "";
            }
            ref.style.pointerEvents = "auto";
            floating.style.pointerEvents = "auto";
            return () => {
              ref.style.pointerEvents = "";
              floating.style.pointerEvents = "";
            };
          }
        }
      }, [enabled, open, parentId, floating, domReference, tree, handleCloseRef, dataRef, isHoverOpen]);
      index2(() => {
        if (!open) {
          pointerTypeRef.current = void 0;
          cleanupMouseMoveHandler();
          clearPointerEvents();
        }
      }, [open, cleanupMouseMoveHandler, clearPointerEvents]);
      React9.useEffect(() => {
        return () => {
          cleanupMouseMoveHandler();
          clearTimeout(timeoutRef.current);
          clearTimeout(restTimeoutRef.current);
          clearPointerEvents();
        };
      }, [enabled, cleanupMouseMoveHandler, clearPointerEvents]);
      return React9.useMemo(() => {
        if (!enabled) {
          return {};
        }
        function setPointerRef(event) {
          pointerTypeRef.current = event.pointerType;
        }
        __name(setPointerRef, "setPointerRef");
        return {
          reference: {
            onPointerDown: setPointerRef,
            onPointerEnter: setPointerRef,
            onMouseMove() {
              if (open || restMs === 0) {
                return;
              }
              clearTimeout(restTimeoutRef.current);
              restTimeoutRef.current = setTimeout(() => {
                if (!blockMouseMoveRef.current) {
                  onOpenChange(true);
                }
              }, restMs);
            }
          },
          floating: {
            onMouseEnter() {
              clearTimeout(timeoutRef.current);
            },
            onMouseLeave() {
              events.emit("dismiss", {
                type: "mouseLeave",
                data: {
                  returnFocus: false
                }
              });
              closeWithDelay(false);
            }
          }
        };
      }, [events, enabled, restMs, open, onOpenChange, closeWithDelay]);
    }, "useHover");
    FloatingDelayGroupContext = /* @__PURE__ */ React9.createContext({
      delay: 0,
      initialDelay: 0,
      timeoutMs: 0,
      currentId: null,
      setCurrentId: () => {
      },
      setState: () => {
      },
      isInstantPhase: false
    });
    useDelayGroupContext = /* @__PURE__ */ __name(() => React9.useContext(FloatingDelayGroupContext), "useDelayGroupContext");
    FloatingDelayGroup = /* @__PURE__ */ __name((_ref) => {
      let {
        children,
        delay,
        timeoutMs = 0
      } = _ref;
      const [state, setState] = React9.useReducer((prev, next) => ({
        ...prev,
        ...next
      }), {
        delay,
        timeoutMs,
        initialDelay: delay,
        currentId: null,
        isInstantPhase: false
      });
      const initialCurrentIdRef = React9.useRef(null);
      const setCurrentId = React9.useCallback((currentId) => {
        setState({
          currentId
        });
      }, []);
      index2(() => {
        if (state.currentId) {
          if (initialCurrentIdRef.current === null) {
            initialCurrentIdRef.current = state.currentId;
          } else {
            setState({
              isInstantPhase: true
            });
          }
        } else {
          setState({
            isInstantPhase: false
          });
          initialCurrentIdRef.current = null;
        }
      }, [state.currentId]);
      return /* @__PURE__ */ React9.createElement(FloatingDelayGroupContext.Provider, {
        value: React9.useMemo(() => ({
          ...state,
          setState,
          setCurrentId
        }), [state, setState, setCurrentId])
      }, children);
    }, "FloatingDelayGroup");
    useDelayGroup = /* @__PURE__ */ __name((_ref2, _ref3) => {
      let {
        open,
        onOpenChange
      } = _ref2;
      let {
        id
      } = _ref3;
      const {
        currentId,
        setCurrentId,
        initialDelay,
        setState,
        timeoutMs
      } = useDelayGroupContext();
      React9.useEffect(() => {
        if (currentId) {
          setState({
            delay: {
              open: 1,
              close: getDelay(initialDelay, "close")
            }
          });
          if (currentId !== id) {
            onOpenChange(false);
          }
        }
      }, [id, onOpenChange, setState, currentId, initialDelay]);
      React9.useEffect(() => {
        function unset() {
          onOpenChange(false);
          setState({
            delay: initialDelay,
            currentId: null
          });
        }
        __name(unset, "unset");
        if (!open && currentId === id) {
          if (timeoutMs) {
            const timeout = window.setTimeout(unset, timeoutMs);
            return () => {
              clearTimeout(timeout);
            };
          } else {
            unset();
          }
        }
      }, [open, setState, currentId, id, onOpenChange, initialDelay, timeoutMs]);
      React9.useEffect(() => {
        if (open) {
          setCurrentId(id);
        }
      }, [open, setCurrentId, id]);
    }, "useDelayGroup");
    __name(_extends, "_extends");
    __name(activeElement$1, "activeElement$1");
    __name(contains, "contains");
    rafId = 0;
    __name(enqueueFocus, "enqueueFocus");
    __name(getAncestors, "getAncestors");
    __name(getChildren, "getChildren");
    __name(getTarget, "getTarget");
    TYPEABLE_SELECTOR = "input:not([type='hidden']):not([disabled]),[contenteditable]:not([contenteditable='false']),textarea:not([disabled])";
    __name(isTypeableElement, "isTypeableElement");
    __name(stopEvent, "stopEvent");
    getTabbableOptions = /* @__PURE__ */ __name(() => ({
      getShadowRoot: true,
      displayCheck: (
        // JSDOM does not support the `tabbable` library. To solve this we can
        // check if `ResizeObserver` is a real function (not polyfilled), which
        // determines if the current environment is JSDOM-like.
        typeof ResizeObserver === "function" && ResizeObserver.toString().includes("[native code]") ? "full" : "none"
      )
    }), "getTabbableOptions");
    __name(getTabbableIn, "getTabbableIn");
    __name(getNextTabbable, "getNextTabbable");
    __name(getPreviousTabbable, "getPreviousTabbable");
    __name(isOutsideEvent, "isOutsideEvent");
    __name(disableFocusInside, "disableFocusInside");
    __name(enableFocusInside, "enableFocusInside");
    useInsertionEffect = React9[/* @__PURE__ */ "useInsertionEffect".toString()];
    useSafeInsertionEffect = useInsertionEffect || ((fn) => fn());
    __name(useEvent2, "useEvent");
    HIDDEN_STYLES = {
      border: 0,
      clip: "rect(0 0 0 0)",
      height: "1px",
      margin: "-1px",
      overflow: "hidden",
      padding: 0,
      position: "fixed",
      whiteSpace: "nowrap",
      width: "1px",
      top: 0,
      left: 0
    };
    __name(setActiveElementOnTab, "setActiveElementOnTab");
    __name(isTabFocus, "isTabFocus");
    FocusGuard = /* @__PURE__ */ React9.forwardRef(/* @__PURE__ */ __name(function FocusGuard2(props, ref) {
      const onFocus = useEvent2(props.onFocus);
      const [role, setRole] = React9.useState();
      index2(() => {
        if (isSafari()) {
          setRole("button");
        }
        document.addEventListener("keydown", setActiveElementOnTab);
        return () => {
          document.removeEventListener("keydown", setActiveElementOnTab);
        };
      }, []);
      return /* @__PURE__ */ React9.createElement("span", _extends({}, props, {
        ref,
        tabIndex: 0,
        role,
        "aria-hidden": role ? void 0 : true,
        "data-floating-ui-focus-guard": "",
        style: HIDDEN_STYLES,
        onFocus: (event) => {
          if (isSafari() && isMac() && !isTabFocus(event)) {
            event.persist();
            timeoutId = window.setTimeout(() => {
              onFocus(event);
            }, 50);
          } else {
            onFocus(event);
          }
        }
      }));
    }, "FocusGuard"));
    PortalContext = /* @__PURE__ */ React9.createContext(null);
    useFloatingPortalNode = /* @__PURE__ */ __name(function(_temp) {
      let {
        id,
        enabled = true
      } = _temp === void 0 ? {} : _temp;
      const [portalEl, setPortalEl] = React9.useState(null);
      const uniqueId = useId3();
      const portalContext = usePortalContext2();
      index2(() => {
        if (!enabled) {
          return;
        }
        const rootNode = id ? document.getElementById(id) : null;
        if (rootNode) {
          rootNode.setAttribute("data-floating-ui-portal", "");
          setPortalEl(rootNode);
        } else {
          const newPortalEl = document.createElement("div");
          if (id !== "") {
            newPortalEl.id = id || uniqueId;
          }
          newPortalEl.setAttribute("data-floating-ui-portal", "");
          setPortalEl(newPortalEl);
          const container = (portalContext == null ? void 0 : portalContext.portalNode) || document.body;
          container.appendChild(newPortalEl);
          return () => {
            container.removeChild(newPortalEl);
          };
        }
      }, [id, portalContext, uniqueId, enabled]);
      return portalEl;
    }, "useFloatingPortalNode");
    FloatingPortal = /* @__PURE__ */ __name((_ref) => {
      let {
        children,
        id,
        root = null,
        preserveTabOrder = true
      } = _ref;
      const portalNode = useFloatingPortalNode({
        id,
        enabled: !root
      });
      const [focusManagerState, setFocusManagerState] = React9.useState(null);
      const beforeOutsideRef = React9.useRef(null);
      const afterOutsideRef = React9.useRef(null);
      const beforeInsideRef = React9.useRef(null);
      const afterInsideRef = React9.useRef(null);
      const shouldRenderGuards = (
        // The FocusManager and therefore floating element are currently open/
        // rendered.
        !!focusManagerState && // Guards are only for non-modal focus management.
        !focusManagerState.modal && !!(root || portalNode) && preserveTabOrder
      );
      React9.useEffect(() => {
        if (!portalNode || !preserveTabOrder || focusManagerState != null && focusManagerState.modal) {
          return;
        }
        function onFocus(event) {
          if (portalNode && isOutsideEvent(event)) {
            const focusing = event.type === "focusin";
            const manageFocus = focusing ? enableFocusInside : disableFocusInside;
            manageFocus(portalNode);
          }
        }
        __name(onFocus, "onFocus");
        portalNode.addEventListener("focusin", onFocus, true);
        portalNode.addEventListener("focusout", onFocus, true);
        return () => {
          portalNode.removeEventListener("focusin", onFocus, true);
          portalNode.removeEventListener("focusout", onFocus, true);
        };
      }, [portalNode, preserveTabOrder, focusManagerState == null ? void 0 : focusManagerState.modal]);
      return /* @__PURE__ */ React9.createElement(PortalContext.Provider, {
        value: React9.useMemo(() => ({
          preserveTabOrder,
          beforeOutsideRef,
          afterOutsideRef,
          beforeInsideRef,
          afterInsideRef,
          portalNode,
          setFocusManagerState
        }), [preserveTabOrder, portalNode])
      }, shouldRenderGuards && portalNode && /* @__PURE__ */ React9.createElement(FocusGuard, {
        "data-type": "outside",
        ref: beforeOutsideRef,
        onFocus: (event) => {
          if (isOutsideEvent(event, portalNode)) {
            var _beforeInsideRef$curr;
            (_beforeInsideRef$curr = beforeInsideRef.current) == null ? void 0 : _beforeInsideRef$curr.focus();
          } else {
            const prevTabbable = getPreviousTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);
            prevTabbable == null ? void 0 : prevTabbable.focus();
          }
        }
      }), shouldRenderGuards && portalNode && /* @__PURE__ */ React9.createElement("span", {
        "aria-owns": portalNode.id,
        style: HIDDEN_STYLES
      }), root ? /* @__PURE__ */ (0, import_react_dom.createPortal)(children, root) : portalNode ? /* @__PURE__ */ (0, import_react_dom.createPortal)(children, portalNode) : null, shouldRenderGuards && portalNode && /* @__PURE__ */ React9.createElement(FocusGuard, {
        "data-type": "outside",
        ref: afterOutsideRef,
        onFocus: (event) => {
          if (isOutsideEvent(event, portalNode)) {
            var _afterInsideRef$curre;
            (_afterInsideRef$curre = afterInsideRef.current) == null ? void 0 : _afterInsideRef$curre.focus();
          } else {
            const nextTabbable = getNextTabbable() || (focusManagerState == null ? void 0 : focusManagerState.refs.domReference.current);
            nextTabbable == null ? void 0 : nextTabbable.focus();
            (focusManagerState == null ? void 0 : focusManagerState.closeOnFocusOut) && (focusManagerState == null ? void 0 : focusManagerState.onOpenChange(false));
          }
        }
      }));
    }, "FloatingPortal");
    usePortalContext2 = /* @__PURE__ */ __name(() => React9.useContext(PortalContext), "usePortalContext");
    VisuallyHiddenDismiss = /* @__PURE__ */ React9.forwardRef(/* @__PURE__ */ __name(function VisuallyHiddenDismiss2(props, ref) {
      return /* @__PURE__ */ React9.createElement("button", _extends({}, props, {
        type: "button",
        ref,
        tabIndex: -1,
        style: HIDDEN_STYLES
      }));
    }, "VisuallyHiddenDismiss"));
    __name(FloatingFocusManager, "FloatingFocusManager");
    identifier = "data-floating-ui-scroll-lock";
    FloatingOverlay = /* @__PURE__ */ React9.forwardRef(/* @__PURE__ */ __name(function FloatingOverlay2(_ref, ref) {
      let {
        lockScroll = false,
        ...rest
      } = _ref;
      index2(() => {
        var _window$visualViewpor, _window$visualViewpor2;
        if (!lockScroll) {
          return;
        }
        const alreadyLocked = document.body.hasAttribute(identifier);
        if (alreadyLocked) {
          return;
        }
        document.body.setAttribute(identifier, "");
        const scrollbarX = Math.round(document.documentElement.getBoundingClientRect().left) + document.documentElement.scrollLeft;
        const paddingProp = scrollbarX ? "paddingLeft" : "paddingRight";
        const scrollbarWidth = window.innerWidth - document.documentElement.clientWidth;
        if (!/iP(hone|ad|od)|iOS/.test(getPlatform())) {
          Object.assign(document.body.style, {
            overflow: "hidden",
            [paddingProp]: scrollbarWidth + "px"
          });
          return () => {
            document.body.removeAttribute(identifier);
            Object.assign(document.body.style, {
              overflow: "",
              [paddingProp]: ""
            });
          };
        }
        const offsetLeft = ((_window$visualViewpor = window.visualViewport) == null ? void 0 : _window$visualViewpor.offsetLeft) || 0;
        const offsetTop = ((_window$visualViewpor2 = window.visualViewport) == null ? void 0 : _window$visualViewpor2.offsetTop) || 0;
        const scrollX = window.pageXOffset;
        const scrollY = window.pageYOffset;
        Object.assign(document.body.style, {
          position: "fixed",
          overflow: "hidden",
          top: -(scrollY - Math.floor(offsetTop)) + "px",
          left: -(scrollX - Math.floor(offsetLeft)) + "px",
          right: "0",
          [paddingProp]: scrollbarWidth + "px"
        });
        return () => {
          Object.assign(document.body.style, {
            position: "",
            overflow: "",
            top: "",
            left: "",
            right: "",
            [paddingProp]: ""
          });
          document.body.removeAttribute(identifier);
          window.scrollTo(scrollX, scrollY);
        };
      }, [lockScroll]);
      return /* @__PURE__ */ React9.createElement("div", _extends({
        ref
      }, rest, {
        style: {
          position: "fixed",
          overflow: "auto",
          top: 0,
          right: 0,
          bottom: 0,
          left: 0,
          ...rest.style
        }
      }));
    }, "FloatingOverlay"));
    __name(isButtonTarget, "isButtonTarget");
    __name(isSpaceIgnored, "isSpaceIgnored");
    useClick = /* @__PURE__ */ __name(function(_ref, _temp) {
      let {
        open,
        onOpenChange,
        dataRef,
        elements: {
          domReference
        }
      } = _ref;
      let {
        enabled = true,
        event: eventOption = "click",
        toggle = true,
        ignoreMouse = false,
        keyboardHandlers = true
      } = _temp === void 0 ? {} : _temp;
      const pointerTypeRef = React9.useRef();
      return React9.useMemo(() => {
        if (!enabled) {
          return {};
        }
        return {
          reference: {
            onPointerDown(event) {
              pointerTypeRef.current = event.pointerType;
            },
            onMouseDown(event) {
              if (event.button !== 0) {
                return;
              }
              if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {
                return;
              }
              if (eventOption === "click") {
                return;
              }
              if (open) {
                if (toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === "mousedown" : true)) {
                  onOpenChange(false);
                }
              } else {
                event.preventDefault();
                onOpenChange(true);
              }
              dataRef.current.openEvent = event.nativeEvent;
            },
            onClick(event) {
              if (dataRef.current.__syncReturnFocus) {
                return;
              }
              if (eventOption === "mousedown" && pointerTypeRef.current) {
                pointerTypeRef.current = void 0;
                return;
              }
              if (isMouseLikePointerType(pointerTypeRef.current, true) && ignoreMouse) {
                return;
              }
              if (open) {
                if (toggle && (dataRef.current.openEvent ? dataRef.current.openEvent.type === "click" : true)) {
                  onOpenChange(false);
                }
              } else {
                onOpenChange(true);
              }
              dataRef.current.openEvent = event.nativeEvent;
            },
            onKeyDown(event) {
              pointerTypeRef.current = void 0;
              if (!keyboardHandlers) {
                return;
              }
              if (isButtonTarget(event)) {
                return;
              }
              if (event.key === " " && !isSpaceIgnored(domReference)) {
                event.preventDefault();
              }
              if (event.key === "Enter") {
                if (open) {
                  if (toggle) {
                    onOpenChange(false);
                  }
                } else {
                  onOpenChange(true);
                }
              }
            },
            onKeyUp(event) {
              if (!keyboardHandlers) {
                return;
              }
              if (isButtonTarget(event) || isSpaceIgnored(domReference)) {
                return;
              }
              if (event.key === " ") {
                if (open) {
                  if (toggle) {
                    onOpenChange(false);
                  }
                } else {
                  onOpenChange(true);
                }
              }
            }
          }
        };
      }, [enabled, dataRef, eventOption, ignoreMouse, keyboardHandlers, domReference, toggle, open, onOpenChange]);
    }, "useClick");
    __name(isEventTargetWithin, "isEventTargetWithin");
    bubbleHandlerKeys = {
      pointerdown: "onPointerDown",
      mousedown: "onMouseDown",
      click: "onClick"
    };
    captureHandlerKeys = {
      pointerdown: "onPointerDownCapture",
      mousedown: "onMouseDownCapture",
      click: "onClickCapture"
    };
    normalizeBubblesProp = /* @__PURE__ */ __name(function(bubbles) {
      var _bubbles$escapeKey, _bubbles$outsidePress;
      if (bubbles === void 0) {
        bubbles = true;
      }
      return {
        escapeKeyBubbles: typeof bubbles === "boolean" ? bubbles : (_bubbles$escapeKey = bubbles.escapeKey) != null ? _bubbles$escapeKey : true,
        outsidePressBubbles: typeof bubbles === "boolean" ? bubbles : (_bubbles$outsidePress = bubbles.outsidePress) != null ? _bubbles$outsidePress : true
      };
    }, "normalizeBubblesProp");
    useDismiss = /* @__PURE__ */ __name(function(_ref, _temp) {
      let {
        open,
        onOpenChange,
        events,
        nodeId,
        elements: {
          reference,
          domReference,
          floating
        },
        dataRef
      } = _ref;
      let {
        enabled = true,
        escapeKey = true,
        outsidePress: unstable_outsidePress = true,
        outsidePressEvent = "pointerdown",
        referencePress = false,
        referencePressEvent = "pointerdown",
        ancestorScroll = false,
        bubbles = true
      } = _temp === void 0 ? {} : _temp;
      const tree = useFloatingTree();
      const nested = useFloatingParentNodeId() != null;
      const outsidePressFn = useEvent2(typeof unstable_outsidePress === "function" ? unstable_outsidePress : () => false);
      const outsidePress = typeof unstable_outsidePress === "function" ? outsidePressFn : unstable_outsidePress;
      const insideReactTreeRef = React9.useRef(false);
      const {
        escapeKeyBubbles,
        outsidePressBubbles
      } = normalizeBubblesProp(bubbles);
      React9.useEffect(() => {
        if (!open || !enabled) {
          return;
        }
        dataRef.current.__escapeKeyBubbles = escapeKeyBubbles;
        dataRef.current.__outsidePressBubbles = outsidePressBubbles;
        function onKeyDown(event) {
          if (event.key === "Escape") {
            const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
            if (children.length > 0) {
              let shouldDismiss = true;
              children.forEach((child) => {
                var _child$context;
                if ((_child$context = child.context) != null && _child$context.open && !child.context.dataRef.current.__escapeKeyBubbles) {
                  shouldDismiss = false;
                  return;
                }
              });
              if (!shouldDismiss) {
                return;
              }
            }
            events.emit("dismiss", {
              type: "escapeKey",
              data: {
                returnFocus: {
                  preventScroll: false
                }
              }
            });
            onOpenChange(false);
          }
        }
        __name(onKeyDown, "onKeyDown");
        function onOutsidePress(event) {
          const insideReactTree = insideReactTreeRef.current;
          insideReactTreeRef.current = false;
          if (insideReactTree) {
            return;
          }
          if (typeof outsidePress === "function" && !outsidePress(event)) {
            return;
          }
          const target = getTarget(event);
          if (isHTMLElement2(target) && floating) {
            const win = floating.ownerDocument.defaultView || window;
            const canScrollX = target.scrollWidth > target.clientWidth;
            const canScrollY = target.scrollHeight > target.clientHeight;
            let xCond = canScrollY && event.offsetX > target.clientWidth;
            if (canScrollY) {
              const isRTL2 = win.getComputedStyle(target).direction === "rtl";
              if (isRTL2) {
                xCond = event.offsetX <= target.offsetWidth - target.clientWidth;
              }
            }
            if (xCond || canScrollX && event.offsetY > target.clientHeight) {
              return;
            }
          }
          const targetIsInsideChildren = tree && getChildren(tree.nodesRef.current, nodeId).some((node) => {
            var _node$context;
            return isEventTargetWithin(event, (_node$context = node.context) == null ? void 0 : _node$context.elements.floating);
          });
          if (isEventTargetWithin(event, floating) || isEventTargetWithin(event, domReference) || targetIsInsideChildren) {
            return;
          }
          const children = tree ? getChildren(tree.nodesRef.current, nodeId) : [];
          if (children.length > 0) {
            let shouldDismiss = true;
            children.forEach((child) => {
              var _child$context2;
              if ((_child$context2 = child.context) != null && _child$context2.open && !child.context.dataRef.current.__outsidePressBubbles) {
                shouldDismiss = false;
                return;
              }
            });
            if (!shouldDismiss) {
              return;
            }
          }
          events.emit("dismiss", {
            type: "outsidePress",
            data: {
              returnFocus: nested ? {
                preventScroll: true
              } : isVirtualClick(event) || isVirtualPointerEvent(event)
            }
          });
          onOpenChange(false);
        }
        __name(onOutsidePress, "onOutsidePress");
        function onScroll() {
          onOpenChange(false);
        }
        __name(onScroll, "onScroll");
        const doc = getDocument(floating);
        escapeKey && doc.addEventListener("keydown", onKeyDown);
        outsidePress && doc.addEventListener(outsidePressEvent, onOutsidePress);
        let ancestors = [];
        if (ancestorScroll) {
          if (isElement2(domReference)) {
            ancestors = getOverflowAncestors(domReference);
          }
          if (isElement2(floating)) {
            ancestors = ancestors.concat(getOverflowAncestors(floating));
          }
          if (!isElement2(reference) && reference && reference.contextElement) {
            ancestors = ancestors.concat(getOverflowAncestors(reference.contextElement));
          }
        }
        ancestors = ancestors.filter((ancestor) => {
          var _doc$defaultView;
          return ancestor !== ((_doc$defaultView = doc.defaultView) == null ? void 0 : _doc$defaultView.visualViewport);
        });
        ancestors.forEach((ancestor) => {
          ancestor.addEventListener("scroll", onScroll, {
            passive: true
          });
        });
        return () => {
          escapeKey && doc.removeEventListener("keydown", onKeyDown);
          outsidePress && doc.removeEventListener(outsidePressEvent, onOutsidePress);
          ancestors.forEach((ancestor) => {
            ancestor.removeEventListener("scroll", onScroll);
          });
        };
      }, [dataRef, floating, domReference, reference, escapeKey, outsidePress, outsidePressEvent, events, tree, nodeId, open, onOpenChange, ancestorScroll, enabled, escapeKeyBubbles, outsidePressBubbles, nested]);
      React9.useEffect(() => {
        insideReactTreeRef.current = false;
      }, [outsidePress, outsidePressEvent]);
      return React9.useMemo(() => {
        if (!enabled) {
          return {};
        }
        return {
          reference: {
            [bubbleHandlerKeys[referencePressEvent]]: () => {
              if (referencePress) {
                events.emit("dismiss", {
                  type: "referencePress",
                  data: {
                    returnFocus: false
                  }
                });
                onOpenChange(false);
              }
            }
          },
          floating: {
            [captureHandlerKeys[outsidePressEvent]]: () => {
              insideReactTreeRef.current = true;
            }
          }
        };
      }, [enabled, events, referencePress, outsidePressEvent, referencePressEvent, onOpenChange]);
    }, "useDismiss");
    useFocus = /* @__PURE__ */ __name(function(_ref, _temp) {
      let {
        open,
        onOpenChange,
        dataRef,
        events,
        refs,
        elements: {
          floating,
          domReference
        }
      } = _ref;
      let {
        enabled = true,
        keyboardOnly = true
      } = _temp === void 0 ? {} : _temp;
      const pointerTypeRef = React9.useRef("");
      const blockFocusRef = React9.useRef(false);
      const timeoutRef = React9.useRef();
      React9.useEffect(() => {
        if (!enabled) {
          return;
        }
        const doc = getDocument(floating);
        const win = doc.defaultView || window;
        function onBlur() {
          if (!open && isHTMLElement2(domReference) && domReference === activeElement$1(getDocument(domReference))) {
            blockFocusRef.current = true;
          }
        }
        __name(onBlur, "onBlur");
        win.addEventListener("blur", onBlur);
        return () => {
          win.removeEventListener("blur", onBlur);
        };
      }, [floating, domReference, open, enabled]);
      React9.useEffect(() => {
        if (!enabled) {
          return;
        }
        function onDismiss(payload) {
          if (payload.type === "referencePress" || payload.type === "escapeKey") {
            blockFocusRef.current = true;
          }
        }
        __name(onDismiss, "onDismiss");
        events.on("dismiss", onDismiss);
        return () => {
          events.off("dismiss", onDismiss);
        };
      }, [events, enabled]);
      React9.useEffect(() => {
        return () => {
          clearTimeout(timeoutRef.current);
        };
      }, []);
      return React9.useMemo(() => {
        if (!enabled) {
          return {};
        }
        return {
          reference: {
            onPointerDown(_ref2) {
              let {
                pointerType
              } = _ref2;
              pointerTypeRef.current = pointerType;
              blockFocusRef.current = !!(pointerType && keyboardOnly);
            },
            onMouseLeave() {
              blockFocusRef.current = false;
            },
            onFocus(event) {
              var _dataRef$current$open;
              if (blockFocusRef.current) {
                return;
              }
              if (event.type === "focus" && ((_dataRef$current$open = dataRef.current.openEvent) == null ? void 0 : _dataRef$current$open.type) === "mousedown" && dataRef.current.openEvent && isEventTargetWithin(dataRef.current.openEvent, domReference)) {
                return;
              }
              dataRef.current.openEvent = event.nativeEvent;
              onOpenChange(true);
            },
            onBlur(event) {
              blockFocusRef.current = false;
              const relatedTarget = event.relatedTarget;
              const movedToFocusGuard = isElement2(relatedTarget) && relatedTarget.hasAttribute("data-floating-ui-focus-guard") && relatedTarget.getAttribute("data-type") === "outside";
              timeoutRef.current = setTimeout(() => {
                if (contains(refs.floating.current, relatedTarget) || contains(domReference, relatedTarget) || movedToFocusGuard) {
                  return;
                }
                onOpenChange(false);
              });
            }
          }
        };
      }, [enabled, keyboardOnly, domReference, refs, dataRef, onOpenChange]);
    }, "useFocus");
    isPreventScrollSupported = false;
    ARROW_UP = "ArrowUp";
    ARROW_DOWN = "ArrowDown";
    ARROW_LEFT = "ArrowLeft";
    ARROW_RIGHT = "ArrowRight";
    __name(isDifferentRow, "isDifferentRow");
    __name(isIndexOutOfBounds, "isIndexOutOfBounds");
    __name(findNonDisabledIndex, "findNonDisabledIndex");
    __name(doSwitch, "doSwitch");
    __name(isMainOrientationKey, "isMainOrientationKey");
    __name(isMainOrientationToEndKey, "isMainOrientationToEndKey");
    __name(isCrossOrientationOpenKey, "isCrossOrientationOpenKey");
    __name(isCrossOrientationCloseKey, "isCrossOrientationCloseKey");
    __name(getMinIndex, "getMinIndex");
    __name(getMaxIndex, "getMaxIndex");
    useListNavigation = /* @__PURE__ */ __name(function(_ref, _temp2) {
      let {
        open,
        onOpenChange,
        refs,
        elements: {
          domReference
        }
      } = _ref;
      let {
        listRef,
        activeIndex,
        onNavigate: unstable_onNavigate = /* @__PURE__ */ __name(() => {
        }, "unstable_onNavigate"),
        enabled = true,
        selectedIndex = null,
        allowEscape = false,
        loop = false,
        nested = false,
        rtl = false,
        virtual = false,
        focusItemOnOpen = "auto",
        focusItemOnHover = true,
        openOnArrowKeyDown = true,
        disabledIndices = void 0,
        orientation = "vertical",
        cols = 1,
        scrollItemIntoView = true
      } = _temp2 === void 0 ? {
        listRef: {
          current: []
        },
        activeIndex: null,
        onNavigate: () => {
        }
      } : _temp2;
      if (process.env.NODE_ENV !== "production") {
        if (allowEscape) {
          if (!loop) {
            console.warn(["Floating UI: `useListNavigation` looping must be enabled to allow", "escaping."].join(" "));
          }
          if (!virtual) {
            console.warn(["Floating UI: `useListNavigation` must be virtual to allow", "escaping."].join(" "));
          }
        }
        if (orientation === "vertical" && cols > 1) {
          console.warn(["Floating UI: In grid list navigation mode (`cols` > 1), the", '`orientation` should be either "horizontal" or "both".'].join(" "));
        }
      }
      const parentId = useFloatingParentNodeId();
      const tree = useFloatingTree();
      const onNavigate = useEvent2(unstable_onNavigate);
      const focusItemOnOpenRef = React9.useRef(focusItemOnOpen);
      const indexRef = React9.useRef(selectedIndex != null ? selectedIndex : -1);
      const keyRef = React9.useRef(null);
      const isPointerModalityRef = React9.useRef(true);
      const previousOnNavigateRef = React9.useRef(onNavigate);
      const previousOpenRef = React9.useRef(open);
      const forceSyncFocus = React9.useRef(false);
      const forceScrollIntoViewRef = React9.useRef(false);
      const disabledIndicesRef = useLatestRef2(disabledIndices);
      const latestOpenRef = useLatestRef2(open);
      const scrollItemIntoViewRef = useLatestRef2(scrollItemIntoView);
      const [activeId, setActiveId] = React9.useState();
      const focusItem = React9.useCallback(function(listRef2, indexRef2, forceScrollIntoView) {
        if (forceScrollIntoView === void 0) {
          forceScrollIntoView = false;
        }
        const item2 = listRef2.current[indexRef2.current];
        if (virtual) {
          setActiveId(item2 == null ? void 0 : item2.id);
        } else {
          enqueueFocus(item2, {
            preventScroll: true,
            // Mac Safari does not move the virtual cursor unless the focus call
            // is sync. However, for the very first focus call, we need to wait
            // for the position to be ready in order to prevent unwanted
            // scrolling. This means the virtual cursor will not move to the first
            // item when first opening the floating element, but will on
            // subsequent calls. `preventScroll` is supported in modern Safari,
            // so we can use that instead.
            // iOS Safari must be async or the first item will not be focused.
            sync: isMac() && isSafari() ? isPreventScrollSupported || forceSyncFocus.current : false
          });
        }
        requestAnimationFrame(() => {
          const scrollIntoViewOptions = scrollItemIntoViewRef.current;
          const shouldScrollIntoView = scrollIntoViewOptions && item2 && (forceScrollIntoView || !isPointerModalityRef.current);
          if (shouldScrollIntoView) {
            item2.scrollIntoView == null ? void 0 : item2.scrollIntoView(typeof scrollIntoViewOptions === "boolean" ? {
              block: "nearest",
              inline: "nearest"
            } : scrollIntoViewOptions);
          }
        });
      }, [virtual, scrollItemIntoViewRef]);
      index2(() => {
        document.createElement("div").focus({
          get preventScroll() {
            isPreventScrollSupported = true;
            return false;
          }
        });
      }, []);
      index2(() => {
        if (!enabled) {
          return;
        }
        if (open) {
          if (focusItemOnOpenRef.current && selectedIndex != null) {
            forceScrollIntoViewRef.current = true;
            onNavigate(selectedIndex);
          }
        } else if (previousOpenRef.current) {
          indexRef.current = -1;
          previousOnNavigateRef.current(null);
        }
      }, [enabled, open, selectedIndex, onNavigate]);
      index2(() => {
        if (!enabled) {
          return;
        }
        if (open) {
          if (activeIndex == null) {
            forceSyncFocus.current = false;
            if (selectedIndex != null) {
              return;
            }
            if (previousOpenRef.current) {
              indexRef.current = -1;
              focusItem(listRef, indexRef);
            }
            if (!previousOpenRef.current && focusItemOnOpenRef.current && (keyRef.current != null || focusItemOnOpenRef.current === true && keyRef.current == null)) {
              indexRef.current = keyRef.current == null || isMainOrientationToEndKey(keyRef.current, orientation, rtl) || nested ? getMinIndex(listRef, disabledIndicesRef.current) : getMaxIndex(listRef, disabledIndicesRef.current);
              onNavigate(indexRef.current);
            }
          } else if (!isIndexOutOfBounds(listRef, activeIndex)) {
            indexRef.current = activeIndex;
            focusItem(listRef, indexRef, forceScrollIntoViewRef.current);
            forceScrollIntoViewRef.current = false;
          }
        }
      }, [enabled, open, activeIndex, selectedIndex, nested, listRef, orientation, rtl, onNavigate, focusItem, disabledIndicesRef]);
      index2(() => {
        if (!enabled) {
          return;
        }
        if (previousOpenRef.current && !open) {
          var _tree$nodesRef$curren, _tree$nodesRef$curren2;
          const parentFloating = tree == null ? void 0 : (_tree$nodesRef$curren = tree.nodesRef.current.find((node) => node.id === parentId)) == null ? void 0 : (_tree$nodesRef$curren2 = _tree$nodesRef$curren.context) == null ? void 0 : _tree$nodesRef$curren2.elements.floating;
          if (parentFloating && !contains(parentFloating, activeElement$1(getDocument(parentFloating)))) {
            parentFloating.focus({
              preventScroll: true
            });
          }
        }
      }, [enabled, open, tree, parentId]);
      index2(() => {
        keyRef.current = null;
        previousOnNavigateRef.current = onNavigate;
        previousOpenRef.current = open;
      });
      const hasActiveIndex = activeIndex != null;
      const item = React9.useMemo(() => {
        function syncCurrentTarget(currentTarget) {
          if (!open)
            return;
          const index3 = listRef.current.indexOf(currentTarget);
          if (index3 !== -1) {
            onNavigate(index3);
          }
        }
        __name(syncCurrentTarget, "syncCurrentTarget");
        const props = {
          onFocus(_ref2) {
            let {
              currentTarget
            } = _ref2;
            syncCurrentTarget(currentTarget);
          },
          onClick: (_ref3) => {
            let {
              currentTarget
            } = _ref3;
            return currentTarget.focus({
              preventScroll: true
            });
          },
          // Safari
          ...focusItemOnHover && {
            onMouseMove(_ref4) {
              let {
                currentTarget
              } = _ref4;
              syncCurrentTarget(currentTarget);
            },
            onPointerLeave() {
              if (!isPointerModalityRef.current) {
                return;
              }
              indexRef.current = -1;
              focusItem(listRef, indexRef);
              (0, import_react_dom.flushSync)(() => onNavigate(null));
              if (!virtual) {
                var _refs$floating$curren;
                (_refs$floating$curren = refs.floating.current) == null ? void 0 : _refs$floating$curren.focus({
                  preventScroll: true
                });
              }
            }
          }
        };
        return props;
      }, [open, refs, focusItem, focusItemOnHover, listRef, onNavigate, virtual]);
      return React9.useMemo(() => {
        if (!enabled) {
          return {};
        }
        const disabledIndices2 = disabledIndicesRef.current;
        function onKeyDown(event) {
          isPointerModalityRef.current = false;
          forceSyncFocus.current = true;
          if (!latestOpenRef.current && event.currentTarget === refs.floating.current) {
            return;
          }
          if (nested && isCrossOrientationCloseKey(event.key, orientation, rtl)) {
            stopEvent(event);
            onOpenChange(false);
            if (isHTMLElement2(domReference)) {
              domReference.focus();
            }
            return;
          }
          const currentIndex = indexRef.current;
          const minIndex = getMinIndex(listRef, disabledIndices2);
          const maxIndex = getMaxIndex(listRef, disabledIndices2);
          if (event.key === "Home") {
            indexRef.current = minIndex;
            onNavigate(indexRef.current);
          }
          if (event.key === "End") {
            indexRef.current = maxIndex;
            onNavigate(indexRef.current);
          }
          if (cols > 1) {
            const prevIndex = indexRef.current;
            if (event.key === ARROW_UP) {
              stopEvent(event);
              if (prevIndex === -1) {
                indexRef.current = maxIndex;
              } else {
                indexRef.current = findNonDisabledIndex(listRef, {
                  startingIndex: prevIndex,
                  amount: cols,
                  decrement: true,
                  disabledIndices: disabledIndices2
                });
                if (loop && (prevIndex - cols < minIndex || indexRef.current < 0)) {
                  const col = prevIndex % cols;
                  const maxCol = maxIndex % cols;
                  const offset3 = maxIndex - (maxCol - col);
                  if (maxCol === col) {
                    indexRef.current = maxIndex;
                  } else {
                    indexRef.current = maxCol > col ? offset3 : offset3 - cols;
                  }
                }
              }
              if (isIndexOutOfBounds(listRef, indexRef.current)) {
                indexRef.current = prevIndex;
              }
              onNavigate(indexRef.current);
            }
            if (event.key === ARROW_DOWN) {
              stopEvent(event);
              if (prevIndex === -1) {
                indexRef.current = minIndex;
              } else {
                indexRef.current = findNonDisabledIndex(listRef, {
                  startingIndex: prevIndex,
                  amount: cols,
                  disabledIndices: disabledIndices2
                });
                if (loop && prevIndex + cols > maxIndex) {
                  indexRef.current = findNonDisabledIndex(listRef, {
                    startingIndex: prevIndex % cols - cols,
                    amount: cols,
                    disabledIndices: disabledIndices2
                  });
                }
              }
              if (isIndexOutOfBounds(listRef, indexRef.current)) {
                indexRef.current = prevIndex;
              }
              onNavigate(indexRef.current);
            }
            if (orientation === "both") {
              const prevRow = Math.floor(prevIndex / cols);
              if (event.key === ARROW_RIGHT) {
                stopEvent(event);
                if (prevIndex % cols !== cols - 1) {
                  indexRef.current = findNonDisabledIndex(listRef, {
                    startingIndex: prevIndex,
                    disabledIndices: disabledIndices2
                  });
                  if (loop && isDifferentRow(indexRef.current, cols, prevRow)) {
                    indexRef.current = findNonDisabledIndex(listRef, {
                      startingIndex: prevIndex - prevIndex % cols - 1,
                      disabledIndices: disabledIndices2
                    });
                  }
                } else if (loop) {
                  indexRef.current = findNonDisabledIndex(listRef, {
                    startingIndex: prevIndex - prevIndex % cols - 1,
                    disabledIndices: disabledIndices2
                  });
                }
                if (isDifferentRow(indexRef.current, cols, prevRow)) {
                  indexRef.current = prevIndex;
                }
              }
              if (event.key === ARROW_LEFT) {
                stopEvent(event);
                if (prevIndex % cols !== 0) {
                  indexRef.current = findNonDisabledIndex(listRef, {
                    startingIndex: prevIndex,
                    disabledIndices: disabledIndices2,
                    decrement: true
                  });
                  if (loop && isDifferentRow(indexRef.current, cols, prevRow)) {
                    indexRef.current = findNonDisabledIndex(listRef, {
                      startingIndex: prevIndex + (cols - prevIndex % cols),
                      decrement: true,
                      disabledIndices: disabledIndices2
                    });
                  }
                } else if (loop) {
                  indexRef.current = findNonDisabledIndex(listRef, {
                    startingIndex: prevIndex + (cols - prevIndex % cols),
                    decrement: true,
                    disabledIndices: disabledIndices2
                  });
                }
                if (isDifferentRow(indexRef.current, cols, prevRow)) {
                  indexRef.current = prevIndex;
                }
              }
              const lastRow = Math.floor(maxIndex / cols) === prevRow;
              if (isIndexOutOfBounds(listRef, indexRef.current)) {
                if (loop && lastRow) {
                  indexRef.current = event.key === ARROW_LEFT ? maxIndex : findNonDisabledIndex(listRef, {
                    startingIndex: prevIndex - prevIndex % cols - 1,
                    disabledIndices: disabledIndices2
                  });
                } else {
                  indexRef.current = prevIndex;
                }
              }
              onNavigate(indexRef.current);
              return;
            }
          }
          if (isMainOrientationKey(event.key, orientation)) {
            stopEvent(event);
            if (open && !virtual && activeElement$1(event.currentTarget.ownerDocument) === event.currentTarget) {
              indexRef.current = isMainOrientationToEndKey(event.key, orientation, rtl) ? minIndex : maxIndex;
              onNavigate(indexRef.current);
              return;
            }
            if (isMainOrientationToEndKey(event.key, orientation, rtl)) {
              if (loop) {
                indexRef.current = currentIndex >= maxIndex ? allowEscape && currentIndex !== listRef.current.length ? -1 : minIndex : findNonDisabledIndex(listRef, {
                  startingIndex: currentIndex,
                  disabledIndices: disabledIndices2
                });
              } else {
                indexRef.current = Math.min(maxIndex, findNonDisabledIndex(listRef, {
                  startingIndex: currentIndex,
                  disabledIndices: disabledIndices2
                }));
              }
            } else {
              if (loop) {
                indexRef.current = currentIndex <= minIndex ? allowEscape && currentIndex !== -1 ? listRef.current.length : maxIndex : findNonDisabledIndex(listRef, {
                  startingIndex: currentIndex,
                  decrement: true,
                  disabledIndices: disabledIndices2
                });
              } else {
                indexRef.current = Math.max(minIndex, findNonDisabledIndex(listRef, {
                  startingIndex: currentIndex,
                  decrement: true,
                  disabledIndices: disabledIndices2
                }));
              }
            }
            if (isIndexOutOfBounds(listRef, indexRef.current)) {
              onNavigate(null);
            } else {
              onNavigate(indexRef.current);
            }
          }
        }
        __name(onKeyDown, "onKeyDown");
        function checkVirtualMouse(event) {
          if (focusItemOnOpen === "auto" && isVirtualClick(event.nativeEvent)) {
            focusItemOnOpenRef.current = true;
          }
        }
        __name(checkVirtualMouse, "checkVirtualMouse");
        function checkVirtualPointer(event) {
          focusItemOnOpenRef.current = focusItemOnOpen;
          if (focusItemOnOpen === "auto" && isVirtualPointerEvent(event.nativeEvent)) {
            focusItemOnOpenRef.current = true;
          }
        }
        __name(checkVirtualPointer, "checkVirtualPointer");
        const ariaActiveDescendantProp = virtual && open && hasActiveIndex && {
          "aria-activedescendant": activeId
        };
        return {
          reference: {
            ...ariaActiveDescendantProp,
            onKeyDown(event) {
              isPointerModalityRef.current = false;
              const isArrowKey = event.key.indexOf("Arrow") === 0;
              if (virtual && open) {
                return onKeyDown(event);
              }
              if (!open && !openOnArrowKeyDown && isArrowKey) {
                return;
              }
              const isNavigationKey = isArrowKey || event.key === "Enter" || event.key === " " || event.key === "";
              if (isNavigationKey) {
                keyRef.current = event.key;
              }
              if (nested) {
                if (isCrossOrientationOpenKey(event.key, orientation, rtl)) {
                  stopEvent(event);
                  if (open) {
                    indexRef.current = getMinIndex(listRef, disabledIndices2);
                    onNavigate(indexRef.current);
                  } else {
                    onOpenChange(true);
                  }
                }
                return;
              }
              if (isMainOrientationKey(event.key, orientation)) {
                if (selectedIndex != null) {
                  indexRef.current = selectedIndex;
                }
                stopEvent(event);
                if (!open && openOnArrowKeyDown) {
                  onOpenChange(true);
                } else {
                  onKeyDown(event);
                }
                if (open) {
                  onNavigate(indexRef.current);
                }
              }
            },
            onFocus() {
              if (open) {
                onNavigate(null);
              }
            },
            onPointerDown: checkVirtualPointer,
            onMouseDown: checkVirtualMouse,
            onClick: checkVirtualMouse
          },
          floating: {
            "aria-orientation": orientation === "both" ? void 0 : orientation,
            ...ariaActiveDescendantProp,
            onKeyDown,
            onPointerMove() {
              isPointerModalityRef.current = true;
            }
          },
          item
        };
      }, [domReference, refs, activeId, disabledIndicesRef, latestOpenRef, listRef, enabled, orientation, rtl, virtual, open, hasActiveIndex, nested, selectedIndex, openOnArrowKeyDown, allowEscape, cols, loop, focusItemOnOpen, onNavigate, onOpenChange, item]);
    }, "useListNavigation");
    __name(useMergeRefs, "useMergeRefs");
    useRole = /* @__PURE__ */ __name(function(_ref, _temp) {
      let {
        open
      } = _ref;
      let {
        enabled = true,
        role = "dialog"
      } = _temp === void 0 ? {} : _temp;
      const rootId = useId3();
      const referenceId = useId3();
      return React9.useMemo(() => {
        const floatingProps = {
          id: rootId,
          role
        };
        if (!enabled) {
          return {};
        }
        if (role === "tooltip") {
          return {
            reference: {
              "aria-describedby": open ? rootId : void 0
            },
            floating: floatingProps
          };
        }
        return {
          reference: {
            "aria-expanded": open ? "true" : "false",
            "aria-haspopup": role === "alertdialog" ? "dialog" : role,
            "aria-controls": open ? rootId : void 0,
            ...role === "listbox" && {
              role: "combobox"
            },
            ...role === "menu" && {
              id: referenceId
            }
          },
          floating: {
            ...floatingProps,
            ...role === "menu" && {
              "aria-labelledby": referenceId
            }
          }
        };
      }, [enabled, role, open, rootId, referenceId]);
    }, "useRole");
    camelCaseToKebabCase = /* @__PURE__ */ __name((str) => str.replace(/[A-Z]+(?![a-z])|[A-Z]/g, ($, ofs) => (ofs ? "-" : "") + $.toLowerCase()), "camelCaseToKebabCase");
    __name(useDelayUnmount, "useDelayUnmount");
    __name(useTransitionStatus, "useTransitionStatus");
    __name(useTransitionStyles, "useTransitionStyles");
    useTypeahead = /* @__PURE__ */ __name(function(_ref, _temp) {
      var _ref2;
      let {
        open,
        dataRef,
        refs
      } = _ref;
      let {
        listRef,
        activeIndex,
        onMatch: unstable_onMatch = /* @__PURE__ */ __name(() => {
        }, "unstable_onMatch"),
        enabled = true,
        findMatch = null,
        resetMs = 1e3,
        ignoreKeys = [],
        selectedIndex = null
      } = _temp === void 0 ? {
        listRef: {
          current: []
        },
        activeIndex: null
      } : _temp;
      const timeoutIdRef = React9.useRef();
      const stringRef = React9.useRef("");
      const prevIndexRef = React9.useRef((_ref2 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref2 : -1);
      const matchIndexRef = React9.useRef(null);
      const onMatch = useEvent2(unstable_onMatch);
      const findMatchRef = useLatestRef2(findMatch);
      const ignoreKeysRef = useLatestRef2(ignoreKeys);
      index2(() => {
        if (open) {
          clearTimeout(timeoutIdRef.current);
          matchIndexRef.current = null;
          stringRef.current = "";
        }
      }, [open]);
      index2(() => {
        if (open && stringRef.current === "") {
          var _ref3;
          prevIndexRef.current = (_ref3 = selectedIndex != null ? selectedIndex : activeIndex) != null ? _ref3 : -1;
        }
      }, [open, selectedIndex, activeIndex]);
      return React9.useMemo(() => {
        if (!enabled) {
          return {};
        }
        function onKeyDown(event) {
          var _refs$floating$curren;
          const target = getTarget(event.nativeEvent);
          if (isElement2(target) && (activeElement$1(getDocument(target)) !== event.currentTarget ? (_refs$floating$curren = refs.floating.current) != null && _refs$floating$curren.contains(target) ? target.closest('[role="dialog"],[role="menu"],[role="listbox"],[role="tree"],[role="grid"]') !== event.currentTarget : false : !event.currentTarget.contains(target))) {
            return;
          }
          if (stringRef.current.length > 0 && stringRef.current[0] !== " ") {
            dataRef.current.typing = true;
            if (event.key === " ") {
              stopEvent(event);
            }
          }
          const listContent = listRef.current;
          if (listContent == null || ignoreKeysRef.current.includes(event.key) || // Character key.
          event.key.length !== 1 || // Modifier key.
          event.ctrlKey || event.metaKey || event.altKey) {
            return;
          }
          const allowRapidSuccessionOfFirstLetter = listContent.every((text) => {
            var _text$, _text$2;
            return text ? ((_text$ = text[0]) == null ? void 0 : _text$.toLocaleLowerCase()) !== ((_text$2 = text[1]) == null ? void 0 : _text$2.toLocaleLowerCase()) : true;
          });
          if (allowRapidSuccessionOfFirstLetter && stringRef.current === event.key) {
            stringRef.current = "";
            prevIndexRef.current = matchIndexRef.current;
          }
          stringRef.current += event.key;
          clearTimeout(timeoutIdRef.current);
          timeoutIdRef.current = setTimeout(() => {
            stringRef.current = "";
            prevIndexRef.current = matchIndexRef.current;
            dataRef.current.typing = false;
          }, resetMs);
          const prevIndex = prevIndexRef.current;
          const orderedList = [...listContent.slice((prevIndex || 0) + 1), ...listContent.slice(0, (prevIndex || 0) + 1)];
          const str = findMatchRef.current ? findMatchRef.current(orderedList, stringRef.current) : orderedList.find((text) => (text == null ? void 0 : text.toLocaleLowerCase().indexOf(stringRef.current.toLocaleLowerCase())) === 0);
          const index3 = str ? listContent.indexOf(str) : -1;
          if (index3 !== -1) {
            onMatch(index3);
            matchIndexRef.current = index3;
          }
        }
        __name(onKeyDown, "onKeyDown");
        return {
          reference: {
            onKeyDown
          },
          floating: {
            onKeyDown
          }
        };
      }, [enabled, dataRef, listRef, resetMs, ignoreKeysRef, findMatchRef, onMatch, refs]);
    }, "useTypeahead");
    __name(getArgsWithCustomFloatingHeight, "getArgsWithCustomFloatingHeight");
    inner = /* @__PURE__ */ __name((props) => ({
      name: "inner",
      options: props,
      async fn(state) {
        const {
          listRef,
          overflowRef,
          onFallbackChange,
          offset: innerOffset = 0,
          index: index3 = 0,
          minItemsVisible = 4,
          referenceOverflowThreshold = 0,
          scrollRef,
          ...detectOverflowOptions
        } = props;
        const {
          rects,
          elements: {
            floating
          }
        } = state;
        const item = listRef.current[index3];
        if (process.env.NODE_ENV !== "production") {
          if (!state.placement.startsWith("bottom")) {
            console.warn(['Floating UI: `placement` side must be "bottom" when using the', "`inner` middleware."].join(" "));
          }
        }
        if (!item) {
          return {};
        }
        const nextArgs = {
          ...state,
          ...await offset2(-item.offsetTop - rects.reference.height / 2 - item.offsetHeight / 2 - innerOffset).fn(state)
        };
        const el = (scrollRef == null ? void 0 : scrollRef.current) || floating;
        const overflow = await detectOverflow2(getArgsWithCustomFloatingHeight(nextArgs, el.scrollHeight), detectOverflowOptions);
        const refOverflow = await detectOverflow2(nextArgs, {
          ...detectOverflowOptions,
          elementContext: "reference"
        });
        const diffY = Math.max(0, overflow.top);
        const nextY = nextArgs.y + diffY;
        const maxHeight = Math.max(0, el.scrollHeight - diffY - Math.max(0, overflow.bottom));
        el.style.maxHeight = maxHeight + "px";
        el.scrollTop = diffY;
        if (onFallbackChange) {
          if (el.offsetHeight < item.offsetHeight * Math.min(minItemsVisible, listRef.current.length - 1) - 1 || refOverflow.top >= -referenceOverflowThreshold || refOverflow.bottom >= -referenceOverflowThreshold) {
            (0, import_react_dom.flushSync)(() => onFallbackChange(true));
          } else {
            (0, import_react_dom.flushSync)(() => onFallbackChange(false));
          }
        }
        if (overflowRef) {
          overflowRef.current = await detectOverflow2(getArgsWithCustomFloatingHeight({
            ...nextArgs,
            y: nextY
          }, el.offsetHeight), detectOverflowOptions);
        }
        return {
          y: nextY
        };
      }
    }), "inner");
    useInnerOffset = /* @__PURE__ */ __name((_ref, _ref2) => {
      let {
        open,
        elements
      } = _ref;
      let {
        enabled = true,
        overflowRef,
        scrollRef,
        onChange: unstable_onChange
      } = _ref2;
      const onChange2 = useEvent2(unstable_onChange);
      const controlledScrollingRef = React9.useRef(false);
      const prevScrollTopRef = React9.useRef(null);
      const initialOverflowRef = React9.useRef(null);
      React9.useEffect(() => {
        if (!enabled) {
          return;
        }
        function onWheel(e) {
          if (e.ctrlKey || !el || overflowRef.current == null) {
            return;
          }
          const dY = e.deltaY;
          const isAtTop = overflowRef.current.top >= -0.5;
          const isAtBottom = overflowRef.current.bottom >= -0.5;
          const remainingScroll = el.scrollHeight - el.clientHeight;
          const sign = dY < 0 ? -1 : 1;
          const method = dY < 0 ? "max" : "min";
          if (el.scrollHeight <= el.clientHeight) {
            return;
          }
          if (!isAtTop && dY > 0 || !isAtBottom && dY < 0) {
            e.preventDefault();
            (0, import_react_dom.flushSync)(() => {
              onChange2((d) => d + Math[method](dY, remainingScroll * sign));
            });
          } else if (/firefox/i.test(getUserAgent())) {
            el.scrollTop += dY;
          }
        }
        __name(onWheel, "onWheel");
        const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;
        if (open && el) {
          el.addEventListener("wheel", onWheel);
          requestAnimationFrame(() => {
            prevScrollTopRef.current = el.scrollTop;
            if (overflowRef.current != null) {
              initialOverflowRef.current = {
                ...overflowRef.current
              };
            }
          });
          return () => {
            prevScrollTopRef.current = null;
            initialOverflowRef.current = null;
            el.removeEventListener("wheel", onWheel);
          };
        }
      }, [enabled, open, elements.floating, overflowRef, scrollRef, onChange2]);
      return React9.useMemo(() => {
        if (!enabled) {
          return {};
        }
        return {
          floating: {
            onKeyDown() {
              controlledScrollingRef.current = true;
            },
            onWheel() {
              controlledScrollingRef.current = false;
            },
            onPointerMove() {
              controlledScrollingRef.current = false;
            },
            onScroll() {
              const el = (scrollRef == null ? void 0 : scrollRef.current) || elements.floating;
              if (!overflowRef.current || !el || !controlledScrollingRef.current) {
                return;
              }
              if (prevScrollTopRef.current !== null) {
                const scrollDiff = el.scrollTop - prevScrollTopRef.current;
                if (overflowRef.current.bottom < -0.5 && scrollDiff < -1 || overflowRef.current.top < -0.5 && scrollDiff > 1) {
                  (0, import_react_dom.flushSync)(() => onChange2((d) => d + scrollDiff));
                }
              }
              requestAnimationFrame(() => {
                prevScrollTopRef.current = el.scrollTop;
              });
            }
          }
        };
      }, [enabled, overflowRef, elements.floating, scrollRef, onChange2]);
    }, "useInnerOffset");
    __name(isPointInPolygon, "isPointInPolygon");
    __name(isInside, "isInside");
    __name(safePolygon, "safePolygon");
    __name(useFloating3, "useFloating");
    __name(mergeProps, "mergeProps");
    useInteractions = /* @__PURE__ */ __name(function(propsList) {
      if (propsList === void 0) {
        propsList = [];
      }
      const deps = propsList;
      const getReferenceProps = React9.useCallback(
        (userProps) => mergeProps(userProps, propsList, "reference"),
        // eslint-disable-next-line react-hooks/exhaustive-deps
        deps
      );
      const getFloatingProps = React9.useCallback(
        (userProps) => mergeProps(userProps, propsList, "floating"),
        // eslint-disable-next-line react-hooks/exhaustive-deps
        deps
      );
      const getItemProps = React9.useCallback(
        (userProps) => mergeProps(userProps, propsList, "item"),
        // Granularly check for `item` changes, because the `getItemProps` getter
        // should be as referentially stable as possible since it may be passed as
        // a prop to many components. All `item` key values must therefore be
        // memoized.
        // eslint-disable-next-line react-hooks/exhaustive-deps
        propsList.map((key) => key == null ? void 0 : key.item)
      );
      return React9.useMemo(() => ({
        getReferenceProps,
        getFloatingProps,
        getItemProps
      }), [getReferenceProps, getFloatingProps, getItemProps]);
    }, "useInteractions");
  }
});

// node_modules/@tamagui/popover/dist/cjs/useFloatingContext.js
var require_useFloatingContext = __commonJS({
  "node_modules/@tamagui/popover/dist/cjs/useFloatingContext.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var useFloatingContext_exports = {};
    __export2(useFloatingContext_exports, {
      useFloatingContext: () => useFloatingContext
    });
    module2.exports = __toCommonJS2(useFloatingContext_exports);
    var import_react30 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var import_react210 = require("react");
    var useFloatingContext = /* @__PURE__ */ __name(({ open, setOpen, breakpointActive }) => (0, import_react210.useCallback)(
      (props) => {
        const floating = (0, import_react30.useFloating)({
          ...props,
          open,
          onOpenChange: setOpen
        });
        const { getReferenceProps, getFloatingProps } = (0, import_react30.useInteractions)([
          // useFocus(floating.context, {
          //   enabled: !breakpointActive,
          //   keyboardOnly: true,
          // }),
          (0, import_react30.useRole)(floating.context, { role: "dialog" }),
          (0, import_react30.useDismiss)(floating.context, {
            enabled: !breakpointActive
          })
        ]);
        return {
          ...floating,
          getReferenceProps,
          getFloatingProps
        };
      },
      [open, setOpen, breakpointActive]
    ), "useFloatingContext");
  }
});

// node_modules/@tamagui/popover/dist/cjs/Popover.js
var require_Popover = __commonJS({
  "node_modules/@tamagui/popover/dist/cjs/Popover.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Popover_exports = {};
    __export2(Popover_exports, {
      Popover: () => Popover,
      PopoverAnchor: () => PopoverAnchor,
      PopoverArrow: () => PopoverArrow,
      PopoverClose: () => PopoverClose,
      PopoverContent: () => PopoverContent,
      PopoverTrigger: () => PopoverTrigger,
      __PopoverProviderInternal: () => __PopoverProviderInternal,
      createPopoverScope: () => createPopoverScope,
      usePopoverScope: () => usePopoverScope
    });
    module2.exports = __toCommonJS2(Popover_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_polyfill_dev = require_polyfill_dev();
    var import_adapt2 = require_cjs();
    var import_animate_presence2 = require_cjs5();
    var import_aria_hidden3 = require_cjs6();
    var import_compose_refs3 = require_cjs2();
    var import_core37 = require("@tamagui/core-node");
    var import_create_context5 = require_cjs3();
    var import_floating = require_cjs33();
    var import_focus_scope2 = require_cjs9();
    var import_popper = require_cjs34();
    var import_portal3 = require_cjs13();
    var import_remove_scroll2 = require_cjs14();
    var import_sheet2 = require_cjs19();
    var import_stacks8 = require_cjs12();
    var import_use_controllable_state2 = require_cjs16();
    var React17 = __toESM2(require("react"));
    var import_react_native28 = require("react-native-web-lite");
    var import_useFloatingContext = require_useFloatingContext();
    var POPOVER_NAME = "Popover";
    var [createPopoverContext, createPopoverScopeInternal] = (0, import_create_context5.createContextScope)(
      POPOVER_NAME,
      [import_popper.createPopperScope]
    );
    var usePopoverScope = (0, import_popper.createPopperScope)();
    var createPopoverScope = createPopoverScopeInternal;
    var [PopoverProviderInternal, usePopoverInternalContext] = createPopoverContext(POPOVER_NAME);
    var __PopoverProviderInternal = PopoverProviderInternal;
    var ANCHOR_NAME = "PopoverAnchor";
    var PopoverAnchor = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopePopover, ...anchorProps } = props;
        const context = usePopoverInternalContext(ANCHOR_NAME, __scopePopover);
        const popperScope = usePopoverScope(__scopePopover);
        const { onCustomAnchorAdd, onCustomAnchorRemove } = context;
        React17.useEffect(() => {
          onCustomAnchorAdd();
          return () => onCustomAnchorRemove();
        }, [onCustomAnchorAdd, onCustomAnchorRemove]);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_popper.PopperAnchor, { ...popperScope, ...anchorProps, ref: forwardedRef });
      }
    );
    PopoverAnchor.displayName = ANCHOR_NAME;
    var TRIGGER_NAME3 = "PopoverTrigger";
    var PopoverTrigger = React17.forwardRef((props, forwardedRef) => {
      const { __scopePopover, ...triggerProps } = props;
      const context = usePopoverInternalContext(TRIGGER_NAME3, __scopePopover);
      const popperScope = usePopoverScope(__scopePopover);
      const composedTriggerRef = (0, import_compose_refs3.useComposedRefs)(forwardedRef, context.triggerRef);
      const trigger = /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        import_stacks8.YStack,
        {
          "aria-haspopup": "dialog",
          "aria-expanded": context.open,
          "data-state": getState2(context.open),
          ...triggerProps,
          ref: composedTriggerRef,
          onPress: (0, import_core37.composeEventHandlers)(props.onPress, context.onOpenToggle)
        }
      );
      return context.hasCustomAnchor ? trigger : /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_popper.PopperAnchor, { asChild: true, ...popperScope, children: trigger });
    });
    PopoverTrigger.displayName = TRIGGER_NAME3;
    var CONTENT_NAME2 = "PopoverContent";
    var PopoverContent = import_popper.PopperContentFrame.extractable(
      React17.forwardRef(
        /* @__PURE__ */ __name(function PopoverContent2(props, forwardedRef) {
          const {
            allowPinchZoom,
            trapFocus,
            disableRemoveScroll = true,
            zIndex: zIndex2,
            ...contentImplProps
          } = props;
          const context = usePopoverInternalContext(CONTENT_NAME2, props.__scopePopover);
          const contentRef = React17.useRef(null);
          const composedRefs = (0, import_compose_refs3.useComposedRefs)(forwardedRef, contentRef);
          const isRightClickOutsideRef = React17.useRef(false);
          React17.useEffect(() => {
            if (!context.open)
              return;
            const content = contentRef.current;
            if (content)
              return (0, import_aria_hidden3.hideOthers)(content);
          }, [context.open]);
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(PopoverContentPortal, { zIndex: zIndex2, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            PopoverContentImpl,
            {
              ...contentImplProps,
              disableRemoveScroll,
              ref: composedRefs,
              trapFocus: trapFocus ?? context.open,
              disableOutsidePointerEvents: true,
              onCloseAutoFocus: (0, import_core37.composeEventHandlers)(props.onCloseAutoFocus, (event) => {
                var _a;
                event.preventDefault();
                if (!isRightClickOutsideRef.current)
                  (_a = context.triggerRef.current) == null ? void 0 : _a.focus();
              }),
              onPointerDownOutside: (0, import_core37.composeEventHandlers)(
                props.onPointerDownOutside,
                (event) => {
                  const originalEvent = event.detail.originalEvent;
                  const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
                  const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
                  isRightClickOutsideRef.current = isRightClick;
                },
                { checkDefaultPrevented: false }
              ),
              onFocusOutside: (0, import_core37.composeEventHandlers)(
                props.onFocusOutside,
                (event) => event.preventDefault(),
                { checkDefaultPrevented: false }
              )
            }
          ) });
        }, "PopoverContent2")
      )
    );
    function PopoverContentPortal(props) {
      const themeName = (0, import_core37.useThemeName)();
      const context = usePopoverInternalContext(CONTENT_NAME2, props.__scopePopover);
      let contents = props.children;
      if (import_react_native28.Platform.OS === "android") {
        const popperContext = (0, import_popper.usePopperContext)(CONTENT_NAME2, context.popperScope);
        contents = /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_popper.PopperProvider, { ...popperContext, scope: context.popperScope, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(PopoverProviderInternal, { scope: props.__scopePopover, ...context, children: props.children }) });
      }
      const zIndex2 = props.zIndex ?? 1e3;
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_portal3.Portal, { zIndex: zIndex2, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(import_core37.Theme, { forceClassName: true, name: themeName, children: [
        !!context.open && !context.breakpointActive && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          import_stacks8.YStack,
          {
            fullscreen: true,
            onPress: (0, import_core37.composeEventHandlers)(props.onPress, context.onOpenToggle)
          }
        ),
        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_core37.Stack, { zIndex: zIndex2 + 1, children: contents })
      ] }) });
    }
    __name(PopoverContentPortal, "PopoverContentPortal");
    var PopoverContentImpl = React17.forwardRef((props, forwardedRef) => {
      const {
        __scopePopover,
        trapFocus,
        onOpenAutoFocus,
        onCloseAutoFocus,
        disableOutsidePointerEvents,
        onEscapeKeyDown,
        onPointerDownOutside,
        onFocusOutside,
        onInteractOutside,
        children,
        disableRemoveScroll,
        ...contentProps
      } = props;
      const popperScope = usePopoverScope(__scopePopover);
      const context = usePopoverInternalContext(CONTENT_NAME2, popperScope.__scopePopover);
      if (context.breakpointActive) {
        const childrenWithoutScrollView = React17.Children.toArray(children).map((child) => {
          if (React17.isValidElement(child)) {
            if (child.type === PopoverScrollView) {
              return child.props.children;
            }
          }
          return child;
        });
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_portal3.PortalItem, { hostName: `${context.scopeKey}PopoverContents`, children: childrenWithoutScrollView });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_animate_presence2.AnimatePresence, { children: !!context.open && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        import_popper.PopperContent,
        {
          "data-state": getState2(context.open),
          id: context.contentId,
          pointerEvents: "auto",
          ref: forwardedRef,
          ...popperScope,
          ...contentProps,
          children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            import_remove_scroll2.RemoveScroll,
            {
              enabled: disableRemoveScroll ? false : context.open,
              allowPinchZoom: true,
              removeScrollBar: false,
              style: {
                display: "contents"
              },
              children: trapFocus === false ? children : /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
                import_focus_scope2.FocusScope,
                {
                  loop: true,
                  trapped: trapFocus ?? context.open,
                  onMountAutoFocus: onOpenAutoFocus,
                  onUnmountAutoFocus: onCloseAutoFocus,
                  children: import_core37.isWeb ? /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { style: { display: "contents" }, children }) : children
                }
              )
            }
          )
        },
        context.contentId
      ) });
    });
    var CLOSE_NAME2 = "PopoverClose";
    var PopoverClose = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopePopover, ...closeProps } = props;
        const context = usePopoverInternalContext(CLOSE_NAME2, __scopePopover);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          import_stacks8.YStack,
          {
            ...closeProps,
            ref: forwardedRef,
            onPress: (0, import_core37.composeEventHandlers)(
              props.onPress,
              () => context.onOpenChange(false)
            )
          }
        );
      }
    );
    PopoverClose.displayName = CLOSE_NAME2;
    var ARROW_NAME = "PopoverArrow";
    var PopoverArrow = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopePopover, ...arrowProps } = props;
        const popperScope = usePopoverScope(__scopePopover);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_popper.PopperArrow, { ...popperScope, ...arrowProps, ref: forwardedRef });
      }
    );
    PopoverArrow.displayName = ARROW_NAME;
    var PopoverScrollView = React17.forwardRef((props, ref) => {
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_react_native28.ScrollView, { ref, ...props });
    });
    var Popover = (0, import_core37.withStaticProperties)(
      /* @__PURE__ */ __name(function Popover2(props) {
        const {
          __scopePopover,
          children,
          open: openProp,
          defaultOpen,
          onOpenChange,
          ...restProps
        } = props;
        const internalId = (0, import_core37.useId)();
        const id = __scopePopover ? Object.keys(__scopePopover)[0] : internalId;
        const { when, AdaptProvider } = (0, import_adapt2.useAdaptParent)({
          Contents: React17.useCallback(() => {
            return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_portal3.PortalHost, { name: `${id}PopoverContents` });
          }, [])
        });
        const sheetBreakpoint = when;
        const popperScope = usePopoverScope(__scopePopover);
        const triggerRef = React17.useRef(null);
        const [hasCustomAnchor, setHasCustomAnchor] = React17.useState(false);
        const [open, setOpen] = (0, import_use_controllable_state2.useControllableState)({
          prop: openProp,
          defaultProp: defaultOpen || false,
          onChange: onOpenChange,
          transition: true
        });
        const breakpointActive = useSheetBreakpointActive2(sheetBreakpoint);
        const floatingContext = (0, import_useFloatingContext.useFloatingContext)({ open, setOpen, breakpointActive });
        const popoverContext = {
          scope: __scopePopover,
          scopeKey: id,
          popperScope: popperScope.__scopePopper,
          sheetBreakpoint,
          contentId: (0, import_core37.useId)(),
          triggerRef,
          open,
          breakpointActive,
          onOpenChange: setOpen,
          onOpenToggle: (0, import_core37.useEvent)(() => {
            if (open && breakpointActive) {
              return;
            }
            setOpen(!open);
          }),
          hasCustomAnchor,
          onCustomAnchorAdd: React17.useCallback(() => setHasCustomAnchor(true), []),
          onCustomAnchorRemove: React17.useCallback(() => setHasCustomAnchor(false), [])
        };
        const contents = /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_popper.Popper, { ...popperScope, stayInFrame: true, ...restProps, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(PopoverProviderInternal, { ...popoverContext, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(PopoverSheetController, { onOpenChange: setOpen, __scopePopover, children }) }) });
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(AdaptProvider, { children: import_core37.isWeb ? /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_floating.FloatingOverrideContext.Provider, { value: floatingContext, children: contents }) : contents });
      }, "Popover2"),
      {
        Anchor: PopoverAnchor,
        Arrow: PopoverArrow,
        Trigger: PopoverTrigger,
        Content: PopoverContent,
        Close: PopoverClose,
        Adapt: import_adapt2.Adapt,
        ScrollView: PopoverScrollView,
        Sheet: import_sheet2.ControlledSheet
      }
    );
    function getState2(open) {
      return open ? "open" : "closed";
    }
    __name(getState2, "getState");
    var PopoverSheetController = /* @__PURE__ */ __name((props) => {
      const context = usePopoverInternalContext(
        "PopoverSheetController",
        props.__scopePopover
      );
      const showSheet = useShowPopoverSheet(context);
      const breakpointActive = context.breakpointActive;
      const getShowSheet = (0, import_core37.useGet)(showSheet);
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        import_sheet2.SheetController,
        {
          onOpenChange: (val2) => {
            if (getShowSheet()) {
              props.onOpenChange(val2);
            }
          },
          open: context.open,
          hidden: breakpointActive === false,
          children: props.children
        }
      );
    }, "PopoverSheetController");
    var useSheetBreakpointActive2 = /* @__PURE__ */ __name((breakpoint) => {
      const media2 = (0, import_core37.useMedia)();
      if (typeof breakpoint === "boolean" || !breakpoint) {
        return !!breakpoint;
      }
      return media2[breakpoint];
    }, "useSheetBreakpointActive");
    var useShowPopoverSheet = /* @__PURE__ */ __name((context) => {
      const breakpointActive = useSheetBreakpointActive2(context.sheetBreakpoint);
      return context.open === false ? false : breakpointActive;
    }, "useShowPopoverSheet");
  }
});

// node_modules/@tamagui/popover/dist/cjs/index.js
var require_cjs35 = __commonJS({
  "node_modules/@tamagui/popover/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Popover(), module2.exports);
    __reExport2(src_exports, require_useFloatingContext(), module2.exports);
  }
});

// node_modules/@tamagui/progress/dist/cjs/Progress.js
var require_Progress = __commonJS({
  "node_modules/@tamagui/progress/dist/cjs/Progress.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Progress_exports = {};
    __export2(Progress_exports, {
      Progress: () => Progress,
      ProgressFrame: () => ProgressFrame,
      ProgressIndicator: () => ProgressIndicator,
      ProgressIndicatorFrame: () => ProgressIndicatorFrame,
      createProgressScope: () => createProgressScope
    });
    module2.exports = __toCommonJS2(Progress_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_core37 = require("@tamagui/core-node");
    var import_create_context5 = require_cjs3();
    var import_get_size2 = require_cjs10();
    var import_stacks8 = require_cjs12();
    var React17 = __toESM2(require("react"));
    var PROGRESS_NAME = "Progress";
    var [createProgressContext, createProgressScope] = (0, import_create_context5.createContextScope)(PROGRESS_NAME);
    var [ProgressProvider, useProgressContext] = createProgressContext(PROGRESS_NAME);
    var INDICATOR_NAME = "ProgressIndicator";
    var ProgressIndicatorFrame = (0, import_core37.styled)(import_stacks8.ThemeableStack, {
      name: INDICATOR_NAME,
      height: "100%",
      width: "100%",
      backgrounded: true
    });
    var ProgressIndicator = ProgressIndicatorFrame.extractable(
      React17.forwardRef(
        (props, forwardedRef) => {
          const { __scopeProgress, ...indicatorProps } = props;
          const context = useProgressContext(INDICATOR_NAME, __scopeProgress);
          const pct = context.max - (context.value ?? 0);
          const x = -context.width * (pct / 100);
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            ProgressIndicatorFrame,
            {
              "data-state": getProgressState(context.value, context.max),
              "data-value": context.value ?? void 0,
              "data-max": context.max,
              x,
              width: context.width,
              ...indicatorProps,
              ref: forwardedRef
            }
          );
        }
      )
    );
    ProgressIndicator.displayName = INDICATOR_NAME;
    function defaultGetValueLabel(value, max3) {
      return `${Math.round(value / max3 * 100)}%`;
    }
    __name(defaultGetValueLabel, "defaultGetValueLabel");
    function getProgressState(value, maxValue) {
      return value == null ? "indeterminate" : value === maxValue ? "complete" : "loading";
    }
    __name(getProgressState, "getProgressState");
    function isNumber(value) {
      return typeof value === "number";
    }
    __name(isNumber, "isNumber");
    function isValidMaxNumber(max3) {
      return isNumber(max3) && !isNaN(max3) && max3 > 0;
    }
    __name(isValidMaxNumber, "isValidMaxNumber");
    function isValidValueNumber(value, max3) {
      return isNumber(value) && !isNaN(value) && value <= max3 && value >= 0;
    }
    __name(isValidValueNumber, "isValidValueNumber");
    function getInvalidMaxError(propValue, componentName) {
      return `Invalid prop \`max\` of value \`${propValue}\` supplied to \`${componentName}\`. Only numbers greater than 0 are valid max values. Defaulting to \`${DEFAULT_MAX}\`.`;
    }
    __name(getInvalidMaxError, "getInvalidMaxError");
    function getInvalidValueError(propValue, componentName) {
      return `Invalid prop \`value\` of value \`${propValue}\` supplied to \`${componentName}\`. The \`value\` prop must be:
  - a positive number
  - less than the value passed to \`max\` (or ${DEFAULT_MAX} if no \`max\` prop is set)
  - \`null\` if the progress is indeterminate.

Defaulting to \`null\`.`;
    }
    __name(getInvalidValueError, "getInvalidValueError");
    var DEFAULT_MAX = 100;
    var ProgressFrame = (0, import_core37.styled)(import_stacks8.ThemeableStack, {
      name: PROGRESS_NAME,
      borderRadius: 1e5,
      overflow: "hidden",
      backgrounded: true,
      variants: {
        size: {
          "...size": (val2) => {
            const size4 = Math.round((0, import_core37.getVariableValue)((0, import_get_size2.getSize)(val2)) * 0.25);
            return {
              height: size4,
              minWidth: (0, import_core37.getVariableValue)(size4) * 20,
              width: "100%"
            };
          }
        }
      }
    });
    var Progress = (0, import_core37.withStaticProperties)(
      ProgressFrame.extractable(
        React17.forwardRef(
          (props, forwardedRef) => {
            const {
              __scopeProgress,
              value: valueProp,
              max: maxProp,
              getValueLabel = defaultGetValueLabel,
              size: size4 = "$true",
              ...progressProps
            } = props;
            const max3 = isValidMaxNumber(maxProp) ? maxProp : DEFAULT_MAX;
            const value = isValidValueNumber(valueProp, max3) ? valueProp : null;
            const valueLabel = isNumber(value) ? getValueLabel(value, max3) : void 0;
            const [width, setWidth] = React17.useState(0);
            return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(ProgressProvider, { scope: __scopeProgress, value, max: max3, width, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
              ProgressFrame,
              {
                size: size4,
                "aria-valuemax": max3,
                "aria-valuemin": 0,
                "aria-valuenow": isNumber(value) ? value : void 0,
                "aria-valuetext": valueLabel,
                role: "progressbar",
                "data-state": getProgressState(value, max3),
                "data-value": value ?? void 0,
                "data-max": max3,
                ...progressProps,
                onLayout: (e) => {
                  var _a;
                  setWidth(e.nativeEvent.layout.width);
                  (_a = progressProps.onLayout) == null ? void 0 : _a.call(progressProps, e);
                },
                ref: forwardedRef
              }
            ) });
          }
        )
      ),
      {
        Indicator: ProgressIndicator
      }
    );
    Progress.displayName = PROGRESS_NAME;
    Progress.propTypes = {
      max(props, propName, componentName) {
        const propValue = props[propName];
        const strVal = String(propValue);
        if (propValue && !isValidMaxNumber(propValue)) {
          return new Error(getInvalidMaxError(strVal, componentName));
        }
        return null;
      },
      value(props, propName, componentName) {
        const valueProp = props[propName];
        const strVal = String(valueProp);
        const max3 = isValidMaxNumber(props.max) ? props.max : DEFAULT_MAX;
        if (valueProp != null && !isValidValueNumber(valueProp, max3)) {
          return new Error(getInvalidValueError(strVal, componentName));
        }
        return null;
      }
    };
  }
});

// node_modules/@tamagui/progress/dist/cjs/index.js
var require_cjs36 = __commonJS({
  "node_modules/@tamagui/progress/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Progress(), module2.exports);
  }
});

// node_modules/@radix-ui/react-use-previous/dist/index.js
var require_dist5 = __commonJS({
  "node_modules/@radix-ui/react-use-previous/dist/index.js"(exports) {
    var e;
    var r;
    var u = (e = {}, r = require("react"), Object.keys(r).forEach(function(u2) {
      "default" !== u2 && "__esModule" !== u2 && Object.defineProperty(e, u2, { enumerable: true, get: function() {
        return r[u2];
      } });
    }), e);
    exports.usePrevious = function(e2) {
      const r2 = u.useRef({ value: e2, previous: e2 });
      return u.useMemo(() => (r2.current.value !== e2 && (r2.current.previous = r2.current.value, r2.current.value = e2), r2.current.previous), [e2]);
    };
  }
});

// node_modules/@tamagui/label/dist/cjs/Label.js
var require_Label = __commonJS({
  "node_modules/@tamagui/label/dist/cjs/Label.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Label_exports = {};
    __export2(Label_exports, {
      Label: () => Label2,
      LabelFrame: () => LabelFrame2,
      useLabelContext: () => useLabelContext2
    });
    module2.exports = __toCommonJS2(Label_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_compose_refs3 = require_cjs2();
    var import_create_context5 = require_cjs3();
    var import_focusable4 = require_cjs31();
    var import_get_button_sized5 = require_cjs11();
    var import_get_font_sized4 = require_cjs20();
    var import_text5 = require_cjs21();
    var import_web8 = require("@tamagui/core-node");
    var React17 = __toESM2(require("react"));
    var NAME3 = "Label";
    var [LabelProvider2, useLabelContextImpl2] = (0, import_create_context5.createContext)(NAME3, {
      id: void 0,
      controlRef: { current: null }
    });
    var LabelFrame2 = (0, import_web8.styled)(import_text5.SizableText, {
      name: "Label",
      tag: "label",
      variants: {
        unstyled: {
          false: {
            size: "$true",
            color: "$color",
            backgroundColor: "transparent",
            display: "flex",
            alignItems: "center",
            userSelect: "none",
            cursor: "default",
            pressStyle: {
              color: "$colorPress"
            }
          }
        },
        size: {
          "...size": (val2, extras) => {
            const buttonStyle = (0, import_get_button_sized5.getButtonSized)(val2, extras);
            return {
              ...(0, import_get_font_sized4.getFontSized)(val2, extras),
              height: buttonStyle.height,
              lineHeight: buttonStyle.height
            };
          }
        }
      },
      defaultVariants: {
        unstyled: false
      }
    });
    var LabelComponent2 = React17.forwardRef(
      (props, forwardedRef) => {
        const { htmlFor, id: idProp, ...labelProps } = props;
        const controlRef = React17.useRef(null);
        const ref = React17.useRef(null);
        const composedRefs = (0, import_compose_refs3.useComposedRefs)(forwardedRef, ref);
        const backupId = (0, import_web8.useId)();
        const id = idProp ?? backupId;
        if (import_web8.isWeb) {
          React17.useEffect(() => {
            if (htmlFor) {
              const element = document.getElementById(htmlFor);
              const label = ref.current;
              if (label && element) {
                const getAriaLabel = /* @__PURE__ */ __name(() => element.getAttribute("aria-labelledby"), "getAriaLabel");
                const ariaLabelledBy = [id, getAriaLabel()].filter(Boolean).join(" ");
                element.setAttribute("aria-labelledby", ariaLabelledBy);
                controlRef.current = element;
                return () => {
                  var _a;
                  if (!id)
                    return;
                  const ariaLabelledBy2 = (_a = getAriaLabel()) == null ? void 0 : _a.replace(id, "");
                  if (ariaLabelledBy2 === "") {
                    element.removeAttribute("aria-labelledby");
                  } else if (ariaLabelledBy2) {
                    element.setAttribute("aria-labelledby", ariaLabelledBy2);
                  }
                };
              }
            }
          }, [id, htmlFor]);
        }
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(LabelProvider2, { id, controlRef, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          LabelFrame2,
          {
            role: "label",
            id,
            htmlFor,
            ...labelProps,
            ref: composedRefs,
            onMouseDown: (event) => {
              var _a;
              (_a = props.onMouseDown) == null ? void 0 : _a.call(props, event);
              if (!event.defaultPrevented && event.detail > 1) {
                event.preventDefault();
              }
            },
            onPress: (event) => {
              var _a;
              (_a = props.onPress) == null ? void 0 : _a.call(props, event);
              if (import_web8.isWeb) {
                if (htmlFor || !controlRef.current || event.defaultPrevented)
                  return;
                const isClickingControl = controlRef.current.contains(
                  event.target
                );
                const isUserClick = event.isTrusted === true;
                if (!isClickingControl && isUserClick) {
                  controlRef.current.click();
                  controlRef.current.focus();
                }
              } else {
                if (props.htmlFor) {
                  (0, import_focusable4.focusFocusable)(props.htmlFor);
                }
              }
            }
          }
        ) });
      }
    );
    LabelComponent2.displayName = NAME3;
    var Label2 = LabelFrame2.extractable((0, import_web8.themeable)(LabelComponent2), {
      neverFlatten: true
    });
    var useLabelContext2 = /* @__PURE__ */ __name((element) => {
      const context = useLabelContextImpl2("LabelConsumer");
      const { controlRef } = context;
      React17.useEffect(() => {
        if (element)
          controlRef.current = element;
      }, [element, controlRef]);
      return context.id;
    }, "useLabelContext");
  }
});

// node_modules/@tamagui/label/dist/cjs/index.js
var require_cjs37 = __commonJS({
  "node_modules/@tamagui/label/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Label(), module2.exports);
  }
});

// node_modules/@tamagui/radio-group/dist/cjs/RadioGroup.js
var require_RadioGroup = __commonJS({
  "node_modules/@tamagui/radio-group/dist/cjs/RadioGroup.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var RadioGroup_exports = {};
    __export2(RadioGroup_exports, {
      RadioGroup: () => RadioGroup,
      createRadioGroupScope: () => createRadioGroupScope
    });
    module2.exports = __toCommonJS2(RadioGroup_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_react_use_previous = require_dist5();
    var import_core37 = require("@tamagui/core-node");
    var import_create_context5 = require_cjs3();
    var import_focusable4 = require_cjs31();
    var import_get_size2 = require_cjs10();
    var import_label = require_cjs37();
    var import_stacks8 = require_cjs12();
    var import_use_controllable_state2 = require_cjs16();
    var React17 = __toESM2(require("react"));
    var RADIO_GROUP_NAME = "RadioGroup";
    var ARROW_KEYS = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"];
    var [createRadioGroupContext, createRadioGroupScope] = (0, import_create_context5.createContextScope)(RADIO_GROUP_NAME);
    var [RadioGroupProvider, useRadioGroupContext] = createRadioGroupContext(RADIO_GROUP_NAME);
    var getState2 = /* @__PURE__ */ __name((checked) => {
      return checked ? "checked" : "unchecked";
    }, "getState");
    var RADIO_GROUP_INDICATOR_NAME = "RadioGroupIndicator";
    var RadioIndicatorFrame = (0, import_core37.styled)(import_stacks8.ThemeableStack, {
      name: RADIO_GROUP_INDICATOR_NAME,
      pointerEvents: "none",
      variants: {
        unstyled: {
          false: {
            w: "40%",
            h: "40%",
            br: 1e3,
            backgroundColor: "$color"
          }
        }
      },
      defaultVariants: {
        unstyled: false
      }
    });
    var RadioIndicator = RadioIndicatorFrame.extractable(
      React17.forwardRef(
        (props, forwardedRef) => {
          const { __scopeRadioGroupItem, forceMount, disabled, ...indicatorProps } = props;
          const { checked } = useRadioGroupItemContext(
            RADIO_GROUP_INDICATOR_NAME,
            __scopeRadioGroupItem
          );
          if (forceMount || checked) {
            return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
              RadioIndicatorFrame,
              {
                theme: "active",
                "data-state": getState2(checked),
                "data-disabled": disabled ? "" : void 0,
                ...indicatorProps,
                ref: forwardedRef
              }
            );
          }
          return null;
        }
      )
    );
    RadioIndicator.displayName = RADIO_GROUP_INDICATOR_NAME;
    var RADIO_GROUP_ITEM_NAME = "RadioGroupItem";
    var [RadioGroupItemProvider, useRadioGroupItemContext] = createRadioGroupContext(RADIO_GROUP_NAME);
    var RadioGroupItemFrame = (0, import_core37.styled)(import_stacks8.ThemeableStack, {
      name: RADIO_GROUP_ITEM_NAME,
      tag: "button",
      variants: {
        unstyled: {
          false: {
            size: "$true",
            borderRadius: 1e3,
            backgroundColor: "$background",
            alignItems: "center",
            justifyContent: "center",
            borderWidth: 1,
            borderColor: "$borderColor",
            hoverStyle: {
              borderColor: "$borderColorHover"
            },
            focusStyle: {
              borderColor: "$borderColorFocus"
            }
          }
        },
        size: {
          "...size": (value, { props }) => {
            const size4 = Math.floor(
              (0, import_core37.getVariableValue)((0, import_get_size2.getSize)(value)) * (props["scaleSize"] ?? 0.5)
            );
            return {
              width: size4,
              height: size4
            };
          }
        }
      },
      defaultVariants: {
        unstyled: false
      }
    });
    var RadioGroupItem = RadioGroupItemFrame.extractable(
      React17.forwardRef(
        (props, forwardedRef) => {
          const {
            __scopeRadioGroup,
            value,
            labelledBy: ariaLabelledby,
            disabled: itemDisabled,
            ...itemProps
          } = props;
          const {
            value: groupValue,
            disabled,
            required,
            onChange: onChange2,
            name,
            native,
            accentColor
          } = useRadioGroupContext(RADIO_GROUP_ITEM_NAME, __scopeRadioGroup);
          const [button, setButton] = React17.useState(null);
          const hasConsumerStoppedPropagationRef = React17.useRef(false);
          const ref = React17.useRef(null);
          const composedRefs = (0, import_core37.useComposedRefs)(forwardedRef, (node) => setButton(node), ref);
          const isArrowKeyPressedRef = React17.useRef(false);
          const isFormControl = import_core37.isWeb ? button ? Boolean(button.closest("form")) : true : false;
          const checked = groupValue === value;
          const labelId = (0, import_label.useLabelContext)(button);
          const labelledBy = ariaLabelledby || labelId;
          React17.useEffect(() => {
            if (import_core37.isWeb) {
              const handleKeyDown = /* @__PURE__ */ __name((event) => {
                if (ARROW_KEYS.includes(event.key)) {
                  isArrowKeyPressedRef.current = true;
                }
              }, "handleKeyDown");
              const handleKeyUp = /* @__PURE__ */ __name(() => isArrowKeyPressedRef.current = false, "handleKeyUp");
              document.addEventListener("keydown", handleKeyDown);
              document.addEventListener("keyup", handleKeyUp);
              return () => {
                document.removeEventListener("keydown", handleKeyDown);
                document.removeEventListener("keyup", handleKeyUp);
              };
            }
          }, []);
          if (process.env.TAMAGUI_TARGET === "native") {
            React17.useEffect(() => {
              if (!props.id)
                return;
              return (0, import_focusable4.registerFocusable)(props.id, {
                focusAndSelect: () => {
                  onChange2 == null ? void 0 : onChange2(value);
                },
                focus: () => {
                }
              });
            }, [props.id, value]);
          }
          const isDisabled = disabled || itemDisabled;
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(RadioGroupItemProvider, { checked, scope: __scopeRadioGroup, children: import_core37.isWeb && native ? /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            BubbleInput,
            {
              control: button,
              bubbles: !hasConsumerStoppedPropagationRef.current,
              name,
              value,
              checked,
              required,
              disabled: isDisabled,
              id: props.id,
              accentColor
            }
          ) : /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [
            /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
              RadioGroupItemFrame,
              {
                "data-state": getState2(checked),
                "data-disabled": isDisabled ? "" : void 0,
                role: "radio",
                "aria-labelledby": labelledBy,
                "aria-checked": checked,
                "aria-required": required,
                disabled: isDisabled,
                ref: composedRefs,
                ...import_core37.isWeb && {
                  type: "button",
                  value
                },
                ...itemProps,
                onPress: (0, import_core37.composeEventHandlers)(props.onPress, (event) => {
                  if (!checked) {
                    onChange2 == null ? void 0 : onChange2(value);
                  }
                  if (isFormControl) {
                    hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
                    if (!hasConsumerStoppedPropagationRef.current)
                      event.stopPropagation();
                  }
                }),
                ...import_core37.isWeb && {
                  onKeyDown: (0, import_core37.composeEventHandlers)(
                    props.onKeyDown,
                    (event) => {
                      if (event.key === "Enter")
                        event.preventDefault();
                    }
                  ),
                  onFocus: (0, import_core37.composeEventHandlers)(itemProps.onFocus, () => {
                    var _a;
                    if (isArrowKeyPressedRef.current)
                      (_a = ref.current) == null ? void 0 : _a.click();
                  })
                }
              }
            ),
            isFormControl && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
              BubbleInput,
              {
                isHidden: true,
                control: button,
                bubbles: !hasConsumerStoppedPropagationRef.current,
                name,
                value,
                checked,
                required,
                disabled: isDisabled
              }
            )
          ] }) });
        }
      )
    );
    var BubbleInput = /* @__PURE__ */ __name((props) => {
      const { checked, bubbles = true, control, isHidden, accentColor, ...inputProps } = props;
      const ref = React17.useRef(null);
      const prevChecked = (0, import_react_use_previous.usePrevious)(checked);
      React17.useEffect(() => {
        const input = ref.current;
        const inputProto = window.HTMLInputElement.prototype;
        const descriptor = Object.getOwnPropertyDescriptor(
          inputProto,
          "checked"
        );
        const setChecked = descriptor.set;
        if (prevChecked !== checked && setChecked) {
          const event = new Event("click", { bubbles });
          setChecked.call(input, checked);
          input.dispatchEvent(event);
        }
      }, [prevChecked, checked, bubbles]);
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        "input",
        {
          type: "radio",
          defaultChecked: checked,
          ...inputProps,
          tabIndex: -1,
          ref,
          "aria-hidden": isHidden,
          style: {
            ...isHidden ? {
              // ...controlSize,
              position: "absolute",
              pointerEvents: "none",
              opacity: 0,
              margin: 0
            } : {
              appearance: "auto",
              accentColor
            },
            ...props.style
          }
        }
      );
    }, "BubbleInput");
    var RadioGroupFrame = (0, import_core37.styled)(import_stacks8.ThemeableStack, {
      name: RADIO_GROUP_NAME,
      variants: {
        orientation: {
          horizontal: {
            flexDirection: "row",
            spaceDirection: "horizontal"
          },
          vertical: {
            flexDirection: "column",
            spaceDirection: "vertical"
          }
        }
      }
    });
    var RadioGroup = (0, import_core37.withStaticProperties)(
      RadioGroupFrame.extractable(
        React17.forwardRef(
          (props, forwardedRef) => {
            const {
              __scopeRadioGroup,
              value: valueProp,
              defaultValue: defaultValue2,
              onValueChange,
              disabled = false,
              required = false,
              name,
              orientation,
              native,
              accentColor,
              ...radioGroupProps
            } = props;
            const [value, setValue] = (0, import_use_controllable_state2.useControllableState)({
              prop: valueProp,
              defaultProp: defaultValue2,
              onChange: onValueChange
            });
            return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
              RadioGroupProvider,
              {
                scope: __scopeRadioGroup,
                value,
                required,
                onChange: setValue,
                disabled,
                name,
                native,
                accentColor,
                children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
                  RadioGroupFrame,
                  {
                    "aria-valuetext": value,
                    role: "radiogroup",
                    "aria-orientation": orientation,
                    ref: forwardedRef,
                    orientation,
                    "data-disabled": disabled ? "" : void 0,
                    ...radioGroupProps
                  }
                )
              }
            );
          }
        )
      ),
      {
        Indicator: RadioIndicator,
        Item: RadioGroupItem
      }
    );
    RadioGroup.displayName = RADIO_GROUP_NAME;
  }
});

// node_modules/@tamagui/radio-group/dist/cjs/index.js
var require_cjs38 = __commonJS({
  "node_modules/@tamagui/radio-group/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_RadioGroup(), module2.exports);
  }
});

// node_modules/@tamagui/separator/dist/cjs/Separator.js
var require_Separator = __commonJS({
  "node_modules/@tamagui/separator/dist/cjs/Separator.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Separator_exports = {};
    __export2(Separator_exports, {
      Separator: () => Separator
    });
    module2.exports = __toCommonJS2(Separator_exports);
    var import_core37 = require("@tamagui/core-node");
    var Separator = (0, import_core37.styled)(import_core37.Stack, {
      name: "Separator",
      borderColor: "$borderColor",
      flexShrink: 0,
      borderWidth: 0,
      flex: 1,
      height: 0,
      maxHeight: 0,
      borderBottomWidth: 1,
      y: -0.5,
      variants: {
        vertical: {
          true: {
            y: 0,
            x: -0.5,
            height: import_core37.isWeb ? "initial" : "auto",
            // maxHeight auto WILL BE passed to style attribute, but for some reason not used?
            // almost seems like a react or browser bug, but for now `initial` works
            // also, it doesn't happen for `height`, but for consistency using the same values
            maxHeight: import_core37.isWeb ? "initial" : "auto",
            width: 0,
            maxWidth: 0,
            borderBottomWidth: 0,
            borderRightWidth: 1
          }
        }
      }
    });
  }
});

// node_modules/@tamagui/separator/dist/cjs/index.js
var require_cjs39 = __commonJS({
  "node_modules/@tamagui/separator/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Separator(), module2.exports);
  }
});

// node_modules/@tamagui/select/dist/cjs/constants.js
var require_constants3 = __commonJS({
  "node_modules/@tamagui/select/dist/cjs/constants.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var constants_exports = {};
    __export2(constants_exports, {
      FALLBACK_THRESHOLD: () => FALLBACK_THRESHOLD,
      MIN_HEIGHT: () => MIN_HEIGHT,
      SCROLL_ARROW_THRESHOLD: () => SCROLL_ARROW_THRESHOLD,
      SCROLL_ARROW_VELOCITY: () => SCROLL_ARROW_VELOCITY,
      SELECT_NAME: () => SELECT_NAME,
      VIEWPORT_NAME: () => VIEWPORT_NAME,
      WINDOW_PADDING: () => WINDOW_PADDING
    });
    module2.exports = __toCommonJS2(constants_exports);
    var SELECT_NAME = "Select";
    var WINDOW_PADDING = 8;
    var SCROLL_ARROW_VELOCITY = 8;
    var SCROLL_ARROW_THRESHOLD = 8;
    var MIN_HEIGHT = 80;
    var FALLBACK_THRESHOLD = 16;
    var VIEWPORT_NAME = "SelectViewport";
  }
});

// node_modules/@tamagui/select/dist/cjs/context.js
var require_context = __commonJS({
  "node_modules/@tamagui/select/dist/cjs/context.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var context_exports = {};
    __export2(context_exports, {
      ForwardSelectContext: () => ForwardSelectContext,
      SelectProvider: () => SelectProvider,
      createSelectContext: () => createSelectContext,
      createSelectScope: () => createSelectScope,
      useSelectContext: () => useSelectContext
    });
    module2.exports = __toCommonJS2(context_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_create_context5 = require_cjs3();
    var import_constants = require_constants3();
    var [createSelectContext, createSelectScope] = (0, import_create_context5.createContextScope)(import_constants.SELECT_NAME);
    var [SelectProvider, useSelectContext] = createSelectContext(import_constants.SELECT_NAME);
    var ForwardSelectContext = /* @__PURE__ */ __name((props) => {
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(SelectProvider, { isInSheet: true, scope: props.__scopeSelect, ...props.context, children: props.children });
    }, "ForwardSelectContext");
  }
});

// node_modules/@tamagui/select/dist/cjs/useSelectBreakpointActive.js
var require_useSelectBreakpointActive = __commonJS({
  "node_modules/@tamagui/select/dist/cjs/useSelectBreakpointActive.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var useSelectBreakpointActive_exports = {};
    __export2(useSelectBreakpointActive_exports, {
      useSelectBreakpointActive: () => useSelectBreakpointActive,
      useShowSelectSheet: () => useShowSelectSheet
    });
    module2.exports = __toCommonJS2(useSelectBreakpointActive_exports);
    var import_core37 = require("@tamagui/core-node");
    var useSelectBreakpointActive = /* @__PURE__ */ __name((sheetBreakpoint) => {
      const media2 = (0, import_core37.useMedia)();
      if (!sheetBreakpoint)
        return false;
      if (sheetBreakpoint === true)
        return true;
      return sheetBreakpoint ? media2[sheetBreakpoint] : false;
    }, "useSelectBreakpointActive");
    var useShowSelectSheet = /* @__PURE__ */ __name((context) => {
      const breakpointActive = useSelectBreakpointActive(context.sheetBreakpoint);
      return context.open === false ? false : breakpointActive;
    }, "useShowSelectSheet");
  }
});

// node_modules/@tamagui/select/dist/cjs/SelectContent.js
var require_SelectContent = __commonJS({
  "node_modules/@tamagui/select/dist/cjs/SelectContent.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var SelectContent_exports = {};
    __export2(SelectContent_exports, {
      SelectContent: () => SelectContent
    });
    module2.exports = __toCommonJS2(SelectContent_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_react30 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var import_core37 = require("@tamagui/core-node");
    var import_dismissable2 = require_cjs8();
    var import_focus_scope2 = require_cjs9();
    var import_context = require_context();
    var import_useSelectBreakpointActive = require_useSelectBreakpointActive();
    var CONTENT_NAME2 = "SelectContent";
    var SelectContent = /* @__PURE__ */ __name(({
      children,
      __scopeSelect,
      zIndex: zIndex2 = 1e3,
      ...focusScopeProps
    }) => {
      const context = (0, import_context.useSelectContext)(CONTENT_NAME2, __scopeSelect);
      const themeName = (0, import_core37.useThemeName)();
      const showSheet = (0, import_useSelectBreakpointActive.useShowSelectSheet)(context);
      const contents = /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_core37.Theme, { forceClassName: true, name: themeName, children });
      const touch = (0, import_core37.useIsTouchDevice)();
      if (showSheet) {
        if (!context.open) {
          return null;
        }
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_jsx_runtime12.Fragment, { children: contents });
      }
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_react30.FloatingPortal, { children: context.open ? /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_react30.FloatingOverlay, { style: { zIndex: zIndex2 }, lockScroll: !touch, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_focus_scope2.FocusScope, { loop: true, trapped: true, ...focusScopeProps, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_dismissable2.Dismissable, { children: contents }) }) }) : /* @__PURE__ */ (0, import_jsx_runtime12.jsx)("div", { style: { display: "none" }, children: contents }) });
    }, "SelectContent");
  }
});

// node_modules/@tamagui/select/dist/cjs/SelectImpl.js
var require_SelectImpl = __commonJS({
  "node_modules/@tamagui/select/dist/cjs/SelectImpl.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var SelectImpl_exports = {};
    __export2(SelectImpl_exports, {
      SelectInlineImpl: () => SelectInlineImpl
    });
    module2.exports = __toCommonJS2(SelectImpl_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_react30 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var import_core37 = require("@tamagui/core-node");
    var React17 = __toESM2(require("react"));
    var import_react_dom4 = require("react-dom");
    var import_constants = require_constants3();
    var import_context = require_context();
    var SelectInlineImpl = /* @__PURE__ */ __name((props) => {
      const {
        __scopeSelect,
        children,
        open = false,
        selectedIndexRef,
        listContentRef
      } = props;
      const selectContext = (0, import_context.useSelectContext)("SelectSheetImpl", __scopeSelect);
      const {
        setActiveIndex,
        setOpen,
        setSelectedIndex,
        selectedIndex,
        activeIndex,
        forceUpdate
      } = selectContext;
      const [scrollTop, setScrollTop] = React17.useState(0);
      const touch = (0, import_core37.useIsTouchDevice)();
      const listItemsRef = React17.useRef([]);
      const overflowRef = React17.useRef(null);
      const upArrowRef = React17.useRef(null);
      const downArrowRef = React17.useRef(null);
      const allowSelectRef = React17.useRef(false);
      const allowMouseUpRef = React17.useRef(true);
      const selectTimeoutRef = React17.useRef();
      const state = React17.useRef({
        isMouseOutside: false
      });
      const [controlledScrolling, setControlledScrolling] = React17.useState(false);
      const [fallback, setFallback] = React17.useState(false);
      const [innerOffset, setInnerOffset] = React17.useState(0);
      const [blockSelection, setBlockSelection] = React17.useState(false);
      const floatingStyle = React17.useRef({});
      React17.useEffect(() => {
        const frame = requestAnimationFrame(() => {
          if (!open) {
            setScrollTop(0);
            setFallback(false);
            setActiveIndex(null);
            setControlledScrolling(false);
          }
        });
        return () => {
          cancelAnimationFrame(frame);
        };
      }, [open, setActiveIndex]);
      if (import_core37.isWeb && import_core37.isClient) {
        React17.useEffect(() => {
          if (!open)
            return;
          const mouseUp = /* @__PURE__ */ __name((e) => {
            if (state.current.isMouseOutside) {
              setOpen(false);
            }
          }, "mouseUp");
          document.addEventListener("mouseup", mouseUp);
          return () => {
            document.removeEventListener("mouseup", mouseUp);
          };
        }, [open]);
      }
      const updateFloatingSize = (0, import_react30.size)({
        apply({
          availableHeight,
          rects: {
            reference: { width }
          }
        }) {
          floatingStyle.current = {
            width,
            maxHeight: availableHeight
          };
        },
        padding: import_constants.WINDOW_PADDING
      });
      const { x, y, reference, floating, strategy, context, refs } = (0, import_react30.useFloating)({
        open,
        onOpenChange: setOpen,
        whileElementsMounted: import_react30.autoUpdate,
        placement: "bottom-start",
        middleware: fallback ? [
          (0, import_react30.offset)(5),
          ...[
            touch ? (0, import_react30.shift)({ crossAxis: true, padding: import_constants.WINDOW_PADDING }) : (0, import_react30.flip)({ padding: import_constants.WINDOW_PADDING })
          ],
          updateFloatingSize
        ] : [
          (0, import_react30.inner)({
            listRef: listItemsRef,
            overflowRef,
            index: selectedIndex,
            offset: innerOffset,
            onFallbackChange: setFallback,
            padding: 10,
            minItemsVisible: touch ? 10 : 4,
            referenceOverflowThreshold: 20
          }),
          updateFloatingSize
        ]
      });
      const floatingRef = refs.floating;
      const showUpArrow = open && scrollTop > import_constants.SCROLL_ARROW_THRESHOLD;
      const showDownArrow = open && floatingRef.current && scrollTop < floatingRef.current.scrollHeight - floatingRef.current.clientHeight - import_constants.SCROLL_ARROW_THRESHOLD;
      const interactions = (0, import_react30.useInteractions)([
        (0, import_react30.useClick)(context, { event: "mousedown" }),
        (0, import_react30.useDismiss)(context, { outsidePress: true }),
        (0, import_react30.useRole)(context, { role: "listbox" }),
        (0, import_react30.useInnerOffset)(context, {
          enabled: !fallback,
          onChange: setInnerOffset,
          overflowRef
        }),
        (0, import_react30.useListNavigation)(context, {
          listRef: listItemsRef,
          activeIndex,
          selectedIndex,
          onNavigate: setActiveIndex
        }),
        (0, import_react30.useTypeahead)(context, {
          listRef: listContentRef,
          onMatch: open ? setActiveIndex : setSelectedIndex,
          selectedIndex,
          activeIndex
        })
      ]);
      const interactionsContext = React17.useMemo(() => {
        return {
          ...interactions,
          getReferenceProps() {
            return interactions.getReferenceProps({
              ref: reference,
              className: "SelectTrigger",
              onKeyDown(event) {
                if (event.key === "Enter" || event.key === " " && !context.dataRef.current.typing) {
                  event.preventDefault();
                  setOpen(true);
                }
              }
            });
          },
          getFloatingProps(props2) {
            return interactions.getFloatingProps({
              ref: floating,
              className: "Select",
              ...props2,
              style: {
                position: strategy,
                top: y ?? "",
                left: x ?? "",
                outline: 0,
                scrollbarWidth: "none",
                ...floatingStyle.current,
                ...props2 == null ? void 0 : props2.style
              },
              onPointerEnter() {
                setControlledScrolling(false);
                state.current.isMouseOutside = false;
              },
              onPointerLeave() {
                state.current.isMouseOutside = true;
              },
              onPointerMove() {
                state.current.isMouseOutside = false;
                setControlledScrolling(false);
              },
              onKeyDown() {
                setControlledScrolling(true);
              },
              onContextMenu(e) {
                e.preventDefault();
              },
              onScroll(event) {
                (0, import_react_dom4.flushSync)(() => setScrollTop(event.currentTarget.scrollTop));
              }
            });
          }
        };
      }, [floating, y, x, interactions]);
      (0, import_core37.useIsomorphicLayoutEffect)(() => {
        if (open) {
          selectTimeoutRef.current = setTimeout(() => {
            allowSelectRef.current = true;
          }, 300);
          return () => {
            clearTimeout(selectTimeoutRef.current);
          };
        } else {
          allowSelectRef.current = false;
          allowMouseUpRef.current = true;
          setInnerOffset(0);
          setFallback(false);
          setBlockSelection(false);
        }
      }, [open]);
      (0, import_core37.useIsomorphicLayoutEffect)(() => {
        function onPointerDown(e) {
          var _a, _b, _c;
          const target = e.target;
          if (!(((_a = refs.floating.current) == null ? void 0 : _a.contains(target)) || ((_b = upArrowRef.current) == null ? void 0 : _b.contains(target)) || ((_c = downArrowRef.current) == null ? void 0 : _c.contains(target)))) {
            setOpen(false);
            setControlledScrolling(false);
          }
        }
        __name(onPointerDown, "onPointerDown");
        if (open) {
          document.addEventListener("pointerdown", onPointerDown);
          return () => {
            document.removeEventListener("pointerdown", onPointerDown);
          };
        }
      }, [open, refs, setOpen]);
      (0, import_core37.useIsomorphicLayoutEffect)(() => {
        var _a, _b;
        if (open && controlledScrolling) {
          if (activeIndex != null) {
            (_a = listItemsRef.current[activeIndex]) == null ? void 0 : _a.scrollIntoView({ block: "nearest" });
          }
        }
        setScrollTop(((_b = refs.floating.current) == null ? void 0 : _b.scrollTop) ?? 0);
      }, [open, refs, controlledScrolling, activeIndex]);
      (0, import_core37.useIsomorphicLayoutEffect)(() => {
        var _a;
        if (open && fallback) {
          if (selectedIndex != null) {
            (_a = listItemsRef.current[selectedIndex]) == null ? void 0 : _a.scrollIntoView({ block: "nearest" });
          }
        }
      }, [open, fallback, selectedIndex]);
      (0, import_core37.useIsomorphicLayoutEffect)(() => {
        if (refs.floating.current && fallback) {
          refs.floating.current.style.maxHeight = "";
        }
      }, [refs, fallback]);
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        import_context.SelectProvider,
        {
          scope: __scopeSelect,
          ...selectContext,
          setScrollTop,
          setInnerOffset,
          floatingRef,
          setValueAtIndex: (index3, value) => {
            listContentRef.current[index3] = value;
          },
          fallback,
          interactions: interactionsContext,
          floatingContext: context,
          activeIndex,
          canScrollDown: !!showDownArrow,
          canScrollUp: !!showUpArrow,
          controlledScrolling,
          dataRef: context.dataRef,
          listRef: listItemsRef,
          blockSelection,
          allowMouseUpRef,
          upArrowRef,
          downArrowRef,
          selectTimeoutRef,
          allowSelectRef,
          children
        }
      );
    }, "SelectInlineImpl");
    var userAgent = typeof navigator !== "undefined" && navigator.userAgent || "";
  }
});

// node_modules/@tamagui/select/dist/cjs/SelectScrollButton.js
var require_SelectScrollButton = __commonJS({
  "node_modules/@tamagui/select/dist/cjs/SelectScrollButton.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var SelectScrollButton_exports = {};
    __export2(SelectScrollButton_exports, {
      SelectScrollDownButton: () => SelectScrollDownButton,
      SelectScrollUpButton: () => SelectScrollUpButton
    });
    module2.exports = __toCommonJS2(SelectScrollButton_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_react30 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var import_compose_refs3 = require_cjs2();
    var import_core37 = require("@tamagui/core-node");
    var import_stacks8 = require_cjs12();
    var React17 = __toESM2(require("react"));
    var import_react_dom4 = require("react-dom");
    var import_context = require_context();
    var SCROLL_UP_BUTTON_NAME = "SelectScrollUpButton";
    var SelectScrollUpButton = React17.forwardRef((props, forwardedRef) => {
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        SelectScrollButtonImpl,
        {
          componentName: SCROLL_UP_BUTTON_NAME,
          ...props,
          dir: "up",
          ref: forwardedRef
        }
      );
    });
    SelectScrollUpButton.displayName = SCROLL_UP_BUTTON_NAME;
    var SCROLL_DOWN_BUTTON_NAME = "SelectScrollDownButton";
    var SelectScrollDownButton = React17.forwardRef((props, forwardedRef) => {
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        SelectScrollButtonImpl,
        {
          componentName: SCROLL_DOWN_BUTTON_NAME,
          ...props,
          dir: "down",
          ref: forwardedRef
        }
      );
    });
    SelectScrollDownButton.displayName = SCROLL_DOWN_BUTTON_NAME;
    var SelectScrollButtonImpl = React17.memo(
      React17.forwardRef(
        (props, forwardedRef) => {
          var _a;
          const { __scopeSelect, dir, componentName, ...scrollIndicatorProps } = props;
          const {
            floatingRef,
            forceUpdate,
            open,
            fallback,
            setScrollTop,
            setInnerOffset,
            ...context
          } = (0, import_context.useSelectContext)(componentName, __scopeSelect);
          const [element, setElement] = React17.useState(null);
          const statusRef = React17.useRef("idle");
          const isVisible = context[dir === "down" ? "canScrollDown" : "canScrollUp"];
          const frameRef = React17.useRef();
          const { x, y, reference, floating, strategy, update, refs } = (0, import_react30.useFloating)({
            open: open && isVisible,
            strategy: "fixed",
            placement: dir === "up" ? "top" : "bottom",
            middleware: [(0, import_react30.offset)(({ rects }) => -rects.floating.height)],
            whileElementsMounted: (...args) => (0, import_react30.autoUpdate)(...args, { animationFrame: true })
          });
          const composedRef = (0, import_compose_refs3.useComposedRefs)(forwardedRef, floating);
          if (floatingRef) {
            if (open) {
              if (element !== floatingRef.current) {
                setElement(floatingRef.current);
                reference(floatingRef.current);
                requestAnimationFrame(update);
              }
            } else {
              cancelAnimationFrame(frameRef.current);
            }
          }
          (0, import_core37.useIsomorphicLayoutEffect)(() => {
            return () => {
              cancelAnimationFrame(frameRef.current);
            };
          }, []);
          if (!(isVisible && floatingRef)) {
            return null;
          }
          const onScroll = /* @__PURE__ */ __name((amount) => {
            console.log("on scroll?");
            if (fallback) {
              if (refs.floating.current) {
                refs.floating.current.scrollTop -= amount;
                (0, import_react_dom4.flushSync)(() => {
                  var _a2;
                  return setScrollTop(((_a2 = refs.floating.current) == null ? void 0 : _a2.scrollTop) ?? 0);
                });
              }
            } else {
              (0, import_react_dom4.flushSync)(() => setInnerOffset((value) => value - amount));
            }
          }, "onScroll");
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            import_stacks8.YStack,
            {
              ref: composedRef,
              componentName,
              "aria-hidden": true,
              ...scrollIndicatorProps,
              zIndex: 1e3,
              position: strategy,
              left: x || 0,
              top: y || 0,
              width: `calc(${(((_a = floatingRef == null ? void 0 : floatingRef.current) == null ? void 0 : _a.offsetWidth) ?? 0) - 2}px)`,
              onPointerEnter: () => {
                statusRef.current = "active";
                let prevNow = Date.now();
                function frame() {
                  if (element) {
                    const currentNow = Date.now();
                    const msElapsed = currentNow - prevNow;
                    prevNow = currentNow;
                    const pixelsToScroll = msElapsed / 2;
                    const remainingPixels = dir === "up" ? element.scrollTop : element.scrollHeight - element.clientHeight - element.scrollTop;
                    const scrollRemaining = dir === "up" ? element.scrollTop - pixelsToScroll > 0 : element.scrollTop + pixelsToScroll < element.scrollHeight - element.clientHeight;
                    onScroll(
                      dir === "up" ? Math.min(pixelsToScroll, remainingPixels) : Math.max(-pixelsToScroll, -remainingPixels)
                    );
                    if (scrollRemaining) {
                      frameRef.current = requestAnimationFrame(frame);
                    }
                  }
                }
                __name(frame, "frame");
                cancelAnimationFrame(frameRef.current);
                frameRef.current = requestAnimationFrame(frame);
              },
              onPointerLeave: () => {
                statusRef.current = "idle";
                cancelAnimationFrame(frameRef.current);
              }
            }
          );
        }
      )
    );
  }
});

// node_modules/@tamagui/select/dist/cjs/SelectViewport.js
var require_SelectViewport = __commonJS({
  "node_modules/@tamagui/select/dist/cjs/SelectViewport.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var SelectViewport_exports = {};
    __export2(SelectViewport_exports, {
      SelectViewport: () => SelectViewport,
      SelectViewportFrame: () => SelectViewportFrame
    });
    module2.exports = __toCommonJS2(SelectViewport_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_react30 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var import_core37 = require("@tamagui/core-node");
    var import_core210 = require("@tamagui/core-node");
    var import_portal3 = require_cjs13();
    var import_stacks8 = require_cjs12();
    var React17 = __toESM2(require("react"));
    var import_constants = require_constants3();
    var import_context = require_context();
    var import_useSelectBreakpointActive = require_useSelectBreakpointActive();
    var SelectViewportFrame = (0, import_core210.styled)(import_stacks8.ThemeableStack, {
      name: import_constants.VIEWPORT_NAME,
      backgroundColor: "$background",
      elevate: true,
      bordered: true,
      userSelect: "none",
      outlineWidth: 0,
      variants: {
        size: {
          "...size": (val2, { tokens: tokens2 }) => {
            return {
              borderRadius: tokens2.radius[val2] ?? val2
            };
          }
        }
      },
      defaultVariants: {
        size: "$2"
      }
    });
    var SelectViewport = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopeSelect, children, disableScroll, ...viewportProps } = props;
        const context = (0, import_context.useSelectContext)(import_constants.VIEWPORT_NAME, __scopeSelect);
        const breakpointActive = (0, import_useSelectBreakpointActive.useSelectBreakpointActive)(context.sheetBreakpoint);
        if (breakpointActive || !import_core37.isWeb) {
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_portal3.PortalItem, { hostName: `${context.scopeKey}SheetContents`, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_context.ForwardSelectContext, { context, children }) });
        }
        if (!context.floatingContext) {
          return null;
        }
        if (!context.open) {
          return children;
        }
        const {
          style: { scrollbarWidth, listStyleType, overflow, ...restStyle },
          ...floatingProps
        } = context.interactions.getFloatingProps();
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [
          !disableScroll && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            "style",
            {
              dangerouslySetInnerHTML: {
                __html: selectViewportCSS
              }
            }
          ),
          /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_react30.FloatingFocusManager, { context: context.floatingContext, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            SelectViewportFrame,
            {
              size: context.size,
              role: "presentation",
              ...viewportProps,
              ref: forwardedRef,
              ...floatingProps,
              ...restStyle,
              overflow: disableScroll ? void 0 : overflow ?? "scroll",
              children
            }
          ) })
        ] });
      }
    );
    SelectViewport.displayName = import_constants.VIEWPORT_NAME;
    var selectViewportCSS = `
.is_SelectViewport {
  scrollbar-width: none;
  -webkit-overflow-scrolling: touch;
  overscroll-behavior: contain;
}

.is_SelectViewport::-webkit-scrollbar{
  display:none
}
`;
  }
});

// node_modules/@tamagui/select/dist/cjs/Select.js
var require_Select = __commonJS({
  "node_modules/@tamagui/select/dist/cjs/Select.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Select_exports = {};
    __export2(Select_exports, {
      Select: () => Select,
      SelectGroupFrame: () => SelectGroupFrame,
      SelectIcon: () => SelectIcon,
      SelectItem: () => SelectItem,
      SelectItemTextFrame: () => SelectItemTextFrame,
      SelectSeparator: () => SelectSeparator,
      SelectTrigger: () => SelectTrigger
    });
    module2.exports = __toCommonJS2(Select_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_adapt2 = require_cjs();
    var import_compose_refs3 = require_cjs2();
    var import_core37 = require("@tamagui/core-node");
    var import_list_item = require_cjs32();
    var import_portal3 = require_cjs13();
    var import_separator = require_cjs39();
    var import_sheet2 = require_cjs19();
    var import_stacks8 = require_cjs12();
    var import_text5 = require_cjs21();
    var import_use_controllable_state2 = require_cjs16();
    var React17 = __toESM2(require("react"));
    var import_constants = require_constants3();
    var import_context = require_context();
    var import_SelectContent = require_SelectContent();
    var import_SelectImpl = require_SelectImpl();
    var import_SelectScrollButton = require_SelectScrollButton();
    var import_SelectViewport = require_SelectViewport();
    var import_useSelectBreakpointActive = require_useSelectBreakpointActive();
    var TRIGGER_NAME3 = "SelectTrigger";
    var SelectTrigger = React17.forwardRef(
      (props, forwardedRef) => {
        const {
          __scopeSelect,
          disabled = false,
          // @ts-ignore
          "aria-labelledby": ariaLabelledby,
          ...triggerProps
        } = props;
        const context = (0, import_context.useSelectContext)(TRIGGER_NAME3, __scopeSelect);
        const labelledBy = ariaLabelledby;
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          import_list_item.ListItem,
          {
            componentName: TRIGGER_NAME3,
            backgrounded: true,
            radiused: true,
            hoverTheme: true,
            pressTheme: true,
            focusTheme: true,
            focusable: true,
            borderWidth: 1,
            size: context.size,
            "aria-expanded": context.open,
            "aria-autocomplete": "none",
            "aria-labelledby": labelledBy,
            dir: context.dir,
            disabled,
            "data-disabled": disabled ? "" : void 0,
            ...triggerProps,
            ref: forwardedRef,
            ...process.env.TAMAGUI_TARGET === "web" && context.interactions ? context.interactions.getReferenceProps() : {
              onPress() {
                context.setOpen(!context.open);
              }
            }
          }
        );
      }
    );
    SelectTrigger.displayName = TRIGGER_NAME3;
    var VALUE_NAME = "SelectValue";
    var SelectValueFrame = (0, import_core37.styled)(import_text5.Paragraph, {
      name: VALUE_NAME,
      userSelect: "none"
    });
    var SelectValue = SelectValueFrame.extractable(
      React17.forwardRef(
        ({
          __scopeSelect,
          children: childrenProp,
          placeholder
        }, forwardedRef) => {
          const context = (0, import_context.useSelectContext)(VALUE_NAME, __scopeSelect);
          const { onValueNodeHasChildrenChange } = context;
          const composedRefs = (0, import_compose_refs3.useComposedRefs)(forwardedRef, context.onValueNodeChange);
          const children = childrenProp ?? context.selectedItem;
          const hasChildren = !!children;
          const isEmptyValue = context.value == null || context.value === "";
          const selectValueChildren = isEmptyValue ? placeholder ?? children : children;
          (0, import_core37.useIsomorphicLayoutEffect)(() => {
            onValueNodeHasChildrenChange(hasChildren);
          }, [onValueNodeHasChildrenChange, hasChildren]);
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            SelectValueFrame,
            {
              size: context.size,
              ref: composedRefs,
              pointerEvents: "none",
              children: selectValueChildren
            }
          );
        }
      )
    );
    SelectValue.displayName = VALUE_NAME;
    var SelectIcon = (0, import_core37.styled)(import_stacks8.XStack, {
      name: "SelectIcon",
      // @ts-ignore
      "aria-hidden": true,
      children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_text5.Paragraph, { children: "\u25BC" })
    });
    var ITEM_NAME = "SelectItem";
    var [SelectItemContextProvider, useSelectItemContext] = (0, import_context.createSelectContext)(ITEM_NAME);
    var SelectItem = React17.forwardRef(
      (props, forwardedRef) => {
        const {
          __scopeSelect,
          value,
          disabled = false,
          textValue: textValueProp,
          index: index3,
          ...itemProps
        } = props;
        const context = (0, import_context.useSelectContext)(ITEM_NAME, __scopeSelect);
        const isSelected = context.value === value;
        const textId = (0, import_core37.useId)();
        const {
          selectedIndex,
          setSelectedIndex,
          listRef,
          open,
          setOpen,
          onChange: onChange2,
          setActiveIndex,
          allowMouseUpRef,
          allowSelectRef,
          setValueAtIndex,
          selectTimeoutRef,
          dataRef
        } = context;
        const composedRefs = (0, import_compose_refs3.useComposedRefs)(forwardedRef, (node) => {
          if (!import_core37.isWeb)
            return;
          if (node instanceof HTMLElement) {
            if (listRef) {
              listRef.current[index3] = node;
            }
          }
        });
        React17.useEffect(() => {
          setValueAtIndex(index3, value);
        }, [index3, setValueAtIndex, value]);
        function handleSelect() {
          setSelectedIndex(index3);
          onChange2(value);
          setOpen(false);
        }
        __name(handleSelect, "handleSelect");
        const selectItemProps = context.interactions ? context.interactions.getItemProps({
          onTouchStart() {
            allowSelectRef.current = true;
            allowMouseUpRef.current = false;
          },
          onKeyDown(event) {
            if (event.key === "Enter" || event.key === " " && !(dataRef == null ? void 0 : dataRef.current.typing)) {
              event.preventDefault();
              handleSelect();
            } else {
              allowSelectRef.current = true;
            }
          },
          onClick() {
            if (allowSelectRef.current) {
              setSelectedIndex(index3);
              setOpen(false);
            }
          },
          onMouseUp() {
            if (!allowMouseUpRef.current) {
              return;
            }
            if (allowSelectRef.current) {
              handleSelect();
            }
            clearTimeout(selectTimeoutRef.current);
            selectTimeoutRef.current = setTimeout(() => {
              allowSelectRef.current = true;
            });
          }
        }) : {
          onPress: handleSelect
        };
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          SelectItemContextProvider,
          {
            scope: __scopeSelect,
            value,
            textId: textId || "",
            isSelected,
            children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
              import_list_item.ListItem,
              {
                tag: "div",
                backgrounded: true,
                pressTheme: true,
                hoverTheme: true,
                cursor: "default",
                outlineWidth: 0,
                componentName: ITEM_NAME,
                ref: composedRefs,
                "aria-labelledby": textId,
                "aria-selected": isSelected,
                "data-state": isSelected ? "active" : "inactive",
                "aria-disabled": disabled || void 0,
                "data-disabled": disabled ? "" : void 0,
                tabIndex: disabled ? void 0 : -1,
                size: context.size,
                focusStyle: {
                  backgroundColor: "$backgroundHover"
                },
                ...itemProps,
                ...selectItemProps
              }
            )
          }
        );
      }
    );
    SelectItem.displayName = ITEM_NAME;
    var ITEM_TEXT_NAME = "SelectItemText";
    var SelectItemTextFrame = (0, import_core37.styled)(import_text5.SizableText, {
      name: ITEM_TEXT_NAME,
      userSelect: "none"
    });
    var SelectItemText = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopeSelect, className, ...itemTextProps } = props;
        const context = (0, import_context.useSelectContext)(ITEM_TEXT_NAME, __scopeSelect);
        const itemContext = useSelectItemContext(ITEM_TEXT_NAME, __scopeSelect);
        const ref = React17.useRef(null);
        const composedRefs = (0, import_compose_refs3.useComposedRefs)(forwardedRef, ref);
        const isSelected = Boolean(itemContext.isSelected && context.valueNode);
        const contents = React17.useMemo(
          () => /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            SelectItemTextFrame,
            {
              className,
              size: context.size,
              id: itemContext.textId,
              ...itemTextProps,
              ref: composedRefs
            }
          ),
          // eslint-disable-next-line react-hooks/exhaustive-deps
          [props, context.size, className, itemContext.textId]
        );
        (0, import_core37.useIsomorphicLayoutEffect)(() => {
          if (isSelected) {
            context.setSelectedItem(contents);
          }
        }, [isSelected, contents]);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_jsx_runtime12.Fragment, { children: contents });
      }
    );
    SelectItemText.displayName = ITEM_TEXT_NAME;
    var ITEM_INDICATOR_NAME = "SelectItemIndicator";
    var SelectItemIndicatorFrame = (0, import_core37.styled)(import_stacks8.XStack, {
      name: ITEM_TEXT_NAME
    });
    var SelectItemIndicator = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopeSelect, ...itemIndicatorProps } = props;
        const itemContext = useSelectItemContext(ITEM_INDICATOR_NAME, __scopeSelect);
        return itemContext.isSelected ? /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(SelectItemIndicatorFrame, { "aria-hidden": true, ...itemIndicatorProps, ref: forwardedRef }) : null;
      }
    );
    SelectItemIndicator.displayName = ITEM_INDICATOR_NAME;
    var GROUP_NAME = "SelectGroup";
    var [SelectGroupContextProvider, useSelectGroupContext] = (0, import_context.createSelectContext)(GROUP_NAME);
    var SelectGroupFrame = (0, import_core37.styled)(import_stacks8.YStack, {
      name: GROUP_NAME,
      width: "100%"
    });
    var SelectGroup = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopeSelect, ...groupProps } = props;
        const groupId = (0, import_core37.useId)();
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(SelectGroupContextProvider, { scope: __scopeSelect, id: groupId || "", children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          SelectGroupFrame,
          {
            role: "group",
            "aria-labelledby": groupId,
            ...groupProps,
            ref: forwardedRef
          }
        ) });
      }
    );
    SelectGroup.displayName = GROUP_NAME;
    var LABEL_NAME = "SelectLabel";
    var SelectLabel = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopeSelect, ...labelProps } = props;
        const context = (0, import_context.useSelectContext)(LABEL_NAME, __scopeSelect);
        const groupContext = useSelectGroupContext(LABEL_NAME, __scopeSelect);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          import_list_item.ListItem,
          {
            tag: "div",
            componentName: LABEL_NAME,
            fontWeight: "800",
            id: groupContext.id,
            size: context.size,
            ...labelProps,
            ref: forwardedRef
          }
        );
      }
    );
    SelectLabel.displayName = LABEL_NAME;
    var SelectSeparator = (0, import_core37.styled)(import_separator.Separator, {
      name: "SelectSeparator"
    });
    var SelectSheetController = /* @__PURE__ */ __name((props) => {
      const context = (0, import_context.useSelectContext)("SelectSheetController", props.__scopeSelect);
      const showSheet = (0, import_useSelectBreakpointActive.useShowSelectSheet)(context);
      const breakpointActive = (0, import_useSelectBreakpointActive.useSelectBreakpointActive)(context.sheetBreakpoint);
      const getShowSheet = (0, import_core37.useGet)(showSheet);
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        import_sheet2.SheetController,
        {
          onOpenChange: (val2) => {
            if (getShowSheet()) {
              props.onOpenChange(val2);
            }
          },
          open: context.open,
          hidden: breakpointActive === false,
          children: props.children
        }
      );
    }, "SelectSheetController");
    var SelectSheetImpl = /* @__PURE__ */ __name((props) => {
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_jsx_runtime12.Fragment, { children: props.children });
    }, "SelectSheetImpl");
    var Select = (0, import_core37.withStaticProperties)(
      (props) => {
        const {
          __scopeSelect,
          children,
          open: openProp,
          defaultOpen,
          onOpenChange,
          value: valueProp,
          defaultValue: defaultValue2,
          onValueChange,
          size: sizeProp = "$true",
          dir
        } = props;
        const id = (0, import_core37.useId)();
        const scopeKey = __scopeSelect ? Object.keys(__scopeSelect)[0] ?? id : id;
        const { when, AdaptProvider } = (0, import_adapt2.useAdaptParent)({
          Contents: React17.useCallback(
            () => /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_portal3.PortalHost, { name: `${scopeKey}SheetContents` }),
            [scopeKey]
          )
        });
        const sheetBreakpoint = when;
        const isSheet = (0, import_useSelectBreakpointActive.useSelectBreakpointActive)(sheetBreakpoint);
        const SelectImpl = isSheet || !import_core37.isWeb ? SelectSheetImpl : import_SelectImpl.SelectInlineImpl;
        const forceUpdate = React17.useReducer(() => ({}), {})[1];
        const [selectedItem, setSelectedItem] = React17.useState(null);
        const [open, setOpen] = (0, import_use_controllable_state2.useControllableState)({
          prop: openProp,
          defaultProp: defaultOpen || false,
          onChange: onOpenChange
        });
        const [value, setValue] = (0, import_use_controllable_state2.useControllableState)({
          prop: valueProp,
          defaultProp: defaultValue2 || "",
          onChange: onValueChange,
          transition: true
        });
        const [activeIndex, setActiveIndex] = React17.useState(0);
        const selectedIndexRef = React17.useRef(null);
        const activeIndexRef = React17.useRef(null);
        const listContentRef = React17.useRef([]);
        const [selectedIndex, setSelectedIndex] = React17.useState(0);
        const [valueNode, setValueNode] = React17.useState(null);
        const [valueNodeHasChildren, setValueNodeHasChildren] = React17.useState(false);
        (0, import_core37.useIsomorphicLayoutEffect)(() => {
          selectedIndexRef.current = selectedIndex;
          activeIndexRef.current = activeIndex;
        });
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(AdaptProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          import_context.SelectProvider,
          {
            dir,
            blockSelection: false,
            size: sizeProp,
            fallback: false,
            selectedItem,
            setSelectedItem,
            forceUpdate,
            valueNode,
            onValueNodeChange: setValueNode,
            onValueNodeHasChildrenChange: setValueNodeHasChildren,
            valueNodeHasChildren,
            scopeKey,
            sheetBreakpoint,
            scope: __scopeSelect,
            setValueAtIndex: (index3, value2) => {
              listContentRef.current[index3] = value2;
            },
            activeIndex,
            onChange: setValue,
            selectedIndex,
            setActiveIndex,
            setOpen,
            setSelectedIndex,
            value,
            open,
            children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(SelectSheetController, { onOpenChange: setOpen, __scopeSelect, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
              SelectImpl,
              {
                activeIndexRef,
                listContentRef,
                selectedIndexRef,
                ...props,
                open,
                value,
                children
              }
            ) })
          }
        ) });
      },
      {
        Adapt: import_adapt2.Adapt,
        Content: import_SelectContent.SelectContent,
        Group: SelectGroup,
        Icon: SelectIcon,
        Item: SelectItem,
        ItemIndicator: SelectItemIndicator,
        ItemText: SelectItemText,
        Label: SelectLabel,
        ScrollDownButton: import_SelectScrollButton.SelectScrollDownButton,
        ScrollUpButton: import_SelectScrollButton.SelectScrollUpButton,
        Trigger: SelectTrigger,
        Value: SelectValue,
        Viewport: import_SelectViewport.SelectViewport,
        Sheet: import_sheet2.ControlledSheet
      }
    );
    Select.displayName = import_constants.SELECT_NAME;
  }
});

// node_modules/@tamagui/select/dist/cjs/index.js
var require_cjs40 = __commonJS({
  "node_modules/@tamagui/select/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Select(), module2.exports);
    __reExport2(src_exports, require_context(), module2.exports);
  }
});

// node_modules/@tamagui/use-direction/dist/cjs/useDirection.js
var require_useDirection = __commonJS({
  "node_modules/@tamagui/use-direction/dist/cjs/useDirection.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var useDirection_exports = {};
    __export2(useDirection_exports, {
      DirectionProvider: () => DirectionProvider,
      Provider: () => Provider,
      useDirection: () => useDirection
    });
    module2.exports = __toCommonJS2(useDirection_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var React17 = __toESM2(require("react"));
    var DirectionContext = React17.createContext(void 0);
    var DirectionProvider = /* @__PURE__ */ __name((props) => {
      const { dir, children } = props;
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(DirectionContext.Provider, { value: dir, children });
    }, "DirectionProvider");
    function useDirection(localDir) {
      const globalDir = React17.useContext(DirectionContext);
      return localDir || globalDir || "ltr";
    }
    __name(useDirection, "useDirection");
    var Provider = DirectionProvider;
  }
});

// node_modules/@tamagui/use-direction/dist/cjs/index.js
var require_cjs41 = __commonJS({
  "node_modules/@tamagui/use-direction/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_useDirection(), module2.exports);
  }
});

// node_modules/@tamagui/slider/dist/cjs/constants.js
var require_constants4 = __commonJS({
  "node_modules/@tamagui/slider/dist/cjs/constants.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var constants_exports = {};
    __export2(constants_exports, {
      ARROW_KEYS: () => ARROW_KEYS,
      BACK_KEYS: () => BACK_KEYS,
      PAGE_KEYS: () => PAGE_KEYS,
      SLIDER_NAME: () => SLIDER_NAME,
      SliderOrientationProvider: () => SliderOrientationProvider,
      SliderProvider: () => SliderProvider,
      createSliderContext: () => createSliderContext,
      createSliderScope: () => createSliderScope,
      useSliderContext: () => useSliderContext,
      useSliderOrientationContext: () => useSliderOrientationContext
    });
    module2.exports = __toCommonJS2(constants_exports);
    var import_create_context5 = require_cjs3();
    var SLIDER_NAME = "Slider";
    var [createSliderContext, createSliderScope] = (0, import_create_context5.createContextScope)(SLIDER_NAME);
    var [SliderProvider, useSliderContext] = createSliderContext(SLIDER_NAME);
    var [SliderOrientationProvider, useSliderOrientationContext] = createSliderContext(SLIDER_NAME, {
      startEdge: "left",
      endEdge: "right",
      sizeProp: "width",
      size: 0,
      direction: 1
    });
    var PAGE_KEYS = ["PageUp", "PageDown"];
    var ARROW_KEYS = ["ArrowUp", "ArrowDown", "ArrowLeft", "ArrowRight"];
    var BACK_KEYS = {
      ltr: ["ArrowDown", "Home", "ArrowLeft", "PageDown"],
      rtl: ["ArrowDown", "Home", "ArrowRight", "PageDown"]
    };
  }
});

// node_modules/@tamagui/slider/dist/cjs/helpers.js
var require_helpers = __commonJS({
  "node_modules/@tamagui/slider/dist/cjs/helpers.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var helpers_exports = {};
    __export2(helpers_exports, {
      convertValueToPercentage: () => convertValueToPercentage,
      getClosestValueIndex: () => getClosestValueIndex,
      getDecimalCount: () => getDecimalCount,
      getLabel: () => getLabel,
      getNextSortedValues: () => getNextSortedValues,
      getThumbInBoundsOffset: () => getThumbInBoundsOffset,
      hasMinStepsBetweenValues: () => hasMinStepsBetweenValues,
      linearScale: () => linearScale,
      roundValue: () => roundValue
    });
    module2.exports = __toCommonJS2(helpers_exports);
    function getNextSortedValues(prevValues = [], nextValue, atIndex) {
      const nextValues = [...prevValues];
      nextValues[atIndex] = nextValue;
      return nextValues.sort((a, b) => a - b);
    }
    __name(getNextSortedValues, "getNextSortedValues");
    function convertValueToPercentage(value, min3, max3) {
      const maxSteps = max3 - min3;
      const percentPerStep = 100 / maxSteps;
      return percentPerStep * (value - min3);
    }
    __name(convertValueToPercentage, "convertValueToPercentage");
    function getLabel(index3, totalValues) {
      if (totalValues > 2) {
        return `Value ${index3 + 1} of ${totalValues}`;
      } else if (totalValues === 2) {
        return ["Minimum", "Maximum"][index3];
      } else {
        return void 0;
      }
    }
    __name(getLabel, "getLabel");
    function getClosestValueIndex(values, nextValue) {
      if (values.length === 1)
        return 0;
      const distances = values.map((value) => Math.abs(value - nextValue));
      const closestDistance = Math.min(...distances);
      return distances.indexOf(closestDistance);
    }
    __name(getClosestValueIndex, "getClosestValueIndex");
    function getThumbInBoundsOffset(width, left, direction) {
      const halfWidth = width / 2;
      const halfPercent = 50;
      const offset3 = linearScale([0, halfPercent], [0, halfWidth]);
      return (halfWidth - offset3(left) * direction) * direction;
    }
    __name(getThumbInBoundsOffset, "getThumbInBoundsOffset");
    function getStepsBetweenValues(values) {
      return values.slice(0, -1).map((value, index3) => values[index3 + 1] - value);
    }
    __name(getStepsBetweenValues, "getStepsBetweenValues");
    function hasMinStepsBetweenValues(values, minStepsBetweenValues) {
      if (minStepsBetweenValues > 0) {
        const stepsBetweenValues = getStepsBetweenValues(values);
        const actualMinStepsBetweenValues = Math.min(...stepsBetweenValues);
        return actualMinStepsBetweenValues >= minStepsBetweenValues;
      }
      return true;
    }
    __name(hasMinStepsBetweenValues, "hasMinStepsBetweenValues");
    function linearScale(input, output) {
      return (value) => {
        if (input[0] === input[1] || output[0] === output[1])
          return output[0];
        const ratio = (output[1] - output[0]) / (input[1] - input[0]);
        return output[0] + ratio * (value - input[0]);
      };
    }
    __name(linearScale, "linearScale");
    function getDecimalCount(value) {
      return (String(value).split(".")[1] || "").length;
    }
    __name(getDecimalCount, "getDecimalCount");
    function roundValue(value, decimalCount) {
      const rounder = Math.pow(10, decimalCount);
      return Math.round(value * rounder) / rounder;
    }
    __name(roundValue, "roundValue");
  }
});

// node_modules/@tamagui/slider/dist/cjs/SliderImpl.js
var require_SliderImpl = __commonJS({
  "node_modules/@tamagui/slider/dist/cjs/SliderImpl.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var SliderImpl_exports = {};
    __export2(SliderImpl_exports, {
      DirectionalYStack: () => DirectionalYStack2,
      SliderFrame: () => SliderFrame2,
      SliderImpl: () => SliderImpl
    });
    module2.exports = __toCommonJS2(SliderImpl_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_core37 = require("@tamagui/core-node");
    var import_get_size2 = require_cjs10();
    var import_stacks8 = require_cjs12();
    var React17 = __toESM2(require("react"));
    var import_constants = require_constants4();
    var DirectionalYStack2 = (0, import_core37.styled)(import_stacks8.YStack, {
      variants: {
        orientation: {
          horizontal: {},
          vertical: {}
        }
      }
    });
    var SliderFrame2 = (0, import_core37.styled)(DirectionalYStack2, {
      position: "relative",
      variants: {
        size: (val2, extras) => {
          const orientation = extras.props.orientation;
          const size4 = Math.round((0, import_core37.getVariableValue)((0, import_get_size2.getSize)(val2)) / 6);
          if (orientation === "horizontal") {
            return {
              height: size4,
              borderRadius: size4,
              justifyContent: "center"
            };
          }
          return {
            width: size4,
            borderRadius: size4,
            alignItems: "center"
          };
        }
      }
    });
    var SliderImpl = React17.forwardRef(
      (props, forwardedRef) => {
        const {
          __scopeSlider,
          onSlideStart,
          onSlideMove,
          onSlideEnd,
          onHomeKeyDown,
          onEndKeyDown,
          onStepKeyDown,
          ...sliderProps
        } = props;
        const context = (0, import_constants.useSliderContext)(import_constants.SLIDER_NAME, __scopeSlider);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          SliderFrame2,
          {
            size: "$4",
            ...sliderProps,
            "data-orientation": sliderProps.orientation,
            ref: forwardedRef,
            ...import_core37.isWeb && {
              onKeyDown: (event) => {
                if (event.key === "Home") {
                  onHomeKeyDown(event);
                  event.preventDefault();
                } else if (event.key === "End") {
                  onEndKeyDown(event);
                  event.preventDefault();
                } else if (import_constants.PAGE_KEYS.concat(import_constants.ARROW_KEYS).includes(event.key)) {
                  onStepKeyDown(event);
                  event.preventDefault();
                }
              }
            },
            onMoveShouldSetResponderCapture: () => true,
            onScrollShouldSetResponder: () => true,
            onScrollShouldSetResponderCapture: () => true,
            onMoveShouldSetResponder: () => true,
            onStartShouldSetResponder: () => true,
            onResponderTerminationRequest: () => {
              return false;
            },
            onResponderGrant: (0, import_core37.composeEventHandlers)(props.onResponderGrant, (event) => {
              const target = event.target;
              const isStartingOnThumb = context.thumbs.has(target);
              if (import_core37.isWeb && target instanceof HTMLElement) {
                if (context.thumbs.has(target)) {
                  target.focus();
                }
              }
              onSlideStart(event, isStartingOnThumb ? "thumb" : "track");
            }),
            onResponderMove: (0, import_core37.composeEventHandlers)(props.onResponderMove, (event) => {
              event.stopPropagation();
              onSlideMove(event);
            }),
            onResponderRelease: (0, import_core37.composeEventHandlers)(props.onResponderRelease, (event) => {
              onSlideEnd(event);
            })
          }
        );
      }
    );
  }
});

// node_modules/@tamagui/slider/dist/cjs/Slider.js
var require_Slider = __commonJS({
  "node_modules/@tamagui/slider/dist/cjs/Slider.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Slider_exports = {};
    __export2(Slider_exports, {
      Range: () => Range,
      Slider: () => Slider,
      SliderThumb: () => SliderThumb,
      SliderThumbFrame: () => SliderThumbFrame,
      SliderTrack: () => SliderTrack,
      SliderTrackActive: () => SliderTrackActive,
      SliderTrackActiveFrame: () => SliderTrackActiveFrame,
      SliderTrackFrame: () => SliderTrackFrame,
      Thumb: () => Thumb,
      Track: () => Track
    });
    module2.exports = __toCommonJS2(Slider_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_compose_refs3 = require_cjs2();
    var import_core37 = require("@tamagui/core-node");
    var import_get_size2 = require_cjs10();
    var import_helpers = require_cjs28();
    var import_stacks8 = require_cjs12();
    var import_use_controllable_state2 = require_cjs16();
    var import_use_direction = require_cjs41();
    var React17 = __toESM2(require("react"));
    var import_constants = require_constants4();
    var import_helpers2 = require_helpers();
    var import_SliderImpl = require_SliderImpl();
    var SliderHorizontal = React17.forwardRef(
      (props, forwardedRef) => {
        const { min: min3, max: max3, dir, onSlideStart, onSlideMove, onStepKeyDown, ...sliderProps } = props;
        const direction = (0, import_use_direction.useDirection)(dir);
        const isDirectionLTR = direction === "ltr";
        const sliderRef = React17.useRef(null);
        const [state, setState] = React17.useState(() => ({ size: 0, offset: 0 }));
        function getValueFromPointer(pointerPosition) {
          const input = [0, state.size];
          const output = isDirectionLTR ? [min3, max3] : [max3, min3];
          const value = (0, import_helpers2.linearScale)(input, output);
          return value(pointerPosition);
        }
        __name(getValueFromPointer, "getValueFromPointer");
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          import_constants.SliderOrientationProvider,
          {
            scope: props.__scopeSlider,
            startEdge: isDirectionLTR ? "left" : "right",
            endEdge: isDirectionLTR ? "right" : "left",
            direction: isDirectionLTR ? 1 : -1,
            sizeProp: "width",
            size: state.size,
            children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
              import_SliderImpl.SliderImpl,
              {
                ref: (0, import_compose_refs3.composeRefs)(forwardedRef, sliderRef),
                dir: direction,
                ...sliderProps,
                orientation: "horizontal",
                onLayout: () => {
                  var _a;
                  (_a = sliderRef.current) == null ? void 0 : _a.measure((_x, _y, width, _height, pageX, _pageY) => {
                    setState({
                      size: width,
                      offset: pageX
                    });
                  });
                },
                onSlideStart: (event, target) => {
                  const value = getValueFromPointer(event.nativeEvent.locationX);
                  if (value) {
                    onSlideStart == null ? void 0 : onSlideStart(value, target);
                  }
                },
                onSlideMove: (event) => {
                  const value = getValueFromPointer(event.nativeEvent.pageX - state.offset);
                  if (value) {
                    onSlideMove == null ? void 0 : onSlideMove(value);
                  }
                },
                onSlideEnd: () => {
                },
                onStepKeyDown: (event) => {
                  const isBackKey = import_constants.BACK_KEYS[direction].includes(event.key);
                  onStepKeyDown == null ? void 0 : onStepKeyDown({ event, direction: isBackKey ? -1 : 1 });
                }
              }
            )
          }
        );
      }
    );
    var SliderVertical = React17.forwardRef(
      (props, forwardedRef) => {
        const { min: min3, max: max3, onSlideStart, onSlideMove, onStepKeyDown, ...sliderProps } = props;
        const [state, setState] = React17.useState(() => ({ size: 0, offset: 0 }));
        const sliderRef = React17.useRef(null);
        function getValueFromPointer(pointerPosition) {
          const input = [0, state.size];
          const output = [max3, min3];
          const value = (0, import_helpers2.linearScale)(input, output);
          return value(pointerPosition);
        }
        __name(getValueFromPointer, "getValueFromPointer");
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          import_constants.SliderOrientationProvider,
          {
            scope: props.__scopeSlider,
            startEdge: "bottom",
            endEdge: "top",
            sizeProp: "height",
            size: state.size,
            direction: 1,
            children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
              import_SliderImpl.SliderImpl,
              {
                ref: (0, import_compose_refs3.composeRefs)(forwardedRef, sliderRef),
                ...sliderProps,
                orientation: "vertical",
                onLayout: ({ nativeEvent: { layout } }) => {
                  var _a;
                  (_a = sliderRef.current) == null ? void 0 : _a.measure((_x, _y, _width, height, _pageX, pageY) => {
                    setState({
                      size: height,
                      offset: pageY
                    });
                  });
                },
                onSlideStart: (event, target) => {
                  const value = getValueFromPointer(event.nativeEvent.locationY);
                  if (value) {
                    onSlideStart == null ? void 0 : onSlideStart(value, target);
                  }
                },
                onSlideMove: (event) => {
                  const value = getValueFromPointer(event.nativeEvent.pageY - state.offset);
                  if (value) {
                    onSlideMove == null ? void 0 : onSlideMove(value);
                  }
                },
                onSlideEnd: () => {
                },
                onStepKeyDown: (event) => {
                  const isBackKey = import_constants.BACK_KEYS.ltr.includes(event.key);
                  onStepKeyDown == null ? void 0 : onStepKeyDown({ event, direction: isBackKey ? -1 : 1 });
                }
              }
            )
          }
        );
      }
    );
    var TRACK_NAME = "SliderTrack";
    var SliderTrackFrame = (0, import_core37.styled)(import_SliderImpl.SliderFrame, {
      name: "SliderTrack",
      height: "100%",
      width: "100%",
      backgroundColor: "$background",
      position: "relative",
      borderRadius: 1e5,
      overflow: "hidden"
    });
    var SliderTrack = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopeSlider, ...trackProps } = props;
        const context = (0, import_constants.useSliderContext)(TRACK_NAME, __scopeSlider);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          SliderTrackFrame,
          {
            "data-disabled": context.disabled ? "" : void 0,
            "data-orientation": context.orientation,
            orientation: context.orientation,
            size: context.size,
            ...trackProps,
            ref: forwardedRef
          }
        );
      }
    );
    SliderTrack.displayName = TRACK_NAME;
    var RANGE_NAME = "SliderTrackActive";
    var SliderTrackActiveFrame = (0, import_core37.styled)(import_SliderImpl.SliderFrame, {
      name: "SliderTrackActive",
      backgroundColor: "$background",
      position: "absolute"
    });
    var SliderTrackActive = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopeSlider, ...rangeProps } = props;
        const context = (0, import_constants.useSliderContext)(RANGE_NAME, __scopeSlider);
        const orientation = (0, import_constants.useSliderOrientationContext)(RANGE_NAME, __scopeSlider);
        const ref = React17.useRef(null);
        const composedRefs = (0, import_compose_refs3.useComposedRefs)(forwardedRef, ref);
        const valuesCount = context.values.length;
        const percentages = context.values.map(
          (value) => (0, import_helpers2.convertValueToPercentage)(value, context.min, context.max)
        );
        const offsetStart = valuesCount > 1 ? Math.min(...percentages) : 0;
        const offsetEnd = 100 - Math.max(...percentages);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          SliderTrackActiveFrame,
          {
            orientation: context.orientation,
            "data-orientation": context.orientation,
            "data-disabled": context.disabled ? "" : void 0,
            size: context.size,
            ...rangeProps,
            ref: composedRefs,
            ...{
              [orientation.startEdge]: `${offsetStart}%`,
              [orientation.endEdge]: `${offsetEnd}%`
            },
            ...orientation.sizeProp === "width" ? {
              height: "100%"
            } : {
              left: 0,
              right: 0
            }
          }
        );
      }
    );
    SliderTrackActive.displayName = RANGE_NAME;
    var THUMB_NAME = "SliderThumb";
    var getThumbSize = /* @__PURE__ */ __name((val2) => {
      const size4 = typeof val2 === "number" ? val2 : (0, import_get_size2.getSize)(val2, -1);
      return {
        width: size4,
        height: size4,
        minWidth: size4,
        minHeight: size4
      };
    }, "getThumbSize");
    var SliderThumbFrame = (0, import_core37.styled)(import_stacks8.ThemeableStack, {
      name: "SliderThumb",
      position: "absolute",
      bordered: 2,
      borderWidth: 2,
      backgrounded: true,
      pressTheme: import_core37.isWeb,
      focusTheme: import_core37.isWeb,
      hoverTheme: import_core37.isWeb,
      variants: {
        size: {
          "...size": getThumbSize
        }
      }
    });
    var SliderThumb = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopeSlider, index: index3, size: sizeProp, ...thumbProps } = props;
        const context = (0, import_constants.useSliderContext)(THUMB_NAME, __scopeSlider);
        const orientation = (0, import_constants.useSliderOrientationContext)(THUMB_NAME, __scopeSlider);
        const [thumb, setThumb] = React17.useState(null);
        const composedRefs = (0, import_compose_refs3.useComposedRefs)(forwardedRef, (node) => setThumb(node));
        const value = context.values[index3];
        const percent = value === void 0 ? 0 : (0, import_helpers2.convertValueToPercentage)(value, context.min, context.max);
        const label = (0, import_helpers2.getLabel)(index3, context.values.length);
        const sizeIn = sizeProp ?? context.size ?? "$true";
        const [size4, setSize] = React17.useState(() => {
          const estimatedSize = (0, import_core37.getVariableValue)(getThumbSize(sizeIn).width);
          return estimatedSize;
        });
        const thumbInBoundsOffset = size4 ? (0, import_helpers2.getThumbInBoundsOffset)(size4, percent, orientation.direction) : 0;
        React17.useEffect(() => {
          if (thumb) {
            context.thumbs.add(thumb);
            return () => {
              context.thumbs.delete(thumb);
            };
          }
        }, [thumb, context.thumbs]);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          SliderThumbFrame,
          {
            ref: composedRefs,
            role: "slider",
            "aria-label": props["aria-label"] || label,
            "aria-valuemin": context.min,
            "aria-valuenow": value,
            "aria-valuemax": context.max,
            "aria-orientation": context.orientation,
            "data-orientation": context.orientation,
            "data-disabled": context.disabled ? "" : void 0,
            tabIndex: context.disabled ? void 0 : 0,
            animateOnly: ["transform", "left", "right", "top", "bottom"],
            ...thumbProps,
            ...context.orientation === "horizontal" ? {
              x: thumbInBoundsOffset - size4 / 2,
              y: -size4 / 2,
              top: "50%",
              ...size4 === 0 && {
                top: "auto",
                bottom: "auto"
              }
            } : {
              x: -size4 / 2,
              y: size4 / 2,
              left: "50%",
              ...size4 === 0 && {
                left: "auto",
                right: "auto"
              }
            },
            ...{
              [orientation.startEdge]: `${percent}%`
            },
            size: sizeIn,
            onLayout: (e) => {
              setSize(e.nativeEvent.layout[orientation.sizeProp]);
            },
            onFocus: (0, import_helpers.composeEventHandlers)(props.onFocus, () => {
              context.valueIndexToChangeRef.current = index3;
            })
          }
        );
      }
    );
    SliderThumb.displayName = THUMB_NAME;
    var Slider = (0, import_core37.withStaticProperties)(
      React17.forwardRef((props, forwardedRef) => {
        const {
          name,
          min: min3 = 0,
          max: max3 = 100,
          step = 1,
          orientation = "horizontal",
          disabled = false,
          minStepsBetweenThumbs = 0,
          defaultValue: defaultValue2 = [min3],
          value,
          onValueChange = /* @__PURE__ */ __name(() => {
          }, "onValueChange"),
          size: sizeProp,
          ...sliderProps
        } = props;
        const sliderRef = React17.useRef(null);
        const composedRefs = (0, import_compose_refs3.useComposedRefs)(sliderRef, forwardedRef);
        const thumbRefs = React17.useRef(/* @__PURE__ */ new Set());
        const valueIndexToChangeRef = React17.useRef(0);
        const isHorizontal = orientation === "horizontal";
        const [values = [], setValues] = (0, import_use_controllable_state2.useControllableState)({
          prop: value,
          defaultProp: defaultValue2,
          transition: true,
          onChange: (value2) => {
            var _a;
            if (import_core37.isWeb) {
              const thumbs = [...thumbRefs.current];
              (_a = thumbs[valueIndexToChangeRef.current]) == null ? void 0 : _a.focus();
            }
            onValueChange(value2);
          }
        });
        if (import_core37.isWeb) {
          React17.useEffect(() => {
            const node = sliderRef.current;
            if (!node)
              return;
            const preventDefault = /* @__PURE__ */ __name((e) => {
              e.preventDefault();
            }, "preventDefault");
            node.addEventListener("touchstart", preventDefault);
            return () => {
              node.removeEventListener("touchstart", preventDefault);
            };
          }, []);
        }
        function handleSlideMove(value2) {
          updateValues(value2, valueIndexToChangeRef.current);
        }
        __name(handleSlideMove, "handleSlideMove");
        function updateValues(value2, atIndex) {
          const decimalCount = (0, import_helpers2.getDecimalCount)(step);
          const snapToStep = (0, import_helpers2.roundValue)(
            Math.round((value2 - min3) / step) * step + min3,
            decimalCount
          );
          const nextValue = (0, import_helpers.clamp)(snapToStep, [min3, max3]);
          setValues((prevValues = []) => {
            const nextValues = (0, import_helpers2.getNextSortedValues)(prevValues, nextValue, atIndex);
            if ((0, import_helpers2.hasMinStepsBetweenValues)(nextValues, minStepsBetweenThumbs * step)) {
              valueIndexToChangeRef.current = nextValues.indexOf(nextValue);
              return String(nextValues) === String(prevValues) ? prevValues : nextValues;
            } else {
              return prevValues;
            }
          });
        }
        __name(updateValues, "updateValues");
        const SliderOriented = isHorizontal ? SliderHorizontal : SliderVertical;
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          import_constants.SliderProvider,
          {
            scope: props.__scopeSlider,
            disabled,
            min: min3,
            max: max3,
            valueIndexToChangeRef,
            thumbs: thumbRefs.current,
            values,
            orientation,
            size: sizeProp,
            children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
              SliderOriented,
              {
                "aria-disabled": disabled,
                "data-disabled": disabled ? "" : void 0,
                ...sliderProps,
                ref: composedRefs,
                min: min3,
                max: max3,
                onSlideStart: disabled ? void 0 : (value2, target) => {
                  if (target !== "thumb") {
                    const closestIndex = (0, import_helpers2.getClosestValueIndex)(values, value2);
                    updateValues(value2, closestIndex);
                  }
                },
                onSlideMove: disabled ? void 0 : handleSlideMove,
                onHomeKeyDown: () => !disabled && updateValues(min3, 0),
                onEndKeyDown: () => !disabled && updateValues(max3, values.length - 1),
                onStepKeyDown: ({ event, direction: stepDirection }) => {
                  if (!disabled) {
                    const isPageKey = import_constants.PAGE_KEYS.includes(event.key);
                    const isSkipKey = isPageKey || event.shiftKey && import_constants.ARROW_KEYS.includes(event.key);
                    const multiplier = isSkipKey ? 10 : 1;
                    const atIndex = valueIndexToChangeRef.current;
                    const value2 = values[atIndex];
                    const stepInDirection = step * multiplier * stepDirection;
                    updateValues(value2 + stepInDirection, atIndex);
                  }
                }
              }
            )
          }
        );
      }),
      {
        Track: SliderTrack,
        TrackActive: SliderTrackActive,
        Thumb: SliderThumb
      }
    );
    Slider.displayName = import_constants.SLIDER_NAME;
    var Track = SliderTrack;
    var Range = SliderTrackActive;
    var Thumb = SliderThumb;
  }
});

// node_modules/@tamagui/slider/dist/cjs/index.js
var require_cjs42 = __commonJS({
  "node_modules/@tamagui/slider/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    __export2(src_exports, {
      DirectionalYStack: () => import_SliderImpl.DirectionalYStack,
      SliderFrame: () => import_SliderImpl.SliderFrame
    });
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Slider(), module2.exports);
    var import_SliderImpl = require_SliderImpl();
  }
});

// node_modules/@tamagui/switch/dist/cjs/Switch.js
var require_Switch = __commonJS({
  "node_modules/@tamagui/switch/dist/cjs/Switch.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Switch_exports = {};
    __export2(Switch_exports, {
      Switch: () => Switch,
      SwitchFrame: () => SwitchFrame,
      SwitchThumb: () => SwitchThumb,
      SwitchThumbFrame: () => SwitchThumbFrame,
      createSwitchScope: () => createSwitchScope
    });
    module2.exports = __toCommonJS2(Switch_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_react_use_previous = require_dist5();
    var import_compose_refs3 = require_cjs2();
    var import_core37 = require("@tamagui/core-node");
    var import_create_context5 = require_cjs3();
    var import_focusable4 = require_cjs31();
    var import_get_size2 = require_cjs10();
    var import_label = require_cjs37();
    var import_stacks8 = require_cjs12();
    var import_use_controllable_state2 = require_cjs16();
    var React17 = __toESM2(require("react"));
    var SWITCH_NAME = "Switch";
    var getSwitchHeight = /* @__PURE__ */ __name((val2) => Math.round((0, import_core37.getVariableValue)((0, import_get_size2.getSize)(val2)) * 0.65), "getSwitchHeight");
    var getSwitchWidth = /* @__PURE__ */ __name((val2) => getSwitchHeight(val2) * 2, "getSwitchWidth");
    var scopeContexts = (0, import_create_context5.createContextScope)(SWITCH_NAME);
    var [createSwitchContext] = scopeContexts;
    var createSwitchScope = scopeContexts[1];
    var [SwitchProvider, useSwitchContext] = createSwitchContext(SWITCH_NAME);
    var THUMB_NAME = "SwitchThumb";
    var SwitchThumbFrame = (0, import_core37.styled)(import_stacks8.ThemeableStack, {
      name: "SwitchThumb",
      variants: {
        unstyled: {
          false: {
            size: "$true",
            backgroundColor: "$background",
            borderRadius: 1e3
          }
        },
        size: {
          "...size": (val2) => {
            const size4 = getSwitchHeight(val2);
            return {
              height: size4,
              width: size4
            };
          }
        }
      },
      defaultVariants: {
        unstyled: false
      }
    });
    var SwitchThumb = SwitchThumbFrame.extractable(
      React17.forwardRef(
        (props, forwardedRef) => {
          const { __scopeSwitch, size: sizeProp, ...thumbProps } = props;
          const {
            size: sizeContext,
            disabled,
            checked,
            unstyled
          } = useSwitchContext(THUMB_NAME, __scopeSwitch);
          const size4 = sizeProp ?? sizeContext;
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            SwitchThumbFrame,
            {
              size: size4,
              theme: checked ? "active" : null,
              "data-state": getState2(checked),
              "data-disabled": disabled ? "" : void 0,
              ...thumbProps,
              x: checked ? (0, import_core37.getVariableValue)(getSwitchWidth(size4)) - (0, import_core37.getVariableValue)(getSwitchHeight(size4)) : 0,
              ref: forwardedRef
            }
          );
        }
      )
    );
    SwitchThumb.displayName = THUMB_NAME;
    var SwitchFrame = (0, import_core37.styled)(import_stacks8.XStack, {
      name: SWITCH_NAME,
      tag: "button",
      variants: {
        unstyled: {
          false: {
            // size: '$true',
            // borderRadius: 1000,
            // borderWidth: 2,
            // borderColor: 'transparent',
            // backgroundColor: '$background',
            focusStyle: {
              borderColor: "$borderColorFocus"
            }
          }
        },
        size: {
          "...size": (val2) => {
            const height = getSwitchHeight(val2) + 4;
            const width = getSwitchWidth(val2) + 4;
            return {
              height,
              minHeight: height,
              width
            };
          }
        }
      },
      defaultVariants: {
        unstyled: false
      }
    });
    var Switch = (0, import_core37.withStaticProperties)(
      SwitchFrame.extractable(
        React17.forwardRef(
          (props, forwardedRef) => {
            const {
              __scopeSwitch,
              labeledBy: ariaLabelledby,
              name,
              checked: checkedProp,
              defaultChecked,
              required,
              disabled,
              value = "on",
              onCheckedChange,
              size: size4 = "$true",
              unstyled = false,
              ...switchProps
            } = props;
            const [button, setButton] = React17.useState(null);
            const composedRefs = (0, import_compose_refs3.useComposedRefs)(
              forwardedRef,
              (node) => setButton(node)
            );
            const labelId = (0, import_label.useLabelContext)(button);
            const labelledBy = ariaLabelledby || labelId;
            const hasConsumerStoppedPropagationRef = React17.useRef(false);
            const isFormControl = import_core37.isWeb ? button ? Boolean(button.closest("form")) : true : false;
            const [checked = false, setChecked] = (0, import_use_controllable_state2.useControllableState)({
              prop: checkedProp,
              defaultProp: defaultChecked || false,
              onChange: onCheckedChange,
              transition: true
            });
            if (!import_core37.isWeb) {
              React17.useEffect(() => {
                if (!props.id)
                  return;
                return (0, import_focusable4.registerFocusable)(props.id, {
                  focus: () => {
                    setChecked((x) => !x);
                  }
                });
              }, [props.id, setChecked]);
            }
            return /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(
              SwitchProvider,
              {
                scope: __scopeSwitch,
                checked,
                disabled,
                size: size4,
                unstyled,
                children: [
                  /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
                    SwitchFrame,
                    {
                      unstyled,
                      size: size4,
                      role: "switch",
                      "aria-checked": checked,
                      "aria-labelledby": labelledBy,
                      "aria-required": required,
                      "data-state": getState2(checked),
                      "data-disabled": disabled ? "" : void 0,
                      disabled,
                      theme: checked ? "active" : null,
                      themeShallow: true,
                      tabIndex: disabled ? void 0 : 0,
                      value,
                      ...switchProps,
                      ref: composedRefs,
                      onPress: (event) => {
                        var _a;
                        (_a = props.onPress) == null ? void 0 : _a.call(props, event);
                        setChecked((prevChecked) => !prevChecked);
                        if (import_core37.isWeb && isFormControl) {
                          hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
                          if (!hasConsumerStoppedPropagationRef.current)
                            event.stopPropagation();
                        }
                      }
                    }
                  ),
                  import_core37.isWeb && isFormControl && /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
                    BubbleInput,
                    {
                      control: button,
                      bubbles: !hasConsumerStoppedPropagationRef.current,
                      name,
                      value,
                      checked,
                      required,
                      disabled,
                      style: { transform: "translateX(-100%)" }
                    }
                  )
                ]
              }
            );
          }
        )
      ),
      {
        Thumb: SwitchThumb
      }
    );
    var BubbleInput = /* @__PURE__ */ __name((props) => {
      const { control, checked, bubbles = true, ...inputProps } = props;
      const ref = React17.useRef(null);
      const prevChecked = (0, import_react_use_previous.usePrevious)(checked);
      React17.useEffect(() => {
        const input = ref.current;
        const inputProto = window.HTMLInputElement.prototype;
        const descriptor = Object.getOwnPropertyDescriptor(
          inputProto,
          "checked"
        );
        const setChecked = descriptor.set;
        if (prevChecked !== checked && setChecked) {
          const event = new Event("click", { bubbles });
          setChecked.call(input, checked);
          input.dispatchEvent(event);
        }
      }, [prevChecked, checked, bubbles]);
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        "input",
        {
          type: "checkbox",
          "aria-hidden": true,
          defaultChecked: checked,
          ...inputProps,
          tabIndex: -1,
          ref,
          style: {
            ...props.style,
            // ...controlSize,
            position: "absolute",
            pointerEvents: "none",
            opacity: 0,
            margin: 0
          }
        }
      );
    }, "BubbleInput");
    function getState2(checked) {
      return checked ? "checked" : "unchecked";
    }
    __name(getState2, "getState");
  }
});

// node_modules/@tamagui/switch/dist/cjs/index.js
var require_cjs43 = __commonJS({
  "node_modules/@tamagui/switch/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Switch(), module2.exports);
  }
});

// node_modules/@tamagui/collection/dist/cjs/Collection.js
var require_Collection = __commonJS({
  "node_modules/@tamagui/collection/dist/cjs/Collection.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Collection_exports = {};
    __export2(Collection_exports, {
      createCollection: () => createCollection
    });
    module2.exports = __toCommonJS2(Collection_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_compose_refs3 = require_cjs2();
    var import_core37 = require("@tamagui/core-node");
    var import_create_context5 = require_cjs3();
    var import_react30 = __toESM2(require("react"));
    function createCollection(name) {
      const PROVIDER_NAME = name + "CollectionProvider";
      const [createCollectionContext, createCollectionScope] = (0, import_create_context5.createContextScope)(PROVIDER_NAME);
      const [CollectionProviderImpl, useCollectionContext] = createCollectionContext(PROVIDER_NAME, {
        collectionRef: { current: null },
        itemMap: /* @__PURE__ */ new Map()
      });
      const CollectionProvider = /* @__PURE__ */ __name((props) => {
        const { scope, children } = props;
        const ref = import_react30.default.useRef(null);
        const itemMap = import_react30.default.useRef(/* @__PURE__ */ new Map()).current;
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(CollectionProviderImpl, { scope, itemMap, collectionRef: ref, children });
      }, "CollectionProvider");
      CollectionProvider.displayName = PROVIDER_NAME;
      const COLLECTION_SLOT_NAME = name + "CollectionSlot";
      const CollectionSlot = import_react30.default.forwardRef(
        (props, forwardedRef) => {
          const { scope, children } = props;
          const context = useCollectionContext(COLLECTION_SLOT_NAME, scope);
          const composedRefs = (0, import_compose_refs3.useComposedRefs)(forwardedRef, context.collectionRef);
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_core37.Slot, { ref: composedRefs, children });
        }
      );
      CollectionSlot.displayName = COLLECTION_SLOT_NAME;
      const ITEM_SLOT_NAME = name + "CollectionItemSlot";
      const ITEM_DATA_ATTR = "data-collection-item";
      const CollectionItemSlot = import_react30.default.forwardRef(
        (props, forwardedRef) => {
          const { scope, children, ...itemData } = props;
          const ref = import_react30.default.useRef(null);
          const composedRefs = (0, import_compose_refs3.useComposedRefs)(forwardedRef, ref);
          const context = useCollectionContext(ITEM_SLOT_NAME, scope);
          import_react30.default.useEffect(() => {
            context.itemMap.set(ref, { ref, ...itemData });
            return () => void context.itemMap.delete(ref);
          });
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_core37.Slot, { ...{ [ITEM_DATA_ATTR]: "" }, ref: composedRefs, children });
        }
      );
      CollectionItemSlot.displayName = ITEM_SLOT_NAME;
      function useCollection(scope) {
        const context = useCollectionContext(name + "CollectionConsumer", scope);
        const getItems = import_react30.default.useCallback(() => {
          const collectionNode = context.collectionRef.current;
          if (!collectionNode)
            return [];
          const orderedNodes = Array.from(
            collectionNode.querySelectorAll(`[${ITEM_DATA_ATTR}]`)
          );
          const items = Array.from(context.itemMap.values());
          const orderedItems = items.sort(
            (a, b) => orderedNodes.indexOf(a.ref.current) - orderedNodes.indexOf(b.ref.current)
          );
          return orderedItems;
        }, [context.collectionRef, context.itemMap]);
        return getItems;
      }
      __name(useCollection, "useCollection");
      return [
        { Provider: CollectionProvider, Slot: CollectionSlot, ItemSlot: CollectionItemSlot },
        useCollection,
        createCollectionScope
      ];
    }
    __name(createCollection, "createCollection");
  }
});

// node_modules/@tamagui/collection/dist/cjs/index.js
var require_cjs44 = __commonJS({
  "node_modules/@tamagui/collection/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Collection(), module2.exports);
  }
});

// node_modules/@tamagui/roving-focus/dist/cjs/RovingFocusGroup.js
var require_RovingFocusGroup = __commonJS({
  "node_modules/@tamagui/roving-focus/dist/cjs/RovingFocusGroup.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var RovingFocusGroup_exports = {};
    __export2(RovingFocusGroup_exports, {
      RovingFocusGroup: () => RovingFocusGroup,
      createRovingFocusGroupScope: () => createRovingFocusGroupScope
    });
    module2.exports = __toCommonJS2(RovingFocusGroup_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_collection = require_cjs44();
    var import_compose_refs3 = require_cjs2();
    var import_core37 = require("@tamagui/core-node");
    var import_core210 = require("@tamagui/core-node");
    var import_create_context5 = require_cjs3();
    var import_use_controllable_state2 = require_cjs16();
    var import_use_direction = require_cjs41();
    var React17 = __toESM2(require("react"));
    var ENTRY_FOCUS = "rovingFocusGroup.onEntryFocus";
    var EVENT_OPTIONS = { bubbles: false, cancelable: true };
    var RovingFocusGroupImpl = React17.forwardRef((props, forwardedRef) => {
      const {
        __scopeRovingFocusGroup,
        orientation,
        loop = false,
        dir,
        currentTabStopId: currentTabStopIdProp,
        defaultCurrentTabStopId,
        onCurrentTabStopIdChange,
        onEntryFocus,
        ...groupProps
      } = props;
      const ref = React17.useRef(null);
      const composedRefs = (0, import_compose_refs3.useComposedRefs)(forwardedRef, ref);
      const direction = (0, import_use_direction.useDirection)(dir);
      const [currentTabStopId = null, setCurrentTabStopId] = (0, import_use_controllable_state2.useControllableState)({
        prop: currentTabStopIdProp,
        defaultProp: defaultCurrentTabStopId ?? null,
        onChange: onCurrentTabStopIdChange
      });
      const [isTabbingBackOut, setIsTabbingBackOut] = React17.useState(false);
      const handleEntryFocus = (0, import_core37.useEvent)(onEntryFocus);
      const getItems = useCollection(__scopeRovingFocusGroup);
      const isClickFocusRef = React17.useRef(false);
      const [focusableItemsCount, setFocusableItemsCount] = React17.useState(0);
      React17.useEffect(() => {
        const node = ref.current;
        if (node) {
          node.addEventListener(ENTRY_FOCUS, handleEntryFocus);
          return () => node.removeEventListener(ENTRY_FOCUS, handleEntryFocus);
        }
      }, [handleEntryFocus]);
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        RovingFocusProvider,
        {
          scope: __scopeRovingFocusGroup,
          orientation,
          dir: direction,
          loop,
          currentTabStopId,
          onItemFocus: React17.useCallback(
            (tabStopId) => setCurrentTabStopId(tabStopId),
            [setCurrentTabStopId]
          ),
          onItemShiftTab: React17.useCallback(() => setIsTabbingBackOut(true), []),
          onFocusableItemAdd: React17.useCallback(
            () => setFocusableItemsCount((prevCount) => prevCount + 1),
            []
          ),
          onFocusableItemRemove: React17.useCallback(
            () => setFocusableItemsCount((prevCount) => prevCount - 1),
            []
          ),
          children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            import_core37.Stack,
            {
              tabIndex: isTabbingBackOut || focusableItemsCount === 0 ? -1 : 0,
              "data-orientation": orientation,
              ...groupProps,
              ref: composedRefs,
              style: [{ outline: "none" }, props.style],
              onMouseDown: (0, import_core37.composeEventHandlers)(props.onMouseDown, () => {
                isClickFocusRef.current = true;
              }),
              onFocus: (0, import_core37.composeEventHandlers)(props.onFocus, (event) => {
                const isKeyboardFocus = !isClickFocusRef.current;
                if (event.target === event.currentTarget && isKeyboardFocus && !isTabbingBackOut) {
                  const entryFocusEvent = new CustomEvent(ENTRY_FOCUS, EVENT_OPTIONS);
                  event.currentTarget.dispatchEvent(entryFocusEvent);
                  if (!entryFocusEvent.defaultPrevented) {
                    const items = getItems().filter((item) => item.focusable);
                    const activeItem = items.find((item) => item.active);
                    const currentItem = items.find((item) => item.id === currentTabStopId);
                    const candidateItems = [activeItem, currentItem, ...items].filter(
                      Boolean
                    );
                    const candidateNodes = candidateItems.map((item) => item.ref.current);
                    focusFirst(candidateNodes);
                  }
                }
                isClickFocusRef.current = false;
              }),
              onBlur: (0, import_core37.composeEventHandlers)(props.onBlur, () => setIsTabbingBackOut(false))
            }
          )
        }
      );
    });
    var ITEM_NAME = "RovingFocusGroupItem";
    var RovingFocusGroupItem = React17.forwardRef((props, forwardedRef) => {
      const {
        __scopeRovingFocusGroup,
        focusable = true,
        active = false,
        tabStopId,
        ...itemProps
      } = props;
      const autoId = (0, import_core210.useId)();
      const id = tabStopId || autoId;
      const context = useRovingFocusContext(ITEM_NAME, __scopeRovingFocusGroup);
      const isCurrentTabStop = context.currentTabStopId === id;
      const getItems = useCollection(__scopeRovingFocusGroup);
      const { onFocusableItemAdd, onFocusableItemRemove } = context;
      React17.useEffect(() => {
        if (focusable) {
          onFocusableItemAdd();
          return () => onFocusableItemRemove();
        }
      }, [focusable, onFocusableItemAdd, onFocusableItemRemove]);
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        Collection.ItemSlot,
        {
          scope: __scopeRovingFocusGroup,
          id,
          focusable,
          active,
          children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            import_core37.Stack,
            {
              tabIndex: isCurrentTabStop ? 0 : -1,
              "data-orientation": context.orientation,
              ...itemProps,
              ref: forwardedRef,
              onMouseDown: (0, import_core37.composeEventHandlers)(props.onMouseDown, (event) => {
                if (!focusable)
                  event.preventDefault();
                else
                  context.onItemFocus(id);
              }),
              onFocus: (0, import_core37.composeEventHandlers)(props.onFocus, () => context.onItemFocus(id)),
              ...import_core37.isWeb && {
                onKeyDown: (0, import_core37.composeEventHandlers)(
                  props.onKeyDown,
                  (event) => {
                    if (event.key === "Tab" && event.shiftKey) {
                      context.onItemShiftTab();
                      return;
                    }
                    if (event.target !== event.currentTarget)
                      return;
                    const focusIntent = getFocusIntent(event, context.orientation, context.dir);
                    if (focusIntent !== void 0) {
                      event.preventDefault();
                      const items = getItems().filter((item) => item.focusable);
                      let candidateNodes = items.map((item) => item.ref.current);
                      if (focusIntent === "last")
                        candidateNodes.reverse();
                      else if (focusIntent === "prev" || focusIntent === "next") {
                        if (focusIntent === "prev")
                          candidateNodes.reverse();
                        const currentIndex = candidateNodes.indexOf(event.currentTarget);
                        candidateNodes = context.loop ? wrapArray(candidateNodes, currentIndex + 1) : candidateNodes.slice(currentIndex + 1);
                      }
                      setTimeout(() => focusFirst(candidateNodes));
                    }
                  }
                )
              }
            }
          )
        }
      );
    });
    RovingFocusGroupItem.displayName = ITEM_NAME;
    var GROUP_NAME = "RovingFocusGroup";
    var [Collection, useCollection, createCollectionScope] = (0, import_collection.createCollection)(GROUP_NAME);
    var [createRovingFocusGroupContext, createRovingFocusGroupScope] = (0, import_create_context5.createContextScope)(
      GROUP_NAME,
      [createCollectionScope]
    );
    var [RovingFocusProvider, useRovingFocusContext] = createRovingFocusGroupContext(GROUP_NAME);
    var RovingFocusGroup = (0, import_core37.withStaticProperties)(
      React17.forwardRef(
        (props, forwardedRef) => {
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Collection.Provider, { scope: props.__scopeRovingFocusGroup, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(Collection.Slot, { scope: props.__scopeRovingFocusGroup, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(RovingFocusGroupImpl, { ...props, ref: forwardedRef }) }) });
        }
      ),
      {
        Item: RovingFocusGroupItem
      }
    );
    RovingFocusGroup.displayName = GROUP_NAME;
    var MAP_KEY_TO_FOCUS_INTENT = {
      ArrowLeft: "prev",
      ArrowUp: "prev",
      ArrowRight: "next",
      ArrowDown: "next",
      PageUp: "first",
      Home: "first",
      PageDown: "last",
      End: "last"
    };
    function getDirectionAwareKey(key, dir) {
      if (dir !== "rtl")
        return key;
      return key === "ArrowLeft" ? "ArrowRight" : key === "ArrowRight" ? "ArrowLeft" : key;
    }
    __name(getDirectionAwareKey, "getDirectionAwareKey");
    function getFocusIntent(event, orientation, dir) {
      const key = getDirectionAwareKey(event.key, dir);
      if (orientation === "vertical" && ["ArrowLeft", "ArrowRight"].includes(key))
        return void 0;
      if (orientation === "horizontal" && ["ArrowUp", "ArrowDown"].includes(key))
        return void 0;
      return MAP_KEY_TO_FOCUS_INTENT[key];
    }
    __name(getFocusIntent, "getFocusIntent");
    function focusFirst(candidates) {
      const PREVIOUSLY_FOCUSED_ELEMENT = document.activeElement;
      for (const candidate of candidates) {
        if (candidate === PREVIOUSLY_FOCUSED_ELEMENT)
          return;
        candidate.focus();
        if (document.activeElement !== PREVIOUSLY_FOCUSED_ELEMENT)
          return;
      }
    }
    __name(focusFirst, "focusFirst");
    function wrapArray(array, startIndex) {
      return array.map((_, index3) => array[(startIndex + index3) % array.length]);
    }
    __name(wrapArray, "wrapArray");
  }
});

// node_modules/@tamagui/roving-focus/dist/cjs/index.js
var require_cjs45 = __commonJS({
  "node_modules/@tamagui/roving-focus/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_RovingFocusGroup(), module2.exports);
  }
});

// node_modules/@tamagui/tabs/dist/cjs/Tabs.js
var require_Tabs = __commonJS({
  "node_modules/@tamagui/tabs/dist/cjs/Tabs.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Tabs_exports = {};
    __export2(Tabs_exports, {
      Tabs: () => Tabs
    });
    module2.exports = __toCommonJS2(Tabs_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_create_context5 = require_cjs3();
    var import_get_button_sized5 = require_cjs11();
    var import_group = require_cjs30();
    var import_roving_focus = require_cjs45();
    var import_stacks8 = require_cjs12();
    var import_use_controllable_state2 = require_cjs16();
    var import_use_direction = require_cjs41();
    var import_web8 = require("@tamagui/core-node");
    var React17 = __toESM2(require("react"));
    var TAB_LIST_NAME = "TabsList";
    var TabsListFrame = (0, import_web8.styled)(import_group.Group, {
      name: TAB_LIST_NAME,
      focusable: true
      // defaultVariants: {
      //   flexGrow: 0,
      // },
    });
    var TabsList = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopeTabs, loop = true, children, ...listProps } = props;
        const context = useTabsContext(TAB_LIST_NAME, __scopeTabs);
        const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          import_roving_focus.RovingFocusGroup,
          {
            asChild: true,
            orientation: context.orientation,
            dir: context.dir,
            loop,
            ...rovingFocusGroupScope,
            children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
              TabsListFrame,
              {
                role: "tablist",
                "aria-orientation": context.orientation,
                ref: forwardedRef,
                axis: context.orientation,
                ...listProps,
                children
              }
            )
          }
        );
      }
    );
    TabsList.displayName = TAB_LIST_NAME;
    var TRIGGER_NAME3 = "TabsTrigger";
    var TabsTriggerFrame = (0, import_web8.styled)(import_stacks8.ThemeableStack, {
      name: TRIGGER_NAME3,
      justifyContent: "center",
      alignItems: "center",
      flexWrap: "nowrap",
      flexDirection: "row",
      cursor: "pointer",
      variants: {
        size: {
          "...size": import_get_button_sized5.getButtonSized
        },
        disabled: {
          true: {
            pointerEvents: "none"
          }
        },
        theme: {
          Button: {
            focusable: true,
            hoverTheme: true,
            pressTheme: true,
            backgrounded: true,
            borderWidth: 1,
            borderColor: "transparent",
            pressStyle: {
              borderColor: "transparent"
            },
            hoverStyle: {
              borderColor: "transparent"
            },
            focusStyle: {
              borderColor: "$borderColorFocus"
            }
          }
        }
      }
    });
    var TabsTrigger = TabsTriggerFrame.extractable(
      React17.forwardRef(
        (props, forwardedRef) => {
          const {
            __scopeTabs,
            value,
            disabled = false,
            onInteraction,
            ...triggerProps
          } = props;
          const context = useTabsContext(TRIGGER_NAME3, __scopeTabs);
          const rovingFocusGroupScope = useRovingFocusGroupScope(__scopeTabs);
          const triggerId = makeTriggerId(context.baseId, value);
          const contentId = makeContentId(context.baseId, value);
          const isSelected = value === context.value;
          const [layout, setLayout] = React17.useState(null);
          const triggerRef = React17.useRef(null);
          const groupItemProps = (0, import_group.useGroupItem)({ disabled });
          React17.useEffect(() => {
            if (!triggerRef.current || !import_web8.isWeb)
              return;
            function getTriggerSize() {
              if (!triggerRef.current)
                return;
              setLayout({
                width: triggerRef.current.offsetWidth,
                height: triggerRef.current.offsetHeight,
                x: triggerRef.current.offsetLeft,
                y: triggerRef.current.offsetTop
              });
            }
            __name(getTriggerSize, "getTriggerSize");
            getTriggerSize();
            const observer = new ResizeObserver(getTriggerSize);
            observer.observe(triggerRef.current);
            return () => {
              if (!triggerRef.current)
                return;
              observer.unobserve(triggerRef.current);
            };
          }, []);
          React17.useEffect(() => {
            if (isSelected && layout) {
              onInteraction == null ? void 0 : onInteraction("select", layout);
            }
          }, [isSelected, value, layout]);
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_web8.Theme, { forceClassName: true, name: isSelected ? "active" : null, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            import_roving_focus.RovingFocusGroup.Item,
            {
              asChild: true,
              ...rovingFocusGroupScope,
              focusable: !disabled,
              active: isSelected,
              children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
                TabsTriggerFrame,
                {
                  onLayout: (event) => {
                    if (!import_web8.isWeb) {
                      setLayout(event.nativeEvent.layout);
                    }
                  },
                  onHoverIn: (0, import_web8.composeEventHandlers)(props.onHoverIn, () => {
                    if (layout) {
                      onInteraction == null ? void 0 : onInteraction("hover", layout);
                    }
                  }),
                  onHoverOut: (0, import_web8.composeEventHandlers)(props.onHoverOut, () => {
                    onInteraction == null ? void 0 : onInteraction("hover", null);
                  }),
                  role: "tab",
                  "aria-selected": isSelected,
                  "aria-controls": contentId,
                  "data-state": isSelected ? "active" : "inactive",
                  "data-disabled": disabled ? "" : void 0,
                  disabled,
                  id: triggerId,
                  size: context.size,
                  ...triggerProps,
                  ref: (0, import_web8.composeRefs)(forwardedRef, triggerRef),
                  onPress: (0, import_web8.composeEventHandlers)(props.onPress ?? void 0, (event) => {
                    const webChecks = !import_web8.isWeb || event.button === 0 && event.ctrlKey === false;
                    if (!disabled && !isSelected && webChecks) {
                      context.onChange(value);
                    } else {
                      event.preventDefault();
                    }
                  }),
                  ...import_web8.isWeb && {
                    type: "button",
                    onKeyDown: (0, import_web8.composeEventHandlers)(
                      props.onKeyDown,
                      (event) => {
                        if ([" ", "Enter"].includes(event.key)) {
                          context.onChange(value);
                        }
                      }
                    ),
                    onFocus: (0, import_web8.composeEventHandlers)(props.onFocus, (event) => {
                      if (layout) {
                        onInteraction == null ? void 0 : onInteraction("focus", layout);
                      }
                      const isAutomaticActivation = context.activationMode !== "manual";
                      if (!isSelected && !disabled && isAutomaticActivation) {
                        context.onChange(value);
                      }
                    }),
                    onBlur: (0, import_web8.composeEventHandlers)(props.onFocus, () => {
                      onInteraction == null ? void 0 : onInteraction("focus", null);
                    })
                  },
                  ...groupItemProps
                }
              )
            }
          ) });
        }
      )
    );
    TabsTrigger.displayName = TRIGGER_NAME3;
    var CONTENT_NAME2 = "TabsContent";
    var TabsContentFrame = (0, import_web8.styled)(import_stacks8.ThemeableStack, {
      name: CONTENT_NAME2
    });
    var TabsContent = React17.forwardRef(
      (props, forwardedRef) => {
        const { __scopeTabs, value, forceMount, children, ...contentProps } = props;
        const context = useTabsContext(CONTENT_NAME2, __scopeTabs);
        const isSelected = value === context.value;
        const show = forceMount || isSelected;
        const triggerId = makeTriggerId(context.baseId, value);
        const contentId = makeContentId(context.baseId, value);
        if (!show)
          return null;
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          TabsContentFrame,
          {
            "data-state": isSelected ? "active" : "inactive",
            "data-orientation": context.orientation,
            role: "tabpanel",
            "aria-labelledby": triggerId,
            hidden: !show,
            id: contentId,
            tabIndex: 0,
            ...contentProps,
            ref: forwardedRef,
            children
          },
          value
        );
      }
    );
    TabsContent.displayName = CONTENT_NAME2;
    var TABS_NAME = "Tabs";
    var [createTabsContext, createTabsScope] = (0, import_create_context5.createContextScope)(TABS_NAME, [
      import_roving_focus.createRovingFocusGroupScope
    ]);
    var useRovingFocusGroupScope = (0, import_roving_focus.createRovingFocusGroupScope)();
    var [TabsProvider, useTabsContext] = createTabsContext(TABS_NAME);
    var TabsFrame = (0, import_web8.styled)(import_stacks8.SizableStack, {
      name: TABS_NAME
    });
    var Tabs = (0, import_web8.withStaticProperties)(
      React17.forwardRef(
        (props, forwardedRef) => {
          const {
            __scopeTabs,
            value: valueProp,
            onValueChange,
            defaultValue: defaultValue2,
            orientation = "horizontal",
            dir,
            activationMode = "automatic",
            size: size4 = "$true",
            ...tabsProps
          } = props;
          const direction = (0, import_use_direction.useDirection)(dir);
          const [value, setValue] = (0, import_use_controllable_state2.useControllableState)({
            prop: valueProp,
            onChange: onValueChange,
            defaultProp: defaultValue2 ?? ""
          });
          return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
            TabsProvider,
            {
              scope: __scopeTabs,
              baseId: (0, import_web8.useId)(),
              value,
              onChange: setValue,
              orientation,
              dir: direction,
              activationMode,
              size: size4,
              children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
                TabsFrame,
                {
                  direction,
                  "data-orientation": orientation,
                  ...tabsProps,
                  ref: forwardedRef
                }
              )
            }
          );
        }
      ),
      {
        List: TabsList,
        Trigger: TabsTrigger,
        Content: TabsContent
      }
    );
    Tabs.displayName = TABS_NAME;
    function makeTriggerId(baseId, value) {
      return `${baseId}-trigger-${value}`;
    }
    __name(makeTriggerId, "makeTriggerId");
    function makeContentId(baseId, value) {
      return `${baseId}-content-${value}`;
    }
    __name(makeContentId, "makeContentId");
  }
});

// node_modules/@tamagui/tabs/dist/cjs/index.js
var require_cjs46 = __commonJS({
  "node_modules/@tamagui/tabs/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Tabs(), module2.exports);
  }
});

// node_modules/@tamagui/tooltip/dist/cjs/Tooltip.js
var require_Tooltip = __commonJS({
  "node_modules/@tamagui/tooltip/dist/cjs/Tooltip.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Tooltip_exports = {};
    __export2(Tooltip_exports, {
      Tooltip: () => Tooltip,
      TooltipGroup: () => TooltipGroup
    });
    module2.exports = __toCommonJS2(Tooltip_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_polyfill_dev = require_polyfill_dev();
    var import_react30 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var import_core37 = require("@tamagui/core-node");
    var import_floating = require_cjs33();
    var import_get_size2 = require_cjs10();
    var import_popover = require_cjs35();
    var import_popper = require_cjs34();
    var React17 = __toESM2(require("react"));
    var TooltipContent = React17.forwardRef(
      ({ __scopePopover, ...props }, ref) => {
        const popperScope = (0, import_popover.usePopoverScope)(__scopePopover);
        const popper = (0, import_popper.usePopperContext)("PopperContent", popperScope["__scopePopper"]);
        const padding = props.size || popper.size || (0, import_get_size2.stepTokenUpOrDown)("size", "$true", -2);
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          import_popover.PopoverContent,
          {
            componentName: "Tooltip",
            disableRemoveScroll: true,
            trapFocus: false,
            padding,
            pointerEvents: "none",
            ref,
            ...props
          }
        );
      }
    );
    var TooltipArrow = React17.forwardRef((props, ref) => {
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_popover.PopoverArrow, { componentName: "Tooltip", ref, ...props });
    });
    var TooltipGroup = /* @__PURE__ */ __name(({ children, delay }) => {
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_react30.FloatingDelayGroup, { delay: React17.useMemo(() => delay, [JSON.stringify(delay)]), children });
    }, "TooltipGroup");
    var Tooltip = (0, import_core37.withStaticProperties)(
      (props) => {
        const {
          __scopePopover,
          children,
          delay: delayProp,
          restMs = typeof delayProp === "undefined" ? 500 : typeof delayProp === "number" ? delayProp : 0,
          onOpenChange: onOpenChangeProp,
          focus,
          ...restProps
        } = props;
        const popperScope = (0, import_popover.usePopoverScope)(__scopePopover);
        const triggerRef = React17.useRef(null);
        const [hasCustomAnchor, setHasCustomAnchor] = React17.useState(false);
        const { delay: delayGroup, setCurrentId } = (0, import_react30.useDelayGroupContext)();
        const delay = delayProp ?? delayGroup;
        const [open, setOpen] = React17.useState(false);
        const id = props.groupId;
        const onOpenChange = (0, import_core37.useEvent)((open2) => {
          setOpen(open2);
          if (open2) {
            setCurrentId(id);
          }
          onOpenChangeProp == null ? void 0 : onOpenChangeProp(open2);
        });
        const useFloatingFn = /* @__PURE__ */ __name((props2) => {
          const floating = (0, import_react30.useFloating)({
            ...props2,
            open,
            onOpenChange
          });
          const { getReferenceProps, getFloatingProps } = (0, import_react30.useInteractions)([
            (0, import_react30.useHover)(floating.context, { delay, restMs }),
            (0, import_react30.useFocus)(floating.context, focus),
            (0, import_react30.useRole)(floating.context, { role: "tooltip" }),
            (0, import_react30.useDismiss)(floating.context),
            (0, import_react30.useDelayGroup)(floating.context, { id })
          ]);
          return {
            ...floating,
            getReferenceProps,
            getFloatingProps
          };
        }, "useFloatingFn");
        const useFloatingContext = React17.useCallback(useFloatingFn, [id, delay, open]);
        const onCustomAnchorAdd = React17.useCallback(() => setHasCustomAnchor(true), []);
        const onCustomAnchorRemove = React17.useCallback(() => setHasCustomAnchor(false), []);
        const contentId = (0, import_core37.useId)();
        const twoSmallerKey = (0, import_get_size2.stepTokenUpOrDown)("size", "$true", -2).key;
        const size4 = `$${twoSmallerKey}`;
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_floating.FloatingOverrideContext.Provider, { value: useFloatingContext, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_popper.Popper, { size: size4, ...popperScope, ...restProps, children: /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
          import_popover.__PopoverProviderInternal,
          {
            scope: __scopePopover,
            popperScope: popperScope.__scopePopper,
            contentId,
            triggerRef,
            sheetBreakpoint: false,
            scopeKey: "",
            open,
            onOpenChange: setOpen,
            onOpenToggle: voidFn,
            hasCustomAnchor,
            onCustomAnchorAdd,
            onCustomAnchorRemove,
            children
          }
        ) }) });
      },
      {
        Anchor: import_popover.PopoverAnchor,
        Arrow: TooltipArrow,
        Content: TooltipContent,
        Trigger: import_popover.PopoverTrigger
      }
    );
    Tooltip.displayName = "Tooltip";
    var voidFn = /* @__PURE__ */ __name(() => {
    }, "voidFn");
  }
});

// node_modules/@tamagui/tooltip/dist/cjs/TooltipSimple.js
var require_TooltipSimple = __commonJS({
  "node_modules/@tamagui/tooltip/dist/cjs/TooltipSimple.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var TooltipSimple_exports = {};
    __export2(TooltipSimple_exports, {
      TooltipSimple: () => TooltipSimple
    });
    module2.exports = __toCommonJS2(TooltipSimple_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_react30 = (init_floating_ui_react_esm(), __toCommonJS(floating_ui_react_esm_exports));
    var import_text5 = require_cjs21();
    var import_Tooltip = require_Tooltip();
    var TooltipSimple = /* @__PURE__ */ __name(({
      label,
      children,
      contentProps,
      ...tooltipProps
    }) => {
      let context;
      try {
        context = (0, import_react30.useDelayGroupContext)();
      } catch {
      }
      const contents = /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(import_Tooltip.Tooltip, { ...tooltipProps, children: [
        /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_Tooltip.Tooltip.Trigger, { asChild: true, children }),
        /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(
          import_Tooltip.Tooltip.Content,
          {
            zIndex: 1e6,
            enterStyle: { x: 0, y: -8, opacity: 0, scale: 0.93 },
            exitStyle: { x: 0, y: -8, opacity: 0, scale: 0.93 },
            x: 0,
            scale: 1,
            y: 0,
            elevation: "$1",
            opacity: 1,
            animation: [
              "quick",
              {
                opacity: {
                  overshootClamping: true
                }
              }
            ],
            ...contentProps,
            children: [
              /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_Tooltip.Tooltip.Arrow, {}),
              /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_text5.Paragraph, { size: "$2", lineHeight: "$0", children: label })
            ]
          }
        )
      ] });
      if (!context) {
        return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(import_Tooltip.TooltipGroup, { delay: defaultTooltipDelay, children: contents });
      }
      return contents;
    }, "TooltipSimple");
    var defaultTooltipDelay = { open: 3e3, close: 100 };
  }
});

// node_modules/@tamagui/tooltip/dist/cjs/index.js
var require_cjs47 = __commonJS({
  "node_modules/@tamagui/tooltip/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Tooltip(), module2.exports);
    __reExport2(src_exports, require_TooltipSimple(), module2.exports);
  }
});

// node_modules/@tamagui/use-debounce/dist/cjs/index.js
var require_cjs48 = __commonJS({
  "node_modules/@tamagui/use-debounce/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    __export2(src_exports, {
      debounce: () => debounce,
      useDebounce: () => useDebounce,
      useDebounceValue: () => useDebounceValue
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_react30 = require("react");
    function debounce(func, wait, leading) {
      let timeout;
      let isCancelled = false;
      function debounced() {
        isCancelled = false;
        const context = this;
        const args = arguments;
        if (leading && !timeout) {
          func.apply(context, args);
        }
        clearTimeout(timeout);
        timeout = setTimeout(function() {
          timeout = null;
          if (!(leading || isCancelled)) {
            func.apply(context, args);
          }
          isCancelled = false;
        }, wait);
      }
      __name(debounced, "debounced");
      debounced.cancel = () => {
        isCancelled = true;
      };
      return debounced;
    }
    __name(debounce, "debounce");
    var defaultOpts = { leading: false };
    function useDebounce(fn, wait, options = defaultOpts, mountArgs = []) {
      const dbEffect = (0, import_react30.useRef)(null);
      (0, import_react30.useEffect)(() => {
        return () => {
          var _a;
          (_a = dbEffect.current) == null ? void 0 : _a.cancel();
        };
      }, []);
      return (0, import_react30.useMemo)(() => {
        dbEffect.current = debounce(fn, wait, options.leading);
        return dbEffect.current;
      }, [options.leading, ...mountArgs]);
    }
    __name(useDebounce, "useDebounce");
    function useDebounceValue(val2, amt = 0) {
      const [state, setState] = (0, import_react30.useState)(val2);
      (0, import_react30.useEffect)(() => {
        const tm = setTimeout(() => {
          setState((prev) => {
            if (prev === val2)
              return prev;
            return val2;
          });
        }, amt);
        return () => {
          clearTimeout(tm);
        };
      }, [val2]);
      return state;
    }
    __name(useDebounceValue, "useDebounceValue");
  }
});

// node_modules/@tamagui/constants/dist/cjs/index.js
var require_cjs49 = __commonJS({
  "node_modules/@tamagui/constants/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    __export2(src_exports, {
      isChrome: () => isChrome2,
      isClient: () => isClient3,
      isRSC: () => isRSC3,
      isServer: () => isServer2,
      isTouchable: () => isTouchable2,
      isWeb: () => isWeb9,
      isWebTouchable: () => isWebTouchable2,
      isWindowDefined: () => isWindowDefined,
      useIsomorphicLayoutEffect: () => useIsomorphicLayoutEffect3
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_react30 = require("react");
    var import_meta2 = {};
    var isWeb9 = process.env.TAMAGUI_TARGET === "web";
    var isWindowDefined = typeof window !== "undefined";
    var isServer2 = isWeb9 && !isWindowDefined;
    var isClient3 = isWeb9 && isWindowDefined;
    var isRSC3 = process.env.ENABLE_RSC ? (
      // note this is statically analyzed so no funny business, just access it without optional chaining
      // @ts-ignore
      import_meta2.env ? (
        // @ts-ignore
        import_meta2.env.SSR
      ) : false
    ) : false;
    var idFn4 = /* @__PURE__ */ __name(() => {
    }, "idFn");
    var useIsomorphicLayoutEffect3 = isRSC3 ? idFn4 : isServer2 ? import_react30.useEffect : import_react30.useLayoutEffect;
    var isChrome2 = typeof navigator !== "undefined" && /Chrome/.test(navigator.userAgent || "");
    var isWebTouchable2 = isClient3 && ("ontouchstart" in window || navigator.maxTouchPoints > 0);
    var isTouchable2 = !isWeb9 || isWebTouchable2;
    if (process.env.NODE_ENV === "development") {
      if (!process.env.TAMAGUI_TARGET) {
        console.warn(`Must set TAMAGUI_TARGET to "web" or "native"`);
      } else if (isClient3 && process.env.TAMAGUI_TARGET !== "web" && process.env.TAMAGUI_IGNORE_TARGET !== "1") {
        console.warn(
          `Must set TAMAGUI_TARGET to "web" for web apps - if you have window defined outside of the browser, set TAMAGUI_IGNORE_TARGET=1 to hide this`
        );
      }
    }
  }
});

// node_modules/@tamagui/use-window-dimensions/dist/cjs/index.js
var require_cjs50 = __commonJS({
  "node_modules/@tamagui/use-window-dimensions/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    __export2(src_exports, {
      useWindowDimensions: () => useWindowDimensions
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_constants = require_cjs49();
    var import_react30 = require("react");
    var import_react_native28 = require("react-native-web-lite");
    var initialValue = {
      fontScale: 1,
      height: 800,
      width: 600,
      scale: 1
    };
    function useWindowDimensions() {
      const current = (0, import_react_native28.useWindowDimensions)();
      if (process.env.TAMAGUI_TARGET != "web")
        return current;
      const [state, setState] = (0, import_react30.useState)(initialValue);
      (0, import_constants.useIsomorphicLayoutEffect)(() => {
        setState(current);
      }, [current.height, current.width, current.fontScale, current.scale]);
      return state;
    }
    __name(useWindowDimensions, "useWindowDimensions");
  }
});

// node_modules/@tamagui/visually-hidden/dist/cjs/VisuallyHidden.js
var require_VisuallyHidden = __commonJS({
  "node_modules/@tamagui/visually-hidden/dist/cjs/VisuallyHidden.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var VisuallyHidden_exports = {};
    __export2(VisuallyHidden_exports, {
      VisuallyHidden: () => VisuallyHidden
    });
    module2.exports = __toCommonJS2(VisuallyHidden_exports);
    var import_web8 = require("@tamagui/core-node");
    var VisuallyHidden = (0, import_web8.styled)(import_web8.Stack, {
      position: "absolute",
      width: 1,
      height: 1,
      margin: -1,
      zIndex: -1e4,
      overflow: "hidden",
      opacity: 1e-8,
      pointerEvents: "none",
      variants: {
        preserveDimensions: {
          true: {
            position: "relative",
            width: "auto",
            height: "auto"
          }
        },
        visible: {
          true: {
            position: "relative",
            width: "auto",
            height: "auto",
            margin: 0,
            zIndex: 1,
            overflow: "visible",
            opacity: 1,
            pointerEvents: "auto"
          }
        }
      }
    });
    VisuallyHidden["isVisuallyHidden"] = true;
  }
});

// node_modules/@tamagui/visually-hidden/dist/cjs/index.js
var require_cjs51 = __commonJS({
  "node_modules/@tamagui/visually-hidden/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_VisuallyHidden(), module2.exports);
  }
});

// node_modules/@tamagui/checkbox/dist/cjs/Checkbox.js
var require_Checkbox = __commonJS({
  "node_modules/@tamagui/checkbox/dist/cjs/Checkbox.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var Checkbox_exports = {};
    __export2(Checkbox_exports, {
      BubbleInput: () => BubbleInput,
      Checkbox: () => Checkbox,
      CheckboxFrame: () => CheckboxFrame,
      createCheckboxScope: () => createCheckboxScope,
      getState: () => getState2,
      isIndeterminate: () => isIndeterminate
    });
    module2.exports = __toCommonJS2(Checkbox_exports);
    var import_jsx_runtime12 = require("react/jsx-runtime");
    var import_react_use_previous = require_dist5();
    var import_core37 = require("@tamagui/core-node");
    var import_create_context5 = require_cjs3();
    var import_focusable4 = require_cjs31();
    var import_font_size2 = require_cjs26();
    var import_get_size2 = require_cjs10();
    var import_helpers_tamagui2 = require_cjs29();
    var import_label = require_cjs37();
    var import_stacks8 = require_cjs12();
    var import_use_controllable_state2 = require_cjs16();
    var React17 = __toESM2(require("react"));
    function isIndeterminate(checked) {
      return checked === "indeterminate";
    }
    __name(isIndeterminate, "isIndeterminate");
    function getState2(checked) {
      return isIndeterminate(checked) ? "indeterminate" : checked ? "checked" : "unchecked";
    }
    __name(getState2, "getState");
    var BubbleInput = /* @__PURE__ */ __name((props) => {
      const { checked, bubbles = true, control, isHidden, ...inputProps } = props;
      const ref = React17.useRef(null);
      const prevChecked = (0, import_react_use_previous.usePrevious)(checked);
      React17.useEffect(() => {
        const input = ref.current;
        const inputProto = window.HTMLInputElement.prototype;
        const descriptor = Object.getOwnPropertyDescriptor(
          inputProto,
          "checked"
        );
        const setChecked = descriptor.set;
        if (prevChecked !== checked && setChecked) {
          const event = new Event("click", { bubbles });
          input.indeterminate = isIndeterminate(checked);
          setChecked.call(input, isIndeterminate(checked) ? false : checked);
          input.dispatchEvent(event);
        }
      }, [prevChecked, checked, bubbles]);
      return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
        "input",
        {
          type: "checkbox",
          defaultChecked: isIndeterminate(checked) ? false : checked,
          ...inputProps,
          tabIndex: -1,
          ref,
          "aria-hidden": isHidden,
          style: {
            ...isHidden ? {
              // ...controlSize,
              position: "absolute",
              pointerEvents: "none",
              opacity: 0,
              margin: 0
            } : {
              appearance: "auto",
              accentColor: "var(--color6)"
            },
            ...props.style
          }
        }
      );
    }, "BubbleInput");
    var INDICATOR_NAME = "CheckboxIndicator";
    var CheckboxIndicatorFrame = (0, import_core37.styled)(import_stacks8.ThemeableStack, {
      // use Checkbox for easier themes
      name: INDICATOR_NAME
    });
    var CheckboxIndicator = CheckboxIndicatorFrame.extractable(
      React17.forwardRef(
        (props, forwardedRef) => {
          const {
            __scopeCheckbox,
            children: childrenProp,
            forceMount,
            disablePassStyles,
            ...indicatorProps
          } = props;
          const context = useCheckboxContext(INDICATOR_NAME, __scopeCheckbox);
          const iconSize = (typeof context.size === "number" ? context.size * 0.65 : (0, import_font_size2.getFontSize)(context.size)) * context.scaleIcon;
          const theme = (0, import_core37.useTheme)();
          const getThemedIcon = (0, import_helpers_tamagui2.useGetThemedIcon)({ size: iconSize, color: theme.color });
          const childrens = React17.Children.toArray(childrenProp);
          const children = childrens.map((child) => {
            if (disablePassStyles || !React17.isValidElement(child)) {
              return child;
            }
            return getThemedIcon(child);
          });
          if (forceMount || isIndeterminate(context.state) || context.state === true)
            return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
              CheckboxIndicatorFrame,
              {
                "data-state": getState2(context.state),
                "data-disabled": context.disabled ? "" : void 0,
                pointerEvents: "none",
                ...indicatorProps,
                ref: forwardedRef,
                children
              }
            );
          return null;
        }
      )
    );
    CheckboxIndicator.displayName = INDICATOR_NAME;
    var CHECKBOX_NAME = "Checkbox";
    var CheckboxFrame = (0, import_core37.styled)(import_stacks8.ThemeableStack, {
      name: CHECKBOX_NAME,
      tag: "button",
      variants: {
        unstyled: {
          false: {
            size: "$true",
            backgroundColor: "$background",
            alignItems: "center",
            justifyContent: "center",
            pressTheme: true,
            focusable: true,
            borderWidth: 1,
            borderColor: "$borderColor",
            hoverStyle: {
              borderColor: "$borderColorHover"
            },
            focusStyle: {
              borderColor: "$borderColorFocus"
            }
          }
        },
        size: {
          "...size": (val2, { tokens: tokens2 }) => {
            const radiusToken = (0, import_core37.getVariableValue)((0, import_get_size2.getSize)(val2)) / 8;
            return {
              borderRadius: radiusToken
            };
          }
        }
      },
      defaultVariants: {
        unstyled: false
      }
    });
    var [createCheckboxContext, createCheckboxScope] = (0, import_create_context5.createContextScope)(CHECKBOX_NAME);
    var [CheckboxProvider, useCheckboxContext] = createCheckboxContext(CHECKBOX_NAME);
    var Checkbox = (0, import_core37.withStaticProperties)(
      CheckboxFrame.extractable(
        React17.forwardRef(
          (props, forwardedRef) => {
            const {
              __scopeCheckbox,
              labelledBy: ariaLabelledby,
              name,
              checked: checkedProp,
              defaultChecked,
              required,
              scaleIcon = 1,
              scaleSize = 0.45,
              sizeAdjust = 0,
              disabled,
              value = "on",
              onCheckedChange,
              native,
              ...checkboxProps
            } = props;
            const [button, setButton] = React17.useState(null);
            const composedRefs = (0, import_core37.useComposedRefs)(forwardedRef, (node) => setButton(node));
            const hasConsumerStoppedPropagationRef = React17.useRef(false);
            const propsActive = (0, import_core37.useMediaPropsActive)(props);
            const isFormControl = import_core37.isWeb ? button ? Boolean(button.closest("form")) : true : false;
            const [checked = false, setChecked] = (0, import_use_controllable_state2.useControllableState)({
              prop: checkedProp,
              defaultProp: defaultChecked,
              onChange: onCheckedChange
            });
            const adjustedSize = (0, import_core37.getVariableValue)(
              (0, import_get_size2.stepTokenUpOrDown)("size", propsActive.size, sizeAdjust)
            );
            const size4 = scaleSize ? Math.round(adjustedSize * scaleSize) : adjustedSize;
            const labelId = (0, import_label.useLabelContext)(button);
            const labelledBy = ariaLabelledby || labelId;
            if (process.env.TAMAGUI_TARGET === "native") {
              React17.useEffect(() => {
                if (!props.id)
                  return;
                return (0, import_focusable4.registerFocusable)(props.id, {
                  focusAndSelect: () => {
                    setChecked((x) => !x);
                  },
                  focus: () => {
                  }
                });
              }, [props.id, setChecked]);
            }
            return /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
              CheckboxProvider,
              {
                scope: __scopeCheckbox,
                state: checked,
                disabled,
                size: size4,
                scaleIcon,
                children: import_core37.isWeb && native ? /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
                  BubbleInput,
                  {
                    control: button,
                    bubbles: !hasConsumerStoppedPropagationRef.current,
                    name,
                    value,
                    checked,
                    required,
                    disabled,
                    id: props.id
                  }
                ) : /* @__PURE__ */ (0, import_jsx_runtime12.jsxs)(import_jsx_runtime12.Fragment, { children: [
                  /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
                    CheckboxFrame,
                    {
                      width: size4,
                      height: size4,
                      tag: "button",
                      role: "checkbox",
                      "aria-labelledby": labelledBy,
                      "aria-checked": isIndeterminate(checked) ? "mixed" : checked,
                      "aria-required": required,
                      "data-state": getState2(checked),
                      "data-disabled": disabled ? "" : void 0,
                      disabled,
                      ...checkboxProps,
                      ref: composedRefs,
                      ...import_core37.isWeb && {
                        type: "button",
                        value,
                        onKeyDown: (0, import_core37.composeEventHandlers)(
                          props.onKeyDown,
                          (event) => {
                            if (event.key === "Enter")
                              event.preventDefault();
                          }
                        )
                      },
                      onPress: (0, import_core37.composeEventHandlers)(props.onPress, (event) => {
                        setChecked(
                          (prevChecked) => isIndeterminate(prevChecked) ? true : !prevChecked
                        );
                        if (isFormControl) {
                          hasConsumerStoppedPropagationRef.current = event.isPropagationStopped();
                          if (!hasConsumerStoppedPropagationRef.current)
                            event.stopPropagation();
                        }
                      })
                    }
                  ),
                  import_core37.isWeb && isFormControl ? /* @__PURE__ */ (0, import_jsx_runtime12.jsx)(
                    BubbleInput,
                    {
                      isHidden: true,
                      control: button,
                      bubbles: !hasConsumerStoppedPropagationRef.current,
                      name,
                      value,
                      checked,
                      required,
                      disabled
                    }
                  ) : null
                ] })
              }
            );
          }
        )
      ),
      {
        Indicator: CheckboxIndicator
      }
    );
    Checkbox.displayName = CHECKBOX_NAME;
  }
});

// node_modules/@tamagui/checkbox/dist/cjs/index.js
var require_cjs52 = __commonJS({
  "node_modules/@tamagui/checkbox/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_Checkbox(), module2.exports);
  }
});

// node_modules/@tamagui/shorthands/dist/cjs/index.js
var require_cjs53 = __commonJS({
  "node_modules/@tamagui/shorthands/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    __export2(src_exports, {
      shorthands: () => shorthands2
    });
    module2.exports = __toCommonJS2(src_exports);
    var shorthands2 = {
      // web-only
      ussel: "userSelect",
      cur: "cursor",
      // tamagui
      pe: "pointerEvents",
      // text
      col: "color",
      ff: "fontFamily",
      fos: "fontSize",
      fost: "fontStyle",
      fow: "fontWeight",
      ls: "letterSpacing",
      lh: "lineHeight",
      ta: "textAlign",
      tt: "textTransform",
      ww: "wordWrap",
      // view
      ac: "alignContent",
      ai: "alignItems",
      als: "alignSelf",
      b: "bottom",
      bc: "backgroundColor",
      bg: "backgroundColor",
      bbc: "borderBottomColor",
      bblr: "borderBottomLeftRadius",
      bbrr: "borderBottomRightRadius",
      bbw: "borderBottomWidth",
      blc: "borderLeftColor",
      blw: "borderLeftWidth",
      boc: "borderColor",
      br: "borderRadius",
      bs: "borderStyle",
      brw: "borderRightWidth",
      brc: "borderRightColor",
      btc: "borderTopColor",
      btlr: "borderTopLeftRadius",
      btrr: "borderTopRightRadius",
      btw: "borderTopWidth",
      bw: "borderWidth",
      dsp: "display",
      f: "flex",
      fb: "flexBasis",
      fd: "flexDirection",
      fg: "flexGrow",
      fs: "flexShrink",
      fw: "flexWrap",
      h: "height",
      jc: "justifyContent",
      l: "left",
      m: "margin",
      mah: "maxHeight",
      maw: "maxWidth",
      mb: "marginBottom",
      mih: "minHeight",
      miw: "minWidth",
      ml: "marginLeft",
      mr: "marginRight",
      mt: "marginTop",
      mx: "marginHorizontal",
      my: "marginVertical",
      o: "opacity",
      ov: "overflow",
      p: "padding",
      pb: "paddingBottom",
      pl: "paddingLeft",
      pos: "position",
      pr: "paddingRight",
      pt: "paddingTop",
      px: "paddingHorizontal",
      py: "paddingVertical",
      r: "right",
      shac: "shadowColor",
      shar: "shadowRadius",
      shof: "shadowOffset",
      shop: "shadowOpacity",
      t: "top",
      w: "width",
      zi: "zIndex"
    };
    shorthands2["bls"] = "borderLeftStyle";
    shorthands2["brs"] = "borderRightStyle";
    shorthands2["bts"] = "borderTopStyle";
    shorthands2["bbs"] = "borderBottomStyle";
    shorthands2["bxs"] = "boxSizing";
    shorthands2["bxsh"] = "boxShadow";
    shorthands2["ox"] = "overflowX";
    shorthands2["oy"] = "overflowY";
  }
});

// node_modules/@tamagui/react-native-media-driver/dist/cjs/matchMedia.js
var require_matchMedia = __commonJS({
  "node_modules/@tamagui/react-native-media-driver/dist/cjs/matchMedia.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var matchMedia_exports = {};
    __export2(matchMedia_exports, {
      matchMedia: () => matchMedia2
    });
    module2.exports = __toCommonJS2(matchMedia_exports);
    var matchMedia2 = globalThis["matchMedia"];
  }
});

// node_modules/@tamagui/react-native-media-driver/dist/cjs/createMedia.js
var require_createMedia = __commonJS({
  "node_modules/@tamagui/react-native-media-driver/dist/cjs/createMedia.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var createMedia_exports = {};
    __export2(createMedia_exports, {
      createMedia: () => createMedia2
    });
    module2.exports = __toCommonJS2(createMedia_exports);
    var import_web8 = require("@tamagui/core-node");
    var import_matchMedia = require_matchMedia();
    function createMedia2(media2) {
      (0, import_web8.setupMatchMedia)(import_matchMedia.matchMedia);
      return media2;
    }
    __name(createMedia2, "createMedia");
  }
});

// node_modules/@tamagui/react-native-media-driver/dist/cjs/index.js
var require_cjs54 = __commonJS({
  "node_modules/@tamagui/react-native-media-driver/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    __reExport2(src_exports, require_createMedia(), module2.exports);
    __reExport2(src_exports, require_matchMedia(), module2.exports);
  }
});

// node_modules/@tamagui/animations-reanimated/dist/cjs/polyfill.js
var require_polyfill = __commonJS({
  "node_modules/@tamagui/animations-reanimated/dist/cjs/polyfill.js"() {
    "use strict";
    if (typeof requestAnimationFrame === "undefined") {
      globalThis["requestAnimationFrame"] = setImmediate;
    }
  }
});

// node_modules/react-native-reanimated/lib/ReanimatedModuleCompat.js
var __awaiter2, ReanimatedModuleCompat_default;
var init_ReanimatedModuleCompat = __esm({
  "node_modules/react-native-reanimated/lib/ReanimatedModuleCompat.js"() {
    __awaiter2 = function(thisArg, _arguments, P, generator) {
      function adopt(value) {
        return value instanceof P ? value : new P(function(resolve) {
          resolve(value);
        });
      }
      __name(adopt, "adopt");
      return new (P || (P = Promise))(function(resolve, reject) {
        function fulfilled(value) {
          try {
            step(generator.next(value));
          } catch (e) {
            reject(e);
          }
        }
        __name(fulfilled, "fulfilled");
        function rejected(value) {
          try {
            step(generator["throw"](value));
          } catch (e) {
            reject(e);
          }
        }
        __name(rejected, "rejected");
        function step(result) {
          result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        __name(step, "step");
        step((generator = generator.apply(thisArg, _arguments || [])).next());
      });
    };
    ReanimatedModuleCompat_default = {
      disconnectNodeFromView() {
        return __awaiter2(this, void 0, void 0, function* () {
        });
      },
      attachEvent(_viewTag, _eventName, _nodeID) {
        return __awaiter2(this, void 0, void 0, function* () {
        });
      },
      detachEvent(_viewTag, _eventName, _nodeID) {
        return __awaiter2(this, void 0, void 0, function* () {
        });
      },
      createNode(_nodeID, _config) {
        return __awaiter2(this, void 0, void 0, function* () {
        });
      },
      dropNode(_nodeID) {
        return __awaiter2(this, void 0, void 0, function* () {
        });
      },
      configureProps(_nativeProps, _uiProps) {
        return __awaiter2(this, void 0, void 0, function* () {
        });
      },
      disconnectNodes() {
        return __awaiter2(this, void 0, void 0, function* () {
        });
      },
      addListener() {
        return __awaiter2(this, void 0, void 0, function* () {
        });
      },
      removeListeners() {
        return __awaiter2(this, void 0, void 0, function* () {
        });
      },
      removeAllListeners() {
        return __awaiter2(this, void 0, void 0, function* () {
        });
      },
      animateNextTransition() {
        return __awaiter2(this, void 0, void 0, function* () {
          console.warn("Reanimated: animateNextTransition is unimplemented on current platform");
        });
      }
    };
  }
});

// node_modules/react-native-reanimated/lib/ReanimatedModule.js
var ReanimatedModule_default;
var init_ReanimatedModule = __esm({
  "node_modules/react-native-reanimated/lib/ReanimatedModule.js"() {
    init_ReanimatedModuleCompat();
    ReanimatedModule_default = ReanimatedModuleCompat_default;
  }
});

// node_modules/react-native-reanimated/lib/ReanimatedEventEmitter.js
var import_react_native5, ReanimatedEventEmitter_default;
var init_ReanimatedEventEmitter = __esm({
  "node_modules/react-native-reanimated/lib/ReanimatedEventEmitter.js"() {
    init_ReanimatedModule();
    import_react_native5 = require("react-native-web-lite");
    ReanimatedEventEmitter_default = new import_react_native5.NativeEventEmitter(ReanimatedModule_default);
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedNode.js
function getCallID() {
  return callID;
}
function setCallID(nextCallID) {
  callID = nextCallID;
}
function sanitizeConfig(config) {
  if (import_react_native6.Platform.OS === "web" || import_react_native6.Platform.OS === "windows" || import_react_native6.Platform.OS === "macos" || ["undefined", "string", "function", "boolean", "number"].includes(
    typeof config
  )) {
    return config;
  } else if (Array.isArray(config)) {
    return config.map(sanitizeConfig);
  } else if (config instanceof AnimatedNode) {
    return config.__nodeID;
  } else if (typeof config === "object") {
    const output = {};
    for (const property in config) {
      if (property in config) {
        output[property] = sanitizeConfig(config[property]);
      }
    }
    return output;
  }
  return config;
}
function runPropUpdates() {
  const visitedNodes = /* @__PURE__ */ new Set();
  const findAndUpdateNodes = /* @__PURE__ */ __name((node) => {
    if (!node) {
      console.warn("findAndUpdateNodes was passed a nullish node");
      return;
    }
    if (visitedNodes.has(node)) {
      return;
    } else {
      visitedNodes.add(node);
    }
    if (typeof node.update === "function") {
      node.update();
    } else {
      const nodes = node.__getChildren();
      if (nodes) {
        for (let i = 0, l = nodes.length; i < l; i++) {
          findAndUpdateNodes(nodes[i]);
        }
      }
    }
  }, "findAndUpdateNodes");
  for (let i = 0; i < UPDATED_NODES.length; i++) {
    const node = UPDATED_NODES[i];
    findAndUpdateNodes(node);
  }
  UPDATED_NODES.length = 0;
  propUpdatesEnqueued = null;
  loopID += 1;
}
var import_react_native6, UPDATED_NODES, loopID, propUpdatesEnqueued, nodeCount, callID, scheduleUpdates, AnimatedNode;
var init_AnimatedNode = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedNode.js"() {
    init_ReanimatedModule();
    import_react_native6 = require("react-native-web-lite");
    UPDATED_NODES = [];
    loopID = 1;
    propUpdatesEnqueued = null;
    nodeCount = 0;
    callID = "";
    __name(getCallID, "getCallID");
    __name(setCallID, "setCallID");
    __name(sanitizeConfig, "sanitizeConfig");
    __name(runPropUpdates, "runPropUpdates");
    scheduleUpdates = import_react_native6.Platform.OS === "web" ? requestAnimationFrame : setImmediate;
    AnimatedNode = class {
      __nodeID;
      __lastLoopID = { "": -1 };
      __memoizedValue = { "": null };
      __children = [];
      constructor(nodeConfig, inputNodes) {
        this.__nodeID = ++nodeCount;
        this.__nodeConfig = sanitizeConfig(nodeConfig);
        this.__initialized = false;
        this.__inputNodes = inputNodes && inputNodes.filter((node) => node instanceof AnimatedNode);
      }
      toString() {
        return `AnimatedNode, id: ${this.__nodeID}`;
      }
      __attach() {
        this.__nativeInitialize();
        const nodes = this.__inputNodes;
        if (nodes) {
          for (let i = 0, l = nodes.length; i < l; i++) {
            nodes[i].__addChild(this);
          }
        }
      }
      __detach() {
        const nodes = this.__inputNodes;
        if (nodes) {
          for (let i = 0, l = nodes.length; i < l; i++) {
            nodes[i].__removeChild(this);
          }
        }
        this.__nativeTearDown();
      }
      __getValue() {
        if (!(callID in this.__lastLoopID) || this.__lastLoopID[callID] < loopID) {
          this.__lastLoopID[callID] = loopID;
          const result = this.__onEvaluate();
          this.__memoizedValue[callID] = result;
          return result;
        }
        return this.__memoizedValue[callID];
      }
      __forceUpdateCache(newValue) {
        this.__memoizedValue[callID] = newValue;
        this.__markUpdated();
      }
      __dangerouslyRescheduleEvaluate() {
        this.__lastLoopID[callID] = -1;
        this.__markUpdated();
      }
      __markUpdated() {
        UPDATED_NODES.push(this);
        if (!propUpdatesEnqueued) {
          propUpdatesEnqueued = scheduleUpdates(runPropUpdates);
        }
      }
      __nativeInitialize() {
        if (!this.__initialized) {
          ReanimatedModule_default.createNode(this.__nodeID, { ...this.__nodeConfig });
          this.__initialized = true;
        }
      }
      __nativeTearDown() {
        if (this.__initialized) {
          ReanimatedModule_default.dropNode(this.__nodeID);
          this.__initialized = false;
        }
      }
      isNativelyInitialized() {
        return this.__initialized;
      }
      __onEvaluate() {
        throw new Error("Missing implementation of onEvaluate");
      }
      __getProps() {
        return this.__getValue();
      }
      __getChildren() {
        return this.__children;
      }
      __addChild(child) {
        if (this.__children.length === 0) {
          this.__attach();
        }
        this.__children.push(child);
        child.__nativeInitialize();
        if (ReanimatedModule_default.connectNodes) {
          ReanimatedModule_default.connectNodes(this.__nodeID, child.__nodeID);
        } else {
          child.__dangerouslyRescheduleEvaluate();
        }
      }
      __removeChild(child) {
        const index3 = this.__children.indexOf(child);
        if (index3 === -1) {
          console.warn("Trying to remove a child that doesn't exist");
          return;
        }
        if (ReanimatedModule_default.disconnectNodes) {
          ReanimatedModule_default.disconnectNodes(this.__nodeID, child.__nodeID);
        }
        this.__children.splice(index3, 1);
        if (this.__children.length === 0) {
          this.__detach();
        }
      }
      _connectAnimatedView(nativeViewTag) {
        if (ReanimatedModule_default.connectNodeToView) {
          ReanimatedModule_default.connectNodeToView(this.__nodeID, nativeViewTag);
        } else {
          this.__dangerouslyRescheduleEvaluate();
        }
      }
      _disconnectAnimatedView(nativeViewTag) {
        ReanimatedModule_default.disconnectNodeFromView(this.__nodeID, nativeViewTag);
      }
    };
    __name(AnimatedNode, "AnimatedNode");
  }
});

// node_modules/invariant/invariant.js
var require_invariant = __commonJS({
  "node_modules/invariant/invariant.js"(exports, module2) {
    "use strict";
    var NODE_ENV = process.env.NODE_ENV;
    var invariant20 = /* @__PURE__ */ __name(function(condition, format, a, b, c, d, e, f) {
      if (NODE_ENV !== "production") {
        if (format === void 0) {
          throw new Error("invariant requires an error message argument");
        }
      }
      if (!condition) {
        var error;
        if (format === void 0) {
          error = new Error(
            "Minified exception occurred; use the non-minified dev environment for the full error message and additional helpful warnings."
          );
        } else {
          var args = [a, b, c, d, e, f];
          var argIndex = 0;
          error = new Error(
            format.replace(/%s/g, function() {
              return args[argIndex++];
            })
          );
          error.name = "Invariant Violation";
        }
        error.framesToPop = 1;
        throw error;
      }
    }, "invariant");
    module2.exports = invariant20;
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/val.js
function val(v) {
  return v && v.__getValue ? v.__getValue() : v || 0;
}
var init_val = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/val.js"() {
    __name(val, "val");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/InternalAnimatedValue.js
function sanitizeValue(value) {
  return value === null || value === void 0 || typeof value === "string" ? value : Number(value);
}
function initializeConstantValues() {
  if (CONSTANT_VALUES.size !== 0) {
    return;
  }
  [0, -1, 1, -2, 2].forEach(
    (v) => CONSTANT_VALUES.set(v, new InternalAnimatedValue(v, true))
  );
}
var import_invariant, CONSTANT_VALUES, InternalAnimatedValue;
var init_InternalAnimatedValue = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/InternalAnimatedValue.js"() {
    init_AnimatedNode();
    init_val();
    init_ReanimatedModule();
    import_invariant = __toESM(require_invariant());
    __name(sanitizeValue, "sanitizeValue");
    CONSTANT_VALUES = /* @__PURE__ */ new Map();
    __name(initializeConstantValues, "initializeConstantValues");
    InternalAnimatedValue = class extends AnimatedNode {
      static valueForConstant(number) {
        initializeConstantValues();
        return CONSTANT_VALUES.get(number) || new InternalAnimatedValue(number, true);
      }
      constructor(value, constant = false) {
        (0, import_invariant.default)(value !== null, "Animated.Value cannot be set to the null");
        super({ type: "value", value: sanitizeValue(value) });
        this._startingValue = this._value = value;
        this._animation = null;
        this._constant = constant;
      }
      __detach() {
        if (!this._constant) {
          if (ReanimatedModule_default.getValue) {
            ReanimatedModule_default.getValue(
              this.__nodeID,
              (val2) => this.__nodeConfig.value = val2
            );
          } else {
            this.__nodeConfig.value = this.__getValue();
          }
        }
        this.__detachAnimation(this._animation);
        super.__detach();
      }
      __detachAnimation(animation) {
        animation && animation.__detach();
        if (this._animation === animation) {
          this._animation = null;
        }
      }
      __attachAnimation(animation) {
        this.__detachAnimation(this._animation);
        this._animation = animation;
      }
      __onEvaluate() {
        if (this.__inputNodes && this.__inputNodes.length) {
          this.__inputNodes.forEach(val);
        }
        return this._value;
      }
      // AnimatedValue will override this method to modify the value of a native node.
      setValue(value) {
        this.__detachAnimation(this._animation);
        this._updateValue(value);
      }
      _updateValue(value) {
        this._value = value;
        this.__forceUpdateCache(value);
      }
    };
    __name(InternalAnimatedValue, "InternalAnimatedValue");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedBlock.js
function createAnimatedBlock(items) {
  return adapt(items);
}
function nodify(v) {
  if (typeof v === "object" && v?.__isProxy) {
    if (!v.__val) {
      v.__val = new InternalAnimatedValue(0);
    }
    return v.__val;
  }
  return v instanceof AnimatedNode ? v : InternalAnimatedValue.valueForConstant(v);
}
function adapt(v) {
  return Array.isArray(v) ? new AnimatedBlock(v.map((node) => adapt(node))) : nodify(v);
}
var import_invariant2, AnimatedBlock;
var init_AnimatedBlock = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedBlock.js"() {
    import_invariant2 = __toESM(require_invariant());
    init_val();
    init_AnimatedNode();
    init_InternalAnimatedValue();
    AnimatedBlock = class extends AnimatedNode {
      _array;
      constructor(array) {
        (0, import_invariant2.default)(
          array.every((el) => el instanceof AnimatedNode),
          `Reanimated: Animated.block node argument should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes`
        );
        super({ type: "block", block: array }, array);
        this._array = array;
      }
      toString() {
        return `AnimatedBlock, id: ${this.__nodeID}`;
      }
      __onEvaluate() {
        let result;
        this._array.forEach((node) => {
          result = val(node);
        });
        return result;
      }
    };
    __name(AnimatedBlock, "AnimatedBlock");
    __name(createAnimatedBlock, "createAnimatedBlock");
    __name(nodify, "nodify");
    __name(adapt, "adapt");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedSet.js
function createAnimatedSet(what, value) {
  return new AnimatedSet(what, adapt(value));
}
var import_invariant3, AnimatedSet;
var init_AnimatedSet = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedSet.js"() {
    init_AnimatedNode();
    import_invariant3 = __toESM(require_invariant());
    init_val();
    init_AnimatedBlock();
    AnimatedSet = class extends AnimatedNode {
      _what;
      _value;
      constructor(what, value) {
        (0, import_invariant3.default)(
          what instanceof AnimatedNode,
          `Reanimated: Animated.set first argument should be of type AnimatedNode but got ${what}`
        );
        (0, import_invariant3.default)(
          value instanceof AnimatedNode,
          `Reanimated: Animated.set second argument should be of type AnimatedNode, String or Number but got ${value}`
        );
        super({ type: "set", what, value }, [value]);
        (0, import_invariant3.default)(!what._constant, "Value to be set cannot be constant");
        this._what = what;
        this._value = value;
      }
      toString() {
        return `AnimatedSet, id: ${this.__nodeID}`;
      }
      __onEvaluate() {
        const newValue = val(this._value);
        this._what.setValue(newValue);
        return newValue;
      }
    };
    __name(AnimatedSet, "AnimatedSet");
    __name(createAnimatedSet, "createAnimatedSet");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedOperator.js
function reduce(fn) {
  return (input) => input.reduce((a, b) => fn(val(a), val(b)));
}
function reduceFrom(fn, initialValue) {
  return (input) => input.reduce((a, b) => fn(val(a), val(b)), initialValue);
}
function infix(fn) {
  return (input) => fn(val(input[0]), val(input[1]));
}
function single(fn) {
  return (input) => fn(val(input[0]));
}
function createAnimatedOperator(name) {
  return (...args) => new AnimatedOperator(name, args.map(adapt));
}
var import_invariant4, OPERATIONS, AnimatedOperator;
var init_AnimatedOperator = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedOperator.js"() {
    init_AnimatedNode();
    init_val();
    import_invariant4 = __toESM(require_invariant());
    init_AnimatedBlock();
    __name(reduce, "reduce");
    __name(reduceFrom, "reduceFrom");
    __name(infix, "infix");
    __name(single, "single");
    OPERATIONS = {
      // arithmetic
      add: reduce((a, b) => a + b),
      sub: reduce((a, b) => a - b),
      multiply: reduce((a, b) => a * b),
      divide: reduce((a, b) => a / b),
      pow: reduce((a, b) => Math.pow(a, b)),
      modulo: reduce((a, b) => (a % b + b) % b),
      sqrt: single((a) => Math.sqrt(a)),
      log: single((a) => Math.log(a)),
      sin: single((a) => Math.sin(a)),
      cos: single((a) => Math.cos(a)),
      tan: single((a) => Math.tan(a)),
      acos: single((a) => Math.acos(a)),
      asin: single((a) => Math.asin(a)),
      atan: single((a) => Math.atan(a)),
      exp: single((a) => Math.exp(a)),
      round: single((a) => Math.round(a)),
      abs: single((a) => Math.abs(a)),
      ceil: single((a) => Math.ceil(a)),
      floor: single((a) => Math.floor(a)),
      max: reduce((a, b) => Math.max(a, b)),
      min: reduce((a, b) => Math.min(a, b)),
      // logical
      and: reduceFrom((a, b) => a && b, true),
      or: reduceFrom((a, b) => a || b, false),
      not: single((a) => !a),
      defined: single((a) => a !== null && a !== void 0 && !isNaN(a)),
      // comparing
      lessThan: infix((a, b) => a < b),
      /* eslint-disable-next-line eqeqeq */
      eq: infix((a, b) => a == b),
      greaterThan: infix((a, b) => a > b),
      lessOrEq: infix((a, b) => a <= b),
      greaterOrEq: infix((a, b) => a >= b),
      /* eslint-disable-next-line eqeqeq */
      neq: infix((a, b) => a != b)
    };
    AnimatedOperator = class extends AnimatedNode {
      _input;
      _op;
      _operation;
      constructor(operator2, input) {
        (0, import_invariant4.default)(
          typeof operator2 === "string",
          `Reanimated: Animated.operator node first argument should be of type String, but got: ${operator2}`
        );
        (0, import_invariant4.default)(
          input.every(
            (el) => el instanceof AnimatedNode || typeof el === "string" || typeof el === "number"
          ),
          `Reanimated: Animated.operator node second argument should be one or more of type AnimatedNode, String or Number but got ${input}`
        );
        super({ type: "op", op: operator2, input }, input);
        this._op = operator2;
        this._input = input;
      }
      toString() {
        return `AnimatedOperator, id: ${this.__nodeID}`;
      }
      __onEvaluate() {
        if (!this._operation) {
          this._operation = OPERATIONS[this._op];
          (0, import_invariant4.default)(this._operation, `Illegal operator '%s'`, this._op);
        }
        return this._operation(this._input);
      }
    };
    __name(AnimatedOperator, "AnimatedOperator");
    __name(createAnimatedOperator, "createAnimatedOperator");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/operators.js
var operator, add, sub, multiply, divide, pow, modulo, sqrt, log, sin, cos, exp, round2, lessThan, eq, greaterThan, lessOrEq, greaterOrEq, neq, and, or, defined, not, tan, acos, asin, atan, abs, ceil, floor2, max2, min2;
var init_operators = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/operators.js"() {
    init_AnimatedOperator();
    operator = createAnimatedOperator;
    add = operator("add");
    sub = operator("sub");
    multiply = operator("multiply");
    divide = operator("divide");
    pow = operator("pow");
    modulo = operator("modulo");
    sqrt = operator("sqrt");
    log = operator("log");
    sin = operator("sin");
    cos = operator("cos");
    exp = operator("exp");
    round2 = operator("round");
    lessThan = operator("lessThan");
    eq = operator("eq");
    greaterThan = operator("greaterThan");
    lessOrEq = operator("lessOrEq");
    greaterOrEq = operator("greaterOrEq");
    neq = operator("neq");
    and = operator("and");
    or = operator("or");
    defined = operator("defined");
    not = operator("not");
    tan = operator("tan");
    acos = operator("acos");
    asin = operator("asin");
    atan = operator("atan");
    abs = operator("abs");
    ceil = operator("ceil");
    floor2 = operator("floor");
    max2 = operator("max");
    min2 = operator("min");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCond.js
function createAnimatedCond(cond, ifBlock, elseBlock) {
  return new AnimatedCond(
    adapt(cond),
    adapt(ifBlock),
    elseBlock === void 0 ? void 0 : adapt(elseBlock)
  );
}
var import_invariant5, AnimatedCond;
var init_AnimatedCond = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCond.js"() {
    import_invariant5 = __toESM(require_invariant());
    init_AnimatedBlock();
    init_val();
    init_AnimatedNode();
    AnimatedCond = class extends AnimatedNode {
      _condition;
      _ifBlock;
      _elseBlock;
      constructor(condition, ifBlock, elseBlock) {
        (0, import_invariant5.default)(
          condition instanceof AnimatedNode,
          `Reanimated: Animated.cond node first argument should be of type AnimatedNode but got ${condition}`
        );
        (0, import_invariant5.default)(
          ifBlock instanceof AnimatedNode,
          `Reanimated: Animated.cond node second argument should be of type AnimatedNode but got ${ifBlock}`
        );
        (0, import_invariant5.default)(
          elseBlock instanceof AnimatedNode || elseBlock === void 0,
          `Reanimated: Animated.cond node third argument should be of type AnimatedNode or should be undefined but got ${elseBlock}`
        );
        super(
          {
            type: "cond",
            cond: condition,
            ifBlock,
            elseBlock
          },
          [condition, ifBlock, elseBlock]
        );
        this._condition = condition;
        this._ifBlock = ifBlock;
        this._elseBlock = elseBlock;
      }
      toString() {
        return `AnimatedCond, id: ${this.__nodeID}`;
      }
      __onEvaluate() {
        if (val(this._condition)) {
          return val(this._ifBlock);
        } else {
          return this._elseBlock !== void 0 ? val(this._elseBlock) : void 0;
        }
      }
    };
    __name(AnimatedCond, "AnimatedCond");
    __name(createAnimatedCond, "createAnimatedCond");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCallFunc.js
function createAnimatedCallFunc(proc, args, params) {
  return new AnimatedCallFunc(
    proc,
    args.map((p) => adapt(p)),
    params
  );
}
var import_invariant6, AnimatedCallFunc;
var init_AnimatedCallFunc = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCallFunc.js"() {
    init_AnimatedNode();
    init_AnimatedBlock();
    init_val();
    import_invariant6 = __toESM(require_invariant());
    AnimatedCallFunc = class extends AnimatedNode {
      _previousCallID;
      _what;
      _args;
      _params;
      constructor(what, args, params) {
        (0, import_invariant6.default)(
          what instanceof AnimatedNode,
          `Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got ${what}`
        );
        (0, import_invariant6.default)(
          args.every((el) => el instanceof AnimatedNode),
          `Reanimated: every AnimatedCallFunc 'args' argument should be of type AnimatedNode but got ${args}`
        );
        (0, import_invariant6.default)(
          params.every((el) => el instanceof AnimatedNode),
          `Reanimated: every AnimatedCallFunc 'params' argument should be of type AnimatedNode but got ${params}`
        );
        super(
          {
            type: "callfunc",
            what,
            args,
            params
          },
          [...args]
        );
        this._what = what;
        this._args = args;
        this._params = params;
      }
      toString() {
        return `AnimatedCallFunc, id: ${this.__nodeID}`;
      }
      beginContext() {
        this._previousCallID = getCallID();
        setCallID(getCallID() + "/" + this.__nodeID);
        this._params.forEach((param, index3) => {
          param.beginContext(this._args[index3], this._previousCallID);
        });
      }
      endContext() {
        this._params.forEach((param) => {
          param.endContext();
        });
        setCallID(this._previousCallID);
      }
      __onEvaluate() {
        this.beginContext();
        const value = val(this._what);
        this.endContext();
        return value;
      }
    };
    __name(AnimatedCallFunc, "AnimatedCallFunc");
    __name(createAnimatedCallFunc, "createAnimatedCallFunc");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedClock.js
var AnimatedMainClock, mainClock, AnimatedClock;
var init_AnimatedClock = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedClock.js"() {
    init_InternalAnimatedValue();
    init_AnimatedNode();
    init_val();
    AnimatedMainClock = class extends InternalAnimatedValue {
      _frameCallback;
      constructor() {
        super({ type: "MAIN_CLOCK" });
      }
      __onEvaluate() {
        return +/* @__PURE__ */ new Date();
      }
      _runFrame = () => {
        this._updateValue(0);
        if (this.__children.length > 0) {
          this._frameCallback = requestAnimationFrame(this._runFrame);
        }
      };
      __attach() {
        super.__attach();
        if (!this._frameCallback) {
          this._frameCallback = requestAnimationFrame(this._runFrame);
        }
      }
      __detach() {
        if (this._frameCallback) {
          cancelAnimationFrame(this._frameCallback);
          this._frameCallback = null;
        }
        super.__detach();
      }
    };
    __name(AnimatedMainClock, "AnimatedMainClock");
    mainClock = new AnimatedMainClock();
    AnimatedClock = class extends AnimatedNode {
      _started;
      _attached;
      constructor() {
        super({ type: "clock" });
      }
      toString() {
        return `AnimatedClock, id: ${this.__nodeID}`;
      }
      __onEvaluate() {
        return val(mainClock);
      }
      __attach() {
        super.__attach();
        if (this._started && !this._attached) {
          mainClock.__addChild(this);
        }
        this._attached = true;
      }
      __detach() {
        if (this._started && this._attached) {
          mainClock.__removeChild(this);
        }
        this._attached = false;
        super.__detach();
      }
      start() {
        if (!this._started && this._attached) {
          mainClock.__addChild(this);
        }
        this._started = true;
      }
      stop() {
        if (this._started && this._attached) {
          mainClock.__removeChild(this);
        }
        this._started = false;
      }
      isStarted() {
        return this._started;
      }
    };
    __name(AnimatedClock, "AnimatedClock");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedParam.js
function createAnimatedParam() {
  return new AnimatedParam();
}
var import_invariant7, AnimatedParam;
var init_AnimatedParam = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedParam.js"() {
    import_invariant7 = __toESM(require_invariant());
    init_AnimatedNode();
    init_AnimatedClock();
    init_val();
    AnimatedParam = class extends AnimatedNode {
      argsStack = [];
      _prevCallID;
      constructor() {
        super({ type: "param" }, []);
        this.__attach();
      }
      beginContext(ref, prevCallID) {
        this._prevCallID = prevCallID;
        this.argsStack.push(ref);
      }
      endContext() {
        this.argsStack.pop();
      }
      _getTopNode() {
        if (this.argsStack.length === 0)
          throw new Error(`param: Invocation failed because argsStack is empty`);
        const top = this.argsStack[this.argsStack.length - 1];
        return top;
      }
      setValue(value) {
        const top = this._getTopNode();
        if (top.setValue) {
          const callID2 = getCallID();
          setCallID(this._prevCallID);
          top.setValue(value);
          setCallID(callID2);
        } else {
          throw new Error(
            `param: setValue(${value}) failed because the top element has no known method for updating it's current value.`
          );
        }
      }
      __onEvaluate() {
        const callID2 = getCallID();
        setCallID(this._prevCallID);
        const top = this._getTopNode();
        const value = val(top);
        setCallID(callID2);
        return value;
      }
      start() {
        const node = this._getTopNode();
        (0, import_invariant7.default)(
          node instanceof AnimatedClock || node instanceof AnimatedParam,
          `param: top node should be of type AnimatedClock but got ${node}`
        );
        node.start();
      }
      stop() {
        const node = this._getTopNode();
        (0, import_invariant7.default)(
          node instanceof AnimatedClock || node instanceof AnimatedParam,
          `param: top node should be of type AnimatedClock but got ${node}`
        );
        node.stop();
      }
      isRunning() {
        const node = this._getTopNode();
        if (node instanceof AnimatedParam) {
          return node.isRunning();
        }
        (0, import_invariant7.default)(
          node instanceof AnimatedClock,
          `param: top node should be of type AnimatedClock but got ${node}`
        );
        return node.isStarted();
      }
    };
    __name(AnimatedParam, "AnimatedParam");
    __name(createAnimatedParam, "createAnimatedParam");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedFunction.js
function createAnimatedFunction(cb) {
  const params = new Array(cb.length);
  for (let i = 0; i < params.length; i++) {
    params[i] = createAnimatedParam();
  }
  const what = cb(...params);
  const func = new AnimatedFunction(what, ...params);
  return (...args) => {
    if (args.length !== params.length) {
      throw new Error(
        "Parameter mismatch when calling reanimated function. Expected " + params.length + " parameters, got " + args.length + "."
      );
    }
    return createAnimatedCallFunc(func, args, params);
  };
}
var import_invariant8, AnimatedFunction;
var init_AnimatedFunction = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedFunction.js"() {
    init_AnimatedNode();
    init_AnimatedCallFunc();
    init_AnimatedParam();
    init_val();
    import_invariant8 = __toESM(require_invariant());
    AnimatedFunction = class extends AnimatedNode {
      _what;
      constructor(what, ...params) {
        (0, import_invariant8.default)(
          what instanceof AnimatedNode,
          `Reanimated: AnimatedCallFunc 'what' argument should be of type AnimatedNode but got ${what}`
        );
        super(
          {
            type: "func",
            what
          },
          [what, ...params]
        );
        this._what = what;
        this.__attach();
      }
      __onEvaluate() {
        return val(this._what);
      }
      toString() {
        return `AnimatedFunction, id: ${this.__nodeID}`;
      }
    };
    __name(AnimatedFunction, "AnimatedFunction");
    __name(createAnimatedFunction, "createAnimatedFunction");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/derived/interpolate.js
function interpolateInternalSingle(value, inputRange, outputRange, offset3) {
  const inS = inputRange[offset3];
  const inE = inputRange[offset3 + 1];
  const outS = outputRange[offset3];
  const outE = outputRange[offset3 + 1];
  return interpolateInternalSingleProc(value, inS, inE, outS, outE);
}
function interpolateInternal(value, inputRange, outputRange, offset3 = 0) {
  if (inputRange.length - offset3 === 2) {
    return interpolateInternalSingle(value, inputRange, outputRange, offset3);
  }
  return createAnimatedCond(
    lessThan(value, inputRange[offset3 + 1]),
    interpolateInternalSingle(value, inputRange, outputRange, offset3),
    interpolateInternal(value, inputRange, outputRange, offset3 + 1)
  );
}
function checkNonDecreasing(name, arr) {
  for (let i = 1; i < arr.length; ++i) {
    if (arr[i] instanceof AnimatedNode || arr[i - 1] instanceof AnimatedNode)
      continue;
    (0, import_invariant9.default)(
      arr[i] >= arr[i - 1],
      "%s must be monotonically non-decreasing. (%s)",
      name,
      arr
    );
  }
}
function checkMinElements(name, arr) {
  (0, import_invariant9.default)(
    arr.length >= 2,
    "%s must have at least 2 elements. (%s)",
    name,
    arr
  );
}
function checkValidNumbers(name, arr) {
  for (let i = 0; i < arr.length; i++) {
    if (arr[i] instanceof AnimatedNode || typeof arr[i] !== "number")
      continue;
    (0, import_invariant9.default)(
      Number.isFinite(arr[i]),
      "%s cannot include %s. (%s)",
      name,
      arr[i],
      arr
    );
  }
}
function convertToRadians(outputRange) {
  for (const [i, value] of outputRange.entries()) {
    if (typeof value === "string" && value.endsWith("deg")) {
      outputRange[i] = parseFloat(value) * (Math.PI / 180);
    } else if (typeof value === "string" && value.endsWith("rad")) {
      outputRange[i] = parseFloat(value);
    }
  }
}
function interpolate(value, config) {
  const {
    inputRange,
    outputRange,
    extrapolate = Extrapolate.EXTEND,
    extrapolateLeft,
    extrapolateRight
  } = config;
  checkMinElements("inputRange", inputRange);
  checkValidNumbers("inputRange", inputRange);
  checkMinElements("outputRange", outputRange);
  checkValidNumbers("outputRange", outputRange);
  checkNonDecreasing("inputRange", inputRange);
  (0, import_invariant9.default)(
    inputRange.length === outputRange.length,
    "inputRange and outputRange must be the same length."
  );
  convertToRadians(outputRange);
  const left = extrapolateLeft || extrapolate;
  const right = extrapolateRight || extrapolate;
  let output = interpolateInternal(value, inputRange, outputRange);
  if (left === Extrapolate.CLAMP) {
    output = createAnimatedCond(lessThan(value, inputRange[0]), outputRange[0], output);
  } else if (left === Extrapolate.IDENTITY) {
    output = createAnimatedCond(lessThan(value, inputRange[0]), value, output);
  }
  if (right === Extrapolate.CLAMP) {
    output = createAnimatedCond(
      greaterThan(value, inputRange[inputRange.length - 1]),
      outputRange[outputRange.length - 1],
      output
    );
  } else if (right === Extrapolate.IDENTITY) {
    output = createAnimatedCond(
      greaterThan(value, inputRange[inputRange.length - 1]),
      value,
      output
    );
  }
  return output;
}
var import_invariant9, interpolateInternalSingleProc, Extrapolate;
var init_interpolate = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/derived/interpolate.js"() {
    init_operators();
    import_invariant9 = __toESM(require_invariant());
    init_AnimatedNode();
    init_AnimatedCond();
    init_AnimatedFunction();
    interpolateInternalSingleProc = createAnimatedFunction(function(value, inS, inE, outS, outE) {
      const progress = divide(sub(value, inS), sub(inE, inS));
      const resultForNonZeroRange = add(outS, multiply(progress, sub(outE, outS)));
      const result = createAnimatedCond(
        eq(inS, inE),
        createAnimatedCond(lessOrEq(value, inS), outS, outE),
        resultForNonZeroRange
      );
      return result;
    });
    __name(interpolateInternalSingle, "interpolateInternalSingle");
    __name(interpolateInternal, "interpolateInternal");
    Extrapolate = {
      EXTEND: "extend",
      CLAMP: "clamp",
      IDENTITY: "identity"
    };
    __name(checkNonDecreasing, "checkNonDecreasing");
    __name(checkMinElements, "checkMinElements");
    __name(checkValidNumbers, "checkValidNumbers");
    __name(convertToRadians, "convertToRadians");
    __name(interpolate, "interpolate");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCall.js
function listener(data) {
  const node = NODE_MAPPING.get(data.id);
  node && node._callback(data.args);
}
function createAnimatedCall(args, func) {
  return new AnimatedCall(args, func);
}
var import_invariant10, NODE_MAPPING, AnimatedCall;
var init_AnimatedCall = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCall.js"() {
    import_invariant10 = __toESM(require_invariant());
    init_ReanimatedEventEmitter();
    init_val();
    init_AnimatedNode();
    NODE_MAPPING = /* @__PURE__ */ new Map();
    __name(listener, "listener");
    AnimatedCall = class extends AnimatedNode {
      _callback;
      _args;
      constructor(args, jsFunction) {
        (0, import_invariant10.default)(
          args.every((el) => el instanceof AnimatedNode),
          `Reanimated: Animated.call node args should be an array with elements of type AnimatedNode. One or more of them are not AnimatedNodes`
        );
        super({ type: "call", input: args }, args);
        this._callback = jsFunction;
        this._args = args;
      }
      toString() {
        return `AnimatedCall, id: ${this.__nodeID}`;
      }
      __attach() {
        super.__attach();
        NODE_MAPPING.set(this.__nodeID, this);
        if (NODE_MAPPING.size === 1) {
          ReanimatedEventEmitter_default.addListener("onReanimatedCall", listener);
        }
      }
      __detach() {
        NODE_MAPPING.delete(this.__nodeID);
        if (NODE_MAPPING.size === 0) {
          ReanimatedEventEmitter_default.removeAllListeners("onReanimatedCall");
        }
        super.__detach();
      }
      __onEvaluate() {
        this._callback(this._args.map(val));
        return 0;
      }
    };
    __name(AnimatedCall, "AnimatedCall");
    __name(createAnimatedCall, "createAnimatedCall");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedAlways.js
function createAnimatedAlways(item) {
  return new AnimatedAlways(item);
}
var import_invariant11, AnimatedAlways;
var init_AnimatedAlways = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedAlways.js"() {
    init_AnimatedNode();
    import_invariant11 = __toESM(require_invariant());
    init_val();
    AnimatedAlways = class extends AnimatedNode {
      _what;
      constructor(what) {
        (0, import_invariant11.default)(
          what instanceof AnimatedNode,
          `Reanimated: Animated.always node argument should be of type AnimatedNode but got ${what}`
        );
        super({ type: "always", what }, [what]);
        this._what = what;
      }
      toString() {
        return `AnimatedAlways, id: ${this.__nodeID}`;
      }
      update() {
        this.__getValue();
      }
      __onEvaluate() {
        val(this._what);
        return 0;
      }
    };
    __name(AnimatedAlways, "AnimatedAlways");
    __name(createAnimatedAlways, "createAnimatedAlways");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/derived/evaluateOnce.js
function evaluateOnce(node, input = [], callback) {
  if (!Array.isArray(input)) {
    input = [input];
  }
  const done = new InternalAnimatedValue(0);
  const evalNode = createAnimatedCond(
    done,
    0,
    createAnimatedCall([node, createAnimatedSet(done, 1)], () => {
      callback && callback();
      for (let i = 0; i < input.length; i++) {
        input[i].__removeChild(alwaysNode);
        alwaysNode.__detach();
      }
    })
  );
  const alwaysNode = createAnimatedAlways(evalNode);
  for (let i = 0; i < input.length; i++) {
    input[i].__addChild(alwaysNode);
    alwaysNode.__attach();
  }
}
var init_evaluateOnce = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/derived/evaluateOnce.js"() {
    init_InternalAnimatedValue();
    init_AnimatedSet();
    init_AnimatedCall();
    init_AnimatedAlways();
    init_AnimatedCond();
    __name(evaluateOnce, "evaluateOnce");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedValue.js
var import_react_native7, AnimatedValue;
var init_AnimatedValue = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedValue.js"() {
    init_AnimatedSet();
    init_interpolate();
    init_InternalAnimatedValue();
    import_react_native7 = require("react-native-web-lite");
    init_evaluateOnce();
    init_ReanimatedModule();
    init_val();
    AnimatedValue = class extends InternalAnimatedValue {
      setValue(value) {
        this.__detachAnimation(this._animation);
        if (import_react_native7.Platform.OS === "web" || import_react_native7.Platform.OS === "windows" || import_react_native7.Platform.OS === "macos") {
          this._updateValue(val(value));
        } else {
          if (ReanimatedModule_default.setValue && typeof value === "number") {
            ReanimatedModule_default.setValue(this.__nodeID, value);
          } else {
            evaluateOnce(createAnimatedSet(this, value), this);
          }
        }
      }
      toString() {
        return `AnimatedValue, id: ${this.__nodeID}`;
      }
      interpolate(config) {
        return interpolate(this, config);
      }
    };
    __name(AnimatedValue, "AnimatedValue");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/createEventObjectProxyPolyfill.js
function createEventObjectProxyPolyfill() {
  const nodesMap = {
    // Gesture handlers-related event
    translationX: {},
    translationY: {},
    state: {},
    oldState: {},
    absoluteX: {},
    absoluteY: {},
    x: {},
    y: {},
    velocityX: {},
    velocityY: {},
    scale: {},
    focalX: {},
    focalY: {},
    rotation: {},
    anchorX: {},
    anchorY: {},
    velocity: {},
    numberOfPointers: {},
    // onLayour-related event
    layout: { x: {}, y: {}, width: {}, height: {} },
    // ScrollView event
    contentOffset: { y: {}, x: {} },
    layoutMeasurement: { width: {}, height: {} },
    contentSize: { width: {}, height: {} },
    zoomScale: {},
    contentInset: { right: {}, top: {}, left: {}, bottom: {} }
  };
  const traverse = /* @__PURE__ */ __name((obj) => {
    for (const key in obj) {
      traverse(obj[key]);
      Object.assign(obj[key], { __isProxy: true });
    }
  }, "traverse");
  traverse(nodesMap);
  return nodesMap;
}
var init_createEventObjectProxyPolyfill = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/createEventObjectProxyPolyfill.js"() {
    __name(createEventObjectProxyPolyfill, "createEventObjectProxyPolyfill");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedEvent.js
function sanitizeArgMapping(argMapping) {
  const eventMappings = [];
  const alwaysNodes = [];
  const getNode = /* @__PURE__ */ __name((node) => {
    if (import_react_native8.Platform.OS === "web" || import_react_native8.Platform.OS === "windows" || import_react_native8.Platform.OS === "macos") {
      return node;
    }
    return node.__nodeID;
  }, "getNode");
  const traverse = /* @__PURE__ */ __name((value, path) => {
    if (value instanceof AnimatedValue) {
      eventMappings.push(path.concat(getNode(value)));
    } else if (typeof value === "object" && value.__val) {
      eventMappings.push(path.concat(getNode(value.__val)));
    } else if (typeof value === "function") {
      const node = new AnimatedValue(0);
      alwaysNodes.push(createAnimatedAlways(value(node)));
      eventMappings.push(path.concat(getNode(node)));
    } else if (typeof value === "object") {
      for (const key in value) {
        traverse(value[key], path.concat(key));
      }
    }
  }, "traverse");
  (0, import_invariant12.default)(
    argMapping[0] && argMapping[0].nativeEvent,
    "Native driven events only support animated values contained inside `nativeEvent`."
  );
  const ev = argMapping[0].nativeEvent;
  if (typeof ev === "object") {
    traverse(ev, []);
  } else if (typeof ev === "function") {
    const proxyHandler = {
      get: function(target, name) {
        if (name === "__isProxy") {
          return true;
        }
        if (!target[name] && name !== "__val") {
          target[name] = new Proxy({}, proxyHandler);
        }
        return target[name];
      },
      set: function(target, prop, value) {
        if (prop === "__val") {
          target[prop] = value;
          return true;
        }
        return false;
      }
    };
    const proxy = typeof Proxy === "function" ? new Proxy({}, proxyHandler) : createEventObjectProxyPolyfill();
    alwaysNodes.push(createAnimatedAlways(ev(proxy)));
    traverse(proxy, []);
  }
  return { eventMappings, alwaysNodes };
}
function createAnimatedEvent(argMapping, config) {
  return new AnimatedEvent(argMapping, config);
}
var import_react_native8, import_invariant12, AnimatedEvent;
var init_AnimatedEvent = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedEvent.js"() {
    import_react_native8 = require("react-native-web-lite");
    init_ReanimatedModule();
    init_AnimatedNode();
    init_AnimatedValue();
    init_AnimatedAlways();
    import_invariant12 = __toESM(require_invariant());
    init_createEventObjectProxyPolyfill();
    __name(sanitizeArgMapping, "sanitizeArgMapping");
    AnimatedEvent = class extends AnimatedNode {
      constructor(argMapping, _config = {}) {
        const { eventMappings, alwaysNodes } = sanitizeArgMapping(argMapping);
        super({ type: "event", argMapping: eventMappings });
        this._alwaysNodes = alwaysNodes;
      }
      toString() {
        return `AnimatedEvent, id: ${this.__nodeID}`;
      }
      // The below field is a temporary workaround to make AnimatedEvent object be recognized
      // as Animated.event event callback and therefore filtered out from being send over the
      // bridge which was causing the object to be frozen in JS.
      __isNative = true;
      attachEvent(viewRef, eventName) {
        for (let i = 0; i < this._alwaysNodes.length; i++) {
          this._alwaysNodes[i].__attach();
        }
        this.__attach();
        const viewTag = (0, import_react_native8.findNodeHandle)(viewRef);
        ReanimatedModule_default.attachEvent(viewTag, eventName, this.__nodeID);
      }
      __onEvaluate() {
        return 0;
      }
      detachEvent(viewRef, eventName) {
        for (let i = 0; i < this._alwaysNodes.length; i++) {
          this._alwaysNodes[i].isNativelyInitialized() && this._alwaysNodes[i].__detach();
        }
        const viewTag = (0, import_react_native8.findNodeHandle)(viewRef);
        ReanimatedModule_default.detachEvent(viewTag, eventName, this.__nodeID);
        this.__detach();
      }
    };
    __name(AnimatedEvent, "AnimatedEvent");
    __name(createAnimatedEvent, "createAnimatedEvent");
  }
});

// node_modules/lodash.isequal/index.js
var require_lodash = __commonJS({
  "node_modules/lodash.isequal/index.js"(exports, module2) {
    var LARGE_ARRAY_SIZE = 200;
    var HASH_UNDEFINED = "__lodash_hash_undefined__";
    var COMPARE_PARTIAL_FLAG = 1;
    var COMPARE_UNORDERED_FLAG = 2;
    var MAX_SAFE_INTEGER = 9007199254740991;
    var argsTag = "[object Arguments]";
    var arrayTag = "[object Array]";
    var asyncTag = "[object AsyncFunction]";
    var boolTag = "[object Boolean]";
    var dateTag = "[object Date]";
    var errorTag = "[object Error]";
    var funcTag = "[object Function]";
    var genTag = "[object GeneratorFunction]";
    var mapTag = "[object Map]";
    var numberTag = "[object Number]";
    var nullTag = "[object Null]";
    var objectTag = "[object Object]";
    var promiseTag = "[object Promise]";
    var proxyTag = "[object Proxy]";
    var regexpTag = "[object RegExp]";
    var setTag = "[object Set]";
    var stringTag = "[object String]";
    var symbolTag = "[object Symbol]";
    var undefinedTag = "[object Undefined]";
    var weakMapTag = "[object WeakMap]";
    var arrayBufferTag = "[object ArrayBuffer]";
    var dataViewTag = "[object DataView]";
    var float32Tag = "[object Float32Array]";
    var float64Tag = "[object Float64Array]";
    var int8Tag = "[object Int8Array]";
    var int16Tag = "[object Int16Array]";
    var int32Tag = "[object Int32Array]";
    var uint8Tag = "[object Uint8Array]";
    var uint8ClampedTag = "[object Uint8ClampedArray]";
    var uint16Tag = "[object Uint16Array]";
    var uint32Tag = "[object Uint32Array]";
    var reRegExpChar = /[\\^$.*+?()[\]{}|]/g;
    var reIsHostCtor = /^\[object .+?Constructor\]$/;
    var reIsUint = /^(?:0|[1-9]\d*)$/;
    var typedArrayTags = {};
    typedArrayTags[float32Tag] = typedArrayTags[float64Tag] = typedArrayTags[int8Tag] = typedArrayTags[int16Tag] = typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] = typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] = typedArrayTags[uint32Tag] = true;
    typedArrayTags[argsTag] = typedArrayTags[arrayTag] = typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] = typedArrayTags[dataViewTag] = typedArrayTags[dateTag] = typedArrayTags[errorTag] = typedArrayTags[funcTag] = typedArrayTags[mapTag] = typedArrayTags[numberTag] = typedArrayTags[objectTag] = typedArrayTags[regexpTag] = typedArrayTags[setTag] = typedArrayTags[stringTag] = typedArrayTags[weakMapTag] = false;
    var freeGlobal = typeof global == "object" && global && global.Object === Object && global;
    var freeSelf = typeof self == "object" && self && self.Object === Object && self;
    var root = freeGlobal || freeSelf || Function("return this")();
    var freeExports = typeof exports == "object" && exports && !exports.nodeType && exports;
    var freeModule = freeExports && typeof module2 == "object" && module2 && !module2.nodeType && module2;
    var moduleExports = freeModule && freeModule.exports === freeExports;
    var freeProcess = moduleExports && freeGlobal.process;
    var nodeUtil = function() {
      try {
        return freeProcess && freeProcess.binding && freeProcess.binding("util");
      } catch (e) {
      }
    }();
    var nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;
    function arrayFilter(array, predicate) {
      var index3 = -1, length = array == null ? 0 : array.length, resIndex = 0, result = [];
      while (++index3 < length) {
        var value = array[index3];
        if (predicate(value, index3, array)) {
          result[resIndex++] = value;
        }
      }
      return result;
    }
    __name(arrayFilter, "arrayFilter");
    function arrayPush(array, values) {
      var index3 = -1, length = values.length, offset3 = array.length;
      while (++index3 < length) {
        array[offset3 + index3] = values[index3];
      }
      return array;
    }
    __name(arrayPush, "arrayPush");
    function arraySome(array, predicate) {
      var index3 = -1, length = array == null ? 0 : array.length;
      while (++index3 < length) {
        if (predicate(array[index3], index3, array)) {
          return true;
        }
      }
      return false;
    }
    __name(arraySome, "arraySome");
    function baseTimes(n, iteratee) {
      var index3 = -1, result = Array(n);
      while (++index3 < n) {
        result[index3] = iteratee(index3);
      }
      return result;
    }
    __name(baseTimes, "baseTimes");
    function baseUnary(func) {
      return function(value) {
        return func(value);
      };
    }
    __name(baseUnary, "baseUnary");
    function cacheHas(cache, key) {
      return cache.has(key);
    }
    __name(cacheHas, "cacheHas");
    function getValue2(object, key) {
      return object == null ? void 0 : object[key];
    }
    __name(getValue2, "getValue");
    function mapToArray(map) {
      var index3 = -1, result = Array(map.size);
      map.forEach(function(value, key) {
        result[++index3] = [key, value];
      });
      return result;
    }
    __name(mapToArray, "mapToArray");
    function overArg(func, transform) {
      return function(arg) {
        return func(transform(arg));
      };
    }
    __name(overArg, "overArg");
    function setToArray(set) {
      var index3 = -1, result = Array(set.size);
      set.forEach(function(value) {
        result[++index3] = value;
      });
      return result;
    }
    __name(setToArray, "setToArray");
    var arrayProto = Array.prototype;
    var funcProto = Function.prototype;
    var objectProto = Object.prototype;
    var coreJsData = root["__core-js_shared__"];
    var funcToString = funcProto.toString;
    var hasOwnProperty = objectProto.hasOwnProperty;
    var maskSrcKey = function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || "");
      return uid ? "Symbol(src)_1." + uid : "";
    }();
    var nativeObjectToString = objectProto.toString;
    var reIsNative = RegExp(
      "^" + funcToString.call(hasOwnProperty).replace(reRegExpChar, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
    );
    var Buffer2 = moduleExports ? root.Buffer : void 0;
    var Symbol2 = root.Symbol;
    var Uint8Array2 = root.Uint8Array;
    var propertyIsEnumerable = objectProto.propertyIsEnumerable;
    var splice = arrayProto.splice;
    var symToStringTag = Symbol2 ? Symbol2.toStringTag : void 0;
    var nativeGetSymbols = Object.getOwnPropertySymbols;
    var nativeIsBuffer = Buffer2 ? Buffer2.isBuffer : void 0;
    var nativeKeys = overArg(Object.keys, Object);
    var DataView = getNative(root, "DataView");
    var Map2 = getNative(root, "Map");
    var Promise2 = getNative(root, "Promise");
    var Set2 = getNative(root, "Set");
    var WeakMap2 = getNative(root, "WeakMap");
    var nativeCreate = getNative(Object, "create");
    var dataViewCtorString = toSource(DataView);
    var mapCtorString = toSource(Map2);
    var promiseCtorString = toSource(Promise2);
    var setCtorString = toSource(Set2);
    var weakMapCtorString = toSource(WeakMap2);
    var symbolProto = Symbol2 ? Symbol2.prototype : void 0;
    var symbolValueOf = symbolProto ? symbolProto.valueOf : void 0;
    function Hash(entries) {
      var index3 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    __name(Hash, "Hash");
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }
    __name(hashClear, "hashClear");
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }
    __name(hashDelete, "hashDelete");
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? void 0 : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : void 0;
    }
    __name(hashGet, "hashGet");
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? data[key] !== void 0 : hasOwnProperty.call(data, key);
    }
    __name(hashHas, "hashHas");
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = nativeCreate && value === void 0 ? HASH_UNDEFINED : value;
      return this;
    }
    __name(hashSet, "hashSet");
    Hash.prototype.clear = hashClear;
    Hash.prototype["delete"] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;
    function ListCache(entries) {
      var index3 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    __name(ListCache, "ListCache");
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }
    __name(listCacheClear, "listCacheClear");
    function listCacheDelete(key) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      if (index3 < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index3 == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index3, 1);
      }
      --this.size;
      return true;
    }
    __name(listCacheDelete, "listCacheDelete");
    function listCacheGet(key) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      return index3 < 0 ? void 0 : data[index3][1];
    }
    __name(listCacheGet, "listCacheGet");
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }
    __name(listCacheHas, "listCacheHas");
    function listCacheSet(key, value) {
      var data = this.__data__, index3 = assocIndexOf(data, key);
      if (index3 < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index3][1] = value;
      }
      return this;
    }
    __name(listCacheSet, "listCacheSet");
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype["delete"] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;
    function MapCache(entries) {
      var index3 = -1, length = entries == null ? 0 : entries.length;
      this.clear();
      while (++index3 < length) {
        var entry = entries[index3];
        this.set(entry[0], entry[1]);
      }
    }
    __name(MapCache, "MapCache");
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        "hash": new Hash(),
        "map": new (Map2 || ListCache)(),
        "string": new Hash()
      };
    }
    __name(mapCacheClear, "mapCacheClear");
    function mapCacheDelete(key) {
      var result = getMapData(this, key)["delete"](key);
      this.size -= result ? 1 : 0;
      return result;
    }
    __name(mapCacheDelete, "mapCacheDelete");
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }
    __name(mapCacheGet, "mapCacheGet");
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }
    __name(mapCacheHas, "mapCacheHas");
    function mapCacheSet(key, value) {
      var data = getMapData(this, key), size4 = data.size;
      data.set(key, value);
      this.size += data.size == size4 ? 0 : 1;
      return this;
    }
    __name(mapCacheSet, "mapCacheSet");
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype["delete"] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;
    function SetCache(values) {
      var index3 = -1, length = values == null ? 0 : values.length;
      this.__data__ = new MapCache();
      while (++index3 < length) {
        this.add(values[index3]);
      }
    }
    __name(SetCache, "SetCache");
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }
    __name(setCacheAdd, "setCacheAdd");
    function setCacheHas(value) {
      return this.__data__.has(value);
    }
    __name(setCacheHas, "setCacheHas");
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;
    function Stack5(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }
    __name(Stack5, "Stack");
    function stackClear() {
      this.__data__ = new ListCache();
      this.size = 0;
    }
    __name(stackClear, "stackClear");
    function stackDelete(key) {
      var data = this.__data__, result = data["delete"](key);
      this.size = data.size;
      return result;
    }
    __name(stackDelete, "stackDelete");
    function stackGet(key) {
      return this.__data__.get(key);
    }
    __name(stackGet, "stackGet");
    function stackHas(key) {
      return this.__data__.has(key);
    }
    __name(stackHas, "stackHas");
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map2 || pairs.length < LARGE_ARRAY_SIZE - 1) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }
    __name(stackSet, "stackSet");
    Stack5.prototype.clear = stackClear;
    Stack5.prototype["delete"] = stackDelete;
    Stack5.prototype.get = stackGet;
    Stack5.prototype.has = stackHas;
    Stack5.prototype.set = stackSet;
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value), isArg = !isArr && isArguments(value), isBuff = !isArr && !isArg && isBuffer(value), isType = !isArr && !isArg && !isBuff && isTypedArray(value), skipIndexes = isArr || isArg || isBuff || isType, result = skipIndexes ? baseTimes(value.length, String) : [], length = result.length;
      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) && !(skipIndexes && // Safari 9 has enumerable `arguments.length` in strict mode.
        (key == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
        isBuff && (key == "offset" || key == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
        isType && (key == "buffer" || key == "byteLength" || key == "byteOffset") || // Skip index properties.
        isIndex(key, length)))) {
          result.push(key);
        }
      }
      return result;
    }
    __name(arrayLikeKeys, "arrayLikeKeys");
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq2(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }
    __name(assocIndexOf, "assocIndexOf");
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }
    __name(baseGetAllKeys, "baseGetAllKeys");
    function baseGetTag(value) {
      if (value == null) {
        return value === void 0 ? undefinedTag : nullTag;
      }
      return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);
    }
    __name(baseGetTag, "baseGetTag");
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }
    __name(baseIsArguments, "baseIsArguments");
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || !isObjectLike(value) && !isObjectLike(other)) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }
    __name(baseIsEqual, "baseIsEqual");
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object), othIsArr = isArray(other), objTag = objIsArr ? arrayTag : getTag2(object), othTag = othIsArr ? arrayTag : getTag2(other);
      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;
      var objIsObj = objTag == objectTag, othIsObj = othTag == objectTag, isSameTag = objTag == othTag;
      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack5());
        return objIsArr || isTypedArray(object) ? equalArrays(object, other, bitmask, customizer, equalFunc, stack) : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, "__wrapped__"), othIsWrapped = othIsObj && hasOwnProperty.call(other, "__wrapped__");
        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object, othUnwrapped = othIsWrapped ? other.value() : other;
          stack || (stack = new Stack5());
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack5());
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }
    __name(baseIsEqualDeep, "baseIsEqualDeep");
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }
    __name(baseIsNative, "baseIsNative");
    function baseIsTypedArray(value) {
      return isObjectLike(value) && isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }
    __name(baseIsTypedArray, "baseIsTypedArray");
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != "constructor") {
          result.push(key);
        }
      }
      return result;
    }
    __name(baseKeys, "baseKeys");
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, arrLength = array.length, othLength = other.length;
      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index3 = -1, result = true, seen = bitmask & COMPARE_UNORDERED_FLAG ? new SetCache() : void 0;
      stack.set(array, other);
      stack.set(other, array);
      while (++index3 < arrLength) {
        var arrValue = array[index3], othValue = other[index3];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, arrValue, index3, other, array, stack) : customizer(arrValue, othValue, index3, array, other, stack);
        }
        if (compared !== void 0) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        if (seen) {
          if (!arraySome(other, function(othValue2, othIndex) {
            if (!cacheHas(seen, othIndex) && (arrValue === othValue2 || equalFunc(arrValue, othValue2, bitmask, customizer, stack))) {
              return seen.push(othIndex);
            }
          })) {
            result = false;
            break;
          }
        } else if (!(arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
          result = false;
          break;
        }
      }
      stack["delete"](array);
      stack["delete"](other);
      return result;
    }
    __name(equalArrays, "equalArrays");
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if (object.byteLength != other.byteLength || object.byteOffset != other.byteOffset) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;
        case arrayBufferTag:
          if (object.byteLength != other.byteLength || !equalFunc(new Uint8Array2(object), new Uint8Array2(other))) {
            return false;
          }
          return true;
        case boolTag:
        case dateTag:
        case numberTag:
          return eq2(+object, +other);
        case errorTag:
          return object.name == other.name && object.message == other.message;
        case regexpTag:
        case stringTag:
          return object == other + "";
        case mapTag:
          var convert = mapToArray;
        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);
          if (object.size != other.size && !isPartial) {
            return false;
          }
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack["delete"](object);
          return result;
        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }
    __name(equalByTag, "equalByTag");
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG, objProps = getAllKeys(object), objLength = objProps.length, othProps = getAllKeys(other), othLength = othProps.length;
      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index3 = objLength;
      while (index3--) {
        var key = objProps[index3];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);
      var skipCtor = isPartial;
      while (++index3 < objLength) {
        key = objProps[index3];
        var objValue = object[key], othValue = other[key];
        if (customizer) {
          var compared = isPartial ? customizer(othValue, objValue, key, other, object, stack) : customizer(objValue, othValue, key, object, other, stack);
        }
        if (!(compared === void 0 ? objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack) : compared)) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == "constructor");
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor, othCtor = other.constructor;
        if (objCtor != othCtor && ("constructor" in object && "constructor" in other) && !(typeof objCtor == "function" && objCtor instanceof objCtor && typeof othCtor == "function" && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack["delete"](object);
      stack["delete"](other);
      return result;
    }
    __name(equalObjects, "equalObjects");
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }
    __name(getAllKeys, "getAllKeys");
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key) ? data[typeof key == "string" ? "string" : "hash"] : data.map;
    }
    __name(getMapData, "getMapData");
    function getNative(object, key) {
      var value = getValue2(object, key);
      return baseIsNative(value) ? value : void 0;
    }
    __name(getNative, "getNative");
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];
      try {
        value[symToStringTag] = void 0;
        var unmasked = true;
      } catch (e) {
      }
      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }
    __name(getRawTag, "getRawTag");
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };
    var getTag2 = baseGetTag;
    if (DataView && getTag2(new DataView(new ArrayBuffer(1))) != dataViewTag || Map2 && getTag2(new Map2()) != mapTag || Promise2 && getTag2(Promise2.resolve()) != promiseTag || Set2 && getTag2(new Set2()) != setTag || WeakMap2 && getTag2(new WeakMap2()) != weakMapTag) {
      getTag2 = /* @__PURE__ */ __name(function(value) {
        var result = baseGetTag(value), Ctor = result == objectTag ? value.constructor : void 0, ctorString = Ctor ? toSource(Ctor) : "";
        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString:
              return dataViewTag;
            case mapCtorString:
              return mapTag;
            case promiseCtorString:
              return promiseTag;
            case setCtorString:
              return setTag;
            case weakMapCtorString:
              return weakMapTag;
          }
        }
        return result;
      }, "getTag");
    }
    function isIndex(value, length) {
      length = length == null ? MAX_SAFE_INTEGER : length;
      return !!length && (typeof value == "number" || reIsUint.test(value)) && (value > -1 && value % 1 == 0 && value < length);
    }
    __name(isIndex, "isIndex");
    function isKeyable(value) {
      var type = typeof value;
      return type == "string" || type == "number" || type == "symbol" || type == "boolean" ? value !== "__proto__" : value === null;
    }
    __name(isKeyable, "isKeyable");
    function isMasked(func) {
      return !!maskSrcKey && maskSrcKey in func;
    }
    __name(isMasked, "isMasked");
    function isPrototype(value) {
      var Ctor = value && value.constructor, proto = typeof Ctor == "function" && Ctor.prototype || objectProto;
      return value === proto;
    }
    __name(isPrototype, "isPrototype");
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }
    __name(objectToString, "objectToString");
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {
        }
        try {
          return func + "";
        } catch (e) {
        }
      }
      return "";
    }
    __name(toSource, "toSource");
    function eq2(value, other) {
      return value === other || value !== value && other !== other;
    }
    __name(eq2, "eq");
    var isArguments = baseIsArguments(function() {
      return arguments;
    }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, "callee") && !propertyIsEnumerable.call(value, "callee");
    };
    var isArray = Array.isArray;
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }
    __name(isArrayLike, "isArrayLike");
    var isBuffer = nativeIsBuffer || stubFalse;
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }
    __name(isEqual, "isEqual");
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }
    __name(isFunction, "isFunction");
    function isLength(value) {
      return typeof value == "number" && value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }
    __name(isLength, "isLength");
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == "object" || type == "function");
    }
    __name(isObject, "isObject");
    function isObjectLike(value) {
      return value != null && typeof value == "object";
    }
    __name(isObjectLike, "isObjectLike");
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }
    __name(keys, "keys");
    function stubArray() {
      return [];
    }
    __name(stubArray, "stubArray");
    function stubFalse() {
      return false;
    }
    __name(stubFalse, "stubFalse");
    module2.exports = isEqual;
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedTransform.js
function sanitizeTransform(inputTransform) {
  const outputTransform = [];
  let hasAnimatedTransform = false;
  inputTransform.forEach((transform) => {
    for (const key in transform) {
      const value = transform[key];
      if (value instanceof AnimatedNode) {
        hasAnimatedTransform = true;
        outputTransform.push({
          property: key,
          nodeID: value.__nodeID
        });
      } else {
        outputTransform.push({
          property: key,
          value
        });
      }
    }
  });
  return hasAnimatedTransform ? outputTransform : void 0;
}
function extractAnimatedParentNodes(transform) {
  const parents = [];
  transform.forEach((transform2) => {
    for (const key in transform2) {
      const value = transform2[key];
      if (value instanceof AnimatedNode) {
        parents.push(value);
      }
    }
  });
  return parents;
}
function createOrReuseTransformNode(transform, oldNode) {
  const config = sanitizeTransform(transform);
  if (config === void 0) {
    return void 0;
  }
  if (oldNode && (0, import_lodash.default)(config, oldNode._config)) {
    return oldNode;
  }
  return new AnimatedTransform(transform, config);
}
var import_lodash, AnimatedTransform;
var init_AnimatedTransform = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedTransform.js"() {
    init_AnimatedNode();
    import_lodash = __toESM(require_lodash());
    __name(sanitizeTransform, "sanitizeTransform");
    __name(extractAnimatedParentNodes, "extractAnimatedParentNodes");
    __name(createOrReuseTransformNode, "createOrReuseTransformNode");
    AnimatedTransform = class extends AnimatedNode {
      constructor(transform, config) {
        super(
          { type: "transform", transform: config },
          extractAnimatedParentNodes(transform)
        );
        this._config = config;
        this._transform = transform;
      }
      toString() {
        return `AnimatedTransform, id: ${this.__nodeID}`;
      }
      __onEvaluate() {
        return this._transform.map((transform) => {
          const result = {};
          for (const key in transform) {
            const value = transform[key];
            if (value instanceof AnimatedNode) {
              result[key] = value.__getValue();
            }
          }
          return result;
        });
      }
    };
    __name(AnimatedTransform, "AnimatedTransform");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedStyle.js
function sanitizeStyle(inputStyle) {
  let style;
  for (const key in inputStyle) {
    const value = inputStyle[key];
    if (value instanceof AnimatedNode) {
      if (style === void 0) {
        style = {};
      }
      style[key] = value.__nodeID;
    }
  }
  return style;
}
function createOrReuseStyleNode(style, oldNode) {
  style = import_react_native9.StyleSheet.flatten(style) || {};
  if (style.transform) {
    const transform = createOrReuseTransformNode(
      style.transform,
      oldNode && oldNode._style.transform
    );
    if (transform) {
      style = {
        ...style,
        transform
      };
    }
  }
  const config = sanitizeStyle(style);
  if (config === void 0) {
    return void 0;
  }
  if (oldNode && (0, import_lodash2.default)(config, oldNode._config)) {
    return oldNode;
  }
  return new AnimatedStyle(style, config);
}
var import_react_native9, import_lodash2, AnimatedStyle;
var init_AnimatedStyle = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedStyle.js"() {
    import_react_native9 = require("react-native-web-lite");
    init_AnimatedNode();
    init_AnimatedTransform();
    import_lodash2 = __toESM(require_lodash());
    __name(sanitizeStyle, "sanitizeStyle");
    __name(createOrReuseStyleNode, "createOrReuseStyleNode");
    AnimatedStyle = class extends AnimatedNode {
      constructor(style, config) {
        super({ type: "style", style: config }, Object.values(style));
        this._config = config;
        this._style = style;
      }
      toString() {
        return `AnimatedStyle, id: ${this.__nodeID}`;
      }
      _walkStyleAndGetAnimatedValues(style) {
        const updatedStyle = {};
        for (const key in style) {
          const value = style[key];
          if (value instanceof AnimatedNode) {
            updatedStyle[key] = value.__getValue();
          } else if (value && !Array.isArray(value) && typeof value === "object") {
            updatedStyle[key] = this._walkStyleAndGetAnimatedValues(value);
          }
        }
        return updatedStyle;
      }
      __onEvaluate() {
        return this._walkStyleAndGetAnimatedValues(this._style);
      }
    };
    __name(AnimatedStyle, "AnimatedStyle");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedProps.js
function sanitizeProps(inputProps) {
  let props;
  for (const key in inputProps) {
    const value = inputProps[key];
    if (value instanceof AnimatedNode && !(value instanceof AnimatedEvent)) {
      if (props === void 0) {
        props = {};
      }
      props[key] = value.__nodeID;
    }
  }
  return props;
}
function createOrReusePropsNode(props, callback, oldNode) {
  if (props.style) {
    const style = createOrReuseStyleNode(
      props.style,
      oldNode && oldNode._props.style
    );
    if (style) {
      props = {
        ...props,
        style
      };
    }
  }
  const config = sanitizeProps(props);
  if (config === void 0) {
    return void 0;
  }
  if (oldNode && (0, import_lodash3.default)(config, oldNode._config)) {
    return oldNode;
  }
  return new AnimatedProps(props, config, callback);
}
var import_react_native10, import_invariant13, import_lodash3, AnimatedProps;
var init_AnimatedProps = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedProps.js"() {
    import_react_native10 = require("react-native-web-lite");
    init_AnimatedNode();
    init_AnimatedEvent();
    init_AnimatedStyle();
    import_invariant13 = __toESM(require_invariant());
    import_lodash3 = __toESM(require_lodash());
    init_val();
    __name(sanitizeProps, "sanitizeProps");
    __name(createOrReusePropsNode, "createOrReusePropsNode");
    AnimatedProps = class extends AnimatedNode {
      constructor(props, config, callback) {
        super(
          { type: "props", props: config },
          Object.values(props).filter((n) => !(n instanceof AnimatedEvent))
        );
        this._config = config;
        this._props = props;
        this._callback = callback;
        this.__attach();
      }
      toString() {
        return `AnimatedProps, id: ${this.__nodeID}`;
      }
      __onEvaluate() {
        const props = {};
        for (const key in this._props) {
          const value = this._props[key];
          if (value instanceof AnimatedNode) {
            props[key] = value.__getValue();
          }
        }
        return props;
      }
      __detach() {
        const nativeViewTag = (0, import_react_native10.findNodeHandle)(this._animatedView);
        (0, import_invariant13.default)(
          nativeViewTag != null,
          "Unable to locate attached view in the native tree"
        );
        this._disconnectAnimatedView(nativeViewTag);
        super.__detach();
      }
      update() {
        this._callback();
        if (!this._animatedView) {
          return;
        }
        val(this);
      }
      setNativeView(animatedView) {
        if (this._animatedView === animatedView) {
          return;
        }
        this._animatedView = animatedView;
        const nativeViewTag = (0, import_react_native10.findNodeHandle)(this._animatedView);
        (0, import_invariant13.default)(
          nativeViewTag != null,
          "Unable to locate attached view in the native tree"
        );
        this._connectAnimatedView(nativeViewTag);
      }
    };
    __name(AnimatedProps, "AnimatedProps");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/MapperRegistry.js
var MapperRegistry, Node2;
var init_MapperRegistry = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/MapperRegistry.js"() {
    MapperRegistry = class {
      constructor(module2) {
        this.sortedMappers = [];
        this.mappers = /* @__PURE__ */ new Map();
        this.updatedSinceLastExecute = false;
        this._module = module2;
      }
      startMapper(mapper) {
        this.mappers.set(mapper.id, mapper);
        this.updatedSinceLastExecute = true;
        return mapper.id;
      }
      stopMapper(id) {
        this.mappers.delete(id);
        this.updatedSinceLastExecute = true;
      }
      execute() {
        if (this.updatedSinceLastExecute) {
          this.updateOrder();
          this.updatedSinceLastExecute = false;
        }
        for (let i = 0, len = this.sortedMappers.length; i < len; ++i) {
          const mapper = this.sortedMappers[i];
          if (mapper.dirty) {
            mapper.execute();
          }
        }
      }
      updateOrder() {
        const nodes = [...this.mappers.values()].map((mapper) => new Node2(mapper));
        const mappersById = {};
        this.mappers.forEach((mapper) => {
          mappersById[mapper.id] = mapper;
        });
        for (let i = 0, nodesLen = nodes.length; i < nodesLen; ++i) {
          const node = nodes[i];
          if (node.mapper.outputs.length === 0) {
            continue;
          }
          for (let j = 0; j < nodesLen; ++j) {
            const restNode = nodes[j];
            if (i === j || restNode.mapper.inputs.length === 0) {
              continue;
            }
            for (let outi = 0, outputsLen = node.mapper.outputs.length; outi < outputsLen; ++outi) {
              for (let resti = 0, restLen = restNode.mapper.inputs.length; resti < restLen; ++resti) {
                if (node.mapper.outputs[outi]._id === restNode.mapper.inputs[resti]._id) {
                  node.children.push(restNode);
                }
              }
            }
          }
        }
        const post = {};
        let postCounter = 1;
        const dfs = /* @__PURE__ */ __name((node) => {
          const index3 = nodes.indexOf(node);
          if (index3 === -1) {
            return;
          }
          ++postCounter;
          nodes.splice(index3, 1);
          if (node.children.length === 0 && nodes.length > 0) {
            post[node.mapper.id] = postCounter++;
            dfs(nodes[0]);
            return;
          }
          for (let i = 0, len = node.children.length; i < len; ++i) {
            dfs(node.children[i]);
          }
          post[node.mapper.id] = postCounter++;
        }, "dfs");
        while (nodes.length)
          dfs(nodes[0]);
        const postArray = Object.keys(post).map((key) => {
          const num = parseInt(key);
          return [num, post[num]];
        });
        postArray.sort((a, b) => {
          return b[1] - a[1];
        });
        this.sortedMappers = [];
        for (let i = 0, len = postArray.length; i < len; ++i) {
          const [id] = postArray[i];
          this.sortedMappers.push(mappersById[id]);
        }
      }
      get needRunOnRender() {
        return this.updatedSinceLastExecute;
      }
    };
    __name(MapperRegistry, "MapperRegistry");
    Node2 = class {
      constructor(mapper, children = []) {
        this.mapper = mapper;
        this.children = children;
      }
    };
    __name(Node2, "Node");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/MutableValue.js
var MutableValue;
var init_MutableValue = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/MutableValue.js"() {
    MutableValue = class {
      constructor(value, setter) {
        this._animation = null;
        this._listeners = [];
        this._id = MutableValue.MUTABLE_ID++;
        this._value = value;
        this._setter = setter;
      }
      get value() {
        return this._value;
      }
      set value(nextValue) {
        this._setter(nextValue);
      }
      // this changes the value finally and is supposed to be called from this._setter
      _setValue(newValue) {
        this._value = newValue;
        this._triggerListener();
      }
      addListener(listener3) {
        this._listeners.push(listener3);
      }
      _triggerListener() {
        for (let i = 0, len = this._listeners.length; i < len; ++i) {
          this._listeners[i]();
        }
      }
    };
    __name(MutableValue, "MutableValue");
    MutableValue.MUTABLE_ID = 1;
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/Mapper.js
var Mapper;
var init_Mapper = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/Mapper.js"() {
    init_MutableValue();
    Mapper = class {
      constructor(module2, mapper, inputs = [], outputs = []) {
        this.dirty = true;
        this.id = Mapper.MAPPER_ID++;
        this.inputs = this.extractMutablesFromArray(inputs);
        this.outputs = this.extractMutablesFromArray(outputs);
        this.mapper = mapper;
        const markDirty = /* @__PURE__ */ __name(() => {
          this.dirty = true;
          module2.maybeRequestRender();
        }, "markDirty");
        this.inputs.forEach((input) => {
          input.addListener(markDirty);
        });
      }
      execute() {
        this.dirty = false;
        this.mapper();
      }
      extractMutablesFromArray(array) {
        const res = [];
        function extractMutables(value) {
          if (value == null) {
          } else if (value instanceof MutableValue) {
            res.push(value);
          } else if (Array.isArray(value)) {
            value.forEach((v) => extractMutables(v));
          } else if (typeof value === "object") {
            Object.keys(value).forEach((key) => {
              extractMutables(value[key]);
            });
          }
        }
        __name(extractMutables, "extractMutables");
        extractMutables(array);
        return res;
      }
    };
    __name(Mapper, "Mapper");
    Mapper.MAPPER_ID = 1;
  }
});

// node_modules/react-native-reanimated/package.json
var version;
var init_package = __esm({
  "node_modules/react-native-reanimated/package.json"() {
    version = "2.14.4";
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/platform-specific/checkVersion.js
function checkVersion() {
  const cppVersion = global._REANIMATED_VERSION_CPP;
  if (cppVersion === void 0) {
    console.error(`[Reanimated] Couldn't determine the version of the native part of Reanimated. Did you forget to re-build the app after upgrading react-native-reanimated? If you use Expo Go, you must use the exact version which is bundled into Expo SDK.`);
    return;
  }
  const ok = (() => {
    if (version.match(/^\d+\.\d+\.\d+$/) && cppVersion.match(/^\d+\.\d+\.\d+$/)) {
      const [jsMajor, jsMinor] = version.split(".");
      const [cppMajor, cppMinor] = cppVersion.split(".");
      return jsMajor === cppMajor && jsMinor === cppMinor;
    } else {
      return version === cppVersion;
    }
  })();
  if (!ok) {
    console.error(`[Reanimated] Mismatch between JavaScript part and native part of Reanimated (${version} vs. ${cppVersion}). Did you forget to re-build the app after upgrading react-native-reanimated? If you use Expo Go, you must downgrade to ${cppVersion} which is bundled into Expo SDK.`);
  }
}
var init_checkVersion = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/platform-specific/checkVersion.js"() {
    init_package();
    __name(checkVersion, "checkVersion");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/NativeReanimated/NativeReanimated.js
var import_react_native11, NativeReanimated;
var init_NativeReanimated = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/NativeReanimated/NativeReanimated.js"() {
    import_react_native11 = require("react-native-web-lite");
    init_checkVersion();
    NativeReanimated = class {
      constructor(native = true) {
        if (global.__reanimatedModuleProxy === void 0 && native) {
          const { ReanimatedModule } = import_react_native11.NativeModules;
          ReanimatedModule === null || ReanimatedModule === void 0 ? void 0 : ReanimatedModule.installTurboModule();
        }
        this.InnerNativeModule = global.__reanimatedModuleProxy;
        this.native = native;
        if (native) {
          checkVersion();
        }
      }
      installCoreFunctions(valueSetter) {
        return this.InnerNativeModule.installCoreFunctions(valueSetter);
      }
      makeShareable(value) {
        return this.InnerNativeModule.makeShareable(value);
      }
      makeMutable(value) {
        return this.InnerNativeModule.makeMutable(value);
      }
      makeRemote(object = {}) {
        return this.InnerNativeModule.makeRemote(object);
      }
      registerSensor(sensorType, interval, sensorData) {
        return this.InnerNativeModule.registerSensor(sensorType, interval, sensorData);
      }
      unregisterSensor(sensorId) {
        return this.InnerNativeModule.unregisterSensor(sensorId);
      }
      startMapper(mapper, inputs = [], outputs = [], updater, viewDescriptors) {
        return this.InnerNativeModule.startMapper(mapper, inputs, outputs, updater, viewDescriptors);
      }
      stopMapper(mapperId) {
        return this.InnerNativeModule.stopMapper(mapperId);
      }
      registerEventHandler(eventHash, eventHandler) {
        return this.InnerNativeModule.registerEventHandler(eventHash, eventHandler);
      }
      unregisterEventHandler(id) {
        return this.InnerNativeModule.unregisterEventHandler(id);
      }
      getViewProp(viewTag, propName, callback) {
        return this.InnerNativeModule.getViewProp(viewTag, propName, callback);
      }
      enableLayoutAnimations(flag) {
        this.InnerNativeModule.enableLayoutAnimations(flag);
      }
      configureProps(uiProps, nativeProps) {
        this.InnerNativeModule.configureProps(uiProps, nativeProps);
      }
      subscribeForKeyboardEvents(keyboardEventData) {
        return this.InnerNativeModule.subscribeForKeyboardEvents(keyboardEventData);
      }
      unsubscribeFromKeyboardEvents(listenerId) {
        this.InnerNativeModule.unsubscribeFromKeyboardEvents(listenerId);
      }
    };
    __name(NativeReanimated, "NativeReanimated");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/PlatformChecker.js
function isJest() {
  return !!process.env.JEST_WORKER_ID;
}
function isChromeDebugger() {
  return !global.nativeCallSyncHook || global.__REMOTEDEV__;
}
function isWeb8() {
  return import_react_native12.Platform.OS === "web";
}
function shouldBeUseWeb() {
  return isJest() || isChromeDebugger() || isWeb8();
}
function nativeShouldBeMock() {
  return isJest() || isChromeDebugger();
}
var import_react_native12;
var init_PlatformChecker = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/PlatformChecker.js"() {
    import_react_native12 = require("react-native-web-lite");
    __name(isJest, "isJest");
    __name(isChromeDebugger, "isChromeDebugger");
    __name(isWeb8, "isWeb");
    __name(shouldBeUseWeb, "shouldBeUseWeb");
    __name(nativeShouldBeMock, "nativeShouldBeMock");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/JSReanimated.js
var JSReanimated;
var init_JSReanimated = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/JSReanimated.js"() {
    init_MapperRegistry();
    init_Mapper();
    init_MutableValue();
    init_NativeReanimated();
    init_PlatformChecker();
    JSReanimated = class extends NativeReanimated {
      constructor() {
        super(false);
        this._valueSetter = void 0;
        this._renderRequested = false;
        this._mapperRegistry = new MapperRegistry(this);
        this._frames = [];
        if (isJest()) {
          this.timeProvider = { now: () => global.ReanimatedDataMock.now() };
        } else {
          this.timeProvider = { now: () => window.performance.now() };
        }
      }
      pushFrame(frame) {
        this._frames.push(frame);
        this.maybeRequestRender();
      }
      getTimestamp() {
        return this.timeProvider.now();
      }
      maybeRequestRender() {
        if (!this._renderRequested) {
          this._renderRequested = true;
          requestAnimationFrame((_timestampMs) => {
            this._renderRequested = false;
            this._onRender(this.getTimestamp());
          });
        }
      }
      _onRender(timestampMs) {
        this._mapperRegistry.execute();
        const frames = [...this._frames];
        this._frames = [];
        for (let i = 0, len = frames.length; i < len; ++i) {
          frames[i](timestampMs);
        }
        if (this._mapperRegistry.needRunOnRender) {
          this._mapperRegistry.execute();
        }
      }
      installCoreFunctions(valueSetter) {
        this._valueSetter = valueSetter;
      }
      makeShareable(value) {
        return value;
      }
      makeMutable(value) {
        return new MutableValue(value, this._valueSetter);
      }
      makeRemote(object = {}) {
        return object;
      }
      startMapper(mapper, inputs = [], outputs = []) {
        const instance = new Mapper(this, mapper, inputs, outputs);
        const mapperId = this._mapperRegistry.startMapper(instance);
        this.maybeRequestRender();
        return mapperId;
      }
      stopMapper(mapperId) {
        this._mapperRegistry.stopMapper(mapperId);
      }
      registerEventHandler(_, __) {
        return "";
      }
      unregisterEventHandler(_) {
      }
      enableLayoutAnimations() {
        console.warn("[Reanimated] enableLayoutAnimations is not available for WEB yet");
      }
      registerSensor() {
        console.warn("[Reanimated] useAnimatedSensor is not available on web yet.");
        return -1;
      }
      unregisterSensor() {
      }
      jestResetModule() {
        if (isJest()) {
          this._renderRequested = false;
        } else {
          throw Error("This method can be only use in Jest testing.");
        }
      }
      subscribeForKeyboardEvents(_) {
        console.warn("[Reanimated] useAnimatedKeyboard is not available on web yet.");
        return -1;
      }
      unsubscribeFromKeyboardEvents(_) {
      }
    };
    __name(JSReanimated, "JSReanimated");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/index.js
var reanimatedJS, _updatePropsJS, setNativeProps, js_reanimated_default;
var init_js_reanimated = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/index.js"() {
    init_JSReanimated();
    reanimatedJS = new JSReanimated();
    _updatePropsJS = /* @__PURE__ */ __name((updates, viewRef) => {
      if (viewRef._component) {
        const component = viewRef._component;
        const [rawStyles] = Object.keys(updates).reduce((acc2, key) => {
          const value = updates[key];
          const index3 = typeof value === "function" ? 1 : 0;
          acc2[index3][key] = value;
          return acc2;
        }, [{}, {}]);
        if (typeof component.setNativeProps === "function") {
          setNativeProps(component, rawStyles);
        } else if (Object.keys(component.props).length > 0) {
          Object.keys(component.props).forEach((key) => {
            if (!rawStyles[key]) {
              return;
            }
            const dashedKey = key.replace(/[A-Z]/g, (m) => "-" + m.toLowerCase());
            component._touchableNode.setAttribute(dashedKey, rawStyles[key]);
          });
        } else {
          console.warn("It is not possible to manipulate component");
        }
      }
    }, "_updatePropsJS");
    setNativeProps = /* @__PURE__ */ __name((component, style) => {
      const previousStyle = component.previousStyle ? component.previousStyle : {};
      const currentStyle = Object.assign(Object.assign({}, previousStyle), style);
      component.previousStyle = currentStyle;
      component.setNativeProps({ style: currentStyle });
    }, "setNativeProps");
    js_reanimated_default = reanimatedJS;
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/NativeReanimated/index.js
var exportedModule, NativeReanimated_default;
var init_NativeReanimated2 = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/NativeReanimated/index.js"() {
    init_js_reanimated();
    init_PlatformChecker();
    init_NativeReanimated();
    if (shouldBeUseWeb()) {
      exportedModule = js_reanimated_default;
    } else {
      exportedModule = new NativeReanimated();
    }
    NativeReanimated_default = exportedModule;
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/WorkletEventHandler.js
function jsListener(eventName, handler) {
  return (evt) => {
    handler(Object.assign(Object.assign({}, evt.nativeEvent), { eventName }));
  };
}
var WorkletEventHandler;
var init_WorkletEventHandler = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/WorkletEventHandler.js"() {
    init_NativeReanimated2();
    __name(jsListener, "jsListener");
    WorkletEventHandler = class {
      constructor(worklet, eventNames = []) {
        this.worklet = worklet;
        this.eventNames = eventNames;
        this.reattachNeeded = false;
        this.listeners = {};
        this.viewTag = void 0;
        this.registrations = [];
        if (!NativeReanimated_default.native) {
          this.listeners = eventNames.reduce((acc2, eventName) => {
            acc2[eventName] = jsListener(eventName, worklet);
            return acc2;
          }, {});
        }
      }
      updateWorklet(newWorklet) {
        this.worklet = newWorklet;
        this.reattachNeeded = true;
      }
      registerForEvents(viewTag, fallbackEventName) {
        this.viewTag = viewTag;
        this.registrations = this.eventNames.map((eventName) => NativeReanimated_default.registerEventHandler(viewTag + eventName, this.worklet));
        if (this.registrations.length === 0 && fallbackEventName) {
          this.registrations.push(NativeReanimated_default.registerEventHandler(viewTag + fallbackEventName, this.worklet));
        }
      }
      unregisterFromEvents() {
        this.registrations.forEach((id) => NativeReanimated_default.unregisterEventHandler(id));
        this.registrations = [];
      }
    };
    __name(WorkletEventHandler, "WorkletEventHandler");
  }
});

// node_modules/react-native-reanimated/lib/setAndForwardRef.js
function setAndForwardRef({ getForwardedRef, setLocalRef }) {
  return /* @__PURE__ */ __name(function forwardRef11(ref) {
    const forwardedRef = getForwardedRef();
    setLocalRef(ref);
    if (typeof forwardedRef === "function") {
      forwardedRef(ref);
    } else if (typeof forwardedRef === "object" && forwardedRef != null) {
      forwardedRef.current = ref;
    }
  }, "forwardRef");
}
var setAndForwardRef_default;
var init_setAndForwardRef = __esm({
  "node_modules/react-native-reanimated/lib/setAndForwardRef.js"() {
    __name(setAndForwardRef, "setAndForwardRef");
    setAndForwardRef_default = setAndForwardRef;
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/core.js
function pushFrame(frame) {
  NativeReanimated_default.pushFrame(frame);
}
function requestFrame(frame) {
  "worklet";
  if (NativeReanimated_default.native) {
    requestAnimationFrame(frame);
  } else {
    pushFrame(frame);
  }
}
function runOnUI(worklet) {
  return makeShareable(worklet);
}
function makeShareable(value) {
  isConfiguredCheck();
  return NativeReanimated_default.makeShareable(value);
}
function getViewProp(viewTag, propName) {
  return new Promise((resolve, reject) => {
    return NativeReanimated_default.getViewProp(viewTag, propName, (result) => {
      if (typeof result === "string" && result.substr(0, 6) === "error:") {
        reject(result);
      } else {
        resolve(result);
      }
    });
  });
}
function getTimestamp() {
  "worklet";
  if (import_react_native13.Platform.OS === "web") {
    return NativeReanimated_default.getTimestamp();
  }
  return _getTimestamp();
}
function workletValueSetter(value) {
  "worklet";
  const previousAnimation = this._animation;
  if (previousAnimation) {
    previousAnimation.cancelled = true;
    this._animation = null;
  }
  if (typeof value === "function" || value !== null && typeof value === "object" && value.onFrame !== void 0) {
    const animation = typeof value === "function" ? value() : value;
    if (this._value === animation.current && !animation.isHigherOrder) {
      animation.callback && animation.callback(true);
      return;
    }
    const initializeAnimation = /* @__PURE__ */ __name((timestamp) => {
      animation.onStart(animation, this.value, timestamp, previousAnimation);
    }, "initializeAnimation");
    initializeAnimation(getTimestamp());
    const step = /* @__PURE__ */ __name((timestamp) => {
      if (animation.cancelled) {
        animation.callback && animation.callback(
          false
          /* finished */
        );
        return;
      }
      const finished = animation.onFrame(animation, timestamp);
      animation.finished = true;
      animation.timestamp = timestamp;
      this._value = animation.current;
      if (finished) {
        animation.callback && animation.callback(
          true
          /* finished */
        );
      } else {
        requestAnimationFrame(step);
      }
    }, "step");
    this._animation = animation;
    if (_frameTimestamp) {
      step(_frameTimestamp);
    } else {
      requestAnimationFrame(step);
    }
  } else {
    if (this._value === value) {
      return;
    }
    this._value = value;
  }
}
function workletValueSetterJS(value) {
  const previousAnimation = this._animation;
  if (previousAnimation) {
    previousAnimation.cancelled = true;
    this._animation = null;
  }
  if (typeof value === "function" || value !== null && typeof value === "object" && value.onFrame) {
    const animation = typeof value === "function" ? value() : value;
    let initializeAnimation = /* @__PURE__ */ __name((timestamp) => {
      animation.onStart(animation, this.value, timestamp, previousAnimation);
    }, "initializeAnimation");
    const step = /* @__PURE__ */ __name((timestamp) => {
      if (animation.cancelled) {
        animation.callback && animation.callback(
          false
          /* finished */
        );
        return;
      }
      if (initializeAnimation) {
        initializeAnimation(timestamp);
        initializeAnimation = null;
      }
      const finished = animation.onFrame(animation, timestamp);
      animation.timestamp = timestamp;
      this._setValue && this._setValue(animation.current);
      if (finished) {
        animation.callback && animation.callback(
          true
          /* finished */
        );
      } else {
        requestFrame(step);
      }
    }, "step");
    this._animation = animation;
    requestFrame(step);
  } else {
    this._setValue && this._setValue(value);
  }
}
function makeMutable(value) {
  isConfiguredCheck();
  return NativeReanimated_default.makeMutable(value);
}
function makeRemote(object = {}) {
  isConfiguredCheck();
  return NativeReanimated_default.makeRemote(object);
}
function startMapper(mapper, inputs = [], outputs = [], updater = () => {
}, viewDescriptors = []) {
  isConfiguredCheck();
  return NativeReanimated_default.startMapper(mapper, inputs, outputs, updater, viewDescriptors);
}
function stopMapper(mapperId) {
  NativeReanimated_default.stopMapper(mapperId);
}
function runOnJS(fun) {
  "worklet";
  if (!_WORKLET) {
    return fun;
  }
  if (!fun.__callAsync) {
    throw new Error("Attempting to call runOnJS with an object that is not a host function. Using runOnJS is only possible with methods that are defined on the main React-Native Javascript thread and that aren't marked as worklets");
  } else {
    return fun.__callAsync;
  }
}
function enableLayoutAnimations(flag, isCallByUser = true) {
  if (isCallByUser) {
    featuresConfig = {
      enableLayoutAnimations: flag,
      setByUser: true
    };
    NativeReanimated_default.enableLayoutAnimations(flag);
  } else if (!featuresConfig.setByUser && featuresConfig.enableLayoutAnimations !== flag) {
    featuresConfig.enableLayoutAnimations = flag;
    NativeReanimated_default.enableLayoutAnimations(flag);
  }
}
function configureProps(uiProps, nativeProps) {
  if (!nativeShouldBeMock()) {
    NativeReanimated_default.configureProps(uiProps, nativeProps);
  }
}
function jestResetJsReanimatedModule() {
  NativeReanimated_default.jestResetModule();
}
var import_react_native13, testWorklet, throwUninitializedReanimatedException, checkPluginState, isConfigured, isConfiguredCheck, _getTimestamp, featuresConfig;
var init_core = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/core.js"() {
    init_NativeReanimated2();
    import_react_native13 = require("react-native-web-lite");
    init_PlatformChecker();
    if (global._setGlobalConsole === void 0) {
      global._setGlobalConsole = () => {
      };
    }
    testWorklet = /* @__PURE__ */ __name(() => {
      "worklet";
    }, "testWorklet");
    throwUninitializedReanimatedException = /* @__PURE__ */ __name(() => {
      throw new Error("Failed to initialize react-native-reanimated library, make sure you followed installation steps here: https://docs.swmansion.com/react-native-reanimated/docs/fundamentals/installation/ \n1) Make sure reanimated's babel plugin is installed in your babel.config.js (you should have 'react-native-reanimated/plugin' listed there - also see the above link for details) \n2) Make sure you reset build cache after updating the config, run: yarn start --reset-cache");
    }, "throwUninitializedReanimatedException");
    checkPluginState = /* @__PURE__ */ __name((throwError = true) => {
      if (!testWorklet.__workletHash && !shouldBeUseWeb()) {
        if (throwError) {
          throwUninitializedReanimatedException();
        }
        return false;
      }
      return true;
    }, "checkPluginState");
    isConfigured = /* @__PURE__ */ __name((throwError = false) => {
      return checkPluginState(throwError);
    }, "isConfigured");
    isConfiguredCheck = /* @__PURE__ */ __name(() => {
      checkPluginState(true);
    }, "isConfiguredCheck");
    __name(pushFrame, "pushFrame");
    __name(requestFrame, "requestFrame");
    global._WORKLET = false;
    global._log = function(s) {
      console.log(s);
    };
    __name(runOnUI, "runOnUI");
    __name(makeShareable, "makeShareable");
    __name(getViewProp, "getViewProp");
    if (nativeShouldBeMock()) {
      _getTimestamp = /* @__PURE__ */ __name(() => {
        return NativeReanimated_default.getTimestamp();
      }, "_getTimestamp");
    } else {
      _getTimestamp = /* @__PURE__ */ __name(() => {
        "worklet";
        if (_frameTimestamp) {
          return _frameTimestamp;
        }
        if (_eventTimestamp) {
          return _eventTimestamp;
        }
        return _getCurrentTime();
      }, "_getTimestamp");
    }
    __name(getTimestamp, "getTimestamp");
    __name(workletValueSetter, "workletValueSetter");
    __name(workletValueSetterJS, "workletValueSetterJS");
    __name(makeMutable, "makeMutable");
    __name(makeRemote, "makeRemote");
    __name(startMapper, "startMapper");
    __name(stopMapper, "stopMapper");
    __name(runOnJS, "runOnJS");
    NativeReanimated_default.installCoreFunctions(NativeReanimated_default.native ? workletValueSetter : workletValueSetterJS);
    if (!isWeb8() && isConfigured()) {
      const capturableConsole = console;
      runOnUI(() => {
        "worklet";
        const console2 = {
          debug: runOnJS(capturableConsole.debug),
          log: runOnJS(capturableConsole.log),
          warn: runOnJS(capturableConsole.warn),
          error: runOnJS(capturableConsole.error),
          info: runOnJS(capturableConsole.info)
        };
        _setGlobalConsole(console2);
      })();
    }
    featuresConfig = {
      enableLayoutAnimations: false,
      setByUser: false
    };
    __name(enableLayoutAnimations, "enableLayoutAnimations");
    __name(configureProps, "configureProps");
    __name(jestResetJsReanimatedModule, "jestResetJsReanimatedModule");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/Colors.js
function call(...args) {
  "worklet";
  return "\\(\\s*(" + args.join(")\\s*,\\s*(") + ")\\s*\\)";
}
function getMatchers() {
  "worklet";
  const cachedMatchers = _WORKLET ? uiCachedMatchers : jsCachedMatchers;
  if (cachedMatchers.rgb === void 0) {
    cachedMatchers.rgb = new RegExp("rgb" + call(NUMBER, NUMBER, NUMBER));
    cachedMatchers.rgba = new RegExp("rgba" + call(NUMBER, NUMBER, NUMBER, NUMBER));
    cachedMatchers.hsl = new RegExp("hsl" + call(NUMBER, PERCENTAGE, PERCENTAGE));
    cachedMatchers.hsla = new RegExp("hsla" + call(NUMBER, PERCENTAGE, PERCENTAGE, NUMBER));
    cachedMatchers.hex3 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
    cachedMatchers.hex4 = /^#([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})([0-9a-fA-F]{1})$/;
    cachedMatchers.hex6 = /^#([0-9a-fA-F]{6})$/;
    cachedMatchers.hex8 = /^#([0-9a-fA-F]{8})$/;
  }
  return cachedMatchers;
}
function hue2rgb(p, q, t) {
  "worklet";
  if (t < 0) {
    t += 1;
  }
  if (t > 1) {
    t -= 1;
  }
  if (t < 1 / 6) {
    return p + (q - p) * 6 * t;
  }
  if (t < 1 / 2) {
    return q;
  }
  if (t < 2 / 3) {
    return p + (q - p) * (2 / 3 - t) * 6;
  }
  return p;
}
function hslToRgb(h, s, l) {
  "worklet";
  const q = l < 0.5 ? l * (1 + s) : l + s - l * s;
  const p = 2 * l - q;
  const r = hue2rgb(p, q, h + 1 / 3);
  const g = hue2rgb(p, q, h);
  const b = hue2rgb(p, q, h - 1 / 3);
  return Math.round(r * 255) << 24 | Math.round(g * 255) << 16 | Math.round(b * 255) << 8;
}
function parse255(str) {
  "worklet";
  const int = Number.parseInt(str, 10);
  if (int < 0) {
    return 0;
  }
  if (int > 255) {
    return 255;
  }
  return int;
}
function parse360(str) {
  "worklet";
  const int = Number.parseFloat(str);
  return (int % 360 + 360) % 360 / 360;
}
function parse1(str) {
  "worklet";
  const num = Number.parseFloat(str);
  if (num < 0) {
    return 0;
  }
  if (num > 1) {
    return 255;
  }
  return Math.round(num * 255);
}
function parsePercentage(str) {
  "worklet";
  const int = Number.parseFloat(str);
  if (int < 0) {
    return 0;
  }
  if (int > 100) {
    return 1;
  }
  return int / 100;
}
function normalizeColor(color3) {
  "worklet";
  var _a, _b, _c, _d, _e, _f, _g, _h;
  if (typeof color3 === "number") {
    if (color3 >>> 0 === color3 && color3 >= 0 && color3 <= 4294967295) {
      return color3;
    }
    return null;
  }
  if (typeof color3 !== "string") {
    return null;
  }
  const matchers = getMatchers();
  let match;
  if (match = (_a = matchers === null || matchers === void 0 ? void 0 : matchers.hex6) === null || _a === void 0 ? void 0 : _a.exec(color3)) {
    return Number.parseInt(match[1] + "ff", 16) >>> 0;
  }
  if (names[color3] !== void 0) {
    return names[color3];
  }
  if (match = (_b = matchers === null || matchers === void 0 ? void 0 : matchers.rgb) === null || _b === void 0 ? void 0 : _b.exec(color3)) {
    return (
      // b
      (parse255(match[1]) << 24 | // r
      parse255(match[2]) << 16 | // g
      parse255(match[3]) << 8 | 255) >>> // a
      0
    );
  }
  if (match = (_c = matchers === null || matchers === void 0 ? void 0 : matchers.rgba) === null || _c === void 0 ? void 0 : _c.exec(color3)) {
    return (
      // b
      (parse255(match[1]) << 24 | // r
      parse255(match[2]) << 16 | // g
      parse255(match[3]) << 8 | parse1(match[4])) >>> // a
      0
    );
  }
  if (match = (_d = matchers === null || matchers === void 0 ? void 0 : matchers.hex3) === null || _d === void 0 ? void 0 : _d.exec(color3)) {
    return Number.parseInt(
      match[1] + match[1] + // r
      match[2] + match[2] + // g
      match[3] + match[3] + // b
      "ff",
      // a
      16
    ) >>> 0;
  }
  if (match = (_e = matchers === null || matchers === void 0 ? void 0 : matchers.hex8) === null || _e === void 0 ? void 0 : _e.exec(color3)) {
    return Number.parseInt(match[1], 16) >>> 0;
  }
  if (match = (_f = matchers === null || matchers === void 0 ? void 0 : matchers.hex4) === null || _f === void 0 ? void 0 : _f.exec(color3)) {
    return Number.parseInt(
      match[1] + match[1] + // r
      match[2] + match[2] + // g
      match[3] + match[3] + // b
      match[4] + match[4],
      // a
      16
    ) >>> 0;
  }
  if (match = (_g = matchers === null || matchers === void 0 ? void 0 : matchers.hsl) === null || _g === void 0 ? void 0 : _g.exec(color3)) {
    return (hslToRgb(
      parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // s
      parsePercentage(match[3])
      // l
    ) | 255) >>> // a
    0;
  }
  if (match = (_h = matchers === null || matchers === void 0 ? void 0 : matchers.hsla) === null || _h === void 0 ? void 0 : _h.exec(color3)) {
    return (hslToRgb(
      parse360(match[1]),
      // h
      parsePercentage(match[2]),
      // s
      parsePercentage(match[3])
      // l
    ) | parse1(match[4])) >>> // a
    0;
  }
  return null;
}
function RGBtoHSV(r, g, b) {
  "worklet";
  if (arguments.length === 1) {
    g = r.g;
    b = r.b;
    r = r.r;
  }
  const max3 = Math.max(r, g, b);
  const min3 = Math.min(r, g, b);
  const d = max3 - min3;
  const s = max3 === 0 ? 0 : d / max3;
  const v = max3 / 255;
  let h;
  switch (max3) {
    default:
    case min3:
      h = 0;
      break;
    case r:
      h = g - b + d * (g < b ? 6 : 0);
      h /= 6 * d;
      break;
    case g:
      h = b - r + d * 2;
      h /= 6 * d;
      break;
    case b:
      h = r - g + d * 4;
      h /= 6 * d;
      break;
  }
  return {
    h,
    s,
    v
  };
}
function HSVtoRGB(h, s, v) {
  "worklet";
  var r, g, b, i, f, p, q, t;
  if (arguments.length === 1) {
    s = h.s;
    v = h.v;
    h = h.h;
  }
  i = Math.floor(h * 6);
  f = h * 6 - i;
  p = v * (1 - s);
  q = v * (1 - f * s);
  t = v * (1 - (1 - f) * s);
  switch (i % 6) {
    case 0:
      r = v, g = t, b = p;
      break;
    case 1:
      r = q, g = v, b = p;
      break;
    case 2:
      r = p, g = v, b = t;
      break;
    case 3:
      r = p, g = q, b = v;
      break;
    case 4:
      r = t, g = p, b = v;
      break;
    case 5:
      r = v, g = p, b = q;
      break;
  }
  return {
    r: Math.round(r * 255),
    g: Math.round(g * 255),
    b: Math.round(b * 255)
  };
}
function processColorInitially(color3) {
  "worklet";
  if (color3 === null || color3 === void 0 || typeof color3 === "number") {
    return color3;
  }
  let normalizedColor = normalizeColor(color3);
  if (normalizedColor === null || normalizedColor === void 0) {
    return void 0;
  }
  if (typeof normalizedColor !== "number") {
    return null;
  }
  normalizedColor = (normalizedColor << 24 | normalizedColor >>> 8) >>> 0;
  return normalizedColor;
}
function isColor(value) {
  "worklet";
  if (typeof value !== "string") {
    return false;
  }
  return processColorInitially(value) != null;
}
function processColor(color3) {
  "worklet";
  let normalizedColor = processColorInitially(color3);
  if (normalizedColor === null || normalizedColor === void 0) {
    return void 0;
  }
  if (typeof normalizedColor !== "number") {
    return null;
  }
  if (import_react_native14.Platform.OS === "android") {
    normalizedColor = normalizedColor | 0;
  }
  return normalizedColor;
}
function convertToRGBA(color3) {
  "worklet";
  const processedColor = processColorInitially(color3);
  const a = (processedColor >>> 24) / 255;
  const r = (processedColor << 8 >>> 24) / 255;
  const g = (processedColor << 16 >>> 24) / 255;
  const b = (processedColor << 24 >>> 24) / 255;
  return [r, g, b, a];
}
function rgbaArrayToRGBAColor(RGBA) {
  "worklet";
  return `rgba(${Math.round(RGBA[0] * 255)}, ${Math.round(RGBA[1] * 255)}, ${Math.round(RGBA[2] * 255)}, ${RGBA[3]})`;
}
function toLinearSpace(RGBA, gamma = 2.2) {
  "worklet";
  const res = [];
  for (let i = 0; i < 3; ++i) {
    res.push(Math.pow(RGBA[i], gamma));
  }
  res.push(RGBA[3]);
  return res;
}
function toGammaSpace(RGBA, gamma = 2.2) {
  "worklet";
  const res = [];
  for (let i = 0; i < 3; ++i) {
    res.push(Math.pow(RGBA[i], 1 / gamma));
  }
  res.push(RGBA[3]);
  return res;
}
var import_react_native14, NUMBER, PERCENTAGE, jsCachedMatchers, uiCachedMatchers, names, opacity, red3, green3, blue3, rgbaColor, hsvToColor;
var init_Colors = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/Colors.js"() {
    import_react_native14 = require("react-native-web-lite");
    init_core();
    NUMBER = "[-+]?(?:\\d+(?:\\.\\d*)?|\\.\\d+)";
    PERCENTAGE = NUMBER + "%";
    __name(call, "call");
    jsCachedMatchers = {};
    uiCachedMatchers = !isConfigured() ? {} : makeRemote({});
    __name(getMatchers, "getMatchers");
    getMatchers();
    __name(hue2rgb, "hue2rgb");
    __name(hslToRgb, "hslToRgb");
    __name(parse255, "parse255");
    __name(parse360, "parse360");
    __name(parse1, "parse1");
    __name(parsePercentage, "parsePercentage");
    names = !isConfigured() ? null : makeShareable({
      transparent: 0,
      // http://www.w3.org/TR/css3-color/#svg-color
      aliceblue: 4042850303,
      antiquewhite: 4209760255,
      aqua: 16777215,
      aquamarine: 2147472639,
      azure: 4043309055,
      beige: 4126530815,
      bisque: 4293182719,
      black: 255,
      blanchedalmond: 4293643775,
      blue: 65535,
      blueviolet: 2318131967,
      brown: 2771004159,
      burlywood: 3736635391,
      burntsienna: 3934150143,
      cadetblue: 1604231423,
      chartreuse: 2147418367,
      chocolate: 3530104575,
      coral: 4286533887,
      cornflowerblue: 1687547391,
      cornsilk: 4294499583,
      crimson: 3692313855,
      cyan: 16777215,
      darkblue: 35839,
      darkcyan: 9145343,
      darkgoldenrod: 3095792639,
      darkgray: 2846468607,
      darkgreen: 6553855,
      darkgrey: 2846468607,
      darkkhaki: 3182914559,
      darkmagenta: 2332068863,
      darkolivegreen: 1433087999,
      darkorange: 4287365375,
      darkorchid: 2570243327,
      darkred: 2332033279,
      darksalmon: 3918953215,
      darkseagreen: 2411499519,
      darkslateblue: 1211993087,
      darkslategray: 793726975,
      darkslategrey: 793726975,
      darkturquoise: 13554175,
      darkviolet: 2483082239,
      deeppink: 4279538687,
      deepskyblue: 12582911,
      dimgray: 1768516095,
      dimgrey: 1768516095,
      dodgerblue: 512819199,
      firebrick: 2988581631,
      floralwhite: 4294635775,
      forestgreen: 579543807,
      fuchsia: 4278255615,
      gainsboro: 3705462015,
      ghostwhite: 4177068031,
      gold: 4292280575,
      goldenrod: 3668254975,
      gray: 2155905279,
      green: 8388863,
      greenyellow: 2919182335,
      grey: 2155905279,
      honeydew: 4043305215,
      hotpink: 4285117695,
      indianred: 3445382399,
      indigo: 1258324735,
      ivory: 4294963455,
      khaki: 4041641215,
      lavender: 3873897215,
      lavenderblush: 4293981695,
      lawngreen: 2096890111,
      lemonchiffon: 4294626815,
      lightblue: 2916673279,
      lightcoral: 4034953471,
      lightcyan: 3774873599,
      lightgoldenrodyellow: 4210742015,
      lightgray: 3553874943,
      lightgreen: 2431553791,
      lightgrey: 3553874943,
      lightpink: 4290167295,
      lightsalmon: 4288707327,
      lightseagreen: 548580095,
      lightskyblue: 2278488831,
      lightslategray: 2005441023,
      lightslategrey: 2005441023,
      lightsteelblue: 2965692159,
      lightyellow: 4294959359,
      lime: 16711935,
      limegreen: 852308735,
      linen: 4210091775,
      magenta: 4278255615,
      maroon: 2147483903,
      mediumaquamarine: 1724754687,
      mediumblue: 52735,
      mediumorchid: 3126187007,
      mediumpurple: 2473647103,
      mediumseagreen: 1018393087,
      mediumslateblue: 2070474495,
      mediumspringgreen: 16423679,
      mediumturquoise: 1221709055,
      mediumvioletred: 3340076543,
      midnightblue: 421097727,
      mintcream: 4127193855,
      mistyrose: 4293190143,
      moccasin: 4293178879,
      navajowhite: 4292783615,
      navy: 33023,
      oldlace: 4260751103,
      olive: 2155872511,
      olivedrab: 1804477439,
      orange: 4289003775,
      orangered: 4282712319,
      orchid: 3664828159,
      palegoldenrod: 4008225535,
      palegreen: 2566625535,
      paleturquoise: 2951671551,
      palevioletred: 3681588223,
      papayawhip: 4293907967,
      peachpuff: 4292524543,
      peru: 3448061951,
      pink: 4290825215,
      plum: 3718307327,
      powderblue: 2967529215,
      purple: 2147516671,
      rebeccapurple: 1714657791,
      red: 4278190335,
      rosybrown: 3163525119,
      royalblue: 1097458175,
      saddlebrown: 2336560127,
      salmon: 4202722047,
      sandybrown: 4104413439,
      seagreen: 780883967,
      seashell: 4294307583,
      sienna: 2689740287,
      silver: 3233857791,
      skyblue: 2278484991,
      slateblue: 1784335871,
      slategray: 1887473919,
      slategrey: 1887473919,
      snow: 4294638335,
      springgreen: 16744447,
      steelblue: 1182971135,
      tan: 3535047935,
      teal: 8421631,
      thistle: 3636451583,
      tomato: 4284696575,
      turquoise: 1088475391,
      violet: 4001558271,
      wheat: 4125012991,
      white: 4294967295,
      whitesmoke: 4126537215,
      yellow: 4294902015,
      yellowgreen: 2597139199
    });
    __name(normalizeColor, "normalizeColor");
    opacity = /* @__PURE__ */ __name((c) => {
      "worklet";
      return (c >> 24 & 255) / 255;
    }, "opacity");
    red3 = /* @__PURE__ */ __name((c) => {
      "worklet";
      return c >> 16 & 255;
    }, "red");
    green3 = /* @__PURE__ */ __name((c) => {
      "worklet";
      return c >> 8 & 255;
    }, "green");
    blue3 = /* @__PURE__ */ __name((c) => {
      "worklet";
      return c & 255;
    }, "blue");
    rgbaColor = /* @__PURE__ */ __name((r, g, b, alpha = 1) => {
      "worklet";
      if (import_react_native14.Platform.OS === "web" || !_WORKLET) {
        return `rgba(${r}, ${g}, ${b}, ${alpha})`;
      }
      const c = Math.round(alpha * 255) * (1 << 24) + Math.round(r) * (1 << 16) + Math.round(g) * (1 << 8) + Math.round(b);
      if (import_react_native14.Platform.OS === "android") {
        return c < 1 << 31 >>> 0 ? c : c - 4294967296;
      }
      return c;
    }, "rgbaColor");
    __name(RGBtoHSV, "RGBtoHSV");
    __name(HSVtoRGB, "HSVtoRGB");
    hsvToColor = /* @__PURE__ */ __name((h, s, v, a) => {
      "worklet";
      const { r, g, b } = HSVtoRGB(h, s, v);
      return rgbaColor(r, g, b, a);
    }, "hsvToColor");
    __name(processColorInitially, "processColorInitially");
    __name(isColor, "isColor");
    __name(processColor, "processColor");
    __name(convertToRGBA, "convertToRGBA");
    __name(rgbaArrayToRGBAColor, "rgbaArrayToRGBAColor");
    __name(toLinearSpace, "toLinearSpace");
    __name(toGammaSpace, "toGammaSpace");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/animation/util.js
function initialUpdaterRun(updater) {
  IN_STYLE_UPDATER = true;
  const result = updater();
  IN_STYLE_UPDATER = false;
  return result;
}
function recognizePrefixSuffix(value) {
  "worklet";
  var _a;
  if (typeof value === "string") {
    const match = value.match(/([A-Za-z]*)(-?\d*\.?\d*)([eE][-+]?[0-9]+)?([A-Za-z%]*)/);
    if (!match) {
      throw Error("Couldn't parse animation value. Check if there isn't any typo.");
    }
    const prefix = match[1];
    const suffix = match[4];
    const number = match[2] + ((_a = match[3]) !== null && _a !== void 0 ? _a : "");
    return { prefix, suffix, strippedValue: parseFloat(number) };
  } else {
    return { strippedValue: value };
  }
}
function decorateAnimation(animation) {
  "worklet";
  if (animation.isHigherOrder) {
    return;
  }
  const baseOnStart = animation.onStart;
  const baseOnFrame = animation.onFrame;
  const animationCopy = Object.assign({}, animation);
  delete animationCopy.callback;
  const prefNumberSuffOnStart = /* @__PURE__ */ __name((animation2, value, timestamp, previousAnimation) => {
    var _a, _b, _c, _d;
    const { prefix, suffix, strippedValue } = recognizePrefixSuffix(value);
    animation2.__prefix = prefix;
    animation2.__suffix = suffix;
    animation2.strippedCurrent = strippedValue;
    const { strippedValue: strippedToValue } = recognizePrefixSuffix(animation2.toValue);
    animation2.current = strippedValue;
    animation2.startValue = strippedValue;
    animation2.toValue = strippedToValue;
    if (previousAnimation && previousAnimation !== animation2) {
      const { prefix: paPrefix, suffix: paSuffix, strippedValue: paStrippedValue } = recognizePrefixSuffix(previousAnimation.current);
      previousAnimation.current = paStrippedValue;
      previousAnimation.__prefix = paPrefix;
      previousAnimation.__suffix = paSuffix;
    }
    baseOnStart(animation2, strippedValue, timestamp, previousAnimation);
    animation2.current = ((_a = animation2.__prefix) !== null && _a !== void 0 ? _a : "") + animation2.current + ((_b = animation2.__suffix) !== null && _b !== void 0 ? _b : "");
    if (previousAnimation && previousAnimation !== animation2) {
      previousAnimation.current = ((_c = previousAnimation.__prefix) !== null && _c !== void 0 ? _c : "") + previousAnimation.current + ((_d = previousAnimation.__suffix) !== null && _d !== void 0 ? _d : "");
    }
  }, "prefNumberSuffOnStart");
  const prefNumberSuffOnFrame = /* @__PURE__ */ __name((animation2, timestamp) => {
    var _a, _b;
    animation2.current = animation2.strippedCurrent;
    const res = baseOnFrame(animation2, timestamp);
    animation2.strippedCurrent = animation2.current;
    animation2.current = ((_a = animation2.__prefix) !== null && _a !== void 0 ? _a : "") + animation2.current + ((_b = animation2.__suffix) !== null && _b !== void 0 ? _b : "");
    return res;
  }, "prefNumberSuffOnFrame");
  const tab = ["R", "G", "B", "A"];
  const colorOnStart = /* @__PURE__ */ __name((animation2, value, timestamp, previousAnimation) => {
    let RGBAValue;
    let RGBACurrent;
    let RGBAToValue;
    const res = [];
    if (isColor(value)) {
      RGBACurrent = toLinearSpace(convertToRGBA(animation2.current));
      RGBAValue = toLinearSpace(convertToRGBA(value));
      if (animation2.toValue) {
        RGBAToValue = toLinearSpace(convertToRGBA(animation2.toValue));
      }
    }
    tab.forEach((i, index3) => {
      animation2[i] = Object.assign({}, animationCopy);
      animation2[i].current = RGBACurrent[index3];
      animation2[i].toValue = RGBAToValue ? RGBAToValue[index3] : void 0;
      animation2[i].onStart(animation2[i], RGBAValue[index3], timestamp, previousAnimation ? previousAnimation[i] : void 0);
      res.push(animation2[i].current);
    });
    animation2.current = rgbaArrayToRGBAColor(toGammaSpace(res));
  }, "colorOnStart");
  const colorOnFrame = /* @__PURE__ */ __name((animation2, timestamp) => {
    const RGBACurrent = toLinearSpace(convertToRGBA(animation2.current));
    const res = [];
    let finished = true;
    tab.forEach((i, index3) => {
      animation2[i].current = RGBACurrent[index3];
      finished &= animation2[i].onFrame(animation2[i], timestamp);
      res.push(animation2[i].current);
    });
    animation2.current = rgbaArrayToRGBAColor(toGammaSpace(res));
    return finished;
  }, "colorOnFrame");
  const arrayOnStart = /* @__PURE__ */ __name((animation2, value, timestamp, previousAnimation) => {
    value.forEach((v, i) => {
      animation2[i] = Object.assign({}, animationCopy);
      animation2[i].current = v;
      animation2[i].toValue = animation2.toValue[i];
      animation2[i].onStart(animation2[i], v, timestamp, previousAnimation ? previousAnimation[i] : void 0);
    });
    animation2.current = value;
  }, "arrayOnStart");
  const arrayOnFrame = /* @__PURE__ */ __name((animation2, timestamp) => {
    let finished = true;
    animation2.current.forEach((v, i) => {
      finished &= animation2[i].onFrame(animation2[i], timestamp);
      animation2.current[i] = animation2[i].current;
    });
    return finished;
  }, "arrayOnFrame");
  animation.onStart = (animation2, value, timestamp, previousAnimation) => {
    if (isColor(value)) {
      colorOnStart(animation2, value, timestamp, previousAnimation);
      animation2.onFrame = colorOnFrame;
      return;
    } else if (Array.isArray(value)) {
      arrayOnStart(animation2, value, timestamp, previousAnimation);
      animation2.onFrame = arrayOnFrame;
      return;
    } else if (typeof value === "string") {
      prefNumberSuffOnStart(animation2, value, timestamp, previousAnimation);
      animation2.onFrame = prefNumberSuffOnFrame;
      return;
    }
    baseOnStart(animation2, value, timestamp, previousAnimation);
  };
}
function defineAnimation(starting, factory) {
  "worklet";
  if (IN_STYLE_UPDATER) {
    return starting;
  }
  const create2 = /* @__PURE__ */ __name(() => {
    "worklet";
    const animation = factory();
    decorateAnimation(animation);
    return animation;
  }, "create");
  if (_WORKLET || !NativeReanimated_default.native) {
    return create2();
  }
  return create2;
}
function cancelAnimation(sharedValue) {
  "worklet";
  sharedValue.value = sharedValue.value;
}
var IN_STYLE_UPDATER;
var init_util = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/animation/util.js"() {
    init_Colors();
    init_NativeReanimated2();
    IN_STYLE_UPDATER = false;
    __name(initialUpdaterRun, "initialUpdaterRun");
    __name(recognizePrefixSuffix, "recognizePrefixSuffix");
    __name(decorateAnimation, "decorateAnimation");
    __name(defineAnimation, "defineAnimation");
    __name(cancelAnimation, "cancelAnimation");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedStartClock.js
function createAnimatedStartClock(clock) {
  return new AnimatedStartClock(clock);
}
var import_invariant14, AnimatedStartClock;
var init_AnimatedStartClock = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedStartClock.js"() {
    init_AnimatedNode();
    init_AnimatedClock();
    init_AnimatedParam();
    import_invariant14 = __toESM(require_invariant());
    AnimatedStartClock = class extends AnimatedNode {
      _clockNode;
      constructor(clockNode) {
        (0, import_invariant14.default)(
          clockNode instanceof AnimatedClock || clockNode instanceof AnimatedParam,
          `Reanimated: Animated.startClock argument should be of type AnimatedClock but got ${clockNode}`
        );
        super({ type: "clockStart", clock: clockNode });
        this._clockNode = clockNode;
      }
      toString() {
        return `AnimatedStartClock, id: ${this.__nodeID}`;
      }
      __onEvaluate() {
        this._clockNode.start();
        return 0;
      }
    };
    __name(AnimatedStartClock, "AnimatedStartClock");
    __name(createAnimatedStartClock, "createAnimatedStartClock");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedStopClock.js
function createAnimatedStopClock(clock) {
  return new AnimatedStopClock(clock);
}
var import_invariant15, AnimatedStopClock;
var init_AnimatedStopClock = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedStopClock.js"() {
    init_AnimatedNode();
    init_AnimatedClock();
    init_AnimatedParam();
    import_invariant15 = __toESM(require_invariant());
    AnimatedStopClock = class extends AnimatedNode {
      _clockNode;
      constructor(clockNode) {
        (0, import_invariant15.default)(
          clockNode instanceof AnimatedClock || clockNode instanceof AnimatedParam,
          `Reanimated: Animated.stopClock argument should be of type AnimatedClock but got ${clockNode}`
        );
        super({ type: "clockStop", clock: clockNode });
        this._clockNode = clockNode;
      }
      toString() {
        return `AnimatedStopClock, id: ${this.__nodeID}`;
      }
      __onEvaluate() {
        this._clockNode.stop();
        return 0;
      }
    };
    __name(AnimatedStopClock, "AnimatedStopClock");
    __name(createAnimatedStopClock, "createAnimatedStopClock");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedClockTest.js
function createAnimatedClockTest(clock) {
  return new AnimatedClockTest(clock);
}
var AnimatedClockTest;
var init_AnimatedClockTest = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedClockTest.js"() {
    init_AnimatedNode();
    AnimatedClockTest = class extends AnimatedNode {
      _clockNode;
      constructor(clockNode) {
        super({ type: "clockTest", clock: clockNode });
        this._clockNode = clockNode;
      }
      toString() {
        return `AnimatedClockTest, id: ${this.__nodeID}`;
      }
      __onEvaluate() {
        return this._clockNode.isStarted() ? 1 : 0;
      }
    };
    __name(AnimatedClockTest, "AnimatedClockTest");
    __name(createAnimatedClockTest, "createAnimatedClockTest");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedDebug.js
function createAnimatedDebug(message, value) {
  if (__DEV__) {
    const runningInRemoteDebugger = typeof atob !== "undefined";
    const runningInExpoShell = import_react_native15.NativeModules.NativeUnimoduleProxy?.modulesConstants?.ExponentConstants?.executionEnvironment === "storeClient";
    if (runningInRemoteDebugger || runningInExpoShell) {
      return createAnimatedBlock([
        createAnimatedCall([value], ([a]) => console.log(`${message} ${a}`)),
        value
      ]);
    } else {
      return new AnimatedDebug(message, adapt(value));
    }
  }
  return value;
}
var import_invariant16, import_react_native15, AnimatedDebug;
var init_AnimatedDebug = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedDebug.js"() {
    import_invariant16 = __toESM(require_invariant());
    import_react_native15 = require("react-native-web-lite");
    init_val();
    init_AnimatedBlock();
    init_AnimatedCall();
    init_AnimatedNode();
    AnimatedDebug = class extends AnimatedNode {
      _message;
      _value;
      constructor(message, value) {
        (0, import_invariant16.default)(
          typeof message === "string",
          `Reanimated: Animated.debug node first argument should be of type string but got ${message}`
        );
        (0, import_invariant16.default)(
          value instanceof AnimatedNode,
          `Reanimated: Animated.debug node second argument should be of type AnimatedNode but got ${value}`
        );
        super({ type: "debug", message, value }, [value]);
        this._message = message;
        this._value = value;
      }
      toString() {
        return `AnimatedDebug, id: ${this.__nodeID}`;
      }
      __onEvaluate() {
        const value = val(this._value);
        console.log(this._message, value);
        return value;
      }
    };
    __name(AnimatedDebug, "AnimatedDebug");
    __name(createAnimatedDebug, "createAnimatedDebug");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedConcat.js
function createAnimatedConcat(...args) {
  return new AnimatedConcat(args.map(adapt));
}
var import_invariant17, AnimatedConcat;
var init_AnimatedConcat = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedConcat.js"() {
    import_invariant17 = __toESM(require_invariant());
    init_AnimatedBlock();
    init_AnimatedNode();
    init_val();
    AnimatedConcat = class extends AnimatedNode {
      constructor(input) {
        (0, import_invariant17.default)(
          input.every(
            (el) => el instanceof AnimatedNode || typeof el === "number" || typeof el === "string"
          ),
          `Reanimated: Animated.concat node arguments should be of type AnimatedNode or String or Number. One or more of them are not of that type. Node: ${input}`
        );
        super({ type: "concat", input }, input);
        this._input = input;
      }
      __onEvaluate() {
        return this._input.reduce((prev, current) => prev + val(current), "");
      }
      toString() {
        return `AnimatedConcat, id: ${this.__nodeID}`;
      }
    };
    __name(AnimatedConcat, "AnimatedConcat");
    __name(createAnimatedConcat, "createAnimatedConcat");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/base.js
var init_base = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/base.js"() {
    init_AnimatedCond();
    init_AnimatedSet();
    init_AnimatedStartClock();
    init_AnimatedStopClock();
    init_AnimatedClockTest();
    init_AnimatedDebug();
    init_AnimatedCall();
    init_AnimatedEvent();
    init_AnimatedAlways();
    init_AnimatedConcat();
    init_AnimatedBlock();
    init_AnimatedFunction();
    init_operators();
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedBezier.js
function A(aA1, aA2) {
  return 1 - 3 * aA2 + 3 * aA1;
}
function B(aA1, aA2) {
  return 3 * aA2 - 6 * aA1;
}
function C(aA1) {
  return 3 * aA1;
}
function calcBezier(aT, aA1, aA2) {
  return ((A(aA1, aA2) * aT + B(aA1, aA2)) * aT + C(aA1)) * aT;
}
function getSlope(aT, aA1, aA2) {
  return 3 * A(aA1, aA2) * aT * aT + 2 * B(aA1, aA2) * aT + C(aA1);
}
function binarySubdivide(aX, aA, aB, mX1, mX2) {
  var currentX = 0;
  var currentT = 0;
  var i = 0;
  do {
    currentT = aA + (aB - aA) / 2;
    currentX = calcBezier(currentT, mX1, mX2) - aX;
    if (currentX > 0) {
      aB = currentT;
    } else {
      aA = currentT;
    }
  } while (Math.abs(currentX) > SUBDIVISION_PRECISION && ++i < SUBDIVISION_MAX_ITERATIONS);
  return currentT;
}
function newtonRaphsonIterate(aX, aGuessT, mX1, mX2) {
  for (var i = 0; i < NEWTON_ITERATIONS; ++i) {
    var currentSlope = getSlope(aGuessT, mX1, mX2);
    if (currentSlope === 0) {
      return aGuessT;
    }
    var currentX = calcBezier(aGuessT, mX1, mX2) - aX;
    aGuessT -= currentX / currentSlope;
  }
  return aGuessT;
}
function bezier(mX1, mY1, mX2, mY2) {
  var sampleValues = float32ArraySupported ? new Float32Array(kSplineTableSize) : new Array(kSplineTableSize);
  if (mX1 !== mY1 || mX2 !== mY2) {
    for (var i = 0; i < kSplineTableSize; ++i) {
      sampleValues[i] = calcBezier(i * kSampleStepSize, mX1, mX2);
    }
  }
  function getTForX(aX) {
    var intervalStart = 0;
    var currentSample = 1;
    var lastSample = kSplineTableSize - 1;
    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize;
    }
    --currentSample;
    var dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    var guessForT = intervalStart + dist * kSampleStepSize;
    var initialSlope = getSlope(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE) {
      return newtonRaphsonIterate(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0) {
      return guessForT;
    } else {
      return binarySubdivide(
        aX,
        intervalStart,
        intervalStart + kSampleStepSize,
        mX1,
        mX2
      );
    }
  }
  __name(getTForX, "getTForX");
  return /* @__PURE__ */ __name(function BezierEasing(x) {
    if (mX1 === mY1 && mX2 === mY2) {
      return x;
    }
    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier(getTForX(x), mY1, mY2);
  }, "BezierEasing");
}
var import_invariant18, NEWTON_ITERATIONS, NEWTON_MIN_SLOPE, SUBDIVISION_PRECISION, SUBDIVISION_MAX_ITERATIONS, kSplineTableSize, kSampleStepSize, float32ArraySupported, AnimatedBezier;
var init_AnimatedBezier = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedBezier.js"() {
    init_val();
    init_AnimatedNode();
    import_invariant18 = __toESM(require_invariant());
    NEWTON_ITERATIONS = 4;
    NEWTON_MIN_SLOPE = 1e-3;
    SUBDIVISION_PRECISION = 1e-7;
    SUBDIVISION_MAX_ITERATIONS = 10;
    kSplineTableSize = 11;
    kSampleStepSize = 1 / (kSplineTableSize - 1);
    float32ArraySupported = typeof Float32Array === "function";
    __name(A, "A");
    __name(B, "B");
    __name(C, "C");
    __name(calcBezier, "calcBezier");
    __name(getSlope, "getSlope");
    __name(binarySubdivide, "binarySubdivide");
    __name(newtonRaphsonIterate, "newtonRaphsonIterate");
    __name(bezier, "bezier");
    AnimatedBezier = class extends AnimatedNode {
      _value;
      _bezier;
      constructor(value, mX1, mY1, mX2, mY2) {
        (0, import_invariant18.default)(
          value instanceof AnimatedNode,
          `Reanimated: Bezier node argument should be of type AnimatedNode but got ${value}`
        );
        super({ type: "bezier", mX1, mY1, mX2, mY2, input: value }, [value]);
        this._value = value;
        this._bezier = bezier(mX1, mY1, mX2, mY2);
      }
      toString() {
        return `AnimatedBezier, id: ${this.__nodeID}`;
      }
      __onEvaluate() {
        return this._bezier(val(this._value));
      }
    };
    __name(AnimatedBezier, "AnimatedBezier");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/Easing.js
var Easing;
var init_Easing = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/Easing.js"() {
    init_base();
    init_AnimatedBezier();
    Easing = class {
      /**
       * A linear function, `f(t) = t`. Position correlates to elapsed time one to
       * one.
       *
       * http://cubic-bezier.com/#0,0,1,1
       */
      static linear(t) {
        return t;
      }
      /**
       * A simple inertial interaction, similar to an object slowly accelerating to
       * speed.
       *
       * http://cubic-bezier.com/#.42,0,1,1
       */
      static ease(t) {
        return new AnimatedBezier(t, 0.42, 0, 1, 1);
      }
      /**
       * A quadratic function, `f(t) = t * t`. Position equals the square of elapsed
       * time.
       *
       * http://easings.net/#easeInQuad
       */
      static quad(t) {
        return multiply(t, t);
      }
      /**
       * A cubic function, `f(t) = t * t * t`. Position equals the cube of elapsed
       * time.
       *
       * http://easings.net/#easeInCubic
       */
      static cubic(t) {
        return multiply(t, t, t);
      }
      /**
       * A power function. Position is equal to the Nth power of elapsed time.
       *
       * n = 4: http://easings.net/#easeInQuart
       * n = 5: http://easings.net/#easeInQuint
       */
      static poly(n) {
        return (t) => pow(t, n);
      }
      /**
       * A sinusoidal function.
       *
       * http://easings.net/#easeInSine
       */
      static sin(t) {
        return sub(1, cos(multiply(t, Math.PI, 0.5)));
      }
      /**
       * A circular function.
       *
       * http://easings.net/#easeInCirc
       */
      static circle(t) {
        return sub(1, sqrt(sub(1, multiply(t, t))));
      }
      /**
       * An exponential function.
       *
       * http://easings.net/#easeInExpo
       */
      static exp(t) {
        return pow(2, multiply(10, sub(t, 1)));
      }
      /**
       * A simple elastic interaction, similar to a spring oscillating back and
       * forth.
       *
       * Default bounciness is 1, which overshoots a little bit once. 0 bounciness
       * doesn't overshoot at all, and bounciness of N > 1 will overshoot about N
       * times.
       *
       * http://easings.net/#easeInElastic
       */
      static elastic(bounciness = 1) {
        const p = bounciness * Math.PI;
        return (t) => sub(
          1,
          multiply(pow(cos(multiply(t, Math.PI, 0.5)), 3), cos(multiply(t, p)))
        );
      }
      /**
       * Use with `Animated.parallel()` to create a simple effect where the object
       * animates back slightly as the animation starts.
       *
       * Wolfram Plot:
       *
       * - http://tiny.cc/back_default (s = 1.70158, default)
       */
      static back(s) {
        if (s === void 0) {
          s = 1.70158;
        }
        return (t) => multiply(t, t, sub(multiply(add(s, 1), t), s));
      }
      /**
       * Provides a simple bouncing effect.
       *
       * http://easings.net/#easeInBounce
       */
      static bounce(t) {
        const sq = /* @__PURE__ */ __name((v) => multiply(7.5625, v, v), "sq");
        return createAnimatedCond(
          lessThan(t, 1 / 2.75),
          sq(t),
          createAnimatedCond(
            lessThan(t, 2 / 2.75),
            add(0.75, sq(sub(t, 1.5 / 2.75))),
            createAnimatedCond(
              lessThan(t, 2.5 / 2.76),
              add(0.9375, sq(sub(t, 2.25 / 2.75))),
              add(0.984375, sq(sub(t, 2.625 / 2.75)))
            )
          )
        );
      }
      /**
       * Provides a cubic bezier curve, equivalent to CSS Transitions'
       * `transition-timing-function`.
       *
       * A useful tool to visualize cubic bezier curves can be found at
       * http://cubic-bezier.com/
       */
      static bezier(x1, y1, x2, y2) {
        return (t) => new AnimatedBezier(t, x1, y1, x2, y2);
      }
      /**
       * Runs an easing function forwards.
       */
      static in(easing) {
        return easing;
      }
      /**
       * Runs an easing function backwards.
       */
      static out(easing) {
        return (t) => sub(1, easing(sub(1, t)));
      }
      /**
       * Makes any easing function symmetrical. The easing function will run
       * forwards for half of the duration, then backwards for the rest of the
       * duration.
       */
      static inOut(easing) {
        return (t) => createAnimatedCond(
          lessThan(t, 0.5),
          divide(easing(multiply(t, 2)), 2),
          sub(1, divide(easing(multiply(sub(1, t), 2)), 2))
        );
      }
    };
    __name(Easing, "Easing");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/Bezier.js
function Bezier(mX1, mY1, mX2, mY2) {
  "worklet";
  const NEWTON_ITERATIONS2 = 4;
  const NEWTON_MIN_SLOPE2 = 1e-3;
  const SUBDIVISION_PRECISION2 = 1e-7;
  const SUBDIVISION_MAX_ITERATIONS2 = 10;
  const kSplineTableSize2 = 11;
  const kSampleStepSize2 = 1 / (kSplineTableSize2 - 1);
  function A2(aA1, aA2) {
    "worklet";
    return 1 - 3 * aA2 + 3 * aA1;
  }
  __name(A2, "A");
  function B2(aA1, aA2) {
    "worklet";
    return 3 * aA2 - 6 * aA1;
  }
  __name(B2, "B");
  function C2(aA1) {
    "worklet";
    return 3 * aA1;
  }
  __name(C2, "C");
  function calcBezier2(aT, aA1, aA2) {
    "worklet";
    return ((A2(aA1, aA2) * aT + B2(aA1, aA2)) * aT + C2(aA1)) * aT;
  }
  __name(calcBezier2, "calcBezier");
  function getSlope2(aT, aA1, aA2) {
    "worklet";
    return 3 * A2(aA1, aA2) * aT * aT + 2 * B2(aA1, aA2) * aT + C2(aA1);
  }
  __name(getSlope2, "getSlope");
  function binarySubdivide2(aX, aA, aB, mX12, mX22) {
    "worklet";
    let currentX;
    let currentT;
    let i = 0;
    do {
      currentT = aA + (aB - aA) / 2;
      currentX = calcBezier2(currentT, mX12, mX22) - aX;
      if (currentX > 0) {
        aB = currentT;
      } else {
        aA = currentT;
      }
    } while (Math.abs(currentX) > SUBDIVISION_PRECISION2 && ++i < SUBDIVISION_MAX_ITERATIONS2);
    return currentT;
  }
  __name(binarySubdivide2, "binarySubdivide");
  function newtonRaphsonIterate2(aX, aGuessT, mX12, mX22) {
    "worklet";
    for (let i = 0; i < NEWTON_ITERATIONS2; ++i) {
      const currentSlope = getSlope2(aGuessT, mX12, mX22);
      if (currentSlope === 0) {
        return aGuessT;
      }
      const currentX = calcBezier2(aGuessT, mX12, mX22) - aX;
      aGuessT -= currentX / currentSlope;
    }
    return aGuessT;
  }
  __name(newtonRaphsonIterate2, "newtonRaphsonIterate");
  function LinearEasing(x) {
    "worklet";
    return x;
  }
  __name(LinearEasing, "LinearEasing");
  if (!(mX1 >= 0 && mX1 <= 1 && mX2 >= 0 && mX2 <= 1)) {
    throw new Error("bezier x values must be in [0, 1] range");
  }
  if (mX1 === mY1 && mX2 === mY2) {
    return LinearEasing;
  }
  const sampleValues = new Array(kSplineTableSize2);
  for (let i = 0; i < kSplineTableSize2; ++i) {
    sampleValues[i] = calcBezier2(i * kSampleStepSize2, mX1, mX2);
  }
  function getTForX(aX) {
    "worklet";
    let intervalStart = 0;
    let currentSample = 1;
    const lastSample = kSplineTableSize2 - 1;
    for (; currentSample !== lastSample && sampleValues[currentSample] <= aX; ++currentSample) {
      intervalStart += kSampleStepSize2;
    }
    --currentSample;
    const dist = (aX - sampleValues[currentSample]) / (sampleValues[currentSample + 1] - sampleValues[currentSample]);
    const guessForT = intervalStart + dist * kSampleStepSize2;
    const initialSlope = getSlope2(guessForT, mX1, mX2);
    if (initialSlope >= NEWTON_MIN_SLOPE2) {
      return newtonRaphsonIterate2(aX, guessForT, mX1, mX2);
    } else if (initialSlope === 0) {
      return guessForT;
    } else {
      return binarySubdivide2(aX, intervalStart, intervalStart + kSampleStepSize2, mX1, mX2);
    }
  }
  __name(getTForX, "getTForX");
  return /* @__PURE__ */ __name(function BezierEasing(x) {
    "worklet";
    if (mX1 === mY1 && mX2 === mY2) {
      return x;
    }
    if (x === 0) {
      return 0;
    }
    if (x === 1) {
      return 1;
    }
    return calcBezier2(getTForX(x), mY1, mY2);
  }, "BezierEasing");
}
var init_Bezier = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/Bezier.js"() {
    __name(Bezier, "Bezier");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/Easing.js
function linear(t) {
  "worklet";
  return t;
}
function ease(t) {
  "worklet";
  return Bezier(0.42, 0, 1, 1)(t);
}
function quad(t) {
  "worklet";
  return t * t;
}
function cubic(t) {
  "worklet";
  return t * t * t;
}
function poly(n) {
  "worklet";
  return (t) => {
    "worklet";
    return Math.pow(t, n);
  };
}
function sin2(t) {
  "worklet";
  return 1 - Math.cos(t * Math.PI / 2);
}
function circle(t) {
  "worklet";
  return 1 - Math.sqrt(1 - t * t);
}
function exp2(t) {
  "worklet";
  return Math.pow(2, 10 * (t - 1));
}
function elastic(bounciness = 1) {
  "worklet";
  const p = bounciness * Math.PI;
  return (t) => {
    "worklet";
    return 1 - Math.pow(Math.cos(t * Math.PI / 2), 3) * Math.cos(t * p);
  };
}
function back(s = 1.70158) {
  "worklet";
  return (t) => {
    "worklet";
    return t * t * ((s + 1) * t - s);
  };
}
function bounce(t) {
  "worklet";
  if (t < 1 / 2.75) {
    return 7.5625 * t * t;
  }
  if (t < 2 / 2.75) {
    const t22 = t - 1.5 / 2.75;
    return 7.5625 * t22 * t22 + 0.75;
  }
  if (t < 2.5 / 2.75) {
    const t22 = t - 2.25 / 2.75;
    return 7.5625 * t22 * t22 + 0.9375;
  }
  const t2 = t - 2.625 / 2.75;
  return 7.5625 * t2 * t2 + 0.984375;
}
function bezier2(x1, y1, x2, y2) {
  "worklet";
  return {
    factory: () => {
      "worklet";
      return Bezier(x1, y1, x2, y2);
    }
  };
}
function bezierFn(x1, y1, x2, y2) {
  "worklet";
  return Bezier(x1, y1, x2, y2);
}
function in_(easing) {
  "worklet";
  return easing;
}
function out(easing) {
  "worklet";
  return (t) => {
    "worklet";
    return 1 - easing(1 - t);
  };
}
function inOut(easing) {
  "worklet";
  return (t) => {
    "worklet";
    if (t < 0.5) {
      return easing(t * 2) / 2;
    }
    return 1 - easing((1 - t) * 2) / 2;
  };
}
function createChecker(worklet, workletName, prevArgs) {
  function checkIfReaOne() {
    "worklet";
    if (arguments && !_WORKLET) {
      for (let i = 0; i < arguments.length; i++) {
        const arg = arguments[i];
        if (arg && arg.__nodeID) {
          console.warn(`Easing was renamed to EasingNode in Reanimated 2. Please use EasingNode instead`);
          if (prevArgs) {
            return Easing[workletName].apply(void 0, prevArgs).apply(void 0, arguments);
          }
          return Easing[workletName].apply(void 0, arguments);
        }
      }
    }
    const res = worklet.apply(this, arguments);
    if (!_WORKLET && res && typeof res === "function" && res.__workletHash) {
      return createChecker(res, workletName, arguments);
    }
    return res;
  }
  __name(checkIfReaOne, "checkIfReaOne");
  checkIfReaOne._closure = worklet._closure;
  checkIfReaOne.asString = worklet.asString;
  checkIfReaOne.__workletHash = worklet.__workletHash;
  checkIfReaOne.__location = worklet.__location;
  return checkIfReaOne;
}
var EasingObject, Easing2;
var init_Easing2 = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/Easing.js"() {
    init_Easing();
    init_Bezier();
    __name(linear, "linear");
    __name(ease, "ease");
    __name(quad, "quad");
    __name(cubic, "cubic");
    __name(poly, "poly");
    __name(sin2, "sin");
    __name(circle, "circle");
    __name(exp2, "exp");
    __name(elastic, "elastic");
    __name(back, "back");
    __name(bounce, "bounce");
    __name(bezier2, "bezier");
    __name(bezierFn, "bezierFn");
    __name(in_, "in_");
    __name(out, "out");
    __name(inOut, "inOut");
    EasingObject = {
      linear,
      ease,
      quad,
      cubic,
      poly,
      sin: sin2,
      circle,
      exp: exp2,
      elastic,
      back,
      bounce,
      bezier: bezier2,
      bezierFn,
      in: in_,
      out,
      inOut
    };
    __name(createChecker, "createChecker");
    Object.keys(EasingObject).forEach((key) => {
      EasingObject[key] = createChecker(EasingObject[key], key);
    });
    Easing2 = EasingObject;
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/animation/timing.js
function withTiming(toValue, userConfig, callback) {
  "worklet";
  return defineAnimation(toValue, () => {
    "worklet";
    const config = {
      duration: 300,
      easing: Easing2.inOut(Easing2.quad)
    };
    if (userConfig) {
      Object.keys(userConfig).forEach((key) => config[key] = userConfig[key]);
    }
    function timing2(animation, now) {
      const { toValue: toValue2, startTime, startValue } = animation;
      const runtime = now - startTime;
      if (runtime >= config.duration) {
        animation.startTime = 0;
        animation.current = toValue2;
        return true;
      }
      const progress = animation.easing(runtime / config.duration);
      animation.current = startValue + (toValue2 - startValue) * progress;
      return false;
    }
    __name(timing2, "timing");
    function onStart(animation, value, now, previousAnimation) {
      if (previousAnimation && previousAnimation.type === "timing" && previousAnimation.toValue === toValue && previousAnimation.startTime) {
        animation.startTime = previousAnimation.startTime;
        animation.startValue = previousAnimation.startValue;
      } else {
        animation.startTime = now;
        animation.startValue = value;
      }
      animation.current = value;
      if (typeof config.easing === "object") {
        animation.easing = config.easing.factory();
      } else {
        animation.easing = config.easing;
      }
    }
    __name(onStart, "onStart");
    return {
      type: "timing",
      onFrame: timing2,
      onStart,
      progress: 0,
      toValue,
      startValue: 0,
      startTime: 0,
      easing: () => 0,
      current: toValue,
      callback
    };
  });
}
var init_timing = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/animation/timing.js"() {
    init_Easing2();
    init_util();
    __name(withTiming, "withTiming");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/UpdateProps.js
var colorProps, ColorProperties, updatePropsByPlatform, updateProps, updatePropsJestWrapper, UpdateProps_default;
var init_UpdateProps = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/UpdateProps.js"() {
    init_Colors();
    init_core();
    init_js_reanimated();
    init_PlatformChecker();
    colorProps = [
      "backgroundColor",
      "borderBottomColor",
      "borderColor",
      "borderLeftColor",
      "borderRightColor",
      "borderTopColor",
      "borderStartColor",
      "borderEndColor",
      "color",
      "shadowColor",
      "textDecorationColor",
      "tintColor",
      "textShadowColor",
      "overlayColor"
    ];
    ColorProperties = !isConfigured() ? [] : makeShareable(colorProps);
    if (shouldBeUseWeb()) {
      updatePropsByPlatform = /* @__PURE__ */ __name((_, updates, maybeViewRef) => {
        "worklet";
        if (maybeViewRef) {
          maybeViewRef.items.forEach((item, _2) => {
            _updatePropsJS(updates, item);
          });
        }
      }, "updatePropsByPlatform");
    } else {
      updatePropsByPlatform = /* @__PURE__ */ __name((viewDescriptors, updates, _) => {
        "worklet";
        for (const key in updates) {
          if (ColorProperties.indexOf(key) !== -1) {
            updates[key] = processColor(updates[key]);
          }
        }
        viewDescriptors.value.forEach((viewDescriptor) => {
          _updateProps(viewDescriptor.tag, viewDescriptor.name || "RCTView", updates);
        });
      }, "updatePropsByPlatform");
    }
    updateProps = updatePropsByPlatform;
    updatePropsJestWrapper = /* @__PURE__ */ __name((viewDescriptors, updates, maybeViewRef, animatedStyle, adapters) => {
      adapters.forEach((adapter) => {
        adapter(updates);
      });
      animatedStyle.current.value = Object.assign(Object.assign({}, animatedStyle.current.value), updates);
      updateProps(viewDescriptors, updates, maybeViewRef);
    }, "updatePropsJestWrapper");
    UpdateProps_default = updateProps;
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/animation/styleAnimation.js
function resolvePath(obj, path) {
  "worklet";
  const keys = Array.isArray(path) ? path : [path];
  return keys.reduce((acc2, current) => {
    if (Array.isArray(acc2) && typeof current === "number") {
      return acc2[current];
    } else if (typeof acc2 === "object" && current in acc2) {
      return acc2[current];
    }
    return void 0;
  }, obj);
}
function setPath(obj, path, value) {
  "worklet";
  const keys = Array.isArray(path) ? path : [path];
  let currObj = obj;
  for (let i = 0; i < keys.length - 1; i++) {
    currObj = currObj;
    if (!(keys[i] in currObj)) {
      if (typeof keys[i + 1] === "number") {
        currObj[keys[i]] = [];
      } else {
        currObj[keys[i]] = {};
      }
    }
    currObj = currObj[keys[i]];
  }
  currObj[keys[keys.length - 1]] = value;
}
function withStyleAnimation(styleAnimations) {
  "worklet";
  return defineAnimation({}, () => {
    "worklet";
    const onFrame = /* @__PURE__ */ __name((animation, now) => {
      let stillGoing = false;
      const entriesToCheck = [
        { value: animation.styleAnimations, path: [] }
      ];
      while (entriesToCheck.length > 0) {
        const currentEntry = entriesToCheck.pop();
        if (Array.isArray(currentEntry.value)) {
          for (let index3 = 0; index3 < currentEntry.value.length; index3++) {
            entriesToCheck.push({
              value: currentEntry.value[index3],
              path: currentEntry.path.concat(index3)
            });
          }
        } else if (typeof currentEntry.value === "object" && currentEntry.value.onFrame === void 0) {
          for (const key of Object.keys(currentEntry.value)) {
            entriesToCheck.push({
              value: currentEntry.value[key],
              path: currentEntry.path.concat(key)
            });
          }
        } else {
          const currentStyleAnimation = currentEntry.value;
          if (currentStyleAnimation.finished) {
            continue;
          }
          const finished = currentStyleAnimation.onFrame(currentStyleAnimation, now);
          if (finished) {
            currentStyleAnimation.finished = true;
            if (currentStyleAnimation.callback) {
              currentStyleAnimation.callback(true);
            }
          } else {
            stillGoing = true;
          }
          if (ColorProperties.includes(currentEntry.path[0])) {
            currentStyleAnimation.current = processColor(currentStyleAnimation.current);
          }
          setPath(animation.current, currentEntry.path, currentStyleAnimation.current);
        }
      }
      return !stillGoing;
    }, "onFrame");
    const onStart = /* @__PURE__ */ __name((animation, value, now, previousAnimation) => {
      const entriesToCheck = [{ value: styleAnimations, path: [] }];
      while (entriesToCheck.length > 0) {
        const currentEntry = entriesToCheck.pop();
        if (Array.isArray(currentEntry.value)) {
          for (let index3 = 0; index3 < currentEntry.value.length; index3++) {
            entriesToCheck.push({
              value: currentEntry.value[index3],
              path: currentEntry.path.concat(index3)
            });
          }
        } else if (typeof currentEntry.value === "object" && currentEntry.value.onStart === void 0) {
          for (const key of Object.keys(currentEntry.value)) {
            entriesToCheck.push({
              value: currentEntry.value[key],
              path: currentEntry.path.concat(key)
            });
          }
        } else {
          const prevAnimation = resolvePath(previousAnimation === null || previousAnimation === void 0 ? void 0 : previousAnimation.styleAnimations, currentEntry.path);
          let prevVal = resolvePath(value, currentEntry.path);
          if (prevAnimation && !prevVal) {
            prevVal = prevAnimation.current;
          }
          if (prevVal === void 0) {
            console.warn(`Initial values for animation are missing for property ${currentEntry.path.join(".")}`);
          }
          setPath(animation.current, currentEntry.path, prevVal);
          let currentAnimation;
          if (typeof currentEntry.value !== "object" || !currentEntry.value.onStart) {
            currentAnimation = withTiming(currentEntry.value, { duration: 0 });
            setPath(animation.styleAnimations, currentEntry.path, currentAnimation);
          } else {
            currentAnimation = currentEntry.value;
          }
          currentAnimation.onStart(currentAnimation, prevVal, now, prevAnimation);
        }
      }
    }, "onStart");
    const callback = /* @__PURE__ */ __name((finished) => {
      if (!finished) {
        const animationsToCheck = [
          styleAnimations
        ];
        while (animationsToCheck.length > 0) {
          const currentAnimation = animationsToCheck.pop();
          if (Array.isArray(currentAnimation)) {
            for (const element of currentAnimation) {
              animationsToCheck.push(element);
            }
          } else if (typeof currentAnimation === "object" && currentAnimation.onStart === void 0) {
            for (const value of Object.values(currentAnimation)) {
              animationsToCheck.push(value);
            }
          } else {
            const currentStyleAnimation = currentAnimation;
            if (!currentStyleAnimation.finished && currentStyleAnimation.callback) {
              currentStyleAnimation.callback(false);
            }
          }
        }
      }
    }, "callback");
    return {
      isHigherOrder: true,
      onFrame,
      onStart,
      current: {},
      styleAnimations,
      callback
    };
  });
}
var init_styleAnimation = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/animation/styleAnimation.js"() {
    init_util();
    init_timing();
    init_UpdateProps();
    init_Colors();
    __name(resolvePath, "resolvePath");
    __name(setPath, "setPath");
    __name(withStyleAnimation, "withStyleAnimation");
  }
});

// node_modules/react-native-reanimated/lib/ConfigHelper.js
function configureProps2() {
  configureProps(Object.keys(UI_THREAD_PROPS_WHITELIST), Object.keys(NATIVE_THREAD_PROPS_WHITELIST));
}
function addWhitelistedNativeProps(props) {
  const oldSize = Object.keys(NATIVE_THREAD_PROPS_WHITELIST).length;
  NATIVE_THREAD_PROPS_WHITELIST = Object.assign(Object.assign({}, NATIVE_THREAD_PROPS_WHITELIST), props);
  if (oldSize !== Object.keys(NATIVE_THREAD_PROPS_WHITELIST).length) {
    configureProps2();
  }
}
function addWhitelistedUIProps(props) {
  const oldSize = Object.keys(UI_THREAD_PROPS_WHITELIST).length;
  UI_THREAD_PROPS_WHITELIST = Object.assign(Object.assign({}, UI_THREAD_PROPS_WHITELIST), props);
  if (oldSize !== Object.keys(UI_THREAD_PROPS_WHITELIST).length) {
    configureProps2();
  }
}
function adaptViewConfig(viewConfig) {
  const viewName = viewConfig.uiViewClassName;
  const props = viewConfig.validAttributes;
  if (!PROCESSED_VIEW_NAMES.has(viewName)) {
    const propsToAdd = {};
    Object.keys(props).forEach((key) => {
      if (!(key in NATIVE_THREAD_PROPS_WHITELIST) && !(key in UI_THREAD_PROPS_WHITELIST)) {
        propsToAdd[key] = true;
      }
    });
    addWhitelistedUIProps(propsToAdd);
    PROCESSED_VIEW_NAMES.add(viewName);
  }
}
var UI_THREAD_PROPS_WHITELIST, NATIVE_THREAD_PROPS_WHITELIST, PROCESSED_VIEW_NAMES;
var init_ConfigHelper = __esm({
  "node_modules/react-native-reanimated/lib/ConfigHelper.js"() {
    init_core();
    UI_THREAD_PROPS_WHITELIST = {
      opacity: true,
      transform: true,
      /* colors */
      backgroundColor: true,
      borderRightColor: true,
      borderBottomColor: true,
      borderColor: true,
      borderEndColor: true,
      borderLeftColor: true,
      borderStartColor: true,
      borderTopColor: true,
      /* ios styles */
      shadowOpacity: true,
      shadowRadius: true,
      /* legacy android transform properties */
      scaleX: true,
      scaleY: true,
      translateX: true,
      translateY: true
    };
    NATIVE_THREAD_PROPS_WHITELIST = {
      borderBottomWidth: true,
      borderEndWidth: true,
      borderLeftWidth: true,
      borderRightWidth: true,
      borderStartWidth: true,
      borderTopWidth: true,
      borderWidth: true,
      bottom: true,
      flex: true,
      flexGrow: true,
      flexShrink: true,
      height: true,
      left: true,
      margin: true,
      marginBottom: true,
      marginEnd: true,
      marginHorizontal: true,
      marginLeft: true,
      marginRight: true,
      marginStart: true,
      marginTop: true,
      marginVertical: true,
      maxHeight: true,
      maxWidth: true,
      minHeight: true,
      minWidth: true,
      padding: true,
      paddingBottom: true,
      paddingEnd: true,
      paddingHorizontal: true,
      paddingLeft: true,
      paddingRight: true,
      paddingStart: true,
      paddingTop: true,
      paddingVertical: true,
      right: true,
      start: true,
      top: true,
      width: true,
      zIndex: true,
      borderBottomEndRadius: true,
      borderBottomLeftRadius: true,
      borderBottomRightRadius: true,
      borderBottomStartRadius: true,
      borderRadius: true,
      borderTopEndRadius: true,
      borderTopLeftRadius: true,
      borderTopRightRadius: true,
      borderTopStartRadius: true,
      elevation: true,
      fontSize: true,
      lineHeight: true,
      textShadowRadius: true,
      letterSpacing: true,
      /* strings */
      display: true,
      backfaceVisibility: true,
      overflow: true,
      resizeMode: true,
      fontStyle: true,
      fontWeight: true,
      textAlign: true,
      textDecorationLine: true,
      fontFamily: true,
      textAlignVertical: true,
      fontVariant: true,
      textDecorationStyle: true,
      textTransform: true,
      writingDirection: true,
      /* text color */
      color: true,
      tintColor: true,
      shadowColor: true,
      placeholderTextColor: true
    };
    __name(configureProps2, "configureProps");
    __name(addWhitelistedNativeProps, "addWhitelistedNativeProps");
    __name(addWhitelistedUIProps, "addWhitelistedUIProps");
    PROCESSED_VIEW_NAMES = /* @__PURE__ */ new Set();
    __name(adaptViewConfig, "adaptViewConfig");
    configureProps2();
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/platform-specific/RNRenderer.js
var import_ReactNative;
var init_RNRenderer = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/platform-specific/RNRenderer.js"() {
    import_ReactNative = __toESM(require("react-native-web-lite"));
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Default.js
var DefaultLayout, DefaultEntering, DefaultExiting;
var init_Default = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Default.js"() {
    DefaultLayout = /* @__PURE__ */ __name((values) => {
      "worklet";
      return {
        initialValues: {
          originX: values.targetOriginX,
          originY: values.targetOriginY,
          width: values.targetWidth,
          height: values.targetHeight
        },
        animations: {}
      };
    }, "DefaultLayout");
    DefaultEntering = /* @__PURE__ */ __name((values) => {
      "worklet";
      return {
        initialValues: {
          originX: values.targetOriginX,
          originY: values.targetOriginY,
          width: values.targetWidth,
          height: values.targetHeight
        },
        animations: {}
      };
    }, "DefaultEntering");
    DefaultExiting = /* @__PURE__ */ __name((values) => {
      "worklet";
      return {
        initialValues: {
          originX: values.currentOriginX,
          originY: values.currentOriginY,
          width: values.currentWidth,
          height: values.currentHeight
        },
        animations: {}
      };
    }, "DefaultExiting");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/animation/spring.js
function withSpring(toValue, userConfig, callback) {
  "worklet";
  return defineAnimation(toValue, () => {
    "worklet";
    const config = {
      damping: 10,
      mass: 1,
      stiffness: 100,
      overshootClamping: false,
      restDisplacementThreshold: 0.01,
      restSpeedThreshold: 2,
      velocity: 0
    };
    if (userConfig) {
      Object.keys(userConfig).forEach((key) => config[key] = userConfig[key]);
    }
    function spring2(animation, now) {
      const { toValue: toValue2, lastTimestamp, current, velocity } = animation;
      const deltaTime = Math.min(now - lastTimestamp, 64);
      animation.lastTimestamp = now;
      const c = config.damping;
      const m = config.mass;
      const k = config.stiffness;
      const v0 = -velocity;
      const x0 = toValue2 - current;
      const zeta = c / (2 * Math.sqrt(k * m));
      const omega0 = Math.sqrt(k / m);
      const omega1 = omega0 * Math.sqrt(1 - Math.pow(zeta, 2));
      const t = deltaTime / 1e3;
      const sin1 = Math.sin(omega1 * t);
      const cos1 = Math.cos(omega1 * t);
      const underDampedEnvelope = Math.exp(-zeta * omega0 * t);
      const underDampedFrag1 = underDampedEnvelope * (sin1 * ((v0 + zeta * omega0 * x0) / omega1) + x0 * cos1);
      const underDampedPosition = toValue2 - underDampedFrag1;
      const underDampedVelocity = zeta * omega0 * underDampedFrag1 - underDampedEnvelope * (cos1 * (v0 + zeta * omega0 * x0) - omega1 * x0 * sin1);
      const criticallyDampedEnvelope = Math.exp(-omega0 * t);
      const criticallyDampedPosition = toValue2 - criticallyDampedEnvelope * (x0 + (v0 + omega0 * x0) * t);
      const criticallyDampedVelocity = criticallyDampedEnvelope * (v0 * (t * omega0 - 1) + t * x0 * omega0 * omega0);
      const isOvershooting = /* @__PURE__ */ __name(() => {
        if (config.overshootClamping && config.stiffness !== 0) {
          return current < toValue2 ? animation.current > toValue2 : animation.current < toValue2;
        } else {
          return false;
        }
      }, "isOvershooting");
      const isVelocity = Math.abs(velocity) < config.restSpeedThreshold;
      const isDisplacement = config.stiffness === 0 || Math.abs(toValue2 - current) < config.restDisplacementThreshold;
      if (zeta < 1) {
        animation.current = underDampedPosition;
        animation.velocity = underDampedVelocity;
      } else {
        animation.current = criticallyDampedPosition;
        animation.velocity = criticallyDampedVelocity;
      }
      if (isOvershooting() || isVelocity && isDisplacement) {
        if (config.stiffness !== 0) {
          animation.velocity = 0;
          animation.current = toValue2;
        }
        animation.lastTimestamp = 0;
        return true;
      }
      return false;
    }
    __name(spring2, "spring");
    function onStart(animation, value, now, previousAnimation) {
      animation.current = value;
      if (previousAnimation) {
        animation.velocity = previousAnimation.velocity || animation.velocity || 0;
        animation.lastTimestamp = previousAnimation.lastTimestamp || now;
      } else {
        animation.lastTimestamp = now;
      }
    }
    __name(onStart, "onStart");
    return {
      onFrame: spring2,
      onStart,
      toValue,
      velocity: config.velocity || 0,
      current: toValue,
      callback,
      lastTimestamp: 0
    };
  });
}
var init_spring = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/animation/spring.js"() {
    init_util();
    __name(withSpring, "withSpring");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/animation/decay.js
function withDecay(userConfig, callback) {
  "worklet";
  return defineAnimation(0, () => {
    "worklet";
    var _a;
    const config = {
      deceleration: 0.998,
      velocityFactor: import_react_native16.Platform.OS !== "web" ? 1 : 1e3,
      velocity: 0
    };
    if (userConfig) {
      Object.keys(userConfig).forEach((key) => config[key] = userConfig[key]);
    }
    const VELOCITY_EPS2 = import_react_native16.Platform.OS !== "web" ? 1 : 1 / 20;
    const SLOPE_FACTOR = 0.1;
    function decay2(animation, now) {
      const { lastTimestamp, startTimestamp, initialVelocity, current, velocity } = animation;
      const deltaTime = Math.min(now - lastTimestamp, 64);
      const v = velocity * Math.exp(-(1 - config.deceleration) * (now - startTimestamp) * SLOPE_FACTOR);
      animation.current = current + v * config.velocityFactor * deltaTime / 1e3;
      animation.velocity = v;
      animation.lastTimestamp = now;
      if (config.clamp) {
        if (initialVelocity < 0 && animation.current <= config.clamp[0]) {
          animation.current = config.clamp[0];
          return true;
        } else if (initialVelocity > 0 && animation.current >= config.clamp[1]) {
          animation.current = config.clamp[1];
          return true;
        }
      }
      return Math.abs(v) < VELOCITY_EPS2;
    }
    __name(decay2, "decay");
    function validateConfig() {
      if (config.clamp) {
        if (!Array.isArray(config.clamp)) {
          throw Error(`config.clamp must be an array but is ${typeof config.clamp}`);
        }
        if (config.clamp.length !== 2) {
          throw Error(`clamp array must contain 2 items but is given ${config.clamp.length}`);
        }
      }
      if (config.velocityFactor <= 0) {
        throw Error(`config.velocityFactor must be greather then 0 but is ${config.velocityFactor}`);
      }
    }
    __name(validateConfig, "validateConfig");
    function onStart(animation, value, now) {
      animation.current = value;
      animation.lastTimestamp = now;
      animation.startTimestamp = now;
      animation.initialVelocity = config.velocity;
      validateConfig();
    }
    __name(onStart, "onStart");
    return {
      onFrame: decay2,
      onStart,
      callback,
      velocity: (_a = config.velocity) !== null && _a !== void 0 ? _a : 0,
      initialVelocity: 0,
      current: 0,
      lastTimestamp: 0,
      startTimestamp: 0
    };
  });
}
var import_react_native16;
var init_decay = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/animation/decay.js"() {
    init_util();
    import_react_native16 = require("react-native-web-lite");
    __name(withDecay, "withDecay");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/animation/delay.js
function withDelay(delayMs, _nextAnimation) {
  "worklet";
  return defineAnimation(_nextAnimation, () => {
    "worklet";
    const nextAnimation = typeof _nextAnimation === "function" ? _nextAnimation() : _nextAnimation;
    function delay(animation, now) {
      const { startTime, started, previousAnimation } = animation;
      if (now - startTime > delayMs) {
        if (!started) {
          nextAnimation.onStart(nextAnimation, animation.current, now, previousAnimation);
          animation.previousAnimation = null;
          animation.started = true;
        }
        const finished = nextAnimation.onFrame(nextAnimation, now);
        animation.current = nextAnimation.current;
        return finished;
      } else if (previousAnimation) {
        const finished = previousAnimation.finished || previousAnimation.onFrame(previousAnimation, now);
        animation.current = previousAnimation.current;
        if (finished) {
          animation.previousAnimation = null;
        }
      }
      return false;
    }
    __name(delay, "delay");
    function onStart(animation, value, now, previousAnimation) {
      animation.startTime = now;
      animation.started = false;
      animation.current = value;
      if (previousAnimation === animation) {
        animation.previousAnimation = previousAnimation.previousAnimation;
      } else {
        animation.previousAnimation = previousAnimation;
      }
    }
    __name(onStart, "onStart");
    const callback = /* @__PURE__ */ __name((finished) => {
      if (nextAnimation.callback) {
        nextAnimation.callback(finished);
      }
    }, "callback");
    return {
      isHigherOrder: true,
      onFrame: delay,
      onStart,
      current: nextAnimation.current,
      callback,
      previousAnimation: null,
      startTime: 0,
      started: false
    };
  });
}
var init_delay = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/animation/delay.js"() {
    init_util();
    __name(withDelay, "withDelay");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/animation/repeat.js
function withRepeat(_nextAnimation, numberOfReps = 2, reverse = false, callback) {
  "worklet";
  return defineAnimation(_nextAnimation, () => {
    "worklet";
    const nextAnimation = typeof _nextAnimation === "function" ? _nextAnimation() : _nextAnimation;
    function repeat(animation, now) {
      const finished = nextAnimation.onFrame(nextAnimation, now);
      animation.current = nextAnimation.current;
      if (finished) {
        animation.reps += 1;
        if (nextAnimation.callback) {
          nextAnimation.callback(true, animation.current);
        }
        if (numberOfReps > 0 && animation.reps >= numberOfReps) {
          return true;
        }
        const startValue = reverse ? nextAnimation.current : animation.startValue;
        if (reverse) {
          nextAnimation.toValue = animation.startValue;
          animation.startValue = startValue;
        }
        nextAnimation.onStart(nextAnimation, startValue, now, nextAnimation.previousAnimation);
        return false;
      }
      return false;
    }
    __name(repeat, "repeat");
    const repCallback = /* @__PURE__ */ __name((finished) => {
      if (callback) {
        callback(finished);
      }
      if (!finished && nextAnimation.callback) {
        nextAnimation.callback(
          false
          /* finished */
        );
      }
    }, "repCallback");
    function onStart(animation, value, now, previousAnimation) {
      animation.startValue = value;
      animation.reps = 0;
      nextAnimation.onStart(nextAnimation, value, now, previousAnimation);
    }
    __name(onStart, "onStart");
    return {
      isHigherOrder: true,
      onFrame: repeat,
      onStart,
      reps: 0,
      current: nextAnimation.current,
      callback: repCallback,
      startValue: 0
    };
  });
}
var init_repeat = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/animation/repeat.js"() {
    init_util();
    __name(withRepeat, "withRepeat");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/animation/sequence.js
function withSequence(..._animations) {
  "worklet";
  return defineAnimation(_animations[0], () => {
    "worklet";
    const animations2 = _animations.map((a) => {
      const result = typeof a === "function" ? a() : a;
      result.finished = false;
      return result;
    });
    const firstAnimation = animations2[0];
    const callback = /* @__PURE__ */ __name((finished) => {
      if (finished) {
        return;
      }
      animations2.forEach((animation) => {
        if (typeof animation.callback === "function" && !animation.finished) {
          animation.callback(finished);
        }
      });
    }, "callback");
    function sequence(animation, now) {
      const currentAnim = animations2[animation.animationIndex];
      const finished = currentAnim.onFrame(currentAnim, now);
      animation.current = currentAnim.current;
      if (finished) {
        if (currentAnim.callback) {
          currentAnim.callback(
            true
            /* finished */
          );
        }
        currentAnim.finished = true;
        animation.animationIndex += 1;
        if (animation.animationIndex < animations2.length) {
          const nextAnim = animations2[animation.animationIndex];
          nextAnim.onStart(nextAnim, currentAnim.current, now, currentAnim);
          return false;
        }
        return true;
      }
      return false;
    }
    __name(sequence, "sequence");
    function onStart(animation, value, now, previousAnimation) {
      animation.animationIndex = 0;
      if (previousAnimation === void 0) {
        previousAnimation = animations2[animations2.length - 1];
      }
      firstAnimation.onStart(firstAnimation, value, now, previousAnimation);
    }
    __name(onStart, "onStart");
    return {
      isHigherOrder: true,
      onFrame: sequence,
      onStart,
      animationIndex: 0,
      current: firstAnimation.current,
      callback
    };
  });
}
var init_sequence = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/animation/sequence.js"() {
    init_util();
    __name(withSequence, "withSequence");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/animation/index.js
var init_animation = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/animation/index.js"() {
    init_util();
    init_timing();
    init_spring();
    init_decay();
    init_delay();
    init_repeat();
    init_sequence();
    init_styleAnimation();
  }
});

// node_modules/react-native-reanimated/lib/createAnimatedComponent.js
function listener2(data) {
  const component = NODE_MAPPING2.get(data.viewTag);
  component && component._updateFromNative(data.props);
}
function dummyListener() {
}
function hasAnimatedNodes(value) {
  if (value instanceof AnimatedNode) {
    return true;
  }
  if (Array.isArray(value)) {
    return value.some((item) => hasAnimatedNodes(item));
  }
  if (value && typeof value === "object") {
    return Object.keys(value).some((key) => hasAnimatedNodes(value[key]));
  }
  return false;
}
function flattenArray(array) {
  if (!Array.isArray(array)) {
    return [array];
  }
  const resultArr = [];
  const _flattenArray = /* @__PURE__ */ __name((arr) => {
    arr.forEach((item) => {
      if (Array.isArray(item)) {
        _flattenArray(item);
      } else {
        resultArr.push(item);
      }
    });
  }, "_flattenArray");
  _flattenArray(array);
  return resultArr;
}
function onlyAnimatedStyles(styles) {
  return styles.filter((style) => style === null || style === void 0 ? void 0 : style.viewDescriptors);
}
function isSameAnimatedStyle(style1, style2) {
  return (style1 === null || style1 === void 0 ? void 0 : style1.viewsRef) === (style2 === null || style2 === void 0 ? void 0 : style2.viewsRef);
}
function createAnimatedComponent(Component, options) {
  (0, import_invariant19.default)(typeof Component !== "function" || Component.prototype && Component.prototype.isReactComponent, "`createAnimatedComponent` does not support stateless functional components; use a class component instead.");
  class AnimatedComponent extends import_react13.default.Component {
    constructor(props) {
      super(props);
      this._invokeAnimatedPropsCallbackOnMount = false;
      this._styles = null;
      this._viewTag = -1;
      this._isFirstRender = true;
      this.animatedStyle = { value: {} };
      this.initialStyle = {};
      this._component = null;
      this._animatedPropsCallback = () => {
        if (this._component == null) {
          this._invokeAnimatedPropsCallbackOnMount = true;
        } else if (typeof this._component.setNativeProps !== "function") {
          this.forceUpdate();
        } else {
          this._component.setNativeProps(this._propsAnimated.__getValue());
        }
      };
      this._setComponentRef = setAndForwardRef_default({
        getForwardedRef: () => this.props.forwardedRef,
        setLocalRef: (ref) => {
          const tag = (0, import_react_native17.findNodeHandle)(ref);
          if (!shouldBeUseWeb() && (this.props.layout || this.props.entering || this.props.exiting) && tag != null) {
            enableLayoutAnimations(true, false);
            let layout = this.props.layout ? this.props.layout : DefaultLayout;
            let entering = this.props.entering ? this.props.entering : DefaultEntering;
            let exiting = this.props.exiting ? this.props.exiting : DefaultExiting;
            if (has("build", layout)) {
              layout = layout.build();
            }
            if (has("build", entering)) {
              entering = entering.build();
            }
            if (has("build", exiting)) {
              exiting = exiting.build();
            }
            const config = {
              layout,
              entering,
              exiting,
              sv: this.sv
            };
            runOnUI(() => {
              "worklet";
              global.LayoutAnimationRepository.registerConfig(tag, config);
            })();
          }
          if (ref !== this._component) {
            this._component = ref;
          }
        }
      });
      this._attachProps(this.props);
      if (isJest()) {
        this.animatedStyle = { value: {} };
      }
      this.sv = makeMutable({});
    }
    componentWillUnmount() {
      this._detachPropUpdater();
      this._propsAnimated && this._propsAnimated.__detach();
      this._detachNativeEvents();
      this._detachStyles();
      this.sv = null;
    }
    componentDidMount() {
      if (this._invokeAnimatedPropsCallbackOnMount) {
        this._invokeAnimatedPropsCallbackOnMount = false;
        this._animatedPropsCallback();
      }
      this._propsAnimated && // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      this._propsAnimated.setNativeView(this._component);
      this._attachNativeEvents();
      this._attachPropUpdater();
      this._attachAnimatedStyles();
    }
    _getEventViewRef() {
      var _a;
      return ((_a = this._component) === null || _a === void 0 ? void 0 : _a.getScrollableNode) ? this._component.getScrollableNode() : this._component;
    }
    _attachNativeEvents() {
      const node = this._getEventViewRef();
      let viewTag = (0, import_react_native17.findNodeHandle)((options === null || options === void 0 ? void 0 : options.setNativeProps) ? this : node);
      const componentName = Component.displayName || Component.name;
      if ((componentName === null || componentName === void 0 ? void 0 : componentName.endsWith("FlashList")) && this._component) {
        viewTag = (0, import_react_native17.findNodeHandle)(this._component.getScrollableNode());
      }
      for (const key in this.props) {
        const prop = this.props[key];
        if (prop instanceof AnimatedEvent) {
          prop.attachEvent(node, key);
        } else if (has("current", prop) && prop.current instanceof WorkletEventHandler) {
          prop.current.registerForEvents(viewTag, key);
        }
      }
    }
    _detachNativeEvents() {
      const node = this._getEventViewRef();
      for (const key in this.props) {
        const prop = this.props[key];
        if (prop instanceof AnimatedEvent) {
          prop.detachEvent(node, key);
        } else if (has("current", prop) && prop.current instanceof WorkletEventHandler) {
          prop.current.unregisterFromEvents();
        }
      }
    }
    _detachStyles() {
      var _a;
      if (import_react_native17.Platform.OS === "web" && this._styles !== null) {
        for (const style of this._styles) {
          if (style === null || style === void 0 ? void 0 : style.viewsRef) {
            style.viewsRef.remove(this);
          }
        }
      } else if (this._viewTag !== -1 && this._styles !== null) {
        for (const style of this._styles) {
          style.viewDescriptors.remove(this._viewTag);
        }
        if ((_a = this.props.animatedProps) === null || _a === void 0 ? void 0 : _a.viewDescriptors) {
          this.props.animatedProps.viewDescriptors.remove(this._viewTag);
        }
      }
    }
    _reattachNativeEvents(prevProps) {
      const node = this._getEventViewRef();
      const attached = /* @__PURE__ */ new Set();
      const nextEvts = /* @__PURE__ */ new Set();
      let viewTag;
      for (const key in this.props) {
        const prop = this.props[key];
        if (prop instanceof AnimatedEvent) {
          nextEvts.add(prop.__nodeID);
        } else if (has("current", prop) && prop.current instanceof WorkletEventHandler) {
          if (viewTag === void 0) {
            viewTag = prop.current.viewTag;
          }
        }
      }
      for (const key in prevProps) {
        const prop = this.props[key];
        if (prop instanceof AnimatedEvent) {
          if (!nextEvts.has(prop.__nodeID)) {
            prop.detachEvent(node, key);
          } else {
            attached.add(prop.__nodeID);
          }
        } else if (has("current", prop) && prop.current instanceof WorkletEventHandler && prop.current.reattachNeeded) {
          prop.current.unregisterFromEvents();
        }
      }
      for (const key in this.props) {
        const prop = this.props[key];
        if (prop instanceof AnimatedEvent && !attached.has(prop.__nodeID)) {
          prop.attachEvent(node, key);
        } else if (has("current", prop) && prop.current instanceof WorkletEventHandler && prop.current.reattachNeeded) {
          prop.current.registerForEvents(viewTag, key);
          prop.current.reattachNeeded = false;
        }
      }
    }
    _attachProps(nextProps) {
      const oldPropsAnimated = this._propsAnimated;
      this._propsAnimated = createOrReusePropsNode(nextProps, this._animatedPropsCallback, oldPropsAnimated);
      if (oldPropsAnimated !== this._propsAnimated) {
        oldPropsAnimated && oldPropsAnimated.__detach();
      }
    }
    _updateFromNative(props) {
      var _a, _b;
      if (options === null || options === void 0 ? void 0 : options.setNativeProps) {
        options.setNativeProps(this._component, props);
      } else {
        (_b = (_a = this._component) === null || _a === void 0 ? void 0 : _a.setNativeProps) === null || _b === void 0 ? void 0 : _b.call(_a, props);
      }
    }
    _attachPropUpdater() {
      const viewTag = (0, import_react_native17.findNodeHandle)(this);
      NODE_MAPPING2.set(viewTag, this);
      if (NODE_MAPPING2.size === 1) {
        ReanimatedEventEmitter_default.addListener("onReanimatedPropsChange", listener2);
      }
    }
    _attachAnimatedStyles() {
      var _a, _b, _c;
      const styles = this.props.style ? onlyAnimatedStyles(flattenArray(this.props.style)) : [];
      const prevStyles = this._styles;
      this._styles = styles;
      const prevAnimatedProps = this._animatedProps;
      this._animatedProps = this.props.animatedProps;
      let viewTag;
      let viewName;
      if (import_react_native17.Platform.OS === "web") {
        viewTag = (0, import_react_native17.findNodeHandle)(this);
        viewName = null;
      } else {
        const hostInstance = import_ReactNative.default.findHostInstance_DEPRECATED(this);
        if (!hostInstance) {
          throw new Error("Cannot find host instance for this component. Maybe it renders nothing?");
        }
        viewTag = hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance._nativeTag;
        viewName = (_a = hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance.viewConfig) === null || _a === void 0 ? void 0 : _a.uiViewClassName;
        const hasReanimated2Props = ((_b = this.props.animatedProps) === null || _b === void 0 ? void 0 : _b.viewDescriptors) || styles.length;
        if (hasReanimated2Props && (hostInstance === null || hostInstance === void 0 ? void 0 : hostInstance.viewConfig)) {
          adaptViewConfig(hostInstance.viewConfig);
        }
      }
      this._viewTag = viewTag;
      if (prevStyles) {
        const hasOneSameStyle = styles.length === 1 && prevStyles.length === 1 && isSameAnimatedStyle(styles[0], prevStyles[0]);
        if (!hasOneSameStyle) {
          for (const prevStyle of prevStyles) {
            const isPresent = styles.some((style) => isSameAnimatedStyle(style, prevStyle));
            if (!isPresent) {
              prevStyle.viewDescriptors.remove(viewTag);
            }
          }
        }
      }
      styles.forEach((style) => {
        style.viewDescriptors.add({ tag: viewTag, name: viewName });
        if (isJest()) {
          this.animatedStyle.value = Object.assign(Object.assign({}, this.animatedStyle.value), style.initial.value);
          style.animatedStyle.current = this.animatedStyle;
        }
      });
      if (prevAnimatedProps && !isSameAnimatedProps(prevAnimatedProps, this.props.animatedProps)) {
        prevAnimatedProps.viewDescriptors.remove(viewTag);
      }
      if ((_c = this.props.animatedProps) === null || _c === void 0 ? void 0 : _c.viewDescriptors) {
        this.props.animatedProps.viewDescriptors.add({
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          tag: viewTag,
          // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
          name: viewName
        });
      }
    }
    _detachPropUpdater() {
      const viewTag = (0, import_react_native17.findNodeHandle)(this);
      NODE_MAPPING2.delete(viewTag);
      if (NODE_MAPPING2.size === 0) {
        ReanimatedEventEmitter_default.removeAllListeners("onReanimatedPropsChange");
      }
    }
    componentDidUpdate(prevProps) {
      this._attachProps(this.props);
      this._reattachNativeEvents(prevProps);
      this._propsAnimated && // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      this._propsAnimated.setNativeView(this._component);
      this._attachAnimatedStyles();
    }
    _filterNonAnimatedStyle(inputStyle) {
      const style = {};
      for (const key in inputStyle) {
        const value = inputStyle[key];
        if (!hasAnimatedNodes(value)) {
          style[key] = value;
        } else if (value instanceof AnimatedValue) {
          style[key] = value._startingValue;
        }
      }
      return style;
    }
    _filterNonAnimatedProps(inputProps) {
      const props = {};
      for (const key in inputProps) {
        const value = inputProps[key];
        if (key === "style") {
          const styleProp = inputProps.style;
          const styles = flattenArray(styleProp !== null && styleProp !== void 0 ? styleProp : []);
          const processedStyle = styles.map((style) => {
            if (style && style.viewDescriptors) {
              style.viewsRef.add(this);
              if (this._isFirstRender) {
                this.initialStyle = Object.assign(Object.assign({}, style.initial.value), initialUpdaterRun(style.initial.updater));
              }
              return this.initialStyle;
            } else {
              return style;
            }
          });
          props[key] = this._filterNonAnimatedStyle(import_react_native17.StyleSheet.flatten(processedStyle));
        } else if (key === "animatedProps") {
          const animatedProp = inputProps.animatedProps;
          if (animatedProp.initial !== void 0) {
            Object.keys(animatedProp.initial.value).forEach((key2) => {
              var _a, _b;
              props[key2] = (_a = animatedProp.initial) === null || _a === void 0 ? void 0 : _a.value[key2];
              (_b = animatedProp.viewsRef) === null || _b === void 0 ? void 0 : _b.add(this);
            });
          }
        } else if (value instanceof AnimatedEvent) {
          props[key] = dummyListener;
        } else if (has("current", value) && value.current instanceof WorkletEventHandler) {
          if (value.current.eventNames.length > 0) {
            value.current.eventNames.forEach((eventName) => {
              props[eventName] = has("listeners", value.current) ? value.current.listeners[eventName] : dummyListener;
            });
          } else {
            props[key] = dummyListener;
          }
        } else if (!(value instanceof AnimatedNode)) {
          if (key !== "onGestureHandlerStateChange" || !isChromeDebugger()) {
            props[key] = value;
          }
        } else if (value instanceof AnimatedValue) {
          props[key] = value._startingValue;
        }
      }
      return props;
    }
    render() {
      const props = this._filterNonAnimatedProps(this.props);
      if (isJest()) {
        props.animatedStyle = this.animatedStyle;
      }
      if (this._isFirstRender) {
        this._isFirstRender = false;
      }
      const platformProps = import_react_native17.Platform.select({
        web: {},
        default: { collapsable: false }
      });
      return /* @__PURE__ */ react(Component, { ...props, ref: this._setComponentRef, ...platformProps });
    }
  }
  __name(AnimatedComponent, "AnimatedComponent");
  AnimatedComponent.displayName = `AnimatedComponent(${Component.displayName || Component.name || "Component"})`;
  return import_react13.default.forwardRef((props, ref) => {
    return /* @__PURE__ */ react(AnimatedComponent, { ...props, ...ref === null ? null : { forwardedRef: ref } });
  });
}
var import_react13, import_react_native17, import_invariant19, NODE_MAPPING2, isSameAnimatedProps, has;
var init_createAnimatedComponent = __esm({
  "node_modules/react-native-reanimated/lib/createAnimatedComponent.js"() {
    import_react13 = __toESM(require("react"));
    import_react_native17 = require("react-native-web-lite");
    init_ReanimatedEventEmitter();
    init_AnimatedEvent();
    init_AnimatedNode();
    init_AnimatedValue();
    init_AnimatedProps();
    init_WorkletEventHandler();
    init_setAndForwardRef();
    import_invariant19 = __toESM(require_invariant());
    init_ConfigHelper();
    init_RNRenderer();
    init_core();
    init_Default();
    init_PlatformChecker();
    init_animation();
    NODE_MAPPING2 = /* @__PURE__ */ new Map();
    __name(listener2, "listener");
    __name(dummyListener, "dummyListener");
    __name(hasAnimatedNodes, "hasAnimatedNodes");
    __name(flattenArray, "flattenArray");
    __name(onlyAnimatedStyles, "onlyAnimatedStyles");
    __name(isSameAnimatedStyle, "isSameAnimatedStyle");
    isSameAnimatedProps = isSameAnimatedStyle;
    has = /* @__PURE__ */ __name((key, x) => {
      if (typeof x === "function" || typeof x === "object") {
        if (x === null || x === void 0) {
          return false;
        } else {
          return key in x;
        }
      }
      return false;
    }, "has");
    __name(createAnimatedComponent, "createAnimatedComponent");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/component/Text.js
var import_react_native18, AnimatedText, Text_default;
var init_Text = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/component/Text.js"() {
    import_react_native18 = require("react-native-web-lite");
    init_createAnimatedComponent();
    AnimatedText = createAnimatedComponent(import_react_native18.Text);
    Text_default = AnimatedText;
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/component/View.js
var import_react_native19, AnimatedView, View_default;
var init_View = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/component/View.js"() {
    import_react_native19 = require("react-native-web-lite");
    init_createAnimatedComponent();
    AnimatedView = createAnimatedComponent(import_react_native19.View);
    View_default = AnimatedView;
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/component/ScrollView.js
var import_react_native20, AnimatedScrollView, ScrollView_default;
var init_ScrollView = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/component/ScrollView.js"() {
    import_react_native20 = require("react-native-web-lite");
    init_createAnimatedComponent();
    AnimatedScrollView = createAnimatedComponent(import_react_native20.ScrollView);
    ScrollView_default = AnimatedScrollView;
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/component/Image.js
var import_react_native21, AnimatedImage, Image_default;
var init_Image = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/component/Image.js"() {
    import_react_native21 = require("react-native-web-lite");
    init_createAnimatedComponent();
    AnimatedImage = createAnimatedComponent(import_react_native21.Image);
    Image_default = AnimatedImage;
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/component/FlatList.js
var import_react14, import_react_native22, __rest2, AnimatedFlatList, createCellRenderer, ReanimatedFlatlist, FlatList_default;
var init_FlatList = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/component/FlatList.js"() {
    import_react14 = __toESM(require("react"));
    import_react_native22 = require("react-native-web-lite");
    init_View();
    init_createAnimatedComponent();
    __rest2 = function(s, e) {
      var t = {};
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
          t[p] = s[p];
      if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
          if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
            t[p[i]] = s[p[i]];
        }
      return t;
    };
    AnimatedFlatList = createAnimatedComponent(import_react_native22.FlatList);
    createCellRenderer = /* @__PURE__ */ __name((itemLayoutAnimation) => {
      const cellRenderer = /* @__PURE__ */ __name((props) => {
        return /* @__PURE__ */ react(View_default, { layout: itemLayoutAnimation, onLayout: props.onLayout }, props.children);
      }, "cellRenderer");
      return cellRenderer;
    }, "createCellRenderer");
    ReanimatedFlatlist = (0, import_react14.forwardRef)((props, ref) => {
      const { itemLayoutAnimation } = props, restProps = __rest2(props, ["itemLayoutAnimation"]);
      const cellRenderer = import_react14.default.useMemo(() => createCellRenderer(itemLayoutAnimation), []);
      return /* @__PURE__ */ react(AnimatedFlatList, { ref, ...restProps, CellRendererComponent: cellRenderer });
    });
    FlatList_default = ReanimatedFlatlist;
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/derived/useCode.js
function useCode(nodeFactory, dependencies) {
  if (!(import_react15.default.useEffect instanceof Function))
    return;
  import_react15.default.useEffect(() => {
    if (!(nodeFactory instanceof Function)) {
      console.warn(
        "useCode() first argument should be a function that returns an animation node."
      );
      const node2 = nodeFactory;
      nodeFactory = /* @__PURE__ */ __name(() => node2, "nodeFactory");
    }
    let node = nodeFactory();
    if (node) {
      if (node instanceof Array)
        node = createAnimatedBlock(node);
      const animatedAlways = createAnimatedAlways(node);
      animatedAlways.__attach();
      return () => animatedAlways.__detach();
    }
  }, dependencies);
}
var import_react15;
var init_useCode = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/derived/useCode.js"() {
    import_react15 = __toESM(require("react"));
    init_base();
    __name(useCode, "useCode");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCode.js
function assertNodesNotNull(code, children, exec) {
  if (!code) {
    const error = !children ? `Got "${typeof children}" type passed to children` : `Got "${typeof exec}" type passed to exec`;
    throw new Error(
      `<Animated.Code /> expects the 'exec' prop or children to be an animated node or a function returning an animated node. ${error}`
    );
  }
}
function Code({ exec, children, dependencies }) {
  const nodes = children || exec;
  let code = null;
  if (nodes instanceof AnimatedNode) {
    code = /* @__PURE__ */ __name(() => nodes, "code");
  } else if (typeof nodes === "function") {
    code = nodes;
  }
  assertNodesNotNull(code, children, exec);
  useCode(code, dependencies);
  return null;
}
var AnimatedCode_default;
var init_AnimatedCode = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/core/AnimatedCode.js"() {
    init_useCode();
    init_AnimatedNode();
    __name(assertNodesNotNull, "assertNodesNotNull");
    __name(Code, "Code");
    AnimatedCode_default = Code;
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/animations/decay.js
function decay(clock, state, config) {
  const lastTime = createAnimatedCond(state.time, state.time, clock);
  const deltaTime = sub(clock, lastTime);
  const kv = pow(config.deceleration, deltaTime);
  const kx = divide(
    multiply(config.deceleration, sub(1, kv)),
    sub(1, config.deceleration)
  );
  const v0 = divide(state.velocity, 1e3);
  const v = multiply(v0, kv, 1e3);
  const x = add(state.position, multiply(v0, kx));
  return createAnimatedBlock([
    createAnimatedSet(state.position, x),
    createAnimatedSet(state.velocity, v),
    createAnimatedSet(state.time, clock),
    createAnimatedCond(lessThan(abs(v), VELOCITY_EPS), createAnimatedSet(state.finished, 1))
  ]);
}
function decayAnimation(clock, { time, velocity, position, finished }, { deceleration }) {
  return procDecay(clock, time, velocity, position, finished, deceleration);
}
var VELOCITY_EPS, procDecay;
var init_decay2 = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/animations/decay.js"() {
    init_base();
    VELOCITY_EPS = 5;
    __name(decay, "decay");
    procDecay = createAnimatedFunction(
      (clock, time, velocity, position, finished, deceleration) => decay(clock, { time, velocity, position, finished }, { deceleration })
    );
    __name(decayAnimation, "decayAnimation");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/animations/timing.js
function timing(clock, state, config) {
  if (config.duration === 0) {
    return createAnimatedBlock([createAnimatedSet(state.position, config.toValue), createAnimatedSet(state.finished, 1)]);
  }
  const lastTime = createAnimatedCond(state.time, state.time, clock);
  const newFrameTime = add(state.frameTime, sub(clock, lastTime));
  const nextProgress = config.easing(divide(newFrameTime, config.duration));
  const progress = config.easing(divide(state.frameTime, config.duration));
  return internalTiming(
    clock,
    state.time,
    state.frameTime,
    state.position,
    state.finished,
    config.toValue,
    config.duration,
    nextProgress,
    progress,
    newFrameTime
  );
}
var internalTiming;
var init_timing2 = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/animations/timing.js"() {
    init_base();
    internalTiming = createAnimatedFunction(function(clock, time, frameTime, position, finished, toValue, duration, nextProgress, progress, newFrameTime) {
      const state = {
        time,
        finished,
        frameTime,
        position
      };
      const config = {
        duration,
        toValue
      };
      const distanceLeft = sub(config.toValue, state.position);
      const fullDistance = divide(distanceLeft, sub(1, progress));
      const startPosition = sub(config.toValue, fullDistance);
      const nextPosition = add(startPosition, multiply(fullDistance, nextProgress));
      return createAnimatedBlock([
        createAnimatedCond(
          greaterOrEq(newFrameTime, config.duration),
          [createAnimatedSet(state.position, config.toValue), createAnimatedSet(state.finished, 1)],
          createAnimatedSet(state.position, nextPosition)
        ),
        createAnimatedSet(state.frameTime, newFrameTime),
        createAnimatedSet(state.time, clock)
      ]);
    });
    __name(timing, "timing");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/animations/spring.js
function spring(clock, state, config) {
  const lastTime = createAnimatedCond(state.time, state.time, clock);
  const deltaTime = min2(sub(clock, lastTime), MAX_STEPS_MS);
  const c = config.damping;
  const m = config.mass;
  const k = config.stiffness;
  const v0 = multiply(-1, state.velocity);
  const x0 = sub(config.toValue, state.position);
  const zeta = divide(c, multiply(2, sqrt(multiply(k, m))));
  const omega0 = sqrt(divide(k, m));
  const omega1 = multiply(omega0, sqrt(sub(1, multiply(zeta, zeta))));
  const t = divide(deltaTime, 1e3);
  const sin1 = sin(multiply(omega1, t));
  const cos1 = cos(multiply(omega1, t));
  const underDampedEnvelope = exp(multiply(-1, zeta, omega0, t));
  const underDampedFrag1 = multiply(
    underDampedEnvelope,
    add(
      multiply(sin1, divide(add(v0, multiply(zeta, omega0, x0)), omega1)),
      multiply(x0, cos1)
    )
  );
  const underDampedPosition = sub(config.toValue, underDampedFrag1);
  const underDampedVelocity = sub(
    multiply(zeta, omega0, underDampedFrag1),
    multiply(
      underDampedEnvelope,
      sub(
        multiply(cos1, add(v0, multiply(zeta, omega0, x0))),
        multiply(omega1, x0, sin1)
      )
    )
  );
  const criticallyDampedEnvelope = exp(multiply(-1, omega0, t));
  const criticallyDampedPosition = sub(
    config.toValue,
    multiply(
      criticallyDampedEnvelope,
      add(x0, multiply(add(v0, multiply(omega0, x0)), t))
    )
  );
  const criticallyDampedVelocity = multiply(
    criticallyDampedEnvelope,
    add(
      multiply(v0, sub(multiply(t, omega0), 1)),
      multiply(t, x0, omega0, omega0)
    )
  );
  const prevPosition = state.prevPosition ? state.prevPosition : new InternalAnimatedValue(0);
  const isOvershooting = createAnimatedCond(
    and(config.overshootClamping, neq(config.stiffness, 0)),
    createAnimatedCond(
      lessThan(prevPosition, config.toValue),
      greaterThan(state.position, config.toValue),
      lessThan(state.position, config.toValue)
    )
  );
  const isVelocity = lessThan(abs(state.velocity), config.restSpeedThreshold);
  const isDisplacement = or(
    eq(config.stiffness, 0),
    lessThan(
      abs(sub(config.toValue, state.position)),
      config.restDisplacementThreshold
    )
  );
  return createAnimatedBlock([
    createAnimatedSet(prevPosition, state.position),
    createAnimatedCond(
      lessThan(zeta, 1),
      [
        createAnimatedSet(state.position, underDampedPosition),
        createAnimatedSet(state.velocity, underDampedVelocity)
      ],
      [
        createAnimatedSet(state.position, criticallyDampedPosition),
        createAnimatedSet(state.velocity, criticallyDampedVelocity)
      ]
    ),
    createAnimatedSet(state.time, clock),
    createAnimatedCond(or(isOvershooting, and(isVelocity, isDisplacement)), [
      createAnimatedCond(neq(config.stiffness, 0), [
        createAnimatedSet(state.velocity, 0),
        createAnimatedSet(state.position, config.toValue)
      ]),
      createAnimatedSet(state.finished, 1)
    ])
  ]);
}
function springAnimation(clock, { finished, velocity, position, time, prevPosition }, {
  toValue,
  damping,
  mass,
  stiffness,
  overshootClamping,
  restDisplacementThreshold,
  restSpeedThreshold
}) {
  return procSpring(
    finished,
    velocity,
    position,
    time,
    prevPosition,
    toValue,
    damping,
    mass,
    stiffness,
    overshootClamping,
    restSpeedThreshold,
    restDisplacementThreshold,
    clock
  );
}
var MAX_STEPS_MS, procSpring;
var init_spring2 = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/animations/spring.js"() {
    init_base();
    init_InternalAnimatedValue();
    MAX_STEPS_MS = 64;
    __name(spring, "spring");
    procSpring = createAnimatedFunction(
      (finished, velocity, position, time, prevPosition, toValue, damping, mass, stiffness, overshootClamping, restSpeedThreshold, restDisplacementThreshold, clock) => spring(
        clock,
        {
          finished,
          velocity,
          position,
          time,
          prevPosition
        },
        {
          toValue,
          damping,
          mass,
          stiffness,
          overshootClamping,
          restDisplacementThreshold,
          restSpeedThreshold
        }
      )
    );
    __name(springAnimation, "springAnimation");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/animations/Animation.js
var Animation, Animation_default;
var init_Animation = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/animations/Animation.js"() {
    init_InternalAnimatedValue();
    Animation = class {
      static springDefaultState() {
        return {
          position: new InternalAnimatedValue(0),
          finished: new InternalAnimatedValue(0),
          velocity: new InternalAnimatedValue(0),
          time: new InternalAnimatedValue(0)
        };
      }
      static decayDefaultState() {
        return {
          position: new InternalAnimatedValue(0),
          finished: new InternalAnimatedValue(0),
          velocity: new InternalAnimatedValue(0),
          time: new InternalAnimatedValue(0)
        };
      }
      static timingDefaultState() {
        return {
          position: new InternalAnimatedValue(0),
          finished: new InternalAnimatedValue(0),
          time: new InternalAnimatedValue(0),
          frameTime: new InternalAnimatedValue(0)
        };
      }
    };
    __name(Animation, "Animation");
    Animation_default = Animation;
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/Transitioning.js
function configFromProps(type, props) {
  const config = { type };
  if ("durationMs" in props) {
    config.durationMs = props.durationMs;
  }
  if ("interpolation" in props) {
    config.interpolation = props.interpolation;
  }
  if ("type" in props) {
    config.animation = props.type;
  }
  if ("delayMs" in props) {
    config.delayMs = props.delayMs;
  }
  if ("propagation" in props) {
    config.propagation = props.propagation;
  }
  return config;
}
function wrapTransitioningContext(Comp) {
  return (props) => {
    return /* @__PURE__ */ react(TransitioningContext.Consumer, null, (context) => /* @__PURE__ */ react(Comp, { context, ...props }));
  };
}
function createTransitioningComponent(Component) {
  class Wrapped extends import_react16.default.Component {
    propTypes = Component.propTypes;
    transitions = [];
    viewRef = import_react16.default.createRef();
    componentDidMount() {
      if (this.props.animateMount) {
        this.animateNextTransition();
      }
    }
    setNativeProps(props) {
      this.viewRef.current.setNativeProps(props);
    }
    animateNextTransition() {
      const viewTag = (0, import_react_native23.findNodeHandle)(this.viewRef.current);
      ReanimatedModule_default.animateNextTransition(viewTag, {
        transitions: this.transitions
      });
    }
    render() {
      const { transition, ...rest } = this.props;
      return /* @__PURE__ */ react(import_react16.default.Fragment, null, /* @__PURE__ */ react(TransitioningContext.Provider, { value: this.transitions }, transition), /* @__PURE__ */ react(Component, { ...rest, ref: this.viewRef, collapsable: false }));
    }
  }
  __name(Wrapped, "Wrapped");
  return Wrapped;
}
var import_react16, import_react_native23, TransitioningContext, In, Change, Out, Together, Sequence, Transitioning, Transition;
var init_Transitioning = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/Transitioning.js"() {
    import_react16 = __toESM(require("react"));
    import_react_native23 = require("react-native-web-lite");
    init_ReanimatedModule();
    TransitioningContext = import_react16.default.createContext();
    __name(configFromProps, "configFromProps");
    __name(wrapTransitioningContext, "wrapTransitioningContext");
    In = class extends import_react16.default.Component {
      componentDidMount() {
        this.props.context.push(configFromProps("in", this.props));
      }
      render() {
        return this.props.children || null;
      }
    };
    __name(In, "In");
    Change = class extends import_react16.default.Component {
      componentDidMount() {
        this.props.context.push(configFromProps("change", this.props));
      }
      render() {
        return this.props.children || null;
      }
    };
    __name(Change, "Change");
    Out = class extends import_react16.default.Component {
      componentDidMount() {
        this.props.context.push(configFromProps("out", this.props));
      }
      render() {
        return this.props.children || null;
      }
    };
    __name(Out, "Out");
    Together = class extends import_react16.default.Component {
      transitions = [];
      componentDidMount() {
        const config = configFromProps("group", this.props);
        config.transitions = this.transitions;
        this.props.context.push(config);
      }
      render() {
        return /* @__PURE__ */ react(TransitioningContext.Provider, { value: this.transitions }, this.props.children);
      }
    };
    __name(Together, "Together");
    Sequence = class extends import_react16.default.Component {
      transitions = [];
      componentDidMount() {
        const config = configFromProps("group", this.props);
        config.sequence = true;
        config.transitions = this.transitions;
        this.props.context.push(config);
      }
      render() {
        return /* @__PURE__ */ react(TransitioningContext.Provider, { value: this.transitions }, this.props.children);
      }
    };
    __name(Sequence, "Sequence");
    __name(createTransitioningComponent, "createTransitioningComponent");
    Transitioning = {
      View: createTransitioningComponent(import_react_native23.View)
    };
    Transition = {
      Sequence: wrapTransitioningContext(Sequence),
      Together: wrapTransitioningContext(Together),
      In: wrapTransitioningContext(In),
      Out: wrapTransitioningContext(Out),
      Change: wrapTransitioningContext(Change)
    };
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/animations/SpringUtils.js
function stiffnessFromOrigamiValue(oValue) {
  return (oValue - 30) * 3.62 + 194;
}
function dampingFromOrigamiValue(oValue) {
  return (oValue - 8) * 3 + 25;
}
function stiffnessFromOrigamiNode(oValue) {
  return add(multiply(sub(oValue, 30), 3.62), 194);
}
function dampingFromOrigamiNode(oValue) {
  return add(multiply(sub(oValue, 8), 3), 25);
}
function makeConfigFromOrigamiTensionAndFriction(prevConfig) {
  const { tension, friction, ...rest } = prevConfig;
  return {
    ...rest,
    stiffness: typeof tension === "number" ? stiffnessFromOrigamiValue(tension) : stiffnessFromOrigamiNode(tension),
    damping: typeof friction === "number" ? dampingFromOrigamiValue(friction) : dampingFromOrigamiNode(friction)
  };
}
function makeConfigFromBouncinessAndSpeed(prevConfig) {
  const { bounciness, speed, ...rest } = prevConfig;
  if (typeof bounciness === "number" && typeof speed === "number") {
    return fromBouncinessAndSpeedNumbers(bounciness, speed, rest);
  }
  return fromBouncinessAndSpeedNodes(bounciness, speed, rest);
}
function fromBouncinessAndSpeedNodes(bounciness, speed, rest) {
  function normalize(value, startValue, endValue) {
    return divide(sub(value, startValue), sub(endValue, startValue));
  }
  __name(normalize, "normalize");
  function projectNormal(n, start, end) {
    return add(start, multiply(n, sub(end, start)));
  }
  __name(projectNormal, "projectNormal");
  function linearInterpolation(t, start, end) {
    return add(multiply(t, end), multiply(sub(1, t), start));
  }
  __name(linearInterpolation, "linearInterpolation");
  function quadraticOutInterpolation(t, start, end) {
    return linearInterpolation(sub(multiply(2, t), multiply(t, t)), start, end);
  }
  __name(quadraticOutInterpolation, "quadraticOutInterpolation");
  function b3Friction1(x) {
    return add(
      sub(multiply(7e-4, pow(x, 3)), multiply(0.031, pow(x, 2))),
      multiply(0.64, x),
      1.28
    );
  }
  __name(b3Friction1, "b3Friction1");
  function b3Friction2(x) {
    return add(
      sub(multiply(44e-6, pow(x, 3)), multiply(6e-3, pow(x, 2))),
      multiply(0.36, x),
      2
    );
  }
  __name(b3Friction2, "b3Friction2");
  function b3Friction3(x) {
    return add(
      sub(multiply(45e-8, pow(x, 3)), multiply(332e-6, pow(x, 2))),
      multiply(0.1078, x),
      5.84
    );
  }
  __name(b3Friction3, "b3Friction3");
  function b3Nobounce(tension) {
    return createAnimatedCond(
      lessOrEq(tension, 18),
      b3Friction1(tension),
      createAnimatedCond(
        and(greaterThan(tension, 18), lessOrEq(tension, 44)),
        b3Friction2(tension),
        b3Friction3(tension)
      )
    );
  }
  __name(b3Nobounce, "b3Nobounce");
  let b = normalize(divide(bounciness, 1.7), 0, 20);
  b = projectNormal(b, 0, 0.8);
  const s = normalize(divide(speed, 1.7), 0, 20);
  const bouncyTension = projectNormal(s, 0.5, 200);
  const bouncyFriction = quadraticOutInterpolation(
    b,
    b3Nobounce(bouncyTension),
    0.01
  );
  return {
    ...rest,
    stiffness: stiffnessFromOrigamiNode(bouncyTension),
    damping: dampingFromOrigamiNode(bouncyFriction)
  };
}
function fromBouncinessAndSpeedNumbers(bounciness, speed, rest) {
  function normalize(value, startValue, endValue) {
    return (value - startValue) / (endValue - startValue);
  }
  __name(normalize, "normalize");
  function projectNormal(n, start, end) {
    return start + n * (end - start);
  }
  __name(projectNormal, "projectNormal");
  function linearInterpolation(t, start, end) {
    return t * end + (1 - t) * start;
  }
  __name(linearInterpolation, "linearInterpolation");
  function quadraticOutInterpolation(t, start, end) {
    return linearInterpolation(2 * t - t * t, start, end);
  }
  __name(quadraticOutInterpolation, "quadraticOutInterpolation");
  function b3Friction1(x) {
    return 7e-4 * Math.pow(x, 3) - 0.031 * Math.pow(x, 2) + 0.64 * x + 1.28;
  }
  __name(b3Friction1, "b3Friction1");
  function b3Friction2(x) {
    return 44e-6 * Math.pow(x, 3) - 6e-3 * Math.pow(x, 2) + 0.36 * x + 2;
  }
  __name(b3Friction2, "b3Friction2");
  function b3Friction3(x) {
    return 45e-8 * Math.pow(x, 3) - 332e-6 * Math.pow(x, 2) + 0.1078 * x + 5.84;
  }
  __name(b3Friction3, "b3Friction3");
  function b3Nobounce(tension) {
    if (tension <= 18) {
      return b3Friction1(tension);
    } else if (tension > 18 && tension <= 44) {
      return b3Friction2(tension);
    } else {
      return b3Friction3(tension);
    }
  }
  __name(b3Nobounce, "b3Nobounce");
  let b = normalize(bounciness / 1.7, 0, 20);
  b = projectNormal(b, 0, 0.8);
  const s = normalize(speed / 1.7, 0, 20);
  const bouncyTension = projectNormal(s, 0.5, 200);
  const bouncyFriction = quadraticOutInterpolation(
    b,
    b3Nobounce(bouncyTension),
    0.01
  );
  return {
    ...rest,
    stiffness: stiffnessFromOrigamiValue(bouncyTension),
    damping: dampingFromOrigamiValue(bouncyFriction)
  };
}
function makeDefaultConfig() {
  return {
    stiffness: new InternalAnimatedValue(100),
    mass: new InternalAnimatedValue(1),
    damping: new InternalAnimatedValue(10),
    overshootClamping: false,
    restSpeedThreshold: 1e-3,
    restDisplacementThreshold: 1e-3,
    toValue: new InternalAnimatedValue(0)
  };
}
var SpringUtils_default;
var init_SpringUtils = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/animations/SpringUtils.js"() {
    init_base();
    init_InternalAnimatedValue();
    __name(stiffnessFromOrigamiValue, "stiffnessFromOrigamiValue");
    __name(dampingFromOrigamiValue, "dampingFromOrigamiValue");
    __name(stiffnessFromOrigamiNode, "stiffnessFromOrigamiNode");
    __name(dampingFromOrigamiNode, "dampingFromOrigamiNode");
    __name(makeConfigFromOrigamiTensionAndFriction, "makeConfigFromOrigamiTensionAndFriction");
    __name(makeConfigFromBouncinessAndSpeed, "makeConfigFromBouncinessAndSpeed");
    __name(fromBouncinessAndSpeedNodes, "fromBouncinessAndSpeedNodes");
    __name(fromBouncinessAndSpeedNumbers, "fromBouncinessAndSpeedNumbers");
    __name(makeDefaultConfig, "makeDefaultConfig");
    SpringUtils_default = {
      makeDefaultConfig,
      makeConfigFromBouncinessAndSpeed,
      makeConfigFromOrigamiTensionAndFriction
    };
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/useValue.js
function useValue(initialValue) {
  const ref = import_react17.default.useRef(null);
  if (ref.current === null) {
    ref.current = new AnimatedValue(initialValue);
  }
  return ref.current;
}
var import_react17;
var init_useValue = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/useValue.js"() {
    import_react17 = __toESM(require("react"));
    init_AnimatedValue();
    __name(useValue, "useValue");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/animations/backwardCompatibleAnimWrapper.js
function createOldAnimationObject(node, animationStateDefaults, value, config) {
  const newClock = new AnimatedClock();
  const currentState = animationStateDefaults();
  let alwaysNode;
  let isStarted = false;
  let isDone = false;
  let wasStopped = false;
  let animationCallback;
  const animation = {
    start: (currentAnimationCallback) => {
      animationCallback = currentAnimationCallback;
      if (isStarted) {
        animationCallback && animationCallback({ finished: false });
        return;
      }
      if (isDone) {
        console.warn("Animation has been finished before");
        return;
      }
      if (!value.isNativelyInitialized()) {
        return;
      }
      isStarted = true;
      evaluateOnce(
        createAnimatedSet(currentState.position, value),
        currentState.position,
        () => {
          alwaysNode = createAnimatedAlways(
            createAnimatedSet(
              value,
              createAnimatedBlock([
                createAnimatedCond(createAnimatedClockTest(newClock), 0, createAnimatedStartClock(newClock)),
                node(newClock, currentState, config),
                createAnimatedCond(currentState.finished, [
                  createAnimatedCall([], () => {
                    isStarted = false;
                    if (!wasStopped) {
                      isDone = true;
                    }
                    value.__detachAnimation(animation);
                    isDone = true;
                    if (!wasStopped) {
                      wasStopped = false;
                    }
                  }),
                  createAnimatedStopClock(newClock)
                ]),
                currentState.position
              ])
            )
          );
          value.__attachAnimation(animation);
          alwaysNode.__addChild(value);
        }
      );
    },
    __detach: () => {
      animationCallback && animationCallback({ finished: isDone });
      animationCallback = null;
      value.__initialized && alwaysNode.__removeChild(value);
    },
    stop: () => {
      if (isDone) {
        console.warn(
          "Calling stop has no effect as the animation has already completed"
        );
        return;
      }
      if (!isStarted) {
        console.warn(
          "Calling stop has no effect as the animation hasn't been started"
        );
        return;
      }
      wasStopped = true;
      evaluateOnce(createAnimatedSet(currentState.finished, 1), currentState.finished);
    },
    __stopImmediately_testOnly: (result) => {
      animation.stop();
      isDone = result;
      value.__detachAnimation(animation);
    }
  };
  return animation;
}
function backwardsCompatibleAnimWrapper(node, animationStateDefaults) {
  return (clock, state, config) => {
    if (config !== void 0) {
      return node(clock, state, config);
    }
    return createOldAnimationObject(node, animationStateDefaults, clock, state);
  };
}
var init_backwardCompatibleAnimWrapper = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/animations/backwardCompatibleAnimWrapper.js"() {
    init_base();
    init_AnimatedClock();
    init_evaluateOnce();
    __name(createOldAnimationObject, "createOldAnimationObject");
    __name(backwardsCompatibleAnimWrapper, "backwardsCompatibleAnimWrapper");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/derived/acc.js
function acc(v) {
  const acc2 = new InternalAnimatedValue(0);
  return procAcc(v, acc2);
}
var procAcc;
var init_acc = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/derived/acc.js"() {
    init_base();
    init_InternalAnimatedValue();
    procAcc = createAnimatedFunction(function(v, acc2) {
      return createAnimatedSet(acc2, add(acc2, v));
    });
    __name(acc, "acc");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/derived/color.js
function color2(r, g, b, a = 1) {
  if (import_react_native24.Platform.OS === "web") {
    return createAnimatedConcat("rgba(", r, ",", g, ",", b, ",", a, ")");
  }
  if (a instanceof AnimatedNode) {
    a = round2(multiply(a, 255));
  } else {
    a = Math.round(a * 255);
  }
  return procColor(r, g, b, a);
}
var import_react_native24, procColor;
var init_color = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/derived/color.js"() {
    import_react_native24 = require("react-native-web-lite");
    init_base();
    init_AnimatedNode();
    procColor = createAnimatedFunction(function(r, g, b, a) {
      const color3 = add(
        multiply(a, 1 << 24),
        multiply(round2(r), 1 << 16),
        multiply(round2(g), 1 << 8),
        round2(b)
      );
      if (import_react_native24.Platform.OS === "android") {
        return createAnimatedCond(
          lessThan(color3, 1 << 31 >>> 0),
          color3,
          sub(color3, Math.pow(2, 32))
        );
      }
      return color3;
    });
    __name(color2, "color");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/derived/diff.js
function diff(v) {
  const stash = new InternalAnimatedValue(0);
  const prev = new InternalAnimatedValue();
  return procDiff(v, stash, prev);
}
var procDiff;
var init_diff = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/derived/diff.js"() {
    init_base();
    init_InternalAnimatedValue();
    procDiff = createAnimatedFunction(function(v, stash, prev) {
      return createAnimatedBlock([
        createAnimatedSet(stash, createAnimatedCond(defined(prev), sub(v, prev), 0)),
        createAnimatedSet(prev, v),
        stash
      ]);
    });
    __name(diff, "diff");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/derived/diffClamp.js
function diffClamp(a, minVal, maxVal) {
  const value = new InternalAnimatedValue();
  return createAnimatedSet(
    value,
    min2(max2(add(createAnimatedCond(defined(value), value, a), diff(a)), minVal), maxVal)
  );
}
var init_diffClamp = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/derived/diffClamp.js"() {
    init_base();
    init_InternalAnimatedValue();
    init_diff();
    __name(diffClamp, "diffClamp");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/derived/interpolateColors.js
function red4(c) {
  return c >> 16 & 255;
}
function green4(c) {
  return c >> 8 & 255;
}
function blue4(c) {
  return c & 255;
}
function opacity2(c) {
  return (c >> 24 & 255) / 255;
}
function interpolateColors(animationValue, options) {
  const { inputRange, outputColorRange } = options;
  const colors = outputColorRange.map(import_react_native25.processColor);
  const r = round2(
    interpolate(animationValue, {
      inputRange,
      outputRange: colors.map(red4),
      extrapolate: Extrapolate.CLAMP
    })
  );
  const g = round2(
    interpolate(animationValue, {
      inputRange,
      outputRange: colors.map(green4),
      extrapolate: Extrapolate.CLAMP
    })
  );
  const b = round2(
    interpolate(animationValue, {
      inputRange,
      outputRange: colors.map(blue4),
      extrapolate: Extrapolate.CLAMP
    })
  );
  const a = interpolate(animationValue, {
    inputRange,
    outputRange: colors.map(opacity2),
    extrapolate: Extrapolate.CLAMP
  });
  return color2(r, g, b, a);
}
var import_react_native25;
var init_interpolateColors = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/derived/interpolateColors.js"() {
    import_react_native25 = require("react-native-web-lite");
    init_base();
    init_color();
    init_interpolate();
    __name(red4, "red");
    __name(green4, "green");
    __name(blue4, "blue");
    __name(opacity2, "opacity");
    __name(interpolateColors, "interpolateColors");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/derived/onChange.js
function onChange(value, action) {
  const prevValue = new InternalAnimatedValue();
  return procOnChange(value, action, prevValue);
}
var procOnChange;
var init_onChange = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/derived/onChange.js"() {
    init_base();
    init_InternalAnimatedValue();
    procOnChange = createAnimatedFunction(function(value, action, prevValue) {
      return createAnimatedBlock([
        createAnimatedCond(not(defined(prevValue)), createAnimatedSet(prevValue, value)),
        createAnimatedCond(neq(value, prevValue), [createAnimatedSet(prevValue, value), action])
      ]);
    });
    __name(onChange, "onChange");
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/derived/index.js
var init_derived = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/derived/index.js"() {
    init_acc();
    init_color();
    init_diff();
    init_diffClamp();
    init_interpolate();
    init_interpolateColors();
    init_onChange();
    init_useCode();
  }
});

// node_modules/react-native-reanimated/lib/reanimated1/index.js
var decayWrapper, timingWrapper, springWrapper;
var init_reanimated1 = __esm({
  "node_modules/react-native-reanimated/lib/reanimated1/index.js"() {
    init_Easing();
    init_AnimatedClock();
    init_AnimatedValue();
    init_AnimatedNode();
    init_AnimatedCode();
    init_decay2();
    init_timing2();
    init_spring2();
    init_Animation();
    init_Transitioning();
    init_SpringUtils();
    init_useValue();
    init_backwardCompatibleAnimWrapper();
    init_base();
    init_derived();
    decayWrapper = backwardsCompatibleAnimWrapper(
      decayAnimation,
      Animation_default.decayDefaultState
    );
    timingWrapper = backwardsCompatibleAnimWrapper(
      timing,
      Animation_default.timingDefaultState
    );
    springWrapper = backwardsCompatibleAnimWrapper(
      springAnimation,
      Animation_default.springDefaultState
    );
  }
});

// node_modules/react-native-reanimated/lib/Animated.js
var Animated_exports = {};
__export(Animated_exports, {
  Clock: () => AnimatedClock,
  Code: () => AnimatedCode_default,
  EasingNode: () => Easing,
  Extrapolate: () => Extrapolate,
  FlatList: () => FlatList_default,
  Image: () => Image_default,
  Node: () => AnimatedNode,
  ScrollView: () => ScrollView_default,
  SpringUtils: () => SpringUtils_default,
  Text: () => Text_default,
  Transition: () => Transition,
  Transitioning: () => Transitioning,
  Value: () => AnimatedValue,
  View: () => View_default,
  abs: () => abs,
  acc: () => acc,
  acos: () => acos,
  adapt: () => adapt,
  add: () => add,
  addWhitelistedNativeProps: () => addWhitelistedNativeProps,
  addWhitelistedUIProps: () => addWhitelistedUIProps,
  always: () => createAnimatedAlways,
  and: () => and,
  asin: () => asin,
  atan: () => atan,
  block: () => createAnimatedBlock,
  call: () => createAnimatedCall,
  ceil: () => ceil,
  clockRunning: () => createAnimatedClockTest,
  color: () => color2,
  concat: () => createAnimatedConcat,
  cond: () => createAnimatedCond,
  cos: () => cos,
  createAnimatedComponent: () => createAnimatedComponent,
  createTransitioningComponent: () => createTransitioningComponent,
  debug: () => createAnimatedDebug,
  decay: () => decayWrapper,
  defined: () => defined,
  diff: () => diff,
  diffClamp: () => diffClamp,
  divide: () => divide,
  eq: () => eq,
  event: () => createAnimatedEvent,
  exp: () => exp,
  floor: () => floor2,
  greaterOrEq: () => greaterOrEq,
  greaterThan: () => greaterThan,
  interpolateColors: () => interpolateColors,
  interpolateNode: () => interpolate,
  lessOrEq: () => lessOrEq,
  lessThan: () => lessThan,
  log: () => log,
  max: () => max2,
  min: () => min2,
  modulo: () => modulo,
  multiply: () => multiply,
  neq: () => neq,
  not: () => not,
  onChange: () => onChange,
  or: () => or,
  pow: () => pow,
  proc: () => createAnimatedFunction,
  round: () => round2,
  set: () => createAnimatedSet,
  sin: () => sin,
  spring: () => springWrapper,
  sqrt: () => sqrt,
  startClock: () => createAnimatedStartClock,
  stopClock: () => createAnimatedStopClock,
  sub: () => sub,
  tan: () => tan,
  timing: () => timingWrapper,
  useCode: () => useCode,
  useValue: () => useValue
});
var init_Animated = __esm({
  "node_modules/react-native-reanimated/lib/Animated.js"() {
    init_createAnimatedComponent();
    init_ConfigHelper();
    init_Text();
    init_View();
    init_ScrollView();
    init_Image();
    init_FlatList();
    init_reanimated1();
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/global.js
var initializeGlobalsForWeb, global_default;
var init_global = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/js-reanimated/global.js"() {
    init_PlatformChecker();
    initializeGlobalsForWeb = /* @__PURE__ */ __name(() => {
      if (shouldBeUseWeb()) {
        global._frameTimestamp = null;
        global._setGlobalConsole = (_val) => {
        };
        global._measure = () => {
          console.warn("[Reanimated] You can't use `measure` with Chrome Debugger or with web version");
          return {
            x: 0,
            y: 0,
            width: 0,
            height: 0,
            pageX: 0,
            pageY: 0
          };
        };
        global._scrollTo = () => {
          console.warn("[Reanimated] You can't use `scrollTo` with Chrome Debugger or with web version");
        };
        global._setGestureState = () => {
          console.warn("[Reanimated] You can't use `setGestureState` with Chrome Debugger or with web version");
        };
      }
      return true;
    }, "initializeGlobalsForWeb");
    global_default = initializeGlobalsForWeb();
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/hook/useSharedValue.js
function useSharedValue(init) {
  const ref = (0, import_react18.useRef)(makeMutable(init));
  if (ref.current === null) {
    ref.current = makeMutable(init);
  }
  (0, import_react18.useEffect)(() => {
    return () => {
      cancelAnimation(ref.current);
    };
  }, []);
  return ref.current;
}
var import_react18;
var init_useSharedValue = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/hook/useSharedValue.js"() {
    import_react18 = require("react");
    init_animation();
    init_core();
    __name(useSharedValue, "useSharedValue");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/hook/utils.js
function useEvent4(handler, eventNames = [], rebuild = false) {
  const initRef = (0, import_react19.useRef)(null);
  if (initRef.current === null) {
    initRef.current = new WorkletEventHandler(handler, eventNames);
  } else if (rebuild) {
    initRef.current.updateWorklet(handler);
  }
  return initRef;
}
function useHandler(handlers, dependencies) {
  const initRef = (0, import_react19.useRef)(null);
  if (initRef.current === null) {
    initRef.current = {
      context: makeRemote({}),
      savedDependencies: []
    };
  }
  (0, import_react19.useEffect)(() => {
    return () => {
      initRef.current = null;
    };
  }, []);
  const { context, savedDependencies } = initRef.current;
  dependencies = buildDependencies(dependencies, handlers);
  const doDependenciesDiffer = !areDependenciesEqual(dependencies, savedDependencies);
  initRef.current.savedDependencies = dependencies;
  const useWeb = isWeb8() || isJest();
  return { context, doDependenciesDiffer, useWeb };
}
function buildWorkletsHash(handlers) {
  return Object.values(handlers).reduce((acc2, worklet) => (
    // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
    acc2 + worklet.__workletHash.toString()
  ), "");
}
function buildDependencies(dependencies, handlers) {
  const handlersList = Object.values(handlers).filter((handler) => handler !== void 0);
  if (!dependencies) {
    dependencies = handlersList.map((handler) => {
      return {
        workletHash: handler.__workletHash,
        closure: handler._closure
      };
    });
  } else {
    dependencies.push(buildWorkletsHash(handlersList));
  }
  return dependencies;
}
function areDependenciesEqual(nextDeps, prevDeps) {
  function is(x, y) {
    return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y;
  }
  __name(is, "is");
  const objectIs = typeof Object.is === "function" ? Object.is : is;
  function areHookInputsEqual(nextDeps2, prevDeps2) {
    if (!nextDeps2 || !prevDeps2 || prevDeps2.length !== nextDeps2.length) {
      return false;
    }
    for (let i = 0; i < prevDeps2.length; ++i) {
      if (!objectIs(nextDeps2[i], prevDeps2[i])) {
        return false;
      }
    }
    return true;
  }
  __name(areHookInputsEqual, "areHookInputsEqual");
  return areHookInputsEqual(nextDeps, prevDeps);
}
function hasColorProps(updates) {
  const colorPropsSet = new Set(colorProps);
  for (const key in updates) {
    if (colorPropsSet.has(key)) {
      return true;
    }
  }
  return false;
}
function parseColors(updates) {
  "worklet";
  for (const key in updates) {
    if (colorProps.indexOf(key) !== -1) {
      const processedColor = processColor(updates[key]);
      if (processedColor !== void 0) {
        updates[key] = processedColor;
      }
    }
  }
}
function canApplyOptimalisation(upadterFn) {
  const FUNCTIONLESS_FLAG = 1;
  const STATEMENTLESS_FLAG = 2;
  const optimalization = upadterFn.__optimalization;
  return optimalization & FUNCTIONLESS_FLAG && optimalization & STATEMENTLESS_FLAG;
}
function isAnimated(prop) {
  "worklet";
  if (Array.isArray(prop)) {
    return prop.some(isAnimated);
  } else if (typeof prop === "object") {
    if (prop.onFrame !== void 0) {
      return true;
    } else {
      return Object.values(prop).some(isAnimated);
    }
  }
  return false;
}
function styleDiff(oldStyle, newStyle) {
  "worklet";
  const diff2 = {};
  for (const key in oldStyle) {
    if (newStyle[key] === void 0) {
      diff2[key] = null;
    }
  }
  for (const key in newStyle) {
    const value = newStyle[key];
    const oldValue = oldStyle[key];
    if (isAnimated(value)) {
      continue;
    }
    if (oldValue !== value) {
      diff2[key] = value;
    }
  }
  return diff2;
}
function getStyleWithoutAnimations(newStyle) {
  "worklet";
  const diff2 = {};
  for (const key in newStyle) {
    const value = newStyle[key];
    if (isAnimated(value)) {
      continue;
    }
    diff2[key] = value;
  }
  return diff2;
}
var import_react19, validateAnimatedStyles;
var init_utils = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/hook/utils.js"() {
    import_react19 = require("react");
    init_Colors();
    init_core();
    init_PlatformChecker();
    init_UpdateProps();
    init_WorkletEventHandler();
    __name(useEvent4, "useEvent");
    __name(useHandler, "useHandler");
    __name(buildWorkletsHash, "buildWorkletsHash");
    __name(buildDependencies, "buildDependencies");
    __name(areDependenciesEqual, "areDependenciesEqual");
    __name(hasColorProps, "hasColorProps");
    __name(parseColors, "parseColors");
    __name(canApplyOptimalisation, "canApplyOptimalisation");
    __name(isAnimated, "isAnimated");
    __name(styleDiff, "styleDiff");
    __name(getStyleWithoutAnimations, "getStyleWithoutAnimations");
    validateAnimatedStyles = /* @__PURE__ */ __name((styles) => {
      "worklet";
      if (typeof styles !== "object") {
        throw new Error(`useAnimatedStyle has to return an object, found ${typeof styles} instead`);
      } else if (Array.isArray(styles)) {
        throw new Error("useAnimatedStyle has to return an object and cannot return static styles combined with dynamic ones. Please do merging where a component receives props.");
      }
    }, "validateAnimatedStyles");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/ViewDescriptorsSet.js
function makeViewDescriptorsSet() {
  const ref = (0, import_react20.useRef)(null);
  if (ref.current === null) {
    const data = {
      batchToRemove: /* @__PURE__ */ new Set(),
      tags: /* @__PURE__ */ new Set(),
      waitForInsertSync: false,
      waitForRemoveSync: false,
      sharableViewDescriptors: makeMutable([]),
      items: [],
      add: (item) => {
        if (data.tags.has(item.tag)) {
          return;
        }
        data.tags.add(item.tag);
        data.items.push(item);
        if (!data.waitForInsertSync) {
          data.waitForInsertSync = true;
          scheduleUpdates2(() => {
            data.sharableViewDescriptors.value = data.items;
            data.waitForInsertSync = false;
          });
        }
      },
      remove: (viewTag) => {
        data.batchToRemove.add(viewTag);
        if (!data.waitForRemoveSync) {
          data.waitForRemoveSync = true;
          scheduleUpdates2(() => {
            const items = [];
            for (const item of data.items) {
              if (data.batchToRemove.has(item.tag)) {
                data.tags.delete(item.tag);
              } else {
                items.push(item);
              }
            }
            data.items = items;
            data.sharableViewDescriptors.value = items;
            data.batchToRemove = /* @__PURE__ */ new Set();
            data.waitForRemoveSync = false;
          });
        }
      },
      rebuildsharableViewDescriptors: (sharableViewDescriptors) => {
        data.sharableViewDescriptors = sharableViewDescriptors;
      }
    };
    ref.current = data;
  }
  return ref.current;
}
function makeViewsRefSet() {
  const ref = (0, import_react20.useRef)(null);
  if (ref.current === null) {
    const data = {
      items: /* @__PURE__ */ new Set(),
      add: (item) => {
        if (data.items.has(item))
          return;
        data.items.add(item);
      },
      remove: (item) => {
        data.items.delete(item);
      }
    };
    ref.current = data;
  }
  return ref.current;
}
var import_react20, scheduleUpdates2;
var init_ViewDescriptorsSet = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/ViewDescriptorsSet.js"() {
    import_react20 = require("react");
    init_core();
    init_PlatformChecker();
    scheduleUpdates2 = shouldBeUseWeb() ? requestAnimationFrame : setImmediate;
    __name(makeViewDescriptorsSet, "makeViewDescriptorsSet");
    __name(makeViewsRefSet, "makeViewsRefSet");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedStyle.js
function prepareAnimation(animatedProp, lastAnimation, lastValue) {
  "worklet";
  if (Array.isArray(animatedProp)) {
    animatedProp.forEach((prop, index3) => prepareAnimation(prop, lastAnimation && lastAnimation[index3], lastValue && lastValue[index3]));
  }
  if (typeof animatedProp === "object" && animatedProp.onFrame) {
    const animation = animatedProp;
    let value = animation.current;
    if (lastValue !== void 0) {
      if (typeof lastValue === "object") {
        if (lastValue.value !== void 0) {
          value = lastValue.value;
        } else if (lastValue.onFrame !== void 0) {
          if ((lastAnimation === null || lastAnimation === void 0 ? void 0 : lastAnimation.current) !== void 0) {
            value = lastAnimation.current;
          } else if ((lastValue === null || lastValue === void 0 ? void 0 : lastValue.current) !== void 0) {
            value = lastValue.current;
          }
        }
      } else {
        value = lastValue;
      }
    }
    animation.callStart = (timestamp) => {
      animation.onStart(animation, value, timestamp, lastAnimation);
    };
    animation.callStart(getTimestamp());
    animation.callStart = null;
  } else if (typeof animatedProp === "object") {
    Object.keys(animatedProp).forEach((key) => prepareAnimation(animatedProp[key], lastAnimation && lastAnimation[key], lastValue && lastValue[key]));
  }
}
function runAnimations(animation, timestamp, key, result, animationsActive) {
  "worklet";
  if (!animationsActive.value) {
    return true;
  }
  if (Array.isArray(animation)) {
    result[key] = [];
    let allFinished = true;
    animation.forEach((entry, index3) => {
      if (!runAnimations(entry, timestamp, index3, result[key], animationsActive)) {
        allFinished = false;
      }
    });
    return allFinished;
  } else if (typeof animation === "object" && animation.onFrame) {
    let finished = true;
    if (!animation.finished) {
      if (animation.callStart) {
        animation.callStart(timestamp);
        animation.callStart = null;
      }
      finished = animation.onFrame(animation, timestamp);
      animation.timestamp = timestamp;
      if (finished) {
        animation.finished = true;
        animation.callback && animation.callback(
          true
          /* finished */
        );
      }
    }
    result[key] = animation.current;
    return finished;
  } else if (typeof animation === "object") {
    result[key] = {};
    let allFinished = true;
    Object.keys(animation).forEach((k) => {
      if (!runAnimations(animation[k], timestamp, k, result[key], animationsActive)) {
        allFinished = false;
      }
    });
    return allFinished;
  } else {
    result[key] = animation;
    return true;
  }
}
function styleUpdater(viewDescriptors, updater, state, maybeViewRef, animationsActive) {
  "worklet";
  var _a, _b;
  const animations2 = (_a = state.animations) !== null && _a !== void 0 ? _a : {};
  const newValues = (_b = updater()) !== null && _b !== void 0 ? _b : {};
  const oldValues = state.last;
  let hasAnimations = false;
  for (const key in newValues) {
    const value = newValues[key];
    if (isAnimated(value)) {
      prepareAnimation(value, animations2[key], oldValues[key]);
      animations2[key] = value;
      hasAnimations = true;
    } else {
      delete animations2[key];
    }
  }
  if (hasAnimations) {
    const frame = /* @__PURE__ */ __name((timestamp) => {
      const { animations: animations3, last, isAnimationCancelled } = state;
      if (isAnimationCancelled) {
        state.isAnimationRunning = false;
        return;
      }
      const updates = {};
      let allFinished = true;
      for (const propName in animations3) {
        const finished = runAnimations(animations3[propName], timestamp, propName, updates, animationsActive);
        if (finished) {
          last[propName] = updates[propName];
          delete animations3[propName];
        } else {
          allFinished = false;
        }
      }
      if (updates) {
        UpdateProps_default(viewDescriptors, updates, maybeViewRef);
      }
      if (!allFinished) {
        requestFrame(frame);
      } else {
        state.isAnimationRunning = false;
      }
    }, "frame");
    state.animations = animations2;
    if (!state.isAnimationRunning) {
      state.isAnimationCancelled = false;
      state.isAnimationRunning = true;
      if (_frameTimestamp) {
        frame(_frameTimestamp);
      } else {
        requestFrame(frame);
      }
    }
    state.last = Object.assign({}, oldValues, newValues);
    const style = getStyleWithoutAnimations(state.last);
    if (style) {
      UpdateProps_default(viewDescriptors, style, maybeViewRef);
    }
  } else {
    state.isAnimationCancelled = true;
    state.animations = [];
    const diff2 = styleDiff(oldValues, newValues);
    state.last = Object.assign({}, oldValues, diff2);
    if (diff2) {
      UpdateProps_default(viewDescriptors, newValues, maybeViewRef);
    }
  }
}
function jestStyleUpdater(viewDescriptors, updater, state, maybeViewRef, animationsActive, animatedStyle, adapters = []) {
  "worklet";
  var _a, _b;
  const animations2 = (_a = state.animations) !== null && _a !== void 0 ? _a : {};
  const newValues = (_b = updater()) !== null && _b !== void 0 ? _b : {};
  const oldValues = state.last;
  let hasAnimations = false;
  Object.keys(animations2).forEach((key) => {
    const value = newValues[key];
    if (!isAnimated(value)) {
      delete animations2[key];
    }
  });
  Object.keys(newValues).forEach((key) => {
    const value = newValues[key];
    if (isAnimated(value)) {
      prepareAnimation(value, animations2[key], oldValues[key]);
      animations2[key] = value;
      hasAnimations = true;
    }
  });
  function frame(timestamp) {
    const { animations: animations3, last, isAnimationCancelled } = state;
    if (isAnimationCancelled) {
      state.isAnimationRunning = false;
      return;
    }
    const updates = {};
    let allFinished = true;
    Object.keys(animations3).forEach((propName) => {
      const finished = runAnimations(animations3[propName], timestamp, propName, updates, animationsActive);
      if (finished) {
        last[propName] = updates[propName];
        delete animations3[propName];
      } else {
        allFinished = false;
      }
    });
    if (Object.keys(updates).length) {
      updatePropsJestWrapper(viewDescriptors, updates, maybeViewRef, animatedStyle, adapters);
    }
    if (!allFinished) {
      requestFrame(frame);
    } else {
      state.isAnimationRunning = false;
    }
  }
  __name(frame, "frame");
  if (hasAnimations) {
    state.animations = animations2;
    if (!state.isAnimationRunning) {
      state.isAnimationCancelled = false;
      state.isAnimationRunning = true;
      if (_frameTimestamp) {
        frame(_frameTimestamp);
      } else {
        requestFrame(frame);
      }
    }
  } else {
    state.isAnimationCancelled = true;
    state.animations = [];
  }
  const diff2 = styleDiff(oldValues, newValues);
  state.last = Object.assign({}, oldValues, diff2);
  if (Object.keys(diff2).length !== 0) {
    updatePropsJestWrapper(viewDescriptors, diff2, maybeViewRef, animatedStyle, adapters);
  }
}
function checkSharedValueUsage(prop, currentKey) {
  if (Array.isArray(prop)) {
    for (const element of prop) {
      checkSharedValueUsage(element, currentKey);
    }
  } else if (typeof prop === "object" && prop.value === void 0) {
    for (const key of Object.keys(prop)) {
      checkSharedValueUsage(prop[key], key);
    }
  } else if (currentKey !== void 0 && typeof prop === "object" && prop.value !== void 0) {
    throw new Error(`invalid value passed to \`${currentKey}\`, maybe you forgot to use \`.value\`?`);
  }
}
function useAnimatedStyle(updater, dependencies, adapters) {
  var _a, _b;
  const viewsRef = makeViewsRefSet();
  const viewDescriptors = makeViewDescriptorsSet();
  const initRef = (0, import_react21.useRef)();
  const inputs = Object.values((_a = updater._closure) !== null && _a !== void 0 ? _a : {});
  const adaptersArray = adapters ? Array.isArray(adapters) ? adapters : [adapters] : [];
  const adaptersHash = adapters ? buildWorkletsHash(adaptersArray) : null;
  const animationsActive = useSharedValue(true);
  const animatedStyle = (0, import_react21.useRef)({});
  if (!dependencies) {
    dependencies = [...inputs, updater.__workletHash];
  } else {
    dependencies.push(updater.__workletHash);
  }
  adaptersHash && dependencies.push(adaptersHash);
  if (!initRef.current) {
    const initialStyle = initialUpdaterRun(updater);
    validateAnimatedStyles(initialStyle);
    initRef.current = {
      initial: {
        value: initialStyle,
        updater
      },
      remoteState: makeRemote({ last: initialStyle }),
      sharableViewDescriptors: makeMutable([])
    };
    viewDescriptors.rebuildsharableViewDescriptors(
      // eslint-disable-next-line @typescript-eslint/no-non-null-assertion
      initRef.current.sharableViewDescriptors
    );
  }
  dependencies.push((_b = initRef.current) === null || _b === void 0 ? void 0 : _b.sharableViewDescriptors.value);
  const { initial, remoteState, sharableViewDescriptors } = initRef.current;
  const maybeViewRef = NativeReanimated_default.native ? void 0 : viewsRef;
  (0, import_react21.useEffect)(() => {
    let fun;
    let updaterFn = updater;
    let optimalization = updater.__optimalization;
    if (adapters) {
      updaterFn = /* @__PURE__ */ __name(() => {
        "worklet";
        const newValues = updater();
        adaptersArray.forEach((adapter) => {
          adapter(newValues);
        });
        return newValues;
      }, "updaterFn");
    }
    if (canApplyOptimalisation(updaterFn) && !shouldBeUseWeb()) {
      if (hasColorProps(updaterFn())) {
        updaterFn = /* @__PURE__ */ __name(() => {
          "worklet";
          const newValues = updaterFn();
          const oldValues = remoteState.last;
          const diff2 = styleDiff(oldValues, newValues);
          remoteState.last = Object.assign({}, oldValues, newValues);
          parseColors(diff2);
          return diff2;
        }, "updaterFn");
      } else {
        updaterFn = /* @__PURE__ */ __name(() => {
          "worklet";
          const newValues = updaterFn();
          const oldValues = remoteState.last;
          const diff2 = styleDiff(oldValues, newValues);
          remoteState.last = Object.assign({}, oldValues, newValues);
          return diff2;
        }, "updaterFn");
      }
    } else if (!shouldBeUseWeb()) {
      optimalization = 0;
      updaterFn = /* @__PURE__ */ __name(() => {
        "worklet";
        const style = updaterFn();
        parseColors(style);
        return style;
      }, "updaterFn");
    }
    if (typeof updater.__optimalization !== void 0) {
      updaterFn.__optimalization = optimalization;
    }
    if (isJest()) {
      fun = /* @__PURE__ */ __name(() => {
        "worklet";
        jestStyleUpdater(sharableViewDescriptors, updater, remoteState, maybeViewRef, animationsActive, animatedStyle, adaptersArray);
      }, "fun");
    } else {
      fun = /* @__PURE__ */ __name(() => {
        "worklet";
        styleUpdater(sharableViewDescriptors, updaterFn, remoteState, maybeViewRef, animationsActive);
      }, "fun");
    }
    const mapperId = startMapper(
      fun,
      inputs,
      [],
      updaterFn,
      // TODO fix this
      sharableViewDescriptors
    );
    return () => {
      stopMapper(mapperId);
    };
  }, dependencies);
  (0, import_react21.useEffect)(() => {
    animationsActive.value = true;
    return () => {
      animationsActive.value = false;
    };
  }, []);
  checkSharedValueUsage(initial.value);
  if (process.env.JEST_WORKER_ID) {
    return { viewDescriptors, initial, viewsRef, animatedStyle };
  } else {
    return { viewDescriptors, initial, viewsRef };
  }
}
var import_react21;
var init_useAnimatedStyle = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedStyle.js"() {
    import_react21 = require("react");
    init_core();
    init_UpdateProps();
    init_animation();
    init_NativeReanimated2();
    init_useSharedValue();
    init_utils();
    init_ViewDescriptorsSet();
    init_PlatformChecker();
    __name(prepareAnimation, "prepareAnimation");
    __name(runAnimations, "runAnimations");
    __name(styleUpdater, "styleUpdater");
    __name(jestStyleUpdater, "jestStyleUpdater");
    __name(checkSharedValueUsage, "checkSharedValueUsage");
    __name(useAnimatedStyle, "useAnimatedStyle");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/hook/Hooks.js
function useWorkletCallback(fun, deps) {
  return (0, import_react22.useCallback)(fun, deps !== null && deps !== void 0 ? deps : []);
}
var import_react22, useAnimatedProps;
var init_Hooks = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/hook/Hooks.js"() {
    import_react22 = require("react");
    init_useAnimatedStyle();
    init_utils();
    useAnimatedProps = useAnimatedStyle;
    __name(useWorkletCallback, "useWorkletCallback");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedGestureHandler.js
function useAnimatedGestureHandler(handlers, dependencies) {
  const { context, doDependenciesDiffer, useWeb } = useHandler(handlers, dependencies);
  const handler = /* @__PURE__ */ __name((e) => {
    "worklet";
    const event = useWeb ? e.nativeEvent : e;
    if (event.state === EventType.BEGAN && handlers.onStart) {
      handlers.onStart(event, context);
    }
    if (event.state === EventType.ACTIVE && handlers.onActive) {
      handlers.onActive(event, context);
    }
    if (event.oldState === EventType.ACTIVE && event.state === EventType.END && handlers.onEnd) {
      handlers.onEnd(event, context);
    }
    if (event.oldState === EventType.BEGAN && event.state === EventType.FAILED && handlers.onFail) {
      handlers.onFail(event, context);
    }
    if (event.oldState === EventType.ACTIVE && event.state === EventType.CANCELLED && handlers.onCancel) {
      handlers.onCancel(event, context);
    }
    if ((event.oldState === EventType.BEGAN || event.oldState === EventType.ACTIVE) && event.state !== EventType.BEGAN && event.state !== EventType.ACTIVE && handlers.onFinish) {
      handlers.onFinish(event, context, event.state === EventType.CANCELLED || event.state === EventType.FAILED);
    }
  }, "handler");
  if (useWeb) {
    return handler;
  }
  return useEvent4(handler, ["onGestureHandlerStateChange", "onGestureHandlerEvent"], doDependenciesDiffer);
}
var EventType;
var init_useAnimatedGestureHandler = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedGestureHandler.js"() {
    init_Hooks();
    (function(EventType2) {
      EventType2[EventType2["UNDETERMINED"] = 0] = "UNDETERMINED";
      EventType2[EventType2["FAILED"] = 1] = "FAILED";
      EventType2[EventType2["BEGAN"] = 2] = "BEGAN";
      EventType2[EventType2["CANCELLED"] = 3] = "CANCELLED";
      EventType2[EventType2["ACTIVE"] = 4] = "ACTIVE";
      EventType2[EventType2["END"] = 5] = "END";
    })(EventType || (EventType = {}));
    __name(useAnimatedGestureHandler, "useAnimatedGestureHandler");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedReaction.js
function useAnimatedReaction(prepare, react3, dependencies) {
  var _a, _b;
  const previous = useSharedValue(null);
  if (dependencies === void 0) {
    dependencies = [
      Object.values((_a = prepare._closure) !== null && _a !== void 0 ? _a : {}),
      Object.values((_b = react3._closure) !== null && _b !== void 0 ? _b : {}),
      prepare.__workletHash,
      react3.__workletHash
    ];
  } else {
    dependencies.push(prepare.__workletHash, react3.__workletHash);
  }
  (0, import_react23.useEffect)(() => {
    var _a2;
    const fun = /* @__PURE__ */ __name(() => {
      "worklet";
      const input = prepare();
      react3(input, previous.value);
      previous.value = input;
    }, "fun");
    const mapperId = startMapper(fun, Object.values((_a2 = prepare._closure) !== null && _a2 !== void 0 ? _a2 : {}), []);
    return () => {
      stopMapper(mapperId);
    };
  }, dependencies);
}
var import_react23;
var init_useAnimatedReaction = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedReaction.js"() {
    import_react23 = require("react");
    init_core();
    init_useSharedValue();
    __name(useAnimatedReaction, "useAnimatedReaction");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js
function getTag(view) {
  return (0, import_react_native26.findNodeHandle)(view);
}
function setGestureState(handlerTag, newState) {
  "worklet";
  if (!_WORKLET || !isNative) {
    console.warn("[Reanimated] You can not use setGestureState in non-worklet function.");
    return;
  }
  _setGestureState(handlerTag, newState);
}
var import_react_native26, isNative, measure, scrollTo;
var init_NativeMethods = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/NativeMethods.js"() {
    import_react_native26 = require("react-native-web-lite");
    init_PlatformChecker();
    __name(getTag, "getTag");
    isNative = !shouldBeUseWeb();
    if (isWeb8()) {
      measure = /* @__PURE__ */ __name((animatedRef) => {
        const element = animatedRef();
        const viewportOffset = element.getBoundingClientRect();
        return {
          width: element.offsetWidth,
          height: element.offsetHeight,
          x: element.offsetLeft,
          y: element.offsetTop,
          pageX: viewportOffset.left,
          pageY: viewportOffset.top
        };
      }, "measure");
    } else if (isChromeDebugger()) {
      measure = /* @__PURE__ */ __name((_animatedRef) => {
        console.warn("[Reanimated] measure() cannot be used with Chrome Debugger.");
        return null;
      }, "measure");
    } else {
      measure = /* @__PURE__ */ __name((animatedRef) => {
        "worklet";
        if (!_WORKLET) {
          console.warn("[Reanimated] measure() was called from the main JS context. Measure is only available in the UI runtime. This may also happen if measure() was called by a worklet in the useAnimatedStyle hook, because useAnimatedStyle calls the given worklet on the JS runtime during render. If you want to prevent this warning then wrap the call with `if (_WORKLET)`. Then it will only be called on the UI runtime after the render has been completed.");
          return null;
        }
        const viewTag = animatedRef();
        if (viewTag === -1) {
          console.warn(`[Reanimated] The view with tag ${viewTag} is not a valid argument for measure(). This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);
          return null;
        }
        const measured = _measure(viewTag);
        if (measured === null) {
          console.warn(`[Reanimated] The view with tag ${viewTag} has some undefined, not-yet-computed or meaningless value of \`LayoutMetrics\` type. This may be because the view is not currently rendered, which may not be a bug (e.g. an off-screen FlatList item).`);
          return null;
        } else if (measured.x === -1234567) {
          console.warn(`[Reanimated] The view with tag ${viewTag} returned an invalid measurement response.`);
          return null;
        } else if (isNaN(measured.x)) {
          console.warn(`[Reanimated] The view with tag ${viewTag} gets view-flattened on Android. To disable view-flattening, set \`collapsable={false}\` on this component.`);
          return null;
        } else {
          return measured;
        }
      }, "measure");
    }
    if (isWeb8()) {
      scrollTo = /* @__PURE__ */ __name((animatedRef, x, y, animated) => {
        "worklet";
        const element = animatedRef();
        element.scrollTo({ x, y, animated });
      }, "scrollTo");
    } else if (isNative) {
      scrollTo = /* @__PURE__ */ __name((animatedRef, x, y, animated) => {
        "worklet";
        if (!_WORKLET) {
          return;
        }
        const viewTag = animatedRef();
        _scrollTo(viewTag, x, y, animated);
      }, "scrollTo");
    } else {
      scrollTo = /* @__PURE__ */ __name((_animatedRef, _x, _y) => {
      }, "scrollTo");
    }
    __name(setGestureState, "setGestureState");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedRef.js
function useAnimatedRef() {
  const tag = useSharedValue(-1);
  const ref = (0, import_react24.useRef)();
  if (!ref.current) {
    const fun = /* @__PURE__ */ __name((component) => {
      "worklet";
      if (component) {
        tag.value = getTag(component);
        fun.current = component;
      }
      return tag.value;
    }, "fun");
    Object.defineProperty(fun, "current", {
      value: null,
      writable: true,
      enumerable: false
    });
    ref.current = fun;
  }
  return ref.current;
}
var import_react24;
var init_useAnimatedRef = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedRef.js"() {
    import_react24 = require("react");
    init_NativeMethods();
    init_useSharedValue();
    __name(useAnimatedRef, "useAnimatedRef");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedScrollHandler.js
function useAnimatedScrollHandler(handlers, dependencies) {
  const scrollHandlers = typeof handlers === "function" ? { onScroll: handlers } : handlers;
  const { context, doDependenciesDiffer } = useHandler(scrollHandlers, dependencies);
  const subscribeForEvents2 = ["onScroll"];
  if (scrollHandlers.onBeginDrag !== void 0) {
    subscribeForEvents2.push("onScrollBeginDrag");
  }
  if (scrollHandlers.onEndDrag !== void 0) {
    subscribeForEvents2.push("onScrollEndDrag");
  }
  if (scrollHandlers.onMomentumBegin !== void 0) {
    subscribeForEvents2.push("onMomentumScrollBegin");
  }
  if (scrollHandlers.onMomentumEnd !== void 0) {
    subscribeForEvents2.push("onMomentumScrollEnd");
  }
  return useEvent4((event) => {
    "worklet";
    const { onScroll, onBeginDrag, onEndDrag, onMomentumBegin, onMomentumEnd } = scrollHandlers;
    if (onScroll && event.eventName.endsWith("onScroll")) {
      onScroll(event, context);
    } else if (onBeginDrag && event.eventName.endsWith("onScrollBeginDrag")) {
      onBeginDrag(event, context);
    } else if (onEndDrag && event.eventName.endsWith("onScrollEndDrag")) {
      onEndDrag(event, context);
    } else if (onMomentumBegin && event.eventName.endsWith("onMomentumScrollBegin")) {
      onMomentumBegin(event, context);
    } else if (onMomentumEnd && event.eventName.endsWith("onMomentumScrollEnd")) {
      onMomentumEnd(event, context);
    }
  }, subscribeForEvents2, doDependenciesDiffer);
}
var init_useAnimatedScrollHandler = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedScrollHandler.js"() {
    init_Hooks();
    __name(useAnimatedScrollHandler, "useAnimatedScrollHandler");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/hook/useDerivedValue.js
function useDerivedValue(processor, dependencies) {
  var _a;
  const initRef = (0, import_react25.useRef)(null);
  const inputs = Object.values((_a = processor._closure) !== null && _a !== void 0 ? _a : {});
  if (dependencies === void 0) {
    dependencies = [...inputs, processor.__workletHash];
  } else {
    dependencies.push(processor.__workletHash);
  }
  if (initRef.current === null) {
    initRef.current = makeMutable(initialUpdaterRun(processor));
  }
  const sharedValue = initRef.current;
  (0, import_react25.useEffect)(() => {
    const fun = /* @__PURE__ */ __name(() => {
      "worklet";
      sharedValue.value = processor();
    }, "fun");
    const mapperId = startMapper(fun, inputs, [sharedValue]);
    return () => {
      stopMapper(mapperId);
    };
  }, dependencies);
  (0, import_react25.useEffect)(() => {
    return () => {
      initRef.current = null;
    };
  }, []);
  return sharedValue;
}
var import_react25;
var init_useDerivedValue = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/hook/useDerivedValue.js"() {
    import_react25 = require("react");
    init_animation();
    init_core();
    __name(useDerivedValue, "useDerivedValue");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedSensor.js
function useAnimatedSensor(sensorType, userConfig) {
  const ref = (0, import_react26.useRef)({
    sensor: null,
    unregister: () => {
    },
    isAvailable: false,
    config: {
      interval: 0
    }
  });
  if (ref.current.sensor === null) {
    ref.current.config = Object.assign({ interval: "auto" }, userConfig);
    let sensorData;
    if (sensorType === SensorType.ROTATION) {
      sensorData = {
        qw: 0,
        qx: 0,
        qy: 0,
        qz: 0,
        yaw: 0,
        pitch: 0,
        roll: 0
      };
    } else {
      sensorData = {
        x: 0,
        y: 0,
        z: 0
      };
    }
    ref.current.sensor = makeMutable(sensorData);
  }
  (0, import_react26.useEffect)(() => {
    ref.current.config = Object.assign({ interval: "auto" }, userConfig);
    const id = NativeReanimated_default.registerSensor(sensorType, ref.current.config.interval === "auto" ? -1 : ref.current.config.interval, ref.current.sensor);
    if (id !== -1) {
      ref.current.unregister = () => NativeReanimated_default.unregisterSensor(id);
      ref.current.isAvailable = true;
    } else {
      ref.current.unregister = () => {
      };
      ref.current.isAvailable = false;
    }
    return () => {
      ref.current.unregister();
    };
  }, [sensorType, userConfig]);
  return ref.current;
}
var import_react26, SensorType;
var init_useAnimatedSensor = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedSensor.js"() {
    import_react26 = require("react");
    init_core();
    init_NativeReanimated2();
    (function(SensorType2) {
      SensorType2[SensorType2["ACCELEROMETER"] = 1] = "ACCELEROMETER";
      SensorType2[SensorType2["GYROSCOPE"] = 2] = "GYROSCOPE";
      SensorType2[SensorType2["GRAVITY"] = 3] = "GRAVITY";
      SensorType2[SensorType2["MAGNETIC_FIELD"] = 4] = "MAGNETIC_FIELD";
      SensorType2[SensorType2["ROTATION"] = 5] = "ROTATION";
    })(SensorType || (SensorType = {}));
    __name(useAnimatedSensor, "useAnimatedSensor");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/frameCallback/FrameCallbackRegistryUI.js
var prepareUIRegistry;
var init_FrameCallbackRegistryUI = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/frameCallback/FrameCallbackRegistryUI.js"() {
    init_core();
    prepareUIRegistry = runOnUI(() => {
      "worklet";
      const frameCallbackRegistry2 = {
        frameCallbackRegistry: /* @__PURE__ */ new Map(),
        activeFrameCallbacks: /* @__PURE__ */ new Set(),
        previousFrameTimestamp: null,
        runCallbacks() {
          const loop = /* @__PURE__ */ __name((timestamp) => {
            if (this.previousFrameTimestamp === null) {
              this.previousFrameTimestamp = timestamp;
            }
            const delta = timestamp - this.previousFrameTimestamp;
            this.activeFrameCallbacks.forEach((callbackId) => {
              const callbackDetails = this.frameCallbackRegistry.get(callbackId);
              const { startTime } = callbackDetails;
              if (startTime === null) {
                callbackDetails.startTime = timestamp;
                callbackDetails.callback({
                  timestamp,
                  timeSincePreviousFrame: null,
                  timeSinceFirstFrame: 0
                });
              } else {
                callbackDetails.callback({
                  timestamp,
                  timeSincePreviousFrame: delta,
                  timeSinceFirstFrame: timestamp - startTime
                });
              }
            });
            if (this.activeFrameCallbacks.size > 0) {
              this.previousFrameTimestamp = timestamp;
              requestAnimationFrame(loop);
            } else {
              this.previousFrameTimestamp = null;
            }
          }, "loop");
          if (this.activeFrameCallbacks.size === 1) {
            requestAnimationFrame(loop);
          }
        },
        registerFrameCallback(callback, callbackId) {
          this.frameCallbackRegistry.set(callbackId, {
            callback,
            startTime: null
          });
        },
        unregisterFrameCallback(callbackId) {
          this.manageStateFrameCallback(callbackId, false);
          this.frameCallbackRegistry.delete(callbackId);
        },
        manageStateFrameCallback(callbackId, state) {
          if (callbackId === -1) {
            return;
          }
          if (state) {
            this.activeFrameCallbacks.add(callbackId);
            this.runCallbacks();
          } else {
            const callback = this.frameCallbackRegistry.get(callbackId);
            callback.startTime = null;
            this.activeFrameCallbacks.delete(callbackId);
          }
        }
      };
      global._frameCallbackRegistry = frameCallbackRegistry2;
    });
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/frameCallback/FrameCallbackRegistryJS.js
var FrameCallbackRegistryJS;
var init_FrameCallbackRegistryJS = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/frameCallback/FrameCallbackRegistryJS.js"() {
    init_core();
    init_FrameCallbackRegistryUI();
    FrameCallbackRegistryJS = class {
      constructor() {
        this.nextCallbackId = 0;
        prepareUIRegistry();
      }
      registerFrameCallback(callback) {
        if (!callback) {
          return -1;
        }
        const callbackId = this.nextCallbackId;
        this.nextCallbackId++;
        runOnUI(() => {
          "worklet";
          global._frameCallbackRegistry.registerFrameCallback(callback, callbackId);
        })();
        return callbackId;
      }
      unregisterFrameCallback(callbackId) {
        runOnUI(() => {
          "worklet";
          global._frameCallbackRegistry.unregisterFrameCallback(callbackId);
        })();
      }
      manageStateFrameCallback(callbackId, state) {
        runOnUI(() => {
          "worklet";
          global._frameCallbackRegistry.manageStateFrameCallback(callbackId, state);
        })();
      }
    };
    __name(FrameCallbackRegistryJS, "FrameCallbackRegistryJS");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/hook/useFrameCallback.js
function useFrameCallback(callback, autostart = true) {
  const ref = (0, import_react27.useRef)({
    setActive: (isActive) => {
      frameCallbackRegistry.manageStateFrameCallback(ref.current.callbackId, isActive);
      ref.current.isActive = isActive;
    },
    isActive: autostart,
    callbackId: -1
  });
  (0, import_react27.useEffect)(() => {
    ref.current.callbackId = frameCallbackRegistry.registerFrameCallback(callback);
    ref.current.setActive(ref.current.isActive);
    return () => {
      frameCallbackRegistry.unregisterFrameCallback(ref.current.callbackId);
      ref.current.callbackId = -1;
    };
  }, [callback, autostart]);
  return ref.current;
}
var import_react27, frameCallbackRegistry;
var init_useFrameCallback = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/hook/useFrameCallback.js"() {
    import_react27 = require("react");
    init_FrameCallbackRegistryJS();
    frameCallbackRegistry = new FrameCallbackRegistryJS();
    __name(useFrameCallback, "useFrameCallback");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/commonTypes.js
var KeyboardState;
var init_commonTypes = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/commonTypes.js"() {
    (function(KeyboardState2) {
      KeyboardState2[KeyboardState2["UNKNOWN"] = 0] = "UNKNOWN";
      KeyboardState2[KeyboardState2["OPENING"] = 1] = "OPENING";
      KeyboardState2[KeyboardState2["OPEN"] = 2] = "OPEN";
      KeyboardState2[KeyboardState2["CLOSING"] = 3] = "CLOSING";
      KeyboardState2[KeyboardState2["CLOSED"] = 4] = "CLOSED";
    })(KeyboardState || (KeyboardState = {}));
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedKeyboard.js
function useAnimatedKeyboard() {
  const ref = (0, import_react28.useRef)(null);
  const listenerId = (0, import_react28.useRef)(-1);
  const isSubscribed = (0, import_react28.useRef)(false);
  if (ref.current === null) {
    const keyboardEventData = {
      state: makeMutable(KeyboardState.UNKNOWN),
      height: makeMutable(0)
    };
    listenerId.current = NativeReanimated_default.subscribeForKeyboardEvents(keyboardEventData);
    ref.current = keyboardEventData;
    isSubscribed.current = true;
  }
  (0, import_react28.useEffect)(() => {
    if (isSubscribed.current === false && ref.current !== null) {
      listenerId.current = NativeReanimated_default.subscribeForKeyboardEvents(ref.current);
      isSubscribed.current = true;
    }
    return () => {
      NativeReanimated_default.unsubscribeFromKeyboardEvents(listenerId.current);
      isSubscribed.current = false;
    };
  }, []);
  return ref.current;
}
var import_react28;
var init_useAnimatedKeyboard = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/hook/useAnimatedKeyboard.js"() {
    import_react28 = require("react");
    init_NativeReanimated2();
    init_core();
    init_commonTypes();
    __name(useAnimatedKeyboard, "useAnimatedKeyboard");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/hook/useScrollViewOffset.js
function useScrollViewOffset(aref) {
  const offsetRef = (0, import_react29.useRef)(useSharedValue(0));
  const event = useEvent4((event2) => {
    "worklet";
    offsetRef.current.value = event2.contentOffset.x === 0 ? event2.contentOffset.y : event2.contentOffset.x;
  }, subscribeForEvents);
  (0, import_react29.useEffect)(() => {
    var _a;
    const viewTag = (0, import_react_native27.findNodeHandle)(aref.current);
    (_a = event.current) === null || _a === void 0 ? void 0 : _a.registerForEvents(viewTag);
  }, [aref.current]);
  return offsetRef.current;
}
var import_react29, import_react_native27, subscribeForEvents;
var init_useScrollViewOffset = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/hook/useScrollViewOffset.js"() {
    import_react29 = require("react");
    import_react_native27 = require("react-native-web-lite");
    init_utils();
    init_useSharedValue();
    subscribeForEvents = [
      "onScroll",
      "onScrollBeginDrag",
      "onScrollEndDrag",
      "onMomentumScrollBegin",
      "onMomentumScrollEnd"
    ];
    __name(useScrollViewOffset, "useScrollViewOffset");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/hook/index.js
var init_hook = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/hook/index.js"() {
    init_Hooks();
    init_useSharedValue();
    init_useAnimatedStyle();
    init_useAnimatedGestureHandler();
    init_useAnimatedReaction();
    init_useAnimatedRef();
    init_useAnimatedScrollHandler();
    init_useDerivedValue();
    init_useAnimatedSensor();
    init_useFrameCallback();
    init_useAnimatedKeyboard();
    init_useScrollViewOffset();
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/interpolation.js
function isNode2(x) {
  "worklet";
  return x.__nodeId !== void 0;
}
function getVal(type, coef, val2, leftEdgeOutput, rightEdgeOutput, x) {
  "worklet";
  switch (type) {
    case Extrapolation.IDENTITY:
      return x;
    case Extrapolation.CLAMP:
      if (coef * val2 < coef * leftEdgeOutput) {
        return leftEdgeOutput;
      }
      return rightEdgeOutput;
    case Extrapolation.EXTEND:
    default:
      return val2;
  }
}
function isExtrapolate(value) {
  "worklet";
  return value === Extrapolation.EXTEND || value === Extrapolation.CLAMP || value === Extrapolation.IDENTITY;
}
function validateType(type) {
  "worklet";
  const extrapolationConfig = {
    extrapolateLeft: Extrapolation.EXTEND,
    extrapolateRight: Extrapolation.EXTEND
  };
  if (!type) {
    return extrapolationConfig;
  }
  if (typeof type === "string") {
    if (!isExtrapolate(type)) {
      throw new Error(`Reanimated: not supported value for "interpolate" 
Supported values: ["extend", "clamp", "identity", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]
 Valid example:
        interpolate(value, [inputRange], [outputRange], "clamp")`);
    }
    extrapolationConfig.extrapolateLeft = type;
    extrapolationConfig.extrapolateRight = type;
    return extrapolationConfig;
  }
  if (type.extrapolateLeft && !isExtrapolate(type.extrapolateLeft) || type.extrapolateRight && !isExtrapolate(type.extrapolateRight)) {
    throw new Error(`Reanimated: not supported value for "interpolate" 
Supported values: ["extend", "clamp", "identity", Extrapolatation.CLAMP, Extrapolatation.EXTEND, Extrapolatation.IDENTITY]
 Valid example:
      interpolate(value, [inputRange], [outputRange], {
        extrapolateLeft: Extrapolation.CLAMP,
        extrapolateRight: Extrapolation.IDENTITY
      }})`);
  }
  Object.assign(extrapolationConfig, type);
  return extrapolationConfig;
}
function internalInterpolate(x, narrowedInput, extrapolationConfig) {
  "worklet";
  const { leftEdgeInput, rightEdgeInput, leftEdgeOutput, rightEdgeOutput } = narrowedInput;
  if (rightEdgeInput - leftEdgeInput === 0)
    return leftEdgeOutput;
  const progress = (x - leftEdgeInput) / (rightEdgeInput - leftEdgeInput);
  const val2 = leftEdgeOutput + progress * (rightEdgeOutput - leftEdgeOutput);
  const coef = rightEdgeOutput >= leftEdgeOutput ? 1 : -1;
  if (coef * val2 < coef * leftEdgeOutput) {
    return getVal(extrapolationConfig.extrapolateLeft, coef, val2, leftEdgeOutput, rightEdgeOutput, x);
  } else if (coef * val2 > coef * rightEdgeOutput) {
    return getVal(extrapolationConfig.extrapolateRight, coef, val2, leftEdgeOutput, rightEdgeOutput, x);
  }
  return val2;
}
function interpolate2(x, input, output, type) {
  "worklet";
  if (input.length < 2 || output.length < 2) {
    throw Error("Interpolation input and output should contain at least two values.");
  }
  const extrapolationConfig = validateType(type);
  if (isNode2(x)) {
    console.warn(`interpolate() was renamed to interpolateNode() in Reanimated 2. Please use interpolateNode() instead`);
    return interpolate(x, {
      inputRange: input,
      outputRange: output,
      extrapolateLeft: extrapolationConfig.extrapolateLeft,
      extrapolateRight: extrapolationConfig.extrapolateRight
    });
  }
  const length = input.length;
  const narrowedInput = {
    leftEdgeInput: input[0],
    rightEdgeInput: input[1],
    leftEdgeOutput: output[0],
    rightEdgeOutput: output[1]
  };
  if (length > 2) {
    if (x > input[length - 1]) {
      narrowedInput.leftEdgeInput = input[length - 2];
      narrowedInput.rightEdgeInput = input[length - 1];
      narrowedInput.leftEdgeOutput = output[length - 2];
      narrowedInput.rightEdgeOutput = output[length - 1];
    } else {
      for (let i = 1; i < length; ++i) {
        if (x <= input[i]) {
          narrowedInput.leftEdgeInput = input[i - 1];
          narrowedInput.rightEdgeInput = input[i];
          narrowedInput.leftEdgeOutput = output[i - 1];
          narrowedInput.rightEdgeOutput = output[i];
          break;
        }
      }
    }
  }
  return internalInterpolate(x, narrowedInput, extrapolationConfig);
}
var Extrapolation;
var init_interpolation = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/interpolation.js"() {
    init_interpolate();
    (function(Extrapolation2) {
      Extrapolation2["IDENTITY"] = "identity";
      Extrapolation2["CLAMP"] = "clamp";
      Extrapolation2["EXTEND"] = "extend";
    })(Extrapolation || (Extrapolation = {}));
    __name(isNode2, "isNode");
    __name(getVal, "getVal");
    __name(isExtrapolate, "isExtrapolate");
    __name(validateType, "validateType");
    __name(internalInterpolate, "internalInterpolate");
    __name(interpolate2, "interpolate");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js
function useInterpolateConfig(inputRange, outputRange, colorSpace = ColorSpace.RGB, options = {}) {
  return useSharedValue({
    inputRange,
    outputRange,
    colorSpace,
    cache: makeMutable(null),
    options
  });
}
var interpolateColorsHSV, toLinearSpace2, toGammaSpace2, interpolateColorsRGB, getInterpolateRGB, getInterpolateHSV, interpolateColor, ColorSpace, interpolateSharableColor;
var init_interpolateColor = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/interpolateColor.js"() {
    init_Colors();
    init_core();
    init_interpolation();
    init_derived();
    init_useSharedValue();
    interpolateColorsHSV = /* @__PURE__ */ __name((value, inputRange, colors, options) => {
      "worklet";
      let h = 0;
      const { useCorrectedHSVInterpolation = true } = options;
      if (useCorrectedHSVInterpolation) {
        const correctedInputRange = [inputRange[0]];
        const originalH = colors.h;
        const correctedH = [originalH[0]];
        for (let i = 1; i < originalH.length; ++i) {
          const d = originalH[i] - originalH[i - 1];
          if (originalH[i] > originalH[i - 1] && d > 0.5) {
            correctedInputRange.push(inputRange[i]);
            correctedInputRange.push(inputRange[i] + 1e-5);
            correctedH.push(originalH[i] - 1);
            correctedH.push(originalH[i]);
          } else if (originalH[i] < originalH[i - 1] && d < -0.5) {
            correctedInputRange.push(inputRange[i]);
            correctedInputRange.push(inputRange[i] + 1e-5);
            correctedH.push(originalH[i] + 1);
            correctedH.push(originalH[i]);
          } else {
            correctedInputRange.push(inputRange[i]);
            correctedH.push(originalH[i]);
          }
        }
        h = (interpolate2(value, correctedInputRange, correctedH, Extrapolate.CLAMP) + 1) % 1;
      } else {
        h = interpolate2(value, inputRange, colors.h, Extrapolate.CLAMP);
      }
      const s = interpolate2(value, inputRange, colors.s, Extrapolate.CLAMP);
      const v = interpolate2(value, inputRange, colors.v, Extrapolate.CLAMP);
      const a = interpolate2(value, inputRange, colors.a, Extrapolate.CLAMP);
      return hsvToColor(h, s, v, a);
    }, "interpolateColorsHSV");
    toLinearSpace2 = /* @__PURE__ */ __name((x, gamma) => {
      "worklet";
      return x.map((v) => Math.pow(v / 255, gamma));
    }, "toLinearSpace");
    toGammaSpace2 = /* @__PURE__ */ __name((x, gamma) => {
      "worklet";
      return Math.round(Math.pow(x, 1 / gamma) * 255);
    }, "toGammaSpace");
    interpolateColorsRGB = /* @__PURE__ */ __name((value, inputRange, colors, options) => {
      "worklet";
      const { gamma = 2.2 } = options;
      let { r: outputR, g: outputG, b: outputB } = colors;
      if (gamma !== 1) {
        outputR = toLinearSpace2(outputR, gamma);
        outputG = toLinearSpace2(outputG, gamma);
        outputB = toLinearSpace2(outputB, gamma);
      }
      const r = interpolate2(value, inputRange, outputR, Extrapolate.CLAMP);
      const g = interpolate2(value, inputRange, outputG, Extrapolate.CLAMP);
      const b = interpolate2(value, inputRange, outputB, Extrapolate.CLAMP);
      const a = interpolate2(value, inputRange, colors.a, Extrapolate.CLAMP);
      if (gamma === 1) {
        return rgbaColor(r, g, b, a);
      }
      return rgbaColor(toGammaSpace2(r, gamma), toGammaSpace2(g, gamma), toGammaSpace2(b, gamma), a);
    }, "interpolateColorsRGB");
    getInterpolateRGB = /* @__PURE__ */ __name((colors) => {
      "worklet";
      const r = [];
      const g = [];
      const b = [];
      const a = [];
      for (let i = 0; i < colors.length; ++i) {
        const color3 = colors[i];
        const processedColor = processColor(color3);
        if (processedColor !== null && processedColor !== void 0) {
          r.push(red3(processedColor));
          g.push(green3(processedColor));
          b.push(blue3(processedColor));
          a.push(opacity(processedColor));
        }
      }
      return { r, g, b, a };
    }, "getInterpolateRGB");
    getInterpolateHSV = /* @__PURE__ */ __name((colors) => {
      "worklet";
      const h = [];
      const s = [];
      const v = [];
      const a = [];
      for (let i = 0; i < colors.length; ++i) {
        const color3 = colors[i];
        const processedColor = processColor(color3);
        if (typeof processedColor === "number") {
          const processedHSVColor = RGBtoHSV(red3(processedColor), green3(processedColor), blue3(processedColor));
          h.push(processedHSVColor.h);
          s.push(processedHSVColor.s);
          v.push(processedHSVColor.v);
          a.push(opacity(processedColor));
        }
      }
      return { h, s, v, a };
    }, "getInterpolateHSV");
    interpolateColor = /* @__PURE__ */ __name((value, inputRange, outputRange, colorSpace = "RGB", options = {}) => {
      "worklet";
      if (colorSpace === "HSV") {
        return interpolateColorsHSV(value, inputRange, getInterpolateHSV(outputRange), options);
      } else if (colorSpace === "RGB") {
        return interpolateColorsRGB(value, inputRange, getInterpolateRGB(outputRange), options);
      }
      throw new Error(`Invalid color space provided: ${colorSpace}. Supported values are: ['RGB', 'HSV']`);
    }, "interpolateColor");
    (function(ColorSpace2) {
      ColorSpace2[ColorSpace2["RGB"] = 0] = "RGB";
      ColorSpace2[ColorSpace2["HSV"] = 1] = "HSV";
    })(ColorSpace || (ColorSpace = {}));
    __name(useInterpolateConfig, "useInterpolateConfig");
    interpolateSharableColor = /* @__PURE__ */ __name((value, interpolateConfig) => {
      "worklet";
      let colors = interpolateConfig.value.cache.value;
      if (interpolateConfig.value.colorSpace === ColorSpace.RGB) {
        if (!colors) {
          colors = getInterpolateRGB(interpolateConfig.value.outputRange);
          interpolateConfig.value.cache.value = colors;
        }
        return interpolateColorsRGB(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);
      } else if (interpolateConfig.value.colorSpace === ColorSpace.HSV) {
        if (!colors) {
          colors = getInterpolateHSV(interpolateConfig.value.outputRange);
          interpolateConfig.value.cache.value = colors;
        }
        return interpolateColorsHSV(value, interpolateConfig.value.inputRange, colors, interpolateConfig.value.options);
      }
      throw new Error(`Invalid color space provided: ${interpolateConfig.value.colorSpace}. Supported values are: ['RGB', 'HSV']`);
    }, "interpolateSharableColor");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/PropAdapters.js
function createAnimatedPropAdapter(adapter, nativeProps) {
  const nativePropsToAdd = {};
  nativeProps === null || nativeProps === void 0 ? void 0 : nativeProps.forEach((prop) => {
    nativePropsToAdd[prop] = true;
  });
  addWhitelistedNativeProps(nativePropsToAdd);
  return adapter;
}
var SVGAdapter, TextInputAdapter;
var init_PropAdapters = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/PropAdapters.js"() {
    init_ConfigHelper();
    __name(createAnimatedPropAdapter, "createAnimatedPropAdapter");
    SVGAdapter = createAnimatedPropAdapter((props) => {
      "worklet";
      var _a, _b;
      const keys = Object.keys(props);
      if (keys.includes("transform")) {
        if (Array.isArray(props.transform)) {
          if (props.transform.length !== 6) {
            throw new Error(`invalid transform length of ${props.transform.length}, should be 6`);
          }
          const transform = props.transform;
          const x = (_a = props.x) !== null && _a !== void 0 ? _a : 0;
          const y = (_b = props.y) !== null && _b !== void 0 ? _b : 0;
          props.transform = [
            { translateX: transform[0] * x + transform[2] * y + transform[4] },
            { translateY: transform[1] * x + transform[3] * y + transform[5] }
          ];
        } else if (typeof props.transform === "string") {
          const transform = props.transform;
          const arr = transform.replace("translate(", "").replace(")", "").split(" ");
          props.transform = [
            { translateX: parseFloat(arr[0]) },
            { translateY: parseFloat(arr[1]) }
          ];
        }
      }
    });
    TextInputAdapter = createAnimatedPropAdapter((props) => {
      "worklet";
      const keys = Object.keys(props);
      if (keys.includes("value")) {
        props.text = props.value;
        delete props.value;
      }
    }, ["text"]);
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/animationBuilder/BaseAnimationBuilder.js
var BaseAnimationBuilder;
var init_BaseAnimationBuilder = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/animationBuilder/BaseAnimationBuilder.js"() {
    init_animation();
    BaseAnimationBuilder = class {
      constructor() {
        this.randomizeDelay = false;
        this.build = () => {
          throw Error("Unimplemented method in child class.");
        };
      }
      static duration(durationMs) {
        const instance = this.createInstance();
        return instance.duration(durationMs);
      }
      duration(durationMs) {
        this.durationV = durationMs;
        return this;
      }
      static delay(delayMs) {
        const instance = this.createInstance();
        return instance.delay(delayMs);
      }
      delay(delayMs) {
        this.delayV = delayMs;
        return this;
      }
      static withCallback(callback) {
        const instance = this.createInstance();
        return instance.withCallback(callback);
      }
      withCallback(callback) {
        this.callbackV = callback;
        return this;
      }
      // 300ms is the default animation duration. If any animation has different default has to override this method.
      static getDuration() {
        return 300;
      }
      getDuration() {
        var _a;
        return (_a = this.durationV) !== null && _a !== void 0 ? _a : 300;
      }
      static randomDelay() {
        const instance = this.createInstance();
        return instance.randomDelay();
      }
      randomDelay() {
        this.randomizeDelay = true;
        return this;
      }
      // when randomizeDelay is set to true, randomize delay between 0 and provided value (or 1000ms if delay is not provided)
      getDelay() {
        var _a, _b;
        return this.randomizeDelay ? Math.random() * ((_a = this.delayV) !== null && _a !== void 0 ? _a : 1e3) : (_b = this.delayV) !== null && _b !== void 0 ? _b : 0;
      }
      getDelayFunction() {
        const isDelayProvided = this.randomizeDelay || this.delayV;
        return isDelayProvided ? withDelay : (_, animation) => {
          "worklet";
          return animation;
        };
      }
      static build() {
        const instance = this.createInstance();
        return instance.build();
      }
    };
    __name(BaseAnimationBuilder, "BaseAnimationBuilder");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/animationBuilder/ComplexAnimationBuilder.js
var ComplexAnimationBuilder;
var init_ComplexAnimationBuilder = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/animationBuilder/ComplexAnimationBuilder.js"() {
    init_animation();
    init_BaseAnimationBuilder();
    ComplexAnimationBuilder = class extends BaseAnimationBuilder {
      static easing(easingFunction) {
        const instance = this.createInstance();
        return instance.easing(easingFunction);
      }
      easing(easingFunction) {
        this.easingV = easingFunction;
        return this;
      }
      static rotate(degree) {
        const instance = this.createInstance();
        return instance.rotate(degree);
      }
      rotate(degree) {
        this.rotateV = degree;
        return this;
      }
      static springify() {
        const instance = this.createInstance();
        return instance.springify();
      }
      springify() {
        this.type = withSpring;
        return this;
      }
      static damping(damping) {
        const instance = this.createInstance();
        return instance.damping(damping);
      }
      damping(damping) {
        this.dampingV = damping;
        return this;
      }
      static mass(mass) {
        const instance = this.createInstance();
        return instance.mass(mass);
      }
      mass(mass) {
        this.massV = mass;
        return this;
      }
      static stiffness(stiffness) {
        const instance = this.createInstance();
        return instance.stiffness(stiffness);
      }
      stiffness(stiffness) {
        this.stiffnessV = stiffness;
        return this;
      }
      static overshootClamping(overshootClamping) {
        const instance = this.createInstance();
        return instance.overshootClamping(overshootClamping);
      }
      overshootClamping(overshootClamping) {
        this.overshootClampingV = overshootClamping;
        return this;
      }
      static restDisplacementThreshold(restDisplacementThreshold) {
        const instance = this.createInstance();
        return instance.restDisplacementThreshold(restDisplacementThreshold);
      }
      restDisplacementThreshold(restDisplacementThreshold) {
        this.restDisplacementThresholdV = restDisplacementThreshold;
        return this;
      }
      static restSpeedThreshold(restSpeedThreshold) {
        const instance = this.createInstance();
        return instance.restSpeedThreshold(restSpeedThreshold);
      }
      restSpeedThreshold(restSpeedThreshold) {
        this.restSpeedThresholdV = restSpeedThreshold;
        return this;
      }
      static withInitialValues(values) {
        const instance = this.createInstance();
        return instance.withInitialValues(values);
      }
      withInitialValues(values) {
        this.initialValues = values;
        return this;
      }
      getAnimationAndConfig() {
        const duration = this.durationV;
        const easing = this.easingV;
        const rotate = this.rotateV;
        const type = this.type ? this.type : withTiming;
        const damping = this.dampingV;
        const mass = this.massV;
        const stiffness = this.stiffnessV;
        const overshootClamping = this.overshootClampingV;
        const restDisplacementThreshold = this.restDisplacementThresholdV;
        const restSpeedThreshold = this.restSpeedThresholdV;
        const animation = type;
        const config = {};
        if (type === withTiming) {
          if (easing) {
            config.easing = easing;
          }
          if (duration) {
            config.duration = duration;
          }
          if (rotate) {
            config.rotate = rotate;
          }
        } else {
          if (damping) {
            config.damping = damping;
          }
          if (mass) {
            config.mass = mass;
          }
          if (stiffness) {
            config.stiffness = stiffness;
          }
          if (overshootClamping) {
            config.overshootClamping = overshootClamping;
          }
          if (restDisplacementThreshold) {
            config.restDisplacementThreshold = restDisplacementThreshold;
          }
          if (restSpeedThreshold) {
            config.restSpeedThreshold = restSpeedThreshold;
          }
          if (rotate) {
            config.rotate = rotate;
          }
        }
        return [animation, config];
      }
    };
    __name(ComplexAnimationBuilder, "ComplexAnimationBuilder");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/animationBuilder/Keyframe.js
var Keyframe;
var init_Keyframe = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/animationBuilder/Keyframe.js"() {
    init_Easing2();
    init_animation();
    Keyframe = class {
      /*
        Keyframe definition should be passed in the constructor as the map
        which keys are between range 0 - 100 (%) and correspond to the point in the animation progress.
      */
      constructor(definitions) {
        this.build = () => {
          const delay = this.delayV;
          const delayFunction = this.getDelayFunction();
          const { keyframes, initialValues } = this.parseDefinitions();
          const callback = this.callbackV;
          return (_targetValues) => {
            "worklet";
            const animations2 = {};
            const addAnimation = /* @__PURE__ */ __name((key) => {
              var _a;
              const keyframePoints = keyframes[key];
              if (keyframePoints.length === 0)
                return;
              const animation = delayFunction(delay, keyframePoints.length === 1 ? withTiming(keyframePoints[0].value, {
                duration: keyframePoints[0].duration,
                easing: keyframePoints[0].easing ? keyframePoints[0].easing : Easing2.linear
              }) : withSequence.apply(this, keyframePoints.map((keyframePoint) => withTiming(keyframePoint.value, {
                duration: keyframePoint.duration,
                easing: keyframePoint.easing ? keyframePoint.easing : Easing2.linear
              }))));
              if (key.includes("transform")) {
                if (!("transform" in animations2)) {
                  animations2.transform = [];
                }
                (_a = animations2.transform) === null || _a === void 0 ? void 0 : _a.push({
                  [key.split(":")[1]]: animation
                });
              } else {
                animations2[key] = animation;
              }
            }, "addAnimation");
            Object.keys(initialValues).forEach((key) => {
              if (key.includes("transform")) {
                initialValues[key].forEach((transformProp, index3) => {
                  Object.keys(transformProp).forEach((transformPropKey) => {
                    addAnimation(index3.toString() + "_transform:" + transformPropKey);
                  });
                });
              } else {
                addAnimation(key);
              }
            });
            return {
              animations: animations2,
              initialValues,
              callback
            };
          };
        };
        this.definitions = definitions;
      }
      parseDefinitions() {
        const parsedKeyframes = {};
        if (this.definitions.from) {
          if (this.definitions["0"]) {
            throw Error("You cannot provide both keyframe 0 and 'from' as they both specified initial values");
          }
          this.definitions["0"] = this.definitions.from;
          delete this.definitions.from;
        }
        if (this.definitions.to) {
          if (this.definitions["100"]) {
            throw Error("You cannot provide both keyframe 100 and 'to' as they both specified values at the end of the animation.");
          }
          this.definitions["100"] = this.definitions.to;
          delete this.definitions.to;
        }
        if (!this.definitions["0"]) {
          throw Error("Please provide 0, or 'from' keyframe with initial state of your object.");
        }
        const initialValues = this.definitions["0"];
        Object.keys(initialValues).forEach((styleProp) => {
          var _a;
          if (styleProp === "transform") {
            (_a = initialValues[styleProp]) === null || _a === void 0 ? void 0 : _a.forEach((transformStyle, index3) => {
              Object.keys(transformStyle).forEach((transformProp) => {
                parsedKeyframes[index3.toString() + "_transform:" + transformProp] = [];
              });
            });
          } else {
            parsedKeyframes[styleProp] = [];
          }
        });
        const duration = this.durationV ? this.durationV : 500;
        const animationKeyPoints = Array.from(Object.keys(this.definitions));
        const getAnimationDuration = /* @__PURE__ */ __name((key, currentKeyPoint) => {
          const maxDuration = currentKeyPoint / 100 * duration;
          const currentDuration = parsedKeyframes[key].reduce((acc2, value) => acc2 + value.duration, 0);
          return maxDuration - currentDuration;
        }, "getAnimationDuration");
        const addKeyPoint = /* @__PURE__ */ __name(({ key, value, currentKeyPoint, easing }) => {
          if (!(key in parsedKeyframes)) {
            throw Error("Keyframe can contain only that set of properties that were provide with initial values (keyframe 0 or 'from')");
          }
          parsedKeyframes[key].push({
            duration: getAnimationDuration(key, currentKeyPoint),
            value,
            easing
          });
        }, "addKeyPoint");
        animationKeyPoints.filter((value) => parseInt(value) !== 0).sort((a, b) => parseInt(a) - parseInt(b)).forEach((keyPoint) => {
          if (parseInt(keyPoint) < 0 || parseInt(keyPoint) > 100) {
            throw Error("Keyframe should be in between range 0 - 100.");
          }
          const keyframe = this.definitions[keyPoint];
          const easing = keyframe.easing;
          delete keyframe.easing;
          const addKeyPointWith = /* @__PURE__ */ __name((key, value) => addKeyPoint({
            key,
            value,
            currentKeyPoint: parseInt(keyPoint),
            easing
          }), "addKeyPointWith");
          Object.keys(keyframe).forEach((key) => {
            var _a;
            if (key === "transform") {
              (_a = keyframe[key]) === null || _a === void 0 ? void 0 : _a.forEach((transformStyle, index3) => {
                Object.keys(transformStyle).forEach((transformProp) => {
                  addKeyPointWith(index3.toString() + "_transform:" + transformProp, transformStyle[transformProp]);
                });
              });
            } else {
              addKeyPointWith(key, keyframe[key]);
            }
          });
        });
        return { initialValues, keyframes: parsedKeyframes };
      }
      duration(durationMs) {
        this.durationV = durationMs;
        return this;
      }
      delay(delayMs) {
        this.delayV = delayMs;
        return this;
      }
      withCallback(callback) {
        this.callbackV = callback;
        return this;
      }
      getDelayFunction() {
        const delay = this.delayV;
        return delay ? withDelay : (_, animation) => {
          "worklet";
          return animation;
        };
      }
    };
    __name(Keyframe, "Keyframe");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/animationBuilder/index.js
var init_animationBuilder = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/animationBuilder/index.js"() {
    init_BaseAnimationBuilder();
    init_ComplexAnimationBuilder();
    init_Keyframe();
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Flip.js
var FlipInXUp, FlipInYLeft, FlipInXDown, FlipInYRight, FlipInEasyX, FlipInEasyY, FlipOutXUp, FlipOutYLeft, FlipOutXDown, FlipOutYRight, FlipOutEasyX, FlipOutEasyY;
var init_Flip = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Flip.js"() {
    init_animationBuilder();
    FlipInXUp = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (targetValues) => {
            "worklet";
            return {
              initialValues: Object.assign({ transform: [
                { perspective: 500 },
                { rotateX: "90deg" },
                { translateY: -targetValues.targetHeight }
              ] }, initialValues),
              animations: {
                transform: [
                  { perspective: 500 },
                  { rotateX: delayFunction(delay, animation("0deg", config)) },
                  { translateY: delayFunction(delay, animation(0, config)) }
                ]
              },
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FlipInXUp();
      }
    };
    __name(FlipInXUp, "FlipInXUp");
    FlipInYLeft = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (targetValues) => {
            "worklet";
            return {
              initialValues: Object.assign({ transform: [
                { perspective: 500 },
                { rotateY: "-90deg" },
                { translateX: -targetValues.targetWidth }
              ] }, initialValues),
              animations: {
                transform: [
                  { perspective: delayFunction(delay, animation(500, config)) },
                  { rotateY: delayFunction(delay, animation("0deg", config)) },
                  { translateX: delayFunction(delay, animation(0, config)) }
                ]
              },
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FlipInYLeft();
      }
    };
    __name(FlipInYLeft, "FlipInYLeft");
    FlipInXDown = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (targetValues) => {
            "worklet";
            return {
              initialValues: Object.assign({ transform: [
                { perspective: 500 },
                { rotateX: "-90deg" },
                { translateY: targetValues.targetHeight }
              ] }, initialValues),
              animations: {
                transform: [
                  { perspective: delayFunction(delay, animation(500, config)) },
                  { rotateX: delayFunction(delay, animation("0deg", config)) },
                  { translateY: delayFunction(delay, animation(0, config)) }
                ]
              },
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FlipInXDown();
      }
    };
    __name(FlipInXDown, "FlipInXDown");
    FlipInYRight = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (targetValues) => {
            "worklet";
            return {
              initialValues: Object.assign({ transform: [
                { perspective: 500 },
                { rotateY: "90deg" },
                { translateX: targetValues.targetWidth }
              ] }, initialValues),
              animations: {
                transform: [
                  { perspective: delayFunction(delay, animation(500, config)) },
                  { rotateY: delayFunction(delay, animation("0deg", config)) },
                  { translateX: delayFunction(delay, animation(0, config)) }
                ]
              },
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FlipInYRight();
      }
    };
    __name(FlipInYRight, "FlipInYRight");
    FlipInEasyX = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return () => {
            "worklet";
            return {
              initialValues: Object.assign({ transform: [{ perspective: 500 }, { rotateX: "90deg" }] }, initialValues),
              animations: {
                transform: [
                  { perspective: delayFunction(delay, animation(500, config)) },
                  { rotateX: delayFunction(delay, animation("0deg", config)) }
                ]
              },
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FlipInEasyX();
      }
    };
    __name(FlipInEasyX, "FlipInEasyX");
    FlipInEasyY = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return () => {
            "worklet";
            return {
              initialValues: Object.assign({ transform: [{ perspective: 500 }, { rotateY: "90deg" }] }, initialValues),
              animations: {
                transform: [
                  { perspective: delayFunction(delay, animation(500, config)) },
                  { rotateY: delayFunction(delay, animation("0deg", config)) }
                ]
              },
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FlipInEasyY();
      }
    };
    __name(FlipInEasyY, "FlipInEasyY");
    FlipOutXUp = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (targetValues) => {
            "worklet";
            return {
              initialValues: Object.assign({ transform: [
                { perspective: 500 },
                { rotateX: "0deg" },
                { translateY: 0 }
              ] }, initialValues),
              animations: {
                transform: [
                  { perspective: delayFunction(delay, animation(500, config)) },
                  { rotateX: delayFunction(delay, animation("90deg", config)) },
                  {
                    translateY: delayFunction(delay, animation(-targetValues.currentHeight, config))
                  }
                ]
              },
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FlipOutXUp();
      }
    };
    __name(FlipOutXUp, "FlipOutXUp");
    FlipOutYLeft = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (targetValues) => {
            "worklet";
            return {
              initialValues: Object.assign({ transform: [
                { perspective: 500 },
                { rotateY: "0deg" },
                { translateX: 0 }
              ] }, initialValues),
              animations: {
                transform: [
                  { perspective: delayFunction(delay, animation(500, config)) },
                  { rotateY: delayFunction(delay, animation("-90deg", config)) },
                  {
                    translateX: delayFunction(delay, animation(-targetValues.currentWidth, config))
                  }
                ]
              },
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FlipOutYLeft();
      }
    };
    __name(FlipOutYLeft, "FlipOutYLeft");
    FlipOutXDown = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (targetValues) => {
            "worklet";
            return {
              initialValues: Object.assign({ transform: [
                { perspective: 500 },
                { rotateX: "0deg" },
                { translateY: 0 }
              ] }, initialValues),
              animations: {
                transform: [
                  { perspective: delayFunction(delay, animation(500, config)) },
                  { rotateX: delayFunction(delay, animation("-90deg", config)) },
                  {
                    translateY: delayFunction(delay, animation(targetValues.currentHeight, config))
                  }
                ]
              },
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FlipOutXDown();
      }
    };
    __name(FlipOutXDown, "FlipOutXDown");
    FlipOutYRight = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (targetValues) => {
            "worklet";
            return {
              initialValues: Object.assign({ transform: [
                { perspective: 500 },
                { rotateY: "0deg" },
                { translateX: 0 }
              ] }, initialValues),
              animations: {
                transform: [
                  { perspective: delayFunction(delay, animation(500, config)) },
                  { rotateY: delayFunction(delay, animation("90deg", config)) },
                  {
                    translateX: delayFunction(delay, animation(targetValues.currentWidth, config))
                  }
                ]
              },
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FlipOutYRight();
      }
    };
    __name(FlipOutYRight, "FlipOutYRight");
    FlipOutEasyX = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return () => {
            "worklet";
            return {
              initialValues: Object.assign({ transform: [{ perspective: 500 }, { rotateX: "0deg" }] }, initialValues),
              animations: {
                transform: [
                  { perspective: delayFunction(delay, animation(500, config)) },
                  { rotateX: delayFunction(delay, animation("90deg", config)) }
                ]
              },
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FlipOutEasyX();
      }
    };
    __name(FlipOutEasyX, "FlipOutEasyX");
    FlipOutEasyY = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return () => {
            "worklet";
            return {
              initialValues: Object.assign({ transform: [{ perspective: 500 }, { rotateY: "0deg" }] }, initialValues),
              animations: {
                transform: [
                  { perspective: delayFunction(delay, animation(500, config)) },
                  { rotateY: delayFunction(delay, animation("90deg", config)) }
                ]
              },
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FlipOutEasyY();
      }
    };
    __name(FlipOutEasyY, "FlipOutEasyY");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Stretch.js
var StretchInX, StretchInY, StretchOutX, StretchOutY;
var init_Stretch = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Stretch.js"() {
    init_animationBuilder();
    StretchInX = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return () => {
            "worklet";
            return {
              animations: {
                transform: [{ scaleX: delayFunction(delay, animation(1, config)) }]
              },
              initialValues: Object.assign({ transform: [{ scaleX: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new StretchInX();
      }
    };
    __name(StretchInX, "StretchInX");
    StretchInY = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return () => {
            "worklet";
            return {
              animations: {
                transform: [{ scaleY: delayFunction(delay, animation(1, config)) }]
              },
              initialValues: Object.assign({ transform: [{ scaleY: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new StretchInY();
      }
    };
    __name(StretchInY, "StretchInY");
    StretchOutX = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return () => {
            "worklet";
            return {
              animations: {
                transform: [{ scaleX: delayFunction(delay, animation(0, config)) }]
              },
              initialValues: Object.assign({ transform: [{ scaleX: 1 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new StretchOutX();
      }
    };
    __name(StretchOutX, "StretchOutX");
    StretchOutY = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return () => {
            "worklet";
            return {
              animations: {
                transform: [{ scaleY: delayFunction(delay, animation(0, config)) }]
              },
              initialValues: Object.assign({ transform: [{ scaleY: 1 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new StretchOutY();
      }
    };
    __name(StretchOutY, "StretchOutY");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Fade.js
var FadeIn, FadeInRight, FadeInLeft, FadeInUp, FadeInDown, FadeOut, FadeOutRight, FadeOutLeft, FadeOutUp, FadeOutDown;
var init_Fade = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Fade.js"() {
    init_animationBuilder();
    FadeIn = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          const delay = this.getDelay();
          return (_) => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(1, config))
              },
              initialValues: Object.assign({ opacity: 0 }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FadeIn();
      }
    };
    __name(FadeIn, "FadeIn");
    FadeInRight = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          const delay = this.getDelay();
          return () => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(1, config)),
                transform: [
                  { translateX: delayFunction(delay, animation(0, config)) }
                ]
              },
              initialValues: Object.assign({ opacity: 0, transform: [{ translateX: 25 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FadeInRight();
      }
    };
    __name(FadeInRight, "FadeInRight");
    FadeInLeft = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          const delay = this.getDelay();
          return () => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(1, config)),
                transform: [
                  { translateX: delayFunction(delay, animation(0, config)) }
                ]
              },
              initialValues: Object.assign({ opacity: 0, transform: [{ translateX: -25 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FadeInLeft();
      }
    };
    __name(FadeInLeft, "FadeInLeft");
    FadeInUp = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          const delay = this.getDelay();
          return () => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(1, config)),
                transform: [
                  { translateY: delayFunction(delay, animation(0, config)) }
                ]
              },
              initialValues: Object.assign({ opacity: 0, transform: [{ translateY: -25 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FadeInUp();
      }
    };
    __name(FadeInUp, "FadeInUp");
    FadeInDown = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          const delay = this.getDelay();
          return () => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(1, config)),
                transform: [
                  { translateY: delayFunction(delay, animation(0, config)) }
                ]
              },
              initialValues: Object.assign({ opacity: 0, transform: [{ translateY: 25 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FadeInDown();
      }
    };
    __name(FadeInDown, "FadeInDown");
    FadeOut = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          const delay = this.getDelay();
          return (_) => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(0, config))
              },
              initialValues: Object.assign({ opacity: 1 }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FadeOut();
      }
    };
    __name(FadeOut, "FadeOut");
    FadeOutRight = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          const delay = this.getDelay();
          return () => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(0, config)),
                transform: [
                  { translateX: delayFunction(delay, animation(25, config)) }
                ]
              },
              initialValues: Object.assign({ opacity: 1, transform: [{ translateX: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FadeOutRight();
      }
    };
    __name(FadeOutRight, "FadeOutRight");
    FadeOutLeft = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          const delay = this.getDelay();
          return () => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(0, config)),
                transform: [
                  { translateX: delayFunction(delay, animation(-25, config)) }
                ]
              },
              initialValues: Object.assign({ opacity: 1, transform: [{ translateX: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FadeOutLeft();
      }
    };
    __name(FadeOutLeft, "FadeOutLeft");
    FadeOutUp = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          const delay = this.getDelay();
          return () => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(0, config)),
                transform: [
                  { translateY: delayFunction(delay, animation(-25, config)) }
                ]
              },
              initialValues: Object.assign({ opacity: 1, transform: [{ translateY: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FadeOutUp();
      }
    };
    __name(FadeOutUp, "FadeOutUp");
    FadeOutDown = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          const delay = this.getDelay();
          return () => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(0, config)),
                transform: [
                  { translateY: delayFunction(delay, animation(25, config)) }
                ]
              },
              initialValues: Object.assign({ opacity: 1, transform: [{ translateY: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FadeOutDown();
      }
    };
    __name(FadeOutDown, "FadeOutDown");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Slide.js
var SlideInRight, SlideInLeft, SlideOutRight, SlideOutLeft, SlideInUp, SlideInDown, SlideOutUp, SlideOutDown;
var init_Slide = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Slide.js"() {
    init_animationBuilder();
    SlideInRight = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                originX: delayFunction(delay, animation(values.targetOriginX, config))
              },
              initialValues: Object.assign({ originX: values.targetOriginX + values.windowWidth }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new SlideInRight();
      }
    };
    __name(SlideInRight, "SlideInRight");
    SlideInLeft = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                originX: delayFunction(delay, animation(values.targetOriginX, config))
              },
              initialValues: Object.assign({ originX: values.targetOriginX - values.windowWidth }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new SlideInLeft();
      }
    };
    __name(SlideInLeft, "SlideInLeft");
    SlideOutRight = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                originX: delayFunction(delay, animation(Math.max(values.currentOriginX + values.windowWidth, values.windowWidth), config))
              },
              initialValues: Object.assign({ originX: values.currentOriginX }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new SlideOutRight();
      }
    };
    __name(SlideOutRight, "SlideOutRight");
    SlideOutLeft = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                originX: delayFunction(delay, animation(Math.min(values.currentOriginX - values.windowWidth, -values.windowWidth), config))
              },
              initialValues: Object.assign({ originX: values.currentOriginX }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new SlideOutLeft();
      }
    };
    __name(SlideOutLeft, "SlideOutLeft");
    SlideInUp = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                originY: delayFunction(delay, animation(values.targetOriginY, config))
              },
              initialValues: Object.assign({ originY: -values.windowHeight }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new SlideInUp();
      }
    };
    __name(SlideInUp, "SlideInUp");
    SlideInDown = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                originY: delayFunction(delay, animation(values.targetOriginY, config))
              },
              initialValues: Object.assign({ originY: values.targetOriginY + values.windowHeight }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new SlideInDown();
      }
    };
    __name(SlideInDown, "SlideInDown");
    SlideOutUp = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                originY: delayFunction(delay, animation(Math.min(values.currentOriginY - values.windowHeight, -values.windowHeight), config))
              },
              initialValues: Object.assign({ originY: values.currentOriginY }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new SlideOutUp();
      }
    };
    __name(SlideOutUp, "SlideOutUp");
    SlideOutDown = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                originY: delayFunction(delay, animation(Math.max(values.currentOriginY + values.windowHeight, values.windowHeight), config))
              },
              initialValues: Object.assign({ originY: values.currentOriginY }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new SlideOutDown();
      }
    };
    __name(SlideOutDown, "SlideOutDown");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Zoom.js
var ZoomIn, ZoomInRotate, ZoomInLeft, ZoomInRight, ZoomInUp, ZoomInDown, ZoomInEasyUp, ZoomInEasyDown, ZoomOut, ZoomOutRotate, ZoomOutLeft, ZoomOutRight, ZoomOutUp, ZoomOutDown, ZoomOutEasyUp, ZoomOutEasyDown;
var init_Zoom = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Zoom.js"() {
    init_animationBuilder();
    ZoomIn = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return () => {
            "worklet";
            return {
              animations: {
                transform: [{ scale: delayFunction(delay, animation(1, config)) }]
              },
              initialValues: Object.assign({ transform: [{ scale: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new ZoomIn();
      }
    };
    __name(ZoomIn, "ZoomIn");
    ZoomInRotate = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const rotate = this.rotateV ? this.rotateV : "0.3";
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return () => {
            "worklet";
            return {
              animations: {
                transform: [
                  { scale: delayFunction(delay, animation(1, config)) },
                  { rotate: delayFunction(delay, animation(0, config)) }
                ]
              },
              initialValues: Object.assign({ transform: [{ scale: 0 }, { rotate }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new ZoomInRotate();
      }
    };
    __name(ZoomInRotate, "ZoomInRotate");
    ZoomInLeft = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  { translateX: delayFunction(delay, animation(0, config)) },
                  { scale: delayFunction(delay, animation(1, config)) }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateX: -values.windowWidth }, { scale: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new ZoomInLeft();
      }
    };
    __name(ZoomInLeft, "ZoomInLeft");
    ZoomInRight = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  { translateX: delayFunction(delay, animation(0, config)) },
                  { scale: delayFunction(delay, animation(1, config)) }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateX: values.windowWidth }, { scale: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new ZoomInRight();
      }
    };
    __name(ZoomInRight, "ZoomInRight");
    ZoomInUp = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  { translateY: delayFunction(delay, animation(0, config)) },
                  { scale: delayFunction(delay, animation(1, config)) }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateY: -values.windowHeight }, { scale: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new ZoomInUp();
      }
    };
    __name(ZoomInUp, "ZoomInUp");
    ZoomInDown = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  { translateY: delayFunction(delay, animation(0, config)) },
                  { scale: delayFunction(delay, animation(1, config)) }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateY: values.windowHeight }, { scale: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new ZoomInDown();
      }
    };
    __name(ZoomInDown, "ZoomInDown");
    ZoomInEasyUp = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  { translateY: delayFunction(delay, animation(0, config)) },
                  { scale: delayFunction(delay, animation(1, config)) }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateY: -values.targetHeight }, { scale: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new ZoomInEasyUp();
      }
    };
    __name(ZoomInEasyUp, "ZoomInEasyUp");
    ZoomInEasyDown = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  { translateY: delayFunction(delay, animation(0, config)) },
                  { scale: delayFunction(delay, animation(1, config)) }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateY: values.targetHeight }, { scale: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new ZoomInEasyDown();
      }
    };
    __name(ZoomInEasyDown, "ZoomInEasyDown");
    ZoomOut = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return () => {
            "worklet";
            return {
              animations: {
                transform: [{ scale: delayFunction(delay, animation(0, config)) }]
              },
              initialValues: Object.assign({ transform: [{ scale: 1 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new ZoomOut();
      }
    };
    __name(ZoomOut, "ZoomOut");
    ZoomOutRotate = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const rotate = this.rotateV ? this.rotateV : "0.3";
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return () => {
            "worklet";
            return {
              animations: {
                transform: [
                  { scale: delayFunction(delay, animation(0, config)) },
                  { rotate: delayFunction(delay, animation(rotate, config)) }
                ]
              },
              initialValues: Object.assign({ transform: [{ scale: 1 }, { rotate: "0" }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new ZoomOutRotate();
      }
    };
    __name(ZoomOutRotate, "ZoomOutRotate");
    ZoomOutLeft = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  {
                    translateX: delayFunction(delay, animation(-values.windowWidth, config))
                  },
                  { scale: delayFunction(delay, animation(0, config)) }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateX: 0 }, { scale: 1 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new ZoomOutLeft();
      }
    };
    __name(ZoomOutLeft, "ZoomOutLeft");
    ZoomOutRight = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  {
                    translateX: delayFunction(delay, animation(values.windowWidth, config))
                  },
                  { scale: delayFunction(delay, animation(0, config)) }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateX: 0 }, { scale: 1 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new ZoomOutRight();
      }
    };
    __name(ZoomOutRight, "ZoomOutRight");
    ZoomOutUp = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  {
                    translateY: delayFunction(delay, animation(-values.windowHeight, config))
                  },
                  { scale: delayFunction(delay, animation(0, config)) }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateY: 0 }, { scale: 1 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new ZoomOutUp();
      }
    };
    __name(ZoomOutUp, "ZoomOutUp");
    ZoomOutDown = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  {
                    translateY: delayFunction(delay, animation(values.windowHeight, config))
                  },
                  { scale: delayFunction(delay, animation(0, config)) }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateY: 0 }, { scale: 1 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new ZoomOutDown();
      }
    };
    __name(ZoomOutDown, "ZoomOutDown");
    ZoomOutEasyUp = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  {
                    translateY: delayFunction(delay, animation(-values.currentHeight, config))
                  },
                  { scale: delayFunction(delay, animation(0, config)) }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateY: 0 }, { scale: 1 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new ZoomOutEasyUp();
      }
    };
    __name(ZoomOutEasyUp, "ZoomOutEasyUp");
    ZoomOutEasyDown = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  {
                    translateY: delayFunction(delay, animation(values.currentHeight, config))
                  },
                  { scale: delayFunction(delay, animation(0, config)) }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateY: 0 }, { scale: 1 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new ZoomOutEasyDown();
      }
    };
    __name(ZoomOutEasyDown, "ZoomOutEasyDown");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Bounce.js
var BounceIn, BounceInDown, BounceInUp, BounceInLeft, BounceInRight, BounceOut, BounceOutDown, BounceOutUp, BounceOutLeft, BounceOutRight;
var init_Bounce = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Bounce.js"() {
    init_animation();
    init_ComplexAnimationBuilder();
    BounceIn = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const delay = this.getDelay();
          const duration = this.getDuration();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return () => {
            "worklet";
            return {
              animations: {
                transform: [
                  {
                    scale: delayFunction(delay, withSequence(withTiming(1.2, { duration: duration * 0.55 }), withTiming(0.9, { duration: duration * 0.15 }), withTiming(1.1, { duration: duration * 0.15 }), withTiming(1, { duration: duration * 0.15 })))
                  }
                ]
              },
              initialValues: Object.assign({ transform: [{ scale: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new BounceIn();
      }
      static getDuration() {
        return 600;
      }
      getDuration() {
        var _a;
        return (_a = this.durationV) !== null && _a !== void 0 ? _a : 600;
      }
    };
    __name(BounceIn, "BounceIn");
    BounceInDown = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const delay = this.getDelay();
          const duration = this.getDuration();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  {
                    translateY: delayFunction(delay, withSequence(withTiming(-20, { duration: duration * 0.55 }), withTiming(10, { duration: duration * 0.15 }), withTiming(-10, { duration: duration * 0.15 }), withTiming(0, { duration: duration * 0.15 })))
                  }
                ]
              },
              initialValues: Object.assign({ transform: [
                {
                  translateY: values.windowHeight
                }
              ] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new BounceInDown();
      }
      static getDuration() {
        return 600;
      }
      getDuration() {
        var _a;
        return (_a = this.durationV) !== null && _a !== void 0 ? _a : 600;
      }
    };
    __name(BounceInDown, "BounceInDown");
    BounceInUp = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const delay = this.getDelay();
          const duration = this.getDuration();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  {
                    translateY: delayFunction(delay, withSequence(withTiming(20, { duration: duration * 0.55 }), withTiming(-10, { duration: duration * 0.15 }), withTiming(10, { duration: duration * 0.15 }), withTiming(0, { duration: duration * 0.15 })))
                  }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateY: -values.windowHeight }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new BounceInUp();
      }
      static getDuration() {
        return 600;
      }
      getDuration() {
        var _a;
        return (_a = this.durationV) !== null && _a !== void 0 ? _a : 600;
      }
    };
    __name(BounceInUp, "BounceInUp");
    BounceInLeft = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const delay = this.getDelay();
          const duration = this.getDuration();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  {
                    translateX: delayFunction(delay, withSequence(withTiming(20, { duration: duration * 0.55 }), withTiming(-10, { duration: duration * 0.15 }), withTiming(10, { duration: duration * 0.15 }), withTiming(0, { duration: duration * 0.15 })))
                  }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateX: -values.windowWidth }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new BounceInLeft();
      }
      static getDuration() {
        return 600;
      }
      getDuration() {
        var _a;
        return (_a = this.durationV) !== null && _a !== void 0 ? _a : 600;
      }
    };
    __name(BounceInLeft, "BounceInLeft");
    BounceInRight = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const delay = this.getDelay();
          const duration = this.getDuration();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  {
                    translateX: delayFunction(delay, withSequence(withTiming(-20, { duration: duration * 0.55 }), withTiming(10, { duration: duration * 0.15 }), withTiming(-10, { duration: duration * 0.15 }), withTiming(0, { duration: duration * 0.15 })))
                  }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateX: values.windowWidth }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new BounceInRight();
      }
      static getDuration() {
        return 600;
      }
      getDuration() {
        var _a;
        return (_a = this.durationV) !== null && _a !== void 0 ? _a : 600;
      }
    };
    __name(BounceInRight, "BounceInRight");
    BounceOut = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const delay = this.getDelay();
          const duration = this.getDuration();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return () => {
            "worklet";
            return {
              animations: {
                transform: [
                  {
                    scale: delayFunction(delay, withSequence(withTiming(1.1, { duration: duration * 0.15 }), withTiming(0.9, { duration: duration * 0.15 }), withTiming(1.2, { duration: duration * 0.15 }), withTiming(0, { duration: duration * 0.55 })))
                  }
                ]
              },
              initialValues: Object.assign({ transform: [{ scale: 1 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new BounceOut();
      }
      static getDuration() {
        return 600;
      }
      getDuration() {
        var _a;
        return (_a = this.durationV) !== null && _a !== void 0 ? _a : 600;
      }
    };
    __name(BounceOut, "BounceOut");
    BounceOutDown = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const delay = this.getDelay();
          const duration = this.getDuration();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  {
                    translateY: delayFunction(delay, withSequence(withTiming(-10, { duration: duration * 0.15 }), withTiming(10, { duration: duration * 0.15 }), withTiming(-20, { duration: duration * 0.15 }), withTiming(values.windowHeight, {
                      duration: duration * 0.55
                    })))
                  }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateY: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new BounceOutDown();
      }
      static getDuration() {
        return 600;
      }
      getDuration() {
        var _a;
        return (_a = this.durationV) !== null && _a !== void 0 ? _a : 600;
      }
    };
    __name(BounceOutDown, "BounceOutDown");
    BounceOutUp = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const delay = this.getDelay();
          const duration = this.getDuration();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  {
                    translateY: delayFunction(delay, withSequence(withTiming(10, { duration: duration * 0.15 }), withTiming(-10, { duration: duration * 0.15 }), withTiming(20, { duration: duration * 0.15 }), withTiming(-values.windowHeight, {
                      duration: duration * 0.55
                    })))
                  }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateY: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new BounceOutUp();
      }
      static getDuration() {
        return 600;
      }
      getDuration() {
        var _a;
        return (_a = this.durationV) !== null && _a !== void 0 ? _a : 600;
      }
    };
    __name(BounceOutUp, "BounceOutUp");
    BounceOutLeft = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const delay = this.getDelay();
          const duration = this.getDuration();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  {
                    translateX: delayFunction(delay, withSequence(withTiming(10, { duration: duration * 0.15 }), withTiming(-10, { duration: duration * 0.15 }), withTiming(20, { duration: duration * 0.15 }), withTiming(-values.windowWidth, {
                      duration: duration * 0.55
                    })))
                  }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateX: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new BounceOutLeft();
      }
      static getDuration() {
        return 600;
      }
      getDuration() {
        var _a;
        return (_a = this.durationV) !== null && _a !== void 0 ? _a : 600;
      }
    };
    __name(BounceOutLeft, "BounceOutLeft");
    BounceOutRight = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const delay = this.getDelay();
          const duration = this.getDuration();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  {
                    translateX: delayFunction(delay, withSequence(withTiming(-10, { duration: duration * 0.15 }), withTiming(10, { duration: duration * 0.15 }), withTiming(-20, { duration: duration * 0.15 }), withTiming(values.windowWidth, {
                      duration: duration * 0.55
                    })))
                  }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateX: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new BounceOutRight();
      }
      static getDuration() {
        return 600;
      }
      getDuration() {
        var _a;
        return (_a = this.durationV) !== null && _a !== void 0 ? _a : 600;
      }
    };
    __name(BounceOutRight, "BounceOutRight");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Lightspeed.js
var LightSpeedInRight, LightSpeedInLeft, LightSpeedOutRight, LightSpeedOutLeft;
var init_Lightspeed = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Lightspeed.js"() {
    init_animation();
    init_animationBuilder();
    LightSpeedInRight = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const duration = this.getDuration();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, withTiming(1, { duration })),
                transform: [
                  {
                    translateX: delayFunction(delay, animation(0, Object.assign(Object.assign({}, config), { duration: duration * 0.7 })))
                  },
                  {
                    skewX: delayFunction(delay, withSequence(withTiming("10deg", { duration: duration * 0.7 }), withTiming("-5deg", { duration: duration * 0.15 }), withTiming("0deg", { duration: duration * 0.15 })))
                  }
                ]
              },
              initialValues: Object.assign({ opacity: 0, transform: [{ translateX: values.windowWidth }, { skewX: "-45deg" }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new LightSpeedInRight();
      }
    };
    __name(LightSpeedInRight, "LightSpeedInRight");
    LightSpeedInLeft = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const duration = this.getDuration();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, withTiming(1, { duration })),
                transform: [
                  {
                    translateX: delayFunction(delay, animation(0, Object.assign(Object.assign({}, config), { duration: duration * 0.7 })))
                  },
                  {
                    skewX: delayFunction(delay, withSequence(withTiming("-10deg", { duration: duration * 0.7 }), withTiming("5deg", { duration: duration * 0.15 }), withTiming("0deg", { duration: duration * 0.15 })))
                  }
                ]
              },
              initialValues: Object.assign({ opacity: 0, transform: [{ translateX: -values.windowWidth }, { skewX: "45deg" }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new LightSpeedInLeft();
      }
    };
    __name(LightSpeedInLeft, "LightSpeedInLeft");
    LightSpeedOutRight = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(0, config)),
                transform: [
                  {
                    translateX: delayFunction(delay, animation(values.windowWidth, config))
                  },
                  {
                    skewX: delayFunction(delay, animation("-45deg", config))
                  }
                ]
              },
              initialValues: Object.assign({ opacity: 1, transform: [{ translateX: 0 }, { skewX: "0deg" }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new LightSpeedOutRight();
      }
    };
    __name(LightSpeedOutRight, "LightSpeedOutRight");
    LightSpeedOutLeft = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(0, config)),
                transform: [
                  {
                    translateX: delayFunction(delay, animation(-values.windowWidth, config))
                  },
                  {
                    skewX: delayFunction(delay, animation("45deg", config))
                  }
                ]
              },
              initialValues: Object.assign({ opacity: 1, transform: [{ translateX: 0 }, { skewX: "0deg" }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new LightSpeedOutLeft();
      }
    };
    __name(LightSpeedOutLeft, "LightSpeedOutLeft");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Pinwheel.js
var PinwheelIn, PinwheelOut;
var init_Pinwheel = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Pinwheel.js"() {
    init_animationBuilder();
    PinwheelIn = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (_values) => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(1, config)),
                transform: [
                  {
                    scale: delayFunction(delay, animation(1, config))
                  },
                  {
                    rotate: delayFunction(delay, animation("0", config))
                  }
                ]
              },
              initialValues: Object.assign({ opacity: 0, transform: [
                {
                  scale: 0
                },
                {
                  rotate: "5"
                }
              ] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new PinwheelIn();
      }
    };
    __name(PinwheelIn, "PinwheelIn");
    PinwheelOut = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (_values) => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(0, config)),
                transform: [
                  {
                    scale: delayFunction(delay, animation(0, config))
                  },
                  {
                    rotate: delayFunction(delay, animation("5", config))
                  }
                ]
              },
              initialValues: Object.assign({ opacity: 1, transform: [
                {
                  scale: 1
                },
                {
                  rotate: "0"
                }
              ] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new PinwheelOut();
      }
    };
    __name(PinwheelOut, "PinwheelOut");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Rotate.js
var RotateInDownLeft, RotateInDownRight, RotateInUpLeft, RotateInUpRight, RotateOutDownLeft, RotateOutDownRight, RotateOutUpLeft, RotateOutUpRight;
var init_Rotate = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Rotate.js"() {
    init_animationBuilder();
    RotateInDownLeft = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(1, config)),
                transform: [
                  { rotate: delayFunction(delay, animation("0deg", config)) },
                  { translateX: delayFunction(delay, animation(0, config)) },
                  { translateY: delayFunction(delay, animation(0, config)) }
                ]
              },
              initialValues: Object.assign({ opacity: 0, transform: [
                { rotate: "-90deg" },
                { translateX: values.targetWidth / 2 - values.targetHeight / 2 },
                { translateY: -(values.targetWidth / 2 - values.targetHeight / 2) }
              ] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new RotateInDownLeft();
      }
    };
    __name(RotateInDownLeft, "RotateInDownLeft");
    RotateInDownRight = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(1, config)),
                transform: [
                  { rotate: delayFunction(delay, animation("0deg", config)) },
                  { translateX: delayFunction(delay, animation(0, config)) },
                  { translateY: delayFunction(delay, animation(0, config)) }
                ]
              },
              initialValues: Object.assign({ opacity: 0, transform: [
                { rotate: "90deg" },
                { translateX: -(values.targetWidth / 2 - values.targetHeight / 2) },
                { translateY: -(values.targetWidth / 2 - values.targetHeight / 2) }
              ] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new RotateInDownRight();
      }
    };
    __name(RotateInDownRight, "RotateInDownRight");
    RotateInUpLeft = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(1, config)),
                transform: [
                  { rotate: delayFunction(delay, animation("0deg", config)) },
                  { translateX: delayFunction(delay, animation(0, config)) },
                  { translateY: delayFunction(delay, animation(0, config)) }
                ]
              },
              initialValues: Object.assign({ opacity: 0, transform: [
                { rotate: "90deg" },
                { translateX: values.targetWidth / 2 - values.targetHeight / 2 },
                { translateY: values.targetWidth / 2 - values.targetHeight / 2 }
              ] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new RotateInUpLeft();
      }
    };
    __name(RotateInUpLeft, "RotateInUpLeft");
    RotateInUpRight = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(1, config)),
                transform: [
                  { rotate: delayFunction(delay, animation("0deg", config)) },
                  { translateX: delayFunction(delay, animation(0, config)) },
                  { translateY: delayFunction(delay, animation(0, config)) }
                ]
              },
              initialValues: Object.assign({ opacity: 0, transform: [
                { rotate: "-90deg" },
                { translateX: -(values.targetWidth / 2 - values.targetHeight / 2) },
                { translateY: values.targetWidth / 2 - values.targetHeight / 2 }
              ] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new RotateInUpRight();
      }
    };
    __name(RotateInUpRight, "RotateInUpRight");
    RotateOutDownLeft = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(0, config)),
                transform: [
                  { rotate: delayFunction(delay, animation("90deg", config)) },
                  {
                    translateX: delayFunction(delay, animation(values.currentWidth / 2 - values.currentHeight / 2, config))
                  },
                  {
                    translateY: delayFunction(delay, animation(values.currentWidth / 2 - values.currentHeight / 2, config))
                  }
                ]
              },
              initialValues: Object.assign({ opacity: 1, transform: [{ rotate: "0deg" }, { translateX: 0 }, { translateY: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new RotateOutDownLeft();
      }
    };
    __name(RotateOutDownLeft, "RotateOutDownLeft");
    RotateOutDownRight = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(0, config)),
                transform: [
                  { rotate: delayFunction(delay, animation("-90deg", config)) },
                  {
                    translateX: delayFunction(delay, animation(-(values.currentWidth / 2 - values.currentHeight / 2), config))
                  },
                  {
                    translateY: delayFunction(delay, animation(values.currentWidth / 2 - values.currentHeight / 2, config))
                  }
                ]
              },
              initialValues: Object.assign({ opacity: 1, transform: [{ rotate: "0deg" }, { translateX: 0 }, { translateY: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new RotateOutDownRight();
      }
    };
    __name(RotateOutDownRight, "RotateOutDownRight");
    RotateOutUpLeft = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(0, config)),
                transform: [
                  { rotate: delayFunction(delay, animation("-90deg", config)) },
                  {
                    translateX: delayFunction(delay, animation(values.currentWidth / 2 - values.currentHeight / 2, config))
                  },
                  {
                    translateY: delayFunction(delay, animation(-(values.currentWidth / 2 - values.currentHeight / 2), config))
                  }
                ]
              },
              initialValues: Object.assign({ opacity: 1, transform: [{ rotate: "0deg" }, { translateX: 0 }, { translateY: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new RotateOutUpLeft();
      }
    };
    __name(RotateOutUpLeft, "RotateOutUpLeft");
    RotateOutUpRight = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                opacity: delayFunction(delay, animation(0, config)),
                transform: [
                  { rotate: delayFunction(delay, animation("90deg", config)) },
                  {
                    translateX: delayFunction(delay, animation(-(values.currentWidth / 2 - values.currentHeight / 2), config))
                  },
                  {
                    translateY: delayFunction(delay, animation(-(values.currentWidth / 2 - values.currentHeight / 2), config))
                  }
                ]
              },
              initialValues: Object.assign({ opacity: 1, transform: [{ rotate: "0deg" }, { translateX: 0 }, { translateY: 0 }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new RotateOutUpRight();
      }
    };
    __name(RotateOutUpRight, "RotateOutUpRight");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Roll.js
var RollInLeft, RollInRight, RollOutLeft, RollOutRight;
var init_Roll = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/Roll.js"() {
    init_animationBuilder();
    RollInLeft = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  { translateX: delayFunction(delay, animation(0), config) },
                  { rotate: delayFunction(delay, animation("0deg", config)) }
                ]
              },
              initialValues: Object.assign({ transform: [
                { translateX: -values.windowWidth },
                { rotate: "-180deg" }
              ] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new RollInLeft();
      }
    };
    __name(RollInLeft, "RollInLeft");
    RollInRight = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  { translateX: delayFunction(delay, animation(0, config)) },
                  { rotate: delayFunction(delay, animation("0deg", config)) }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateX: values.windowWidth }, { rotate: "180deg" }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new RollInRight();
      }
    };
    __name(RollInRight, "RollInRight");
    RollOutLeft = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  {
                    translateX: delayFunction(delay, animation(-values.windowWidth, config))
                  },
                  { rotate: delayFunction(delay, animation("-180deg", config)) }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateX: 0 }, { rotate: "0deg" }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new RollOutLeft();
      }
    };
    __name(RollOutLeft, "RollOutLeft");
    RollOutRight = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const delay = this.getDelay();
          const callback = this.callbackV;
          const initialValues = this.initialValues;
          return (values) => {
            "worklet";
            return {
              animations: {
                transform: [
                  {
                    translateX: delayFunction(delay, animation(values.windowWidth, config))
                  },
                  { rotate: delayFunction(delay, animation("180deg", config)) }
                ]
              },
              initialValues: Object.assign({ transform: [{ translateX: 0 }, { rotate: "0deg" }] }, initialValues),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new RollOutRight();
      }
    };
    __name(RollOutRight, "RollOutRight");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/index.js
var init_defaultAnimations = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultAnimations/index.js"() {
    init_Flip();
    init_Stretch();
    init_Fade();
    init_Slide();
    init_Zoom();
    init_Bounce();
    init_Lightspeed();
    init_Pinwheel();
    init_Rotate();
    init_Roll();
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultTransitions/LinearTransition.js
var LinearTransition, Layout;
var init_LinearTransition = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultTransitions/LinearTransition.js"() {
    init_ComplexAnimationBuilder();
    LinearTransition = class extends ComplexAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const [animation, config] = this.getAnimationAndConfig();
          const callback = this.callbackV;
          const delay = this.getDelay();
          return (values) => {
            "worklet";
            return {
              initialValues: {
                originX: values.currentOriginX,
                originY: values.currentOriginY,
                width: values.currentWidth,
                height: values.currentHeight
              },
              animations: {
                originX: delayFunction(delay, animation(values.targetOriginX, config)),
                originY: delayFunction(delay, animation(values.targetOriginY, config)),
                width: delayFunction(delay, animation(values.targetWidth, config)),
                height: delayFunction(delay, animation(values.targetHeight, config))
              },
              callback
            };
          };
        };
      }
      static createInstance() {
        return new LinearTransition();
      }
    };
    __name(LinearTransition, "LinearTransition");
    Layout = LinearTransition;
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultTransitions/FadingTransition.js
var FadingTransition;
var init_FadingTransition = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultTransitions/FadingTransition.js"() {
    init_animation();
    init_animationBuilder();
    FadingTransition = class extends BaseAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          var _a;
          const delayFunction = this.getDelayFunction();
          const callback = this.callbackV;
          const delay = this.getDelay();
          const duration = (_a = this.durationV) !== null && _a !== void 0 ? _a : 500;
          return (values) => {
            "worklet";
            return {
              initialValues: {
                opacity: 1,
                originX: values.currentOriginX,
                originY: values.currentOriginY,
                width: values.currentWidth,
                height: values.currentHeight
              },
              animations: {
                opacity: delayFunction(delay, withSequence(withTiming(0, { duration }), withTiming(1, { duration }))),
                originX: delayFunction(delay + duration, withTiming(values.targetOriginX, { duration: 50 })),
                originY: delayFunction(delay + duration, withTiming(values.targetOriginY, { duration: 50 })),
                width: delayFunction(delay + duration, withTiming(values.targetWidth, { duration: 50 })),
                height: delayFunction(delay + duration, withTiming(values.targetHeight, { duration: 50 }))
              },
              callback
            };
          };
        };
      }
      static createInstance() {
        return new FadingTransition();
      }
    };
    __name(FadingTransition, "FadingTransition");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultTransitions/SequencedTransition.js
var SequencedTransition;
var init_SequencedTransition = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultTransitions/SequencedTransition.js"() {
    init_animation();
    init_animationBuilder();
    SequencedTransition = class extends BaseAnimationBuilder {
      constructor() {
        super(...arguments);
        this.reversed = false;
        this.build = () => {
          var _a;
          const delayFunction = this.getDelayFunction();
          const callback = this.callbackV;
          const delay = this.getDelay();
          const sequenceDuration = ((_a = this.durationV) !== null && _a !== void 0 ? _a : 500) / 2;
          const config = { duration: sequenceDuration };
          const reverse = this.reversed;
          return (values) => {
            "worklet";
            return {
              initialValues: {
                originX: values.currentOriginX,
                originY: values.currentOriginY,
                width: values.currentWidth,
                height: values.currentHeight
              },
              animations: {
                originX: delayFunction(delay, withSequence(withTiming(reverse ? values.currentOriginX : values.targetOriginX, config), withTiming(values.targetOriginX, config))),
                originY: delayFunction(delay, withSequence(withTiming(reverse ? values.targetOriginY : values.currentOriginY, config), withTiming(values.targetOriginY, config))),
                width: delayFunction(delay, withSequence(withTiming(reverse ? values.currentWidth : values.targetWidth, config), withTiming(values.targetWidth, config))),
                height: delayFunction(delay, withSequence(withTiming(reverse ? values.targetHeight : values.currentHeight, config), withTiming(values.targetHeight, config)))
              },
              callback
            };
          };
        };
      }
      static createInstance() {
        return new SequencedTransition();
      }
      static reverse() {
        const instance = SequencedTransition.createInstance();
        return instance.reverse();
      }
      reverse() {
        this.reversed = !this.reversed;
        return this;
      }
    };
    __name(SequencedTransition, "SequencedTransition");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultTransitions/JumpingTransition.js
var JumpingTransition;
var init_JumpingTransition = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultTransitions/JumpingTransition.js"() {
    init_animation();
    init_Easing2();
    init_animationBuilder();
    JumpingTransition = class extends BaseAnimationBuilder {
      constructor() {
        super(...arguments);
        this.build = () => {
          var _a;
          const delayFunction = this.getDelayFunction();
          const callback = this.callbackV;
          const delay = this.getDelay();
          const duration = ((_a = this.durationV) !== null && _a !== void 0 ? _a : 300) / 2;
          const config = { duration: duration * 2 };
          return (values) => {
            "worklet";
            const d = Math.max(Math.abs(values.targetOriginX - values.currentOriginX), Math.abs(values.targetOriginY - values.currentOriginY));
            return {
              initialValues: {
                originX: values.currentOriginX,
                originY: values.currentOriginY,
                width: values.currentWidth,
                height: values.currentHeight
              },
              animations: {
                originX: delayFunction(delay, withTiming(values.targetOriginX, config)),
                originY: delayFunction(delay, withSequence(withTiming(Math.min(values.targetOriginY, values.currentOriginY) - d, {
                  duration,
                  easing: Easing2.out(Easing2.exp)
                }), withTiming(values.targetOriginY, Object.assign(Object.assign({}, config), { duration, easing: Easing2.bounce })))),
                width: delayFunction(delay, withTiming(values.targetWidth, config)),
                height: delayFunction(delay, withTiming(values.targetHeight, config))
              },
              callback
            };
          };
        };
      }
      static createInstance() {
        return new JumpingTransition();
      }
    };
    __name(JumpingTransition, "JumpingTransition");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultTransitions/CurvedTransition.js
var CurvedTransition;
var init_CurvedTransition = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultTransitions/CurvedTransition.js"() {
    init_animationBuilder();
    init_Easing2();
    init_animation();
    CurvedTransition = class extends BaseAnimationBuilder {
      constructor() {
        super(...arguments);
        this.easingXV = Easing2.in(Easing2.ease);
        this.easingYV = Easing2.out(Easing2.ease);
        this.easingWidthV = Easing2.in(Easing2.exp);
        this.easingHeightV = Easing2.out(Easing2.exp);
        this.build = () => {
          var _a;
          const delayFunction = this.getDelayFunction();
          const callback = this.callbackV;
          const delay = this.getDelay();
          const duration = (_a = this.durationV) !== null && _a !== void 0 ? _a : 300;
          const easing = {
            easingX: this.easingXV,
            easingY: this.easingYV,
            easingWidth: this.easingWidthV,
            easingHeight: this.easingHeightV
          };
          return (values) => {
            "worklet";
            return {
              initialValues: {
                originX: values.currentOriginX,
                originY: values.currentOriginY,
                width: values.currentWidth,
                height: values.currentHeight
              },
              animations: {
                originX: delayFunction(delay, withTiming(values.targetOriginX, {
                  duration,
                  easing: easing.easingX
                })),
                originY: delayFunction(delay, withTiming(values.targetOriginY, {
                  duration,
                  easing: easing.easingY
                })),
                width: delayFunction(delay, withTiming(values.targetWidth, {
                  duration,
                  easing: easing.easingWidth
                })),
                height: delayFunction(delay, withTiming(values.targetHeight, {
                  duration,
                  easing: easing.easingHeight
                }))
              },
              callback
            };
          };
        };
      }
      static createInstance() {
        return new CurvedTransition();
      }
      static easingX(easing) {
        const instance = this.createInstance();
        return instance.easingX(easing);
      }
      easingX(easing) {
        this.easingXV = easing;
        return this;
      }
      static easingY(easing) {
        const instance = this.createInstance();
        return instance.easingY(easing);
      }
      easingY(easing) {
        this.easingYV = easing;
        return this;
      }
      static easingWidth(easing) {
        const instance = this.createInstance();
        return instance.easingWidth(easing);
      }
      easingWidth(easing) {
        this.easingWidthV = easing;
        return this;
      }
      static easingHeight(easing) {
        const instance = this.createInstance();
        return instance.easingHeight(easing);
      }
      easingHeight(easing) {
        this.easingHeightV = easing;
        return this;
      }
    };
    __name(CurvedTransition, "CurvedTransition");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultTransitions/EntryExitTransition.js
function combineTransition(exiting, entering) {
  return EntryExitTransition.entering(entering).exiting(exiting);
}
var EntryExitTransition;
var init_EntryExitTransition = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultTransitions/EntryExitTransition.js"() {
    init_animationBuilder();
    init_animation();
    init_Fade();
    EntryExitTransition = class extends BaseAnimationBuilder {
      constructor() {
        super(...arguments);
        this.enteringV = FadeIn;
        this.exitingV = FadeOut;
        this.build = () => {
          const delayFunction = this.getDelayFunction();
          const callback = this.callbackV;
          const delay = this.getDelay();
          const enteringAnimation = this.enteringV.build();
          const exitingAnimation = this.exitingV.build();
          const exitingDuration = this.exitingV.getDuration();
          return (values) => {
            "worklet";
            var _a, _b, _c, _d;
            const enteringValues = enteringAnimation(values);
            const exitingValues = exitingAnimation(values);
            const animations2 = {
              transform: []
            };
            for (const prop of Object.keys(exitingValues.animations)) {
              if (prop === "transform") {
                (_a = exitingValues.animations[prop]) === null || _a === void 0 ? void 0 : _a.forEach((value, index3) => {
                  var _a2;
                  for (const transformProp of Object.keys(value)) {
                    (_a2 = animations2.transform) === null || _a2 === void 0 ? void 0 : _a2.push({
                      [transformProp]: delayFunction(delay, withSequence(value[transformProp], withTiming(exitingValues.initialValues.transform ? exitingValues.initialValues.transform[index3][transformProp] : 0, { duration: 0 })))
                    });
                  }
                });
              } else {
                const sequence = enteringValues.animations[prop] !== void 0 ? [
                  exitingValues.animations[prop],
                  withTiming(enteringValues.initialValues[prop], {
                    duration: 0
                  }),
                  enteringValues.animations[prop]
                ] : [
                  exitingValues.animations[prop],
                  withTiming(Object.keys(values).includes(prop) ? values[prop] : exitingValues.initialValues[prop], { duration: 0 })
                ];
                animations2[prop] = delayFunction(delay, withSequence(...sequence));
              }
            }
            for (const prop of Object.keys(enteringValues.animations)) {
              if (prop === "transform") {
                (_b = enteringValues.animations[prop]) === null || _b === void 0 ? void 0 : _b.forEach((value, index3) => {
                  var _a2;
                  for (const transformProp of Object.keys(value)) {
                    (_a2 = animations2.transform) === null || _a2 === void 0 ? void 0 : _a2.push({
                      [transformProp]: delayFunction(delay + exitingDuration, withSequence(withTiming(enteringValues.initialValues.transform ? enteringValues.initialValues.transform[index3][transformProp] : 0, { duration: exitingDuration }), value[transformProp]))
                    });
                  }
                });
              } else if (animations2[prop] !== void 0) {
                continue;
              } else {
                animations2[prop] = delayFunction(delay, withSequence(withTiming(enteringValues.initialValues[prop], { duration: 0 }), enteringValues.animations[prop]));
              }
            }
            const mergedTransform = ((_c = exitingValues.initialValues.transform) !== null && _c !== void 0 ? _c : []).concat(((_d = enteringValues.animations.transform) !== null && _d !== void 0 ? _d : []).map((value) => {
              const objectKeys = Object.keys(value);
              if ((objectKeys === null || objectKeys === void 0 ? void 0 : objectKeys.length) < 1) {
                console.error(`[Reanimated]: \${value} is not a valid Transform object`);
                return value;
              }
              const transformProp = objectKeys[0];
              const current = value[transformProp].current;
              if (typeof current === "string") {
                if (current.includes("deg"))
                  return {
                    [transformProp]: "0deg"
                  };
                else
                  return {
                    [transformProp]: "0"
                  };
              } else if (transformProp.includes("translate")) {
                return { [transformProp]: 0 };
              } else {
                return { [transformProp]: 1 };
              }
              return value;
            }));
            return {
              initialValues: Object.assign(Object.assign({}, exitingValues.initialValues), { originX: values.currentOriginX, originY: values.currentOriginY, width: values.currentWidth, height: values.currentHeight, transform: mergedTransform }),
              animations: Object.assign({ originX: delayFunction(delay + exitingDuration, withTiming(values.targetOriginX, { duration: exitingDuration })), originY: delayFunction(delay + exitingDuration, withTiming(values.targetOriginY, { duration: exitingDuration })), width: delayFunction(delay + exitingDuration, withTiming(values.targetWidth, { duration: exitingDuration })), height: delayFunction(delay + exitingDuration, withTiming(values.targetHeight, { duration: exitingDuration })) }, animations2),
              callback
            };
          };
        };
      }
      static createInstance() {
        return new EntryExitTransition();
      }
      static entering(animation) {
        const instance = this.createInstance();
        return instance.entering(animation);
      }
      entering(animation) {
        this.enteringV = animation;
        return this;
      }
      static exiting(animation) {
        const instance = this.createInstance();
        return instance.exiting(animation);
      }
      exiting(animation) {
        this.exitingV = animation;
        return this;
      }
    };
    __name(EntryExitTransition, "EntryExitTransition");
    __name(combineTransition, "combineTransition");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultTransitions/index.js
var init_defaultTransitions = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/defaultTransitions/index.js"() {
    init_LinearTransition();
    init_FadingTransition();
    init_SequencedTransition();
    init_JumpingTransition();
    init_CurvedTransition();
    init_EntryExitTransition();
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/index.js
var init_layoutReanimation = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/layoutReanimation/index.js"() {
    init_animationBuilder();
    init_defaultAnimations();
    init_defaultTransitions();
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/utils.js
function getRelativeCoords(parentRef, absoluteX, absoluteY) {
  "worklet";
  const parentCoords = measure(parentRef);
  if (parentCoords === null) {
    return null;
  }
  return {
    x: absoluteX - parentCoords.x,
    y: absoluteY - parentCoords.y
  };
}
var init_utils2 = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/utils.js"() {
    init_NativeMethods();
    __name(getRelativeCoords, "getRelativeCoords");
  }
});

// node_modules/react-native-reanimated/lib/reanimated2/index.js
var init_reanimated2 = __esm({
  "node_modules/react-native-reanimated/lib/reanimated2/index.js"() {
    init_core();
    init_hook();
    init_animation();
    init_interpolation();
    init_interpolateColor();
    init_Easing2();
    init_NativeMethods();
    init_Colors();
    init_PropAdapters();
    init_layoutReanimation();
    init_utils2();
    init_commonTypes();
  }
});

// node_modules/react-native-reanimated/lib/index.js
var lib_exports = {};
__export(lib_exports, {
  BaseAnimationBuilder: () => BaseAnimationBuilder,
  BounceIn: () => BounceIn,
  BounceInDown: () => BounceInDown,
  BounceInLeft: () => BounceInLeft,
  BounceInRight: () => BounceInRight,
  BounceInUp: () => BounceInUp,
  BounceOut: () => BounceOut,
  BounceOutDown: () => BounceOutDown,
  BounceOutLeft: () => BounceOutLeft,
  BounceOutRight: () => BounceOutRight,
  BounceOutUp: () => BounceOutUp,
  Clock: () => AnimatedClock,
  Code: () => AnimatedCode_default,
  ColorSpace: () => ColorSpace,
  ComplexAnimationBuilder: () => ComplexAnimationBuilder,
  CurvedTransition: () => CurvedTransition,
  Easing: () => Easing2,
  EasingNode: () => Easing,
  EntryExitTransition: () => EntryExitTransition,
  Extrapolate: () => Extrapolate,
  Extrapolation: () => Extrapolation,
  FadeIn: () => FadeIn,
  FadeInDown: () => FadeInDown,
  FadeInLeft: () => FadeInLeft,
  FadeInRight: () => FadeInRight,
  FadeInUp: () => FadeInUp,
  FadeOut: () => FadeOut,
  FadeOutDown: () => FadeOutDown,
  FadeOutLeft: () => FadeOutLeft,
  FadeOutRight: () => FadeOutRight,
  FadeOutUp: () => FadeOutUp,
  FadingTransition: () => FadingTransition,
  FlipInEasyX: () => FlipInEasyX,
  FlipInEasyY: () => FlipInEasyY,
  FlipInXDown: () => FlipInXDown,
  FlipInXUp: () => FlipInXUp,
  FlipInYLeft: () => FlipInYLeft,
  FlipInYRight: () => FlipInYRight,
  FlipOutEasyX: () => FlipOutEasyX,
  FlipOutEasyY: () => FlipOutEasyY,
  FlipOutXDown: () => FlipOutXDown,
  FlipOutXUp: () => FlipOutXUp,
  FlipOutYLeft: () => FlipOutYLeft,
  FlipOutYRight: () => FlipOutYRight,
  JumpingTransition: () => JumpingTransition,
  KeyboardState: () => KeyboardState,
  Keyframe: () => Keyframe,
  Layout: () => Layout,
  LightSpeedInLeft: () => LightSpeedInLeft,
  LightSpeedInRight: () => LightSpeedInRight,
  LightSpeedOutLeft: () => LightSpeedOutLeft,
  LightSpeedOutRight: () => LightSpeedOutRight,
  LinearTransition: () => LinearTransition,
  Node: () => AnimatedNode,
  PinwheelIn: () => PinwheelIn,
  PinwheelOut: () => PinwheelOut,
  RGBtoHSV: () => RGBtoHSV,
  RollInLeft: () => RollInLeft,
  RollInRight: () => RollInRight,
  RollOutLeft: () => RollOutLeft,
  RollOutRight: () => RollOutRight,
  RotateInDownLeft: () => RotateInDownLeft,
  RotateInDownRight: () => RotateInDownRight,
  RotateInUpLeft: () => RotateInUpLeft,
  RotateInUpRight: () => RotateInUpRight,
  RotateOutDownLeft: () => RotateOutDownLeft,
  RotateOutDownRight: () => RotateOutDownRight,
  RotateOutUpLeft: () => RotateOutUpLeft,
  RotateOutUpRight: () => RotateOutUpRight,
  SVGAdapter: () => SVGAdapter,
  SensorType: () => SensorType,
  SequencedTransition: () => SequencedTransition,
  SlideInDown: () => SlideInDown,
  SlideInLeft: () => SlideInLeft,
  SlideInRight: () => SlideInRight,
  SlideInUp: () => SlideInUp,
  SlideOutDown: () => SlideOutDown,
  SlideOutLeft: () => SlideOutLeft,
  SlideOutRight: () => SlideOutRight,
  SlideOutUp: () => SlideOutUp,
  SpringUtils: () => SpringUtils_default,
  StretchInX: () => StretchInX,
  StretchInY: () => StretchInY,
  StretchOutX: () => StretchOutX,
  StretchOutY: () => StretchOutY,
  TextInputAdapter: () => TextInputAdapter,
  Transition: () => Transition,
  Transitioning: () => Transitioning,
  Value: () => AnimatedValue,
  ZoomIn: () => ZoomIn,
  ZoomInDown: () => ZoomInDown,
  ZoomInEasyDown: () => ZoomInEasyDown,
  ZoomInEasyUp: () => ZoomInEasyUp,
  ZoomInLeft: () => ZoomInLeft,
  ZoomInRight: () => ZoomInRight,
  ZoomInRotate: () => ZoomInRotate,
  ZoomInUp: () => ZoomInUp,
  ZoomOut: () => ZoomOut,
  ZoomOutDown: () => ZoomOutDown,
  ZoomOutEasyDown: () => ZoomOutEasyDown,
  ZoomOutEasyUp: () => ZoomOutEasyUp,
  ZoomOutLeft: () => ZoomOutLeft,
  ZoomOutRight: () => ZoomOutRight,
  ZoomOutRotate: () => ZoomOutRotate,
  ZoomOutUp: () => ZoomOutUp,
  abs: () => abs,
  acc: () => acc,
  acos: () => acos,
  adapt: () => adapt,
  add: () => add,
  always: () => createAnimatedAlways,
  and: () => and,
  asin: () => asin,
  atan: () => atan,
  block: () => createAnimatedBlock,
  blue: () => blue3,
  call: () => createAnimatedCall,
  cancelAnimation: () => cancelAnimation,
  ceil: () => ceil,
  checkPluginState: () => checkPluginState,
  clockRunning: () => createAnimatedClockTest,
  color: () => color2,
  combineTransition: () => combineTransition,
  concat: () => createAnimatedConcat,
  cond: () => createAnimatedCond,
  configureProps: () => configureProps,
  convertToRGBA: () => convertToRGBA,
  cos: () => cos,
  createAnimatedPropAdapter: () => createAnimatedPropAdapter,
  createTransitioningComponent: () => createTransitioningComponent,
  debug: () => createAnimatedDebug,
  decay: () => decayWrapper,
  default: () => lib_default,
  defineAnimation: () => defineAnimation,
  defined: () => defined,
  diff: () => diff,
  diffClamp: () => diffClamp,
  divide: () => divide,
  enableLayoutAnimations: () => enableLayoutAnimations,
  eq: () => eq,
  event: () => createAnimatedEvent,
  exp: () => exp,
  floor: () => floor2,
  getRelativeCoords: () => getRelativeCoords,
  getTag: () => getTag,
  getTimestamp: () => getTimestamp,
  getViewProp: () => getViewProp,
  greaterOrEq: () => greaterOrEq,
  greaterThan: () => greaterThan,
  green: () => green3,
  hsvToColor: () => hsvToColor,
  initialUpdaterRun: () => initialUpdaterRun,
  interpolate: () => interpolate2,
  interpolateColor: () => interpolateColor,
  interpolateColors: () => interpolateColors,
  interpolateNode: () => interpolate,
  interpolateSharableColor: () => interpolateSharableColor,
  isColor: () => isColor,
  isConfigured: () => isConfigured,
  isConfiguredCheck: () => isConfiguredCheck,
  jestResetJsReanimatedModule: () => jestResetJsReanimatedModule,
  lessOrEq: () => lessOrEq,
  lessThan: () => lessThan,
  log: () => log,
  makeMutable: () => makeMutable,
  makeRemote: () => makeRemote,
  makeShareable: () => makeShareable,
  max: () => max2,
  measure: () => measure,
  min: () => min2,
  modulo: () => modulo,
  multiply: () => multiply,
  neq: () => neq,
  not: () => not,
  onChange: () => onChange,
  opacity: () => opacity,
  or: () => or,
  pow: () => pow,
  proc: () => createAnimatedFunction,
  processColor: () => processColor,
  processColorInitially: () => processColorInitially,
  red: () => red3,
  requestFrame: () => requestFrame,
  rgbaArrayToRGBAColor: () => rgbaArrayToRGBAColor,
  rgbaColor: () => rgbaColor,
  round: () => round2,
  runOnJS: () => runOnJS,
  runOnUI: () => runOnUI,
  scrollTo: () => scrollTo,
  set: () => createAnimatedSet,
  setGestureState: () => setGestureState,
  sin: () => sin,
  spring: () => springWrapper,
  sqrt: () => sqrt,
  startClock: () => createAnimatedStartClock,
  startMapper: () => startMapper,
  stopClock: () => createAnimatedStopClock,
  stopMapper: () => stopMapper,
  sub: () => sub,
  tan: () => tan,
  timing: () => timingWrapper,
  toGammaSpace: () => toGammaSpace,
  toLinearSpace: () => toLinearSpace,
  useAnimatedGestureHandler: () => useAnimatedGestureHandler,
  useAnimatedKeyboard: () => useAnimatedKeyboard,
  useAnimatedProps: () => useAnimatedProps,
  useAnimatedReaction: () => useAnimatedReaction,
  useAnimatedRef: () => useAnimatedRef,
  useAnimatedScrollHandler: () => useAnimatedScrollHandler,
  useAnimatedSensor: () => useAnimatedSensor,
  useAnimatedStyle: () => useAnimatedStyle,
  useCode: () => useCode,
  useDerivedValue: () => useDerivedValue,
  useEvent: () => useEvent4,
  useFrameCallback: () => useFrameCallback,
  useHandler: () => useHandler,
  useInterpolateConfig: () => useInterpolateConfig,
  useScrollViewOffset: () => useScrollViewOffset,
  useSharedValue: () => useSharedValue,
  useValue: () => useValue,
  useWorkletCallback: () => useWorkletCallback,
  withDecay: () => withDecay,
  withDelay: () => withDelay,
  withRepeat: () => withRepeat,
  withSequence: () => withSequence,
  withSpring: () => withSpring,
  withStyleAnimation: () => withStyleAnimation,
  withTiming: () => withTiming
});
var lib_default;
var init_lib = __esm({
  "node_modules/react-native-reanimated/lib/index.js"() {
    init_Animated();
    init_global();
    init_reanimated1();
    init_reanimated2();
    if (!global_default) {
      console.error("[Reanimated] Unable to initialize global objects for web.");
    }
    lib_default = Animated_exports;
  }
});

// node_modules/@tamagui/animations-react-native/dist/cjs/polyfill.js
var require_polyfill2 = __commonJS({
  "node_modules/@tamagui/animations-react-native/dist/cjs/polyfill.js"() {
    "use strict";
    if (typeof requestAnimationFrame === "undefined") {
      globalThis["requestAnimationFrame"] = setImmediate;
    }
  }
});

// node_modules/@tamagui/animations-react-native/dist/cjs/createAnimations.js
var require_createAnimations = __commonJS({
  "node_modules/@tamagui/animations-react-native/dist/cjs/createAnimations.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var createAnimations_exports = {};
    __export2(createAnimations_exports, {
      AnimatedText: () => AnimatedText2,
      AnimatedView: () => AnimatedView2,
      createAnimations: () => createAnimations2,
      useAnimatedNumber: () => useAnimatedNumber2,
      useAnimatedNumberReaction: () => useAnimatedNumberReaction2,
      useAnimatedNumberStyle: () => useAnimatedNumberStyle2
    });
    module2.exports = __toCommonJS2(createAnimations_exports);
    var import_use_presence = require_cjs4();
    var import_web8 = require("@tamagui/core-node");
    var import_react30 = require("react");
    var import_react_native28 = require("react-native-web-lite");
    var animatedStyleKey = {
      transform: true,
      opacity: true
    };
    var AnimatedView2 = import_react_native28.Animated.View;
    var AnimatedText2 = import_react_native28.Animated.Text;
    function useAnimatedNumber2(initial) {
      const state = (0, import_web8.useSafeRef)(
        null
      );
      if (!state.current) {
        state.current = {
          composite: null,
          val: new import_react_native28.Animated.Value(initial),
          strategy: { type: "spring" }
        };
      }
      return {
        getInstance() {
          return state.current.val;
        },
        getValue() {
          return state.current.val["_value"];
        },
        stop() {
          var _a;
          (_a = state.current.composite) == null ? void 0 : _a.stop();
          state.current.composite = null;
        },
        setValue(next, { type, ...config } = { type: "spring" }) {
          var _a, _b;
          const val2 = state.current.val;
          if (type === "direct") {
            val2.setValue(next);
          } else if (type === "spring") {
            (_a = state.current.composite) == null ? void 0 : _a.stop();
            const composite = import_react_native28.Animated.spring(val2, {
              ...config,
              toValue: next,
              useNativeDriver: !import_web8.isWeb
            });
            composite.start();
            state.current.composite = composite;
          } else {
            (_b = state.current.composite) == null ? void 0 : _b.stop();
            const composite = import_react_native28.Animated.timing(val2, {
              ...config,
              toValue: next,
              useNativeDriver: !import_web8.isWeb
            });
            composite.start();
            state.current.composite = composite;
          }
        }
      };
    }
    __name(useAnimatedNumber2, "useAnimatedNumber");
    function useAnimatedNumberReaction2(value, cb) {
      const onChange2 = (0, import_web8.useEvent)((current) => {
        cb(current.value);
      });
      (0, import_react30.useEffect)(() => {
        const id = value.getInstance().addListener(onChange2);
        return () => {
          value.getInstance().removeListener(id);
        };
      }, [value, onChange2]);
    }
    __name(useAnimatedNumberReaction2, "useAnimatedNumberReaction");
    function useAnimatedNumberStyle2(value, getStyle) {
      return getStyle(value.getInstance());
    }
    __name(useAnimatedNumberStyle2, "useAnimatedNumberStyle");
    function createAnimations2(animations2) {
      AnimatedView2["displayName"] = "AnimatedView";
      AnimatedText2["displayName"] = "AnimatedText";
      return {
        isReactNative: true,
        animations: animations2,
        View: AnimatedView2,
        Text: AnimatedText2,
        useAnimatedNumber: useAnimatedNumber2,
        useAnimatedNumberReaction: useAnimatedNumberReaction2,
        useAnimatedNumberStyle: useAnimatedNumberStyle2,
        usePresence: import_use_presence.usePresence,
        useAnimations: ({ props, onDidAnimate, style, state, presence }) => {
          const isExiting = (presence == null ? void 0 : presence[0]) === false;
          const sendExitComplete = presence == null ? void 0 : presence[1];
          const mergedStyles = style;
          const animateStyles = (0, import_web8.useSafeRef)({});
          const animatedTranforms = (0, import_web8.useSafeRef)([]);
          const animationsState = (0, import_web8.useSafeRef)(null);
          if (!animationsState.current) {
            animationsState.current = /* @__PURE__ */ new WeakMap();
          }
          const args = [
            JSON.stringify(mergedStyles),
            JSON.stringify(state),
            isExiting,
            !!onDidAnimate
          ];
          const res = (0, import_react30.useMemo)(() => {
            var _a;
            const runners = [];
            const completions = [];
            const nonAnimatedStyle = {};
            for (const key in mergedStyles) {
              const val2 = mergedStyles[key];
              if (!animatedStyleKey[key]) {
                nonAnimatedStyle[key] = val2;
                continue;
              }
              if (key !== "transform") {
                animateStyles.current[key] = update(key, animateStyles.current[key], val2);
                continue;
              }
              if (!val2)
                continue;
              for (const [index3, transform] of val2.entries()) {
                if (!transform)
                  continue;
                const tkey = Object.keys(transform)[0];
                const currentTransform = (_a = animatedTranforms.current[index3]) == null ? void 0 : _a[tkey];
                animatedTranforms.current[index3] = {
                  [tkey]: update(tkey, currentTransform, transform[tkey])
                };
                animatedTranforms.current = [...animatedTranforms.current];
              }
            }
            const animatedStyle = {
              ...Object.fromEntries(
                Object.entries(animateStyles.current).map(([k, v]) => {
                  var _a2;
                  return [
                    k,
                    ((_a2 = animationsState.current.get(v)) == null ? void 0 : _a2.interopolation) || v
                  ];
                })
              ),
              transform: animatedTranforms.current.map((r) => {
                var _a2;
                const key = Object.keys(r)[0];
                const val2 = ((_a2 = animationsState.current.get(r[key])) == null ? void 0 : _a2.interopolation) || r[key];
                return { [key]: val2 };
              })
            };
            return {
              runners,
              completions,
              style: [nonAnimatedStyle, animatedStyle]
            };
            function update(key, animated, valIn) {
              const [val2, type] = getValue2(valIn);
              const value = animated || new import_react_native28.Animated.Value(val2);
              if (import_web8.isWeb) {
                if (animated && val2 === animated["_value"]) {
                  return value;
                }
              }
              let interpolateArgs;
              if (type) {
                const curInterpolation = animationsState.current.get(value);
                interpolateArgs = getInterpolated(
                  (curInterpolation == null ? void 0 : curInterpolation.current) ?? value["_value"],
                  val2,
                  type
                );
                animationsState.current.set(value, {
                  interopolation: value.interpolate(interpolateArgs),
                  current: val2
                });
              }
              if (value) {
                const animationConfig = getAnimationConfig(key, animations2, props.animation);
                let resolve;
                const promise = new Promise((res2) => {
                  resolve = res2;
                });
                completions.push(promise);
                runners.push(() => {
                  value.stopAnimation();
                  import_react_native28.Animated[animationConfig.type || "spring"](value, {
                    toValue: val2,
                    useNativeDriver: !import_web8.isWeb,
                    ...animationConfig
                  }).start(({ finished }) => {
                    if (finished) {
                      resolve();
                    }
                  });
                });
              }
              if (process.env.NODE_ENV === "development") {
                if (props["debug"]) {
                  console.log(" \u{1F4A0} animate", key, `from ${value["_value"]} to`, valIn, `(${val2})`, "type", type, "interpolate", interpolateArgs);
                }
              }
              return value;
            }
            __name(update, "update");
          }, args);
          (0, import_web8.useIsomorphicLayoutEffect)(() => {
            res.runners.forEach((r) => r());
            let cancel = false;
            Promise.all(res.completions).then(() => {
              if (cancel)
                return;
              onDidAnimate == null ? void 0 : onDidAnimate();
              if (isExiting) {
                sendExitComplete == null ? void 0 : sendExitComplete();
              }
            });
            return () => {
              cancel = true;
            };
          }, args);
          if (process.env.NODE_ENV === "development") {
            if (props["debug"]) {
              console.log(`Returning animated`, res);
            }
          }
          return res;
        }
      };
    }
    __name(createAnimations2, "createAnimations");
    function getInterpolated(current, next, postfix = "deg") {
      if (next === current) {
        current = next - 1e-9;
      }
      const inputRange = [current, next];
      const outputRange = [`${current}${postfix}`, `${next}${postfix}`];
      if (next < current) {
        inputRange.reverse();
        outputRange.reverse();
      }
      return {
        inputRange,
        outputRange
      };
    }
    __name(getInterpolated, "getInterpolated");
    function getAnimationConfig(key, animations2, animation) {
      if (typeof animation === "string") {
        return animations2[animation];
      }
      let type = "";
      let extraConf;
      if (Array.isArray(animation)) {
        type = animation[0];
        const conf = animation[1] && animation[1][key];
        if (conf) {
          if (typeof conf === "string") {
            type = conf;
          } else {
            type = conf.type || type;
            extraConf = conf;
          }
        }
      } else {
        const val2 = animation == null ? void 0 : animation[key];
        type = val2 == null ? void 0 : val2.type;
        extraConf = val2;
      }
      const found = animations2[type];
      if (!found) {
        throw new Error(`No animation of type "${type}" for key "${key}"`);
      }
      return {
        ...found,
        ...extraConf
      };
    }
    __name(getAnimationConfig, "getAnimationConfig");
    function getValue2(input) {
      if (typeof input !== "string") {
        return [input];
      }
      const [_, number, after] = input.match(/([-0-9]+)(deg|%|px)/) ?? [];
      return [+number, after];
    }
    __name(getValue2, "getValue");
  }
});

// node_modules/@tamagui/animations-react-native/dist/cjs/index.js
var require_cjs55 = __commonJS({
  "node_modules/@tamagui/animations-react-native/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    var import_polyfill = require_polyfill2();
    __reExport2(src_exports, require_createAnimations(), module2.exports);
  }
});

// node_modules/@tamagui/animations-reanimated/dist/cjs/useAnimatedNumber.js
var require_useAnimatedNumber = __commonJS({
  "node_modules/@tamagui/animations-reanimated/dist/cjs/useAnimatedNumber.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var useAnimatedNumber_exports = {};
    __export2(useAnimatedNumber_exports, {
      useAnimatedNumber: () => import_animations_react_native.useAnimatedNumber,
      useAnimatedNumberReaction: () => import_animations_react_native.useAnimatedNumberReaction,
      useAnimatedNumberStyle: () => import_animations_react_native.useAnimatedNumberStyle
    });
    module2.exports = __toCommonJS2(useAnimatedNumber_exports);
    var import_animations_react_native = require_cjs55();
  }
});

// node_modules/@tamagui/animations-reanimated/dist/cjs/createAnimations.js
var require_createAnimations2 = __commonJS({
  "node_modules/@tamagui/animations-reanimated/dist/cjs/createAnimations.js"(exports, module2) {
    "use strict";
    var __create2 = Object.create;
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __getProtoOf2 = Object.getPrototypeOf;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toESM2 = /* @__PURE__ */ __name((mod, isNodeMode, target) => (target = mod != null ? __create2(__getProtoOf2(mod)) : {}, __copyProps2(
      // If the importer is in node compatibility mode or this is not an ESM
      // file that has been converted to a CommonJS file using a Babel-
      // compatible transform (i.e. "__esModule" has not been set), then set
      // "default" to the CommonJS "module.exports" for node compatibility.
      isNodeMode || !mod || !mod.__esModule ? __defProp2(target, "default", { value: mod, enumerable: true }) : target,
      mod
    )), "__toESM");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var createAnimations_exports = {};
    __export2(createAnimations_exports, {
      createAnimations: () => createAnimations2
    });
    module2.exports = __toCommonJS2(createAnimations_exports);
    var import_use_presence = require_cjs4();
    var import_web8 = require("@tamagui/core-node");
    var import_react30 = require("react");
    var import_react_native28 = require("react-native-web-lite");
    var import_react_native_reanimated = __toESM2((init_lib(), __toCommonJS(lib_exports)));
    var import_useAnimatedNumber = require_useAnimatedNumber();
    var _a;
    if (process.env.NODE_ENV === "development") {
      if ((_a = import_react_native28.FlatList) == null ? void 0 : _a["_isProxyWorm"]) {
        console.warn(
          `Using reanimated with excludeReactNativeWebExports including FlatList, adjust your next.config.js, reanimated currently doesn't support tree-shaking and needs *List components around.`
        );
      }
    }
    var animatedStyleKey = {
      transform: true,
      opacity: true
      // backgroundColor: true,
      // color: true,
    };
    function createAnimations2(animations2) {
      const AnimatedView2 = import_react_native_reanimated.default.View;
      const AnimatedText2 = import_react_native_reanimated.default.Text;
      AnimatedView2["displayName"] = "AnimatedView";
      AnimatedText2["displayName"] = "AnimatedText";
      return {
        isReactNative: true,
        animations: animations2,
        View: AnimatedView2,
        Text: AnimatedText2,
        // temp
        // @ts-ignore
        NumberView: import_react_native28.Animated.View,
        useAnimatedNumber: import_useAnimatedNumber.useAnimatedNumber,
        useAnimatedNumberReaction: import_useAnimatedNumber.useAnimatedNumberReaction,
        useAnimatedNumberStyle: import_useAnimatedNumber.useAnimatedNumberStyle,
        usePresence: import_use_presence.usePresence,
        useAnimations: ({ props, style, presence, pseudos, onDidAnimate, delay }) => {
          const isExiting = (presence == null ? void 0 : presence[0]) === false;
          const sendExitComplete = presence == null ? void 0 : presence[1];
          const reanimatedOnDidAnimated = (0, import_web8.useEvent)(
            (...args) => {
              onDidAnimate == null ? void 0 : onDidAnimate(...args);
            }
          );
          const all = style;
          const [animatedStyles, nonAnimatedStyle] = [{}, {}];
          for (const key2 of Object.keys(all)) {
            if (animatedStyleKey[key2]) {
              animatedStyles[key2] = all[key2];
            } else {
              nonAnimatedStyle[key2] = all[key2];
            }
          }
          const animatedString = JSON.stringify(animatedStyles);
          const key = animatedString;
          const callback = /* @__PURE__ */ __name((isExiting2, exitingStyleProps, key2, value) => {
            "worklet";
            return (completed, current) => {
              "worklet";
              (0, import_react_native_reanimated.runOnJS)(reanimatedOnDidAnimated)(key2, completed, current, {
                attemptedValue: value
              });
              if (isExiting2) {
                exitingStyleProps[key2] = false;
                const areStylesExiting = Object.values(exitingStyleProps).some(Boolean);
                if (!areStylesExiting) {
                  if (sendExitComplete) {
                    (0, import_react_native_reanimated.runOnJS)(sendExitComplete)();
                  }
                }
              }
            };
          }, "callback");
          const animatedStyle = (0, import_react_native_reanimated.useAnimatedStyle)(() => {
            "worklet";
            const style2 = JSON.parse(animatedString);
            const final = {
              transform: []
            };
            const exitingStyleProps = {};
            if (pseudos == null ? void 0 : pseudos.exitStyle) {
              for (const key2 in pseudos.exitStyle) {
                if (key2 === "transform") {
                  const val2 = pseudos.exitStyle[key2];
                  if (val2) {
                    for (const attr of val2) {
                      const tkey = Object.keys(attr)[0];
                      exitingStyleProps[tkey] = true;
                    }
                  }
                } else {
                  exitingStyleProps[key2] = true;
                }
              }
            }
            for (const key2 in style2) {
              const value = style2[key2];
              const animationConfig = getAnimationConfig(key2, animations2, props.animation);
              const { animation, config, shouldRepeat, repeatCount, repeatReverse } = getAnimation(key2, animationConfig, props.animateOnly);
              const { delayMs = null } = animationDelay(key2, animationConfig, delay);
              if (!animation) {
                console.warn("No animation for", key2, "in", style2);
                continue;
              }
              if (!config) {
                console.warn("No animation config for", key2, "in", style2);
                continue;
              }
              if (key2 === "transform") {
                if (!Array.isArray(value)) {
                  console.error(`Invalid transform value. Needs to be an array.`);
                  continue;
                }
                for (const transformObject of value) {
                  const key3 = Object.keys(transformObject)[0];
                  const transformValue = transformObject[key3];
                  let finalValue2 = animation(
                    transformValue,
                    config,
                    callback(isExiting, exitingStyleProps, key3, value)
                  );
                  if (shouldRepeat) {
                    finalValue2 = (0, import_react_native_reanimated.withRepeat)(finalValue2, repeatCount, repeatReverse);
                  }
                  final["transform"].push({
                    [key3]: finalValue2
                  });
                }
                continue;
              }
              if (typeof value === "object") {
                final[key2] = {};
                for (const innerStyleKey of Object.keys(value || {})) {
                  let finalValue2 = animation(
                    value,
                    config,
                    callback(isExiting, exitingStyleProps, key2, value)
                  );
                  if (shouldRepeat) {
                    finalValue2 = (0, import_react_native_reanimated.withRepeat)(finalValue2, repeatCount, repeatReverse);
                  }
                  if (delayMs != null) {
                    final[key2][innerStyleKey] = (0, import_react_native_reanimated.withDelay)(delayMs, finalValue2);
                  } else {
                    final[key2][innerStyleKey] = finalValue2;
                  }
                }
                continue;
              }
              let finalValue = animation(
                value,
                config,
                callback(isExiting, exitingStyleProps, key2, value)
              );
              if (shouldRepeat) {
                finalValue = (0, import_react_native_reanimated.withRepeat)(finalValue, repeatCount, repeatReverse);
              }
              if (delayMs != null && typeof delayMs === "number") {
                final[key2] = (0, import_react_native_reanimated.withDelay)(delayMs, finalValue);
              } else {
                final[key2] = finalValue;
              }
            }
            return final;
          }, [key]);
          return (0, import_react30.useMemo)(() => {
            return {
              style: [nonAnimatedStyle, animatedStyle]
            };
          }, [key]);
        }
      };
    }
    __name(createAnimations2, "createAnimations");
    function getAnimationConfig(key, animations2, animation) {
      "worklet";
      if (typeof animation === "string") {
        return animations2[animation];
      }
      let type = "";
      let extraConf;
      if (Array.isArray(animation)) {
        type = animation[0];
        const conf = animation[1] && animation[1][key];
        if (conf) {
          if (typeof conf === "string") {
            type = conf;
          } else {
            type = conf.type || type;
            extraConf = conf;
          }
        }
      } else {
        const val2 = animation == null ? void 0 : animation[key];
        type = val2 == null ? void 0 : val2.type;
        extraConf = val2;
      }
      const found = animations2[type];
      if (!found) {
        throw new Error(`No animation of type "${type}" for key "${key}"`);
      }
      return {
        ...found,
        ...extraConf,
        type: found.type
      };
    }
    __name(getAnimationConfig, "getAnimationConfig");
    function animationDelay(key, animation, defaultDelay) {
      "worklet";
      if (!animation || !animation[key] || animation[key].delayMs === void 0 || animation[key].delayMs === null) {
        return {
          delayMs: null
        };
      }
      return {
        delayMs: animation[key].delayMs
      };
    }
    __name(animationDelay, "animationDelay");
    var isColor2 = /* @__PURE__ */ __name((styleKey) => {
      "worklet";
      return [
        "backgroundColor",
        "borderBottomColor",
        "borderColor",
        "borderEndColor",
        "borderLeftColor",
        "borderRightColor",
        "borderStartColor",
        "borderTopColor",
        "color"
      ].includes(styleKey);
    }, "isColor");
    function getAnimation(key, animationConfig, animateOnly) {
      "worklet";
      if (!animationConfig || animateOnly && !animateOnly.includes(key)) {
        return {};
      }
      let repeatCount = 0;
      const repeatReverse = animationConfig.repeatReverse || false;
      let animationType = (animationConfig == null ? void 0 : animationConfig.type) || "spring";
      if (isColor2(key) || key === "opacity") {
        animationType = "timing";
      }
      if ("repeat" in animationConfig) {
        repeatCount = animationConfig.repeat || 0;
      } else {
        if (animationConfig.loop) {
          repeatCount = animationConfig.loop ? -1 : 0;
        }
      }
      let config = animationConfig;
      let animation;
      if (animationType === "timing") {
        animation = import_react_native_reanimated.withTiming;
      } else if (animationType === "spring") {
        animation = import_react_native_reanimated.withSpring;
      } else if (animationType === "decay") {
        animation = import_react_native_reanimated.withDecay;
        config = config || {
          velocity: 2,
          deceleration: 2
        };
      } else {
        animation = import_react_native_reanimated.withSpring;
      }
      return {
        animation,
        config,
        repeatReverse,
        repeatCount,
        shouldRepeat: !!repeatCount
      };
    }
    __name(getAnimation, "getAnimation");
  }
});

// node_modules/@tamagui/animations-reanimated/dist/cjs/index.js
var require_cjs56 = __commonJS({
  "node_modules/@tamagui/animations-reanimated/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __reExport2 = /* @__PURE__ */ __name((target, mod, secondTarget) => (__copyProps2(target, mod, "default"), secondTarget && __copyProps2(secondTarget, mod, "default")), "__reExport");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    module2.exports = __toCommonJS2(src_exports);
    var import_polyfill = require_polyfill();
    __reExport2(src_exports, require_createAnimations2(), module2.exports);
    __reExport2(src_exports, require_useAnimatedNumber(), module2.exports);
  }
});

// node_modules/@tamagui/font-silkscreen/dist/cjs/index.js
var require_cjs57 = __commonJS({
  "node_modules/@tamagui/font-silkscreen/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    __export2(src_exports, {
      createSilkscreenFont: () => createSilkscreenFont2
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_core37 = require("@tamagui/core-node");
    var createSilkscreenFont2 = /* @__PURE__ */ __name((font = {}) => {
      return (0, import_core37.createFont)({
        family: import_core37.isWeb ? "Silkscreen, Fira Code, Monaco, Consolas, Ubuntu Mono, monospace" : "Silkscreen",
        size: size4,
        lineHeight: Object.fromEntries(
          Object.entries(size4).map(([k, v]) => [k, v * 1.2 + 6])
        ),
        weight: {
          4: "300"
        },
        letterSpacing: {
          4: 1,
          5: 3,
          6: 3,
          9: -2,
          10: -3,
          12: -4
        },
        ...font
      });
    }, "createSilkscreenFont");
    var size4 = {
      1: 11,
      2: 12,
      3: 13,
      4: 14,
      5: 15,
      6: 16,
      7: 18,
      8: 21,
      9: 28,
      10: 42,
      11: 52,
      12: 62,
      13: 72,
      14: 92,
      15: 114,
      16: 124
    };
  }
});

// node_modules/@tamagui/font-inter/dist/cjs/index.js
var require_cjs58 = __commonJS({
  "node_modules/@tamagui/font-inter/dist/cjs/index.js"(exports, module2) {
    "use strict";
    var __defProp2 = Object.defineProperty;
    var __getOwnPropDesc2 = Object.getOwnPropertyDescriptor;
    var __getOwnPropNames2 = Object.getOwnPropertyNames;
    var __hasOwnProp2 = Object.prototype.hasOwnProperty;
    var __export2 = /* @__PURE__ */ __name((target, all) => {
      for (var name in all)
        __defProp2(target, name, { get: all[name], enumerable: true });
    }, "__export");
    var __copyProps2 = /* @__PURE__ */ __name((to, from, except, desc) => {
      if (from && typeof from === "object" || typeof from === "function") {
        for (let key of __getOwnPropNames2(from))
          if (!__hasOwnProp2.call(to, key) && key !== except)
            __defProp2(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc2(from, key)) || desc.enumerable });
      }
      return to;
    }, "__copyProps");
    var __toCommonJS2 = /* @__PURE__ */ __name((mod) => __copyProps2(__defProp2({}, "__esModule", { value: true }), mod), "__toCommonJS");
    var src_exports = {};
    __export2(src_exports, {
      createInterFont: () => createInterFont2
    });
    module2.exports = __toCommonJS2(src_exports);
    var import_core37 = require("@tamagui/core-node");
    var createInterFont2 = /* @__PURE__ */ __name((font = {}, {
      sizeLineHeight = /* @__PURE__ */ __name((size4) => size4 + 10, "sizeLineHeight"),
      sizeSize = /* @__PURE__ */ __name((size4) => size4 * 1, "sizeSize")
    } = {}) => {
      const size4 = Object.fromEntries(
        Object.entries({
          ...defaultSizes,
          ...font.size
        }).map(([k, v]) => [k, sizeSize(+v)])
      );
      return (0, import_core37.createFont)({
        family: import_core37.isWeb ? 'Inter, -apple-system, system-ui, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif' : "Inter",
        lineHeight: Object.fromEntries(
          Object.entries(size4).map(([k, v]) => [k, sizeLineHeight((0, import_core37.getVariableValue)(v))])
        ),
        weight: {
          4: "300"
        },
        letterSpacing: {
          4: 0
        },
        ...font,
        size: size4
      });
    }, "createInterFont");
    var defaultSizes = {
      1: 11,
      2: 12,
      3: 13,
      4: 14,
      true: 14,
      5: 16,
      6: 18,
      7: 20,
      8: 23,
      9: 30,
      10: 46,
      11: 55,
      12: 62,
      13: 72,
      14: 92,
      15: 114,
      16: 134
    };
  }
});

// tamagui/index.ts
var tamagui_exports = {};
__export(tamagui_exports, {
  default: () => tamagui_default
});
module.exports = __toCommonJS(tamagui_exports);

// node_modules/tamagui/dist/esm/index.mjs
var esm_exports2 = {};
__export(esm_exports2, {
  Anchor: () => Anchor,
  Article: () => Article,
  Aside: () => Aside,
  Avatar: () => Avatar,
  AvatarFallback: () => AvatarFallback,
  AvatarFallbackFrame: () => AvatarFallbackFrame,
  AvatarFrame: () => AvatarFrame,
  AvatarImage: () => AvatarImage,
  Button: () => Button2,
  ButtonFrame: () => ButtonFrame,
  ButtonText: () => ButtonText,
  Card: () => Card,
  CardBackground: () => CardBackground,
  CardFooter: () => CardFooter,
  CardFrame: () => CardFrame,
  CardHeader: () => CardHeader,
  Dialog: () => Dialog,
  DialogClose: () => DialogClose,
  DialogContent: () => DialogContent,
  DialogDescription: () => DialogDescription,
  DialogOverlay: () => DialogOverlay,
  DialogPortal: () => DialogPortal,
  DialogPortalFrame: () => DialogPortalFrame,
  DialogSheetContents: () => DialogSheetContents,
  DialogTitle: () => DialogTitle,
  DialogTrigger: () => DialogTrigger,
  DialogWarningProvider: () => DialogWarningProvider,
  EnsureFlexed: () => EnsureFlexed,
  Fieldset: () => Fieldset,
  FontLanguage: () => import_core21.FontLanguage,
  Footer: () => Footer,
  Form: () => Form,
  FormFrame: () => FormFrame,
  FormProvider: () => FormProvider,
  FormTrigger: () => FormTrigger,
  Grid: () => Grid,
  H1: () => H1,
  H2: () => H2,
  H3: () => H3,
  H4: () => H4,
  H5: () => H5,
  H6: () => H6,
  Header: () => Header,
  Heading: () => Heading,
  Input: () => Input,
  InputFrame: () => InputFrame,
  Label: () => Label,
  LabelFrame: () => LabelFrame,
  LinearGradient: () => LinearGradient,
  Main: () => Main,
  Nav: () => Nav,
  Paragraph: () => Paragraph,
  Section: () => Section,
  SizableStack: () => SizableStack,
  SizableText: () => SizableText,
  Spacer: () => import_core21.Spacer,
  Spinner: () => Spinner,
  Stack: () => import_core21.Stack,
  TamaguiProvider: () => TamaguiProvider,
  Text: () => import_core21.Text,
  TextAncestorContext: () => import_core21.TextAncestorContext,
  TextArea: () => TextArea,
  TextAreaFrame: () => TextAreaFrame,
  Theme: () => import_core21.Theme,
  ThemeableStack: () => ThemeableStack,
  Unspaced: () => import_core21.Unspaced,
  XStack: () => XStack,
  YStack: () => YStack,
  ZStack: () => ZStack,
  addTheme: () => import_core21.addTheme,
  buttonStaticConfig: () => buttonStaticConfig,
  composeRefs: () => composeRefs,
  createAvatarScope: () => createAvatarScope,
  createComponent: () => import_core21.createComponent,
  createDialogScope: () => createDialogScope,
  createFont: () => import_core21.createFont,
  createShorthands: () => import_core21.createShorthands,
  createTamagui: () => createTamagui,
  createTheme: () => import_core21.createTheme,
  createTokens: () => import_core21.createTokens,
  createVariable: () => import_core21.createVariable,
  defaultStyles: () => defaultStyles,
  fullscreenStyle: () => fullscreenStyle,
  getAnimationDriver: () => import_core21.getAnimationDriver,
  getConfig: () => import_core21.getConfig,
  getMedia: () => import_core21.getMedia,
  getStylesAtomic: () => import_core21.getStylesAtomic,
  getThemes: () => import_core21.getThemes,
  getTokens: () => import_core21.getTokens,
  getVariable: () => import_core21.getVariable,
  getVariableName: () => import_core21.getVariableName,
  getVariableValue: () => import_core21.getVariableValue,
  idFn: () => idFn,
  insertFont: () => import_core21.insertFont,
  isChrome: () => import_core21.isChrome,
  isClient: () => import_core21.isClient,
  isServer: () => import_core21.isServer,
  isServerSide: () => isServerSide,
  isTamaguiComponent: () => import_core21.isTamaguiComponent,
  isTamaguiElement: () => import_core21.isTamaguiElement,
  isTouchable: () => import_core21.isTouchable,
  isVariable: () => import_core21.isVariable,
  isWeb: () => import_core21.isWeb,
  isWebTouchable: () => import_core21.isWebTouchable,
  matchMedia: () => import_core21.matchMedia,
  mediaObjectToString: () => import_core21.mediaObjectToString,
  mediaQueryConfig: () => import_core21.mediaQueryConfig,
  mediaState: () => import_core21.mediaState,
  spacedChildren: () => import_core21.spacedChildren,
  styled: () => import_core21.styled,
  themeable: () => import_core21.themeable,
  updateTheme: () => import_core21.updateTheme,
  useButton: () => useButton,
  useComposedRefs: () => useComposedRefs,
  useControllableState: () => useControllableState,
  useDidFinishSSR: () => import_core21.useDidFinishSSR,
  useEvent: () => import_core21.useEvent,
  useForceUpdate: () => useForceUpdate,
  useFormContext: () => useFormContext,
  useGet: () => import_core21.useGet,
  useIsTouchDevice: () => import_core21.useIsTouchDevice,
  useIsomorphicLayoutEffect: () => import_core21.useIsomorphicLayoutEffect,
  useLabelContext: () => useLabelContext,
  useMedia: () => import_core21.useMedia,
  useSafeRef: () => import_core21.useSafeRef,
  useStyle: () => import_core21.useStyle,
  useTheme: () => import_core21.useTheme,
  useThemeName: () => import_core21.useThemeName,
  variableToString: () => import_core21.variableToString,
  withStaticProperties: () => import_core21.withStaticProperties,
  wrapChildrenInText: () => wrapChildrenInText
});

// node_modules/tamagui/dist/esm/setup.js
var import_core = require("@tamagui/core-node");
var React = __toESM(require("react"));
var import_react_native = require("react-native-web-lite");
globalThis.React = React;
(0, import_core.setupReactNative)({
  View: import_react_native.View,
  Text: import_react_native.Text
});
if (typeof requestAnimationFrame === "undefined") {
  globalThis["requestAnimationFrame"] = setImmediate;
}
var cancelAnimationFrame2 = globalThis.cancelAnimationFrame;
global.cancelAnimationFrame = (x) => {
  try {
    cancelAnimationFrame2(x);
  } catch {
  }
};
var idFn = /* @__PURE__ */ __name(() => {
}, "idFn");

// node_modules/tamagui/dist/esm/index.mjs
__reExport(esm_exports2, __toESM(require_cjs(), 1));
__reExport(esm_exports2, __toESM(require_cjs23(), 1));
__reExport(esm_exports2, __toESM(require_cjs5(), 1));

// node_modules/@tamagui/avatar/dist/esm/Avatar.js
var import_jsx_runtime = require("react/jsx-runtime");
var import_core6 = require("@tamagui/core-node");
var import_create_context = __toESM(require_cjs3());
var import_image = __toESM(require_cjs24());
var import_shapes = __toESM(require_cjs25());

// node_modules/@tamagui/stacks/dist/esm/Stacks.js
var import_core3 = require("@tamagui/core-node");

// node_modules/@tamagui/stacks/dist/esm/getElevation.js
var import_core2 = require("@tamagui/core-node");
var getElevation = /* @__PURE__ */ __name((size4, extras) => {
  if (!size4)
    return;
  const { tokens: tokens2 } = extras;
  const token = tokens2.size[size4];
  const sizeNum = (0, import_core2.isVariable)(token) ? +token.val : size4;
  return getSizedElevation(sizeNum, extras);
}, "getElevation");
var getSizedElevation = /* @__PURE__ */ __name((val2, { theme, tokens: tokens2 }) => {
  let num = 0;
  if (val2 === true) {
    const val22 = (0, import_core2.getVariableValue)(tokens2.size["true"]);
    if (typeof val22 === "number") {
      num = val22;
    } else {
      num = 10;
    }
  } else {
    num = +val2;
  }
  if (process.env.NODE_ENV === "development") {
    if (num !== null && isNaN(num)) {
      console.warn("NaN shadow", num, val2);
    }
  }
  const [height, shadowRadius] = [Math.round(num / 4 + 1), Math.round(num / 2 + 2)];
  const shadow = {
    shadowColor: theme.shadowColor,
    shadowRadius,
    shadowOffset: { height, width: 0 }
  };
  return shadow;
}, "getSizedElevation");

// node_modules/@tamagui/stacks/dist/esm/Stacks.js
var fullscreenStyle = {
  position: "absolute",
  top: 0,
  left: 0,
  right: 0,
  bottom: 0
};
var variants = {
  fullscreen: {
    true: fullscreenStyle
  },
  elevation: {
    "...size": getElevation
  }
};
var YStack = (0, import_core3.styled)(import_core3.Stack, {
  flexDirection: "column",
  name: "YStack",
  variants
});
var XStack = (0, import_core3.styled)(import_core3.Stack, {
  flexDirection: "row",
  name: "XStack",
  variants
});
var ZStack = (0, import_core3.styled)(
  YStack,
  {
    name: "ZStack",
    position: "relative"
  },
  {
    neverFlatten: true,
    isZStack: true
  }
);

// node_modules/@tamagui/stacks/dist/esm/SizableStack.js
var import_core4 = require("@tamagui/core-node");
var import_get_button_sized = __toESM(require_cjs11());

// node_modules/@tamagui/stacks/dist/esm/variants.js
var elevate = {
  true: (_, extras) => {
    return getElevation(extras.props["size"], extras);
  }
};
var bordered = /* @__PURE__ */ __name((val2, { props }) => {
  return {
    // TODO size it with size in '...size'
    borderWidth: typeof val2 === "number" ? val2 : 1,
    borderColor: "$borderColor",
    ...props.hoverTheme && {
      hoverStyle: {
        borderColor: "$borderColorHover"
      }
    },
    ...props.pressTheme && {
      pressStyle: {
        borderColor: "$borderColorPress"
      }
    },
    ...props.focusTheme && {
      focusStyle: {
        borderColor: "$borderColorFocus"
      }
    }
  };
}, "bordered");
var padded = {
  true: (_, extras) => {
    const { tokens: tokens2, props } = extras;
    return {
      padding: tokens2.space[props.size] || tokens2.space["$true"]
    };
  }
};
var radiused = {
  true: (_, extras) => {
    const { tokens: tokens2, props } = extras;
    return {
      borderRadius: tokens2.radius[props.size] || tokens2.radius["$true"]
    };
  }
};
var circular = {
  true: (_, { props, tokens: tokens2 }) => {
    const size4 = tokens2.size[props.size];
    return {
      width: size4,
      height: size4,
      maxWidth: size4,
      maxHeight: size4,
      minWidth: size4,
      minHeight: size4,
      borderRadius: 1e5,
      padding: 0
    };
  }
};
var hoverTheme = {
  true: {
    hoverStyle: {
      backgroundColor: "$backgroundHover",
      borderColor: "$borderColorHover"
    }
  },
  false: {}
};
var pressTheme = {
  true: {
    cursor: "pointer",
    pressStyle: {
      backgroundColor: "$backgroundPress",
      borderColor: "$borderColorPress"
    }
  },
  false: {}
};
var focusTheme = {
  true: {
    focusStyle: {
      backgroundColor: "$backgroundFocus",
      borderColor: "$borderColorFocus"
    }
  },
  false: {}
};

// node_modules/@tamagui/stacks/dist/esm/SizableStack.js
var SizableStack = (0, import_core4.styled)(YStack, {
  name: "SizableStack",
  backgroundColor: "$background",
  flexDirection: "row",
  flexShrink: 1,
  variants: {
    hoverTheme,
    pressTheme,
    focusTheme,
    circular,
    elevate,
    bordered,
    size: {
      "...size": import_get_button_sized.getButtonSized
    }
  }
});

// node_modules/@tamagui/stacks/dist/esm/ThemeableStack.js
var import_core5 = require("@tamagui/core-node");
var chromelessStyle = {
  backgroundColor: "transparent",
  borderColor: "transparent",
  shadowColor: "transparent"
};
var ThemeableStack = (0, import_core5.styled)(YStack, {
  name: "SizableStack",
  variants: {
    backgrounded: {
      true: {
        backgroundColor: "$background"
      }
    },
    radiused,
    hoverTheme,
    pressTheme,
    focusTheme,
    circular,
    padded,
    elevate,
    bordered,
    transparent: {
      true: {
        backgroundColor: "transparent"
      }
    },
    chromeless: {
      true: chromelessStyle,
      all: {
        ...chromelessStyle,
        hoverStyle: chromelessStyle,
        pressStyle: chromelessStyle,
        focusStyle: chromelessStyle
      }
    }
  }
});

// node_modules/@tamagui/avatar/dist/esm/Avatar.js
var React2 = __toESM(require("react"));
var AVATAR_NAME = "Avatar";
var [createAvatarContext, createAvatarScope] = (0, import_create_context.createContextScope)(AVATAR_NAME);
var [AvatarProvider, useAvatarContext] = createAvatarContext(AVATAR_NAME);
var IMAGE_NAME = "AvatarImage";
var AvatarImage = React2.forwardRef(
  (props, forwardedRef) => {
    var _a;
    const { __scopeAvatar, src, onLoadingStatusChange = /* @__PURE__ */ __name(() => {
    }, "onLoadingStatusChange"), ...imageProps } = props;
    const context = useAvatarContext(IMAGE_NAME, __scopeAvatar);
    const [status, setStatus] = React2.useState("idle");
    const extras = (0, import_core6.getVariantExtras)(props);
    const shapeSize = (0, import_core6.getVariableValue)(
      (_a = (0, import_shapes.getShapeSize)(context.size, extras)) == null ? void 0 : _a.width
    );
    React2.useEffect(() => {
      setStatus("idle");
    }, [JSON.stringify(src)]);
    React2.useEffect(() => {
      onLoadingStatusChange(status);
      context.onImageLoadingStatusChange(status);
    }, [status]);
    return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(YStack, { fullscreen: true, zIndex: 1, children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
      import_image.Image,
      {
        fullscreen: true,
        ...typeof shapeSize === "number" && !isNaN(shapeSize) && {
          width: shapeSize,
          height: shapeSize
        },
        ...imageProps,
        ref: forwardedRef,
        src,
        onError: () => {
          setStatus("error");
        },
        onLoad: () => {
          setStatus("loaded");
        }
      }
    ) });
  }
);
AvatarImage.displayName = IMAGE_NAME;
var FALLBACK_NAME = "AvatarFallback";
var AvatarFallbackFrame = (0, import_core6.styled)(YStack, {
  name: FALLBACK_NAME,
  position: "absolute",
  fullscreen: true,
  zIndex: 0
});
var AvatarFallback = AvatarFallbackFrame.extractable(
  React2.forwardRef(
    (props, forwardedRef) => {
      const { __scopeAvatar, delayMs, ...fallbackProps } = props;
      const context = useAvatarContext(FALLBACK_NAME, __scopeAvatar);
      const [canRender, setCanRender] = React2.useState(delayMs === void 0);
      React2.useEffect(() => {
        if (delayMs !== void 0) {
          const timerId = setTimeout(() => setCanRender(true), delayMs);
          return () => clearTimeout(timerId);
        }
      }, [delayMs]);
      return canRender && context.imageLoadingStatus !== "loaded" ? /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AvatarFallbackFrame, { ...fallbackProps, ref: forwardedRef }) : null;
    }
  )
);
AvatarFallback.displayName = FALLBACK_NAME;
var AvatarFrame = (0, import_core6.styled)(import_shapes.Square, {
  name: AVATAR_NAME,
  position: "relative",
  overflow: "hidden"
});
var Avatar = (0, import_core6.withStaticProperties)(
  React2.forwardRef(
    (props, forwardedRef) => {
      const { __scopeAvatar, size: size4 = "$true", ...avatarProps } = props;
      const [imageLoadingStatus, setImageLoadingStatus] = React2.useState("idle");
      return /* @__PURE__ */ (0, import_jsx_runtime.jsx)(
        AvatarProvider,
        {
          size: size4,
          scope: __scopeAvatar,
          imageLoadingStatus,
          onImageLoadingStatusChange: setImageLoadingStatus,
          children: /* @__PURE__ */ (0, import_jsx_runtime.jsx)(AvatarFrame, { size: size4, ...avatarProps, ref: forwardedRef })
        }
      );
    }
  ),
  {
    Image: AvatarImage,
    Fallback: AvatarFallback
  }
);
Avatar.displayName = AVATAR_NAME;

// node_modules/@tamagui/button/dist/esm/Button.js
var import_jsx_runtime3 = require("react/jsx-runtime");
var import_font_size = __toESM(require_cjs26());
var import_get_button_sized2 = __toESM(require_cjs11());
var import_helpers_tamagui = __toESM(require_cjs29());

// node_modules/@tamagui/text/dist/esm/SizableText.js
var import_get_font_sized = __toESM(require_cjs20());
var import_web = require("@tamagui/core-node");
var SizableText = (0, import_web.styled)(import_web.Text, {
  name: "SizableText",
  fontFamily: "$body",
  variants: {
    size: import_get_font_sized.getFontSized
  },
  defaultVariants: {
    size: "$true"
  }
});

// node_modules/@tamagui/text/dist/esm/Paragraph.js
var import_web2 = require("@tamagui/core-node");
var Paragraph = (0, import_web2.styled)(SizableText, {
  name: "Paragraph",
  tag: "p",
  userSelect: "auto",
  color: "$color",
  size: "$true"
});

// node_modules/@tamagui/text/dist/esm/Headings.js
var import_web3 = require("@tamagui/core-node");
var Heading = (0, import_web3.styled)(Paragraph, {
  tag: "span",
  name: "Heading",
  accessibilityRole: "header",
  fontFamily: "$heading",
  size: "$8",
  margin: 0
});
var H1 = (0, import_web3.styled)(Heading, {
  name: "H1",
  tag: "h1",
  size: "$10"
});
var H2 = (0, import_web3.styled)(Heading, {
  name: "H2",
  tag: "h2",
  size: "$9"
});
var H3 = (0, import_web3.styled)(Heading, {
  name: "H3",
  tag: "h3",
  size: "$8"
});
var H4 = (0, import_web3.styled)(Heading, {
  name: "H4",
  tag: "h4",
  size: "$7"
});
var H5 = (0, import_web3.styled)(Heading, {
  name: "H5",
  tag: "h5",
  size: "$6"
});
var H6 = (0, import_web3.styled)(Heading, {
  name: "H6",
  tag: "h6",
  size: "$5"
});

// node_modules/@tamagui/text/dist/esm/wrapChildrenInText.js
var import_jsx_runtime2 = require("react/jsx-runtime");
var import_react = __toESM(require("react"));
function wrapChildrenInText(TextComponent, propsIn, extraProps) {
  const {
    children,
    textProps,
    size: size4,
    noTextWrap,
    color: color3,
    fontFamily,
    fontSize,
    fontWeight,
    letterSpacing,
    textAlign
  } = propsIn;
  if (noTextWrap || !children) {
    return [children];
  }
  const allChildren = import_react.default.Children.toArray(children);
  const nextChildren = [];
  let lastIsString = false;
  const props = {
    ...extraProps
  };
  if (color3)
    props.color = color3;
  if (fontFamily)
    props.fontFamily = fontFamily;
  if (fontSize)
    props.fontSize = fontSize;
  if (fontWeight)
    props.fontWeight = fontWeight;
  if (letterSpacing)
    props.letterSpacing = letterSpacing;
  if (textAlign)
    props.textAlign = textAlign;
  if (size4)
    props.size = size4;
  function concatStringChildren() {
    if (!lastIsString)
      return;
    const index3 = nextChildren.length - 1;
    const childrenStrings = nextChildren[index3];
    nextChildren[index3] = /* @__PURE__ */ (0, import_jsx_runtime2.jsx)(TextComponent, { ...props, ...textProps, children: childrenStrings }, index3);
  }
  __name(concatStringChildren, "concatStringChildren");
  for (const child of allChildren) {
    const last = nextChildren[nextChildren.length - 1];
    const isString = typeof child === "string";
    if (isString) {
      if (lastIsString) {
        last.push(child);
      } else {
        nextChildren.push([child]);
      }
    } else {
      concatStringChildren();
      nextChildren.push(child);
    }
    lastIsString = isString;
  }
  concatStringChildren();
  return nextChildren;
}
__name(wrapChildrenInText, "wrapChildrenInText");

// node_modules/@tamagui/button/dist/esm/Button.js
var import_web4 = require("@tamagui/core-node");
var import_react2 = require("react");
var NAME = "Button";
var ButtonFrame = (0, import_web4.styled)(ThemeableStack, {
  name: NAME,
  tag: "button",
  justifyContent: "center",
  alignItems: "center",
  flexWrap: "nowrap",
  flexDirection: "row",
  cursor: "pointer",
  variants: {
    defaultStyle: {
      true: {
        focusable: true,
        hoverTheme: true,
        pressTheme: true,
        backgrounded: true,
        borderWidth: 1,
        borderColor: "transparent",
        pressStyle: {
          borderColor: "transparent"
        },
        hoverStyle: {
          borderColor: "transparent"
        },
        focusStyle: {
          borderColor: "$borderColorFocus"
        }
      }
    },
    size: {
      "...size": import_get_button_sized2.getButtonSized
    },
    active: {
      true: {
        hoverStyle: {
          backgroundColor: "$background"
        }
      }
    },
    disabled: {
      true: {
        pointerEvents: "none"
      }
    }
  },
  defaultVariants: {
    size: "$true"
  }
});
var ButtonText = (0, import_web4.styled)(SizableText, {
  name: "ButtonText",
  userSelect: "none",
  cursor: "pointer",
  // flexGrow 1 leads to inconsistent native style where text pushes to start of view
  flexGrow: 0,
  flexShrink: 1,
  ellipse: true,
  variants: {
    defaultStyle: {
      true: {
        color: "$color"
      }
    }
  }
});
var ButtonComponent = (0, import_react2.forwardRef)(/* @__PURE__ */ __name(function Button(props, ref) {
  const {
    props: { unstyled, ...buttonProps }
  } = useButton(props);
  return /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(ButtonFrame, { defaultStyle: !unstyled, ...buttonProps, ref });
}, "Button"));
var buttonStaticConfig = {
  inlineProps: /* @__PURE__ */ new Set([
    // text props go here (can't really optimize them, but we never fully extract button anyway)
    // may be able to remove this entirely, as the compiler / runtime have gotten better
    "color",
    "fontWeight",
    "fontSize",
    "fontFamily",
    "letterSpacing",
    "textAlign",
    "unstyled"
  ])
};
var Button2 = ButtonFrame.extractable(
  (0, import_web4.themeable)(ButtonComponent, ButtonFrame.staticConfig),
  buttonStaticConfig
);
function useButton(propsIn, { Text: Text6 = ButtonText } = { Text: ButtonText }) {
  const {
    children,
    icon,
    iconAfter,
    noTextWrap,
    theme: themeName,
    space: space2,
    spaceFlex,
    scaleIcon = 1,
    scaleSpace = 0.66,
    separator,
    // text props
    color: color3,
    fontWeight,
    letterSpacing,
    fontSize,
    fontFamily,
    textAlign,
    textProps,
    ...rest
  } = propsIn;
  const isNested = import_web4.isRSC ? false : (0, import_react2.useContext)(import_web4.ButtonNestingContext);
  const propsActive = (0, import_web4.useMediaPropsActive)(propsIn);
  const size4 = propsActive.size || "$true";
  const iconSize = (typeof size4 === "number" ? size4 * 0.5 : (0, import_font_size.getFontSize)(size4)) * scaleIcon;
  const getThemedIcon = (0, import_helpers_tamagui.useGetThemedIcon)({ size: iconSize, color: color3 });
  const [themedIcon, themedIconAfter] = [icon, iconAfter].map(getThemedIcon);
  const spaceSize = propsActive.space ?? (0, import_web4.getVariableValue)(iconSize) * scaleSpace;
  const contents = wrapChildrenInText(
    Text6,
    propsActive,
    Text6 === ButtonText ? {
      defaultStyle: !propsIn.unstyled
    } : void 0
  );
  const inner2 = (0, import_web4.spacedChildren)({
    // a bit arbitrary but scaling to font size is necessary so long as button does
    space: spaceSize,
    spaceFlex,
    separator,
    direction: propsActive.flexDirection === "column" || propsActive.flexDirection === "column-reverse" ? "vertical" : "horizontal",
    children: [themedIcon, ...contents, themedIconAfter]
  });
  const tag = isNested ? "span" : (
    // defaults to <a /> when accessibilityRole = link
    // see https://github.com/tamagui/tamagui/issues/505
    propsIn.accessibilityRole === "link" ? "a" : void 0
  );
  const props = {
    ...propsActive.disabled && {
      // in rnw - false still has keyboard tabIndex, undefined = not actually focusable
      focusable: void 0,
      // even with tabIndex unset, it will keep focusStyle on web so disable it here
      focusStyle: {
        borderColor: "$background"
      }
    },
    tag,
    ...rest,
    children: import_web4.isRSC ? inner2 : /* @__PURE__ */ (0, import_jsx_runtime3.jsx)(import_web4.ButtonNestingContext.Provider, { value: true, children: inner2 })
  };
  return {
    spaceSize,
    isNested,
    props
  };
}
__name(useButton, "useButton");

// node_modules/@tamagui/card/dist/esm/Card.js
var import_jsx_runtime4 = require("react/jsx-runtime");
var import_web5 = require("@tamagui/core-node");
var import_react3 = __toESM(require("react"));
var CardFrame = (0, import_web5.styled)(ThemeableStack, {
  name: "Card",
  backgroundColor: "$background",
  position: "relative",
  overflow: "hidden",
  variants: {
    size: {
      "...size": (val2, { tokens: tokens2 }) => {
        return {
          borderRadius: tokens2.radius[val2] ?? val2
        };
      }
    }
  },
  defaultVariants: {
    size: "$true"
  }
});
var CardHeader = (0, import_web5.styled)(ThemeableStack, {
  name: "CardHeader",
  zIndex: 10,
  backgroundColor: "transparent",
  marginBottom: "auto",
  variants: {
    size: {
      "...size": (val2, { tokens: tokens2 }) => {
        return {
          padding: tokens2.space[val2] ?? val2
        };
      }
    }
  }
});
var CardFooter = (0, import_web5.styled)(CardHeader, {
  name: "CardFooter",
  zIndex: 5,
  flexDirection: "row",
  marginTop: "auto",
  marginBottom: 0
});
var CardBackground = (0, import_web5.styled)(ThemeableStack, {
  name: "CardBackground",
  zIndex: 0,
  fullscreen: true,
  overflow: "hidden",
  pointerEvents: "none",
  padding: 0
});
var Card = (0, import_web5.withStaticProperties)(
  CardFrame.extractable(
    (0, import_react3.forwardRef)(
      ({ size: size4, __scopeCard, children, ...props }, ref) => {
        return (
          // <CardProvider scope={__scopeCard} size={size}>
          /* @__PURE__ */ (0, import_jsx_runtime4.jsx)(CardFrame, { ref, ...props, children: import_react3.default.Children.map(children, (child) => {
            if ((0, import_web5.isTamaguiElement)(child) && !child.props.size) {
              return (0, import_react3.cloneElement)(child, {
                size: size4
              });
            }
            return child;
          }) })
        );
      }
    )
  ),
  {
    Header: CardHeader,
    Footer: CardFooter,
    Background: CardBackground
  }
);

// node_modules/@tamagui/compose-refs/dist/esm/compose-refs.js
var React5 = __toESM(require("react"));
function setRef(ref, value) {
  if (typeof ref === "function") {
    ref(value);
  } else if (ref) {
    ;
    ref.current = value;
  }
}
__name(setRef, "setRef");
function composeRefs(...refs) {
  return (node) => refs.forEach((ref) => setRef(ref, node));
}
__name(composeRefs, "composeRefs");
function useComposedRefs(...refs) {
  return React5.useCallback(composeRefs(...refs), refs);
}
__name(useComposedRefs, "useComposedRefs");

// node_modules/tamagui/dist/esm/index.mjs
__reExport(esm_exports2, __toESM(require_cjs3(), 1));

// node_modules/@tamagui/dialog/dist/esm/Dialog.js
var import_jsx_runtime5 = require("react/jsx-runtime");
var import_adapt = __toESM(require_cjs());
var import_animate_presence = __toESM(require_cjs5());
var import_aria_hidden = __toESM(require_cjs6());
var import_core7 = require("@tamagui/core-node");
var import_create_context2 = __toESM(require_cjs3());
var import_dismissable = __toESM(require_cjs8());
var import_focus_scope = __toESM(require_cjs9());
var import_portal = __toESM(require_cjs13());
var import_remove_scroll = __toESM(require_cjs14());
var import_sheet = __toESM(require_cjs19());

// node_modules/@tamagui/use-event/dist/esm/useGet.js
var import_react4 = require("react");
var isWeb = process.env.TAMAGUI_TARGET === "web";
var isClient = typeof window !== "undefined";
var useIsomorphicLayoutEffect = !isWeb || isClient ? import_react4.useLayoutEffect : import_react4.useEffect;
function useGet(currentValue, initialValue, forwardToFunction) {
  const curRef = (0, import_react4.useRef)(initialValue ?? currentValue);
  useIsomorphicLayoutEffect(() => {
    curRef.current = currentValue;
  });
  return (0, import_react4.useCallback)(
    forwardToFunction ? (...args) => {
      var _a;
      return (_a = curRef.current) == null ? void 0 : _a.apply(null, args);
    } : () => curRef.current,
    []
  );
}
__name(useGet, "useGet");

// node_modules/@tamagui/use-event/dist/esm/useEvent.js
function useEvent(callback) {
  return useGet(callback, defaultValue, true);
}
__name(useEvent, "useEvent");
var defaultValue = /* @__PURE__ */ __name(() => {
  throw new Error("Cannot call an event handler while rendering.");
}, "defaultValue");

// node_modules/@tamagui/use-controllable-state/dist/esm/useControllableState.js
var import_react5 = require("react");
var emptyCallbackFn = /* @__PURE__ */ __name((_) => _(), "emptyCallbackFn");
function useControllableState({
  prop,
  defaultProp,
  onChange: onChange2,
  strategy = "prop-wins",
  preventUpdate,
  transition
}) {
  const [state, setState] = (0, import_react5.useState)(prop ?? defaultProp);
  const previous = (0, import_react5.useRef)(state);
  const propWins = strategy === "prop-wins" && prop !== void 0;
  const value = propWins ? prop : state;
  const onChangeCb = useEvent(onChange2 || idFn2);
  const transitionFn = transition ? import_react5.startTransition : emptyCallbackFn;
  (0, import_react5.useEffect)(() => {
    if (prop === void 0)
      return;
    previous.current = prop;
    transitionFn(() => {
      setState(prop);
    });
  }, [prop]);
  (0, import_react5.useEffect)(() => {
    if (propWins)
      return;
    if (state !== previous.current) {
      previous.current = state;
      onChangeCb(state);
    }
  }, [onChangeCb, state, propWins]);
  const setter = useEvent((next) => {
    if (preventUpdate)
      return;
    if (propWins) {
      const nextValue = typeof next === "function" ? next(previous.current) : next;
      onChangeCb(nextValue);
    } else {
      transitionFn(() => {
        setState(next);
      });
    }
  });
  return [value, setter];
}
__name(useControllableState, "useControllableState");
var idFn2 = /* @__PURE__ */ __name(() => {
}, "idFn");

// node_modules/@tamagui/dialog/dist/esm/Dialog.js
var React6 = __toESM(require("react"));
var DIALOG_NAME = "Dialog";
var [createDialogContext, createDialogScope] = (0, import_create_context2.createContextScope)(DIALOG_NAME);
var [DialogProvider, useDialogContext] = createDialogContext(DIALOG_NAME);
var TRIGGER_NAME = "DialogTrigger";
var DialogTriggerFrame = (0, import_core7.styled)(YStack, {
  name: TRIGGER_NAME
});
var DialogTrigger = React6.forwardRef(
  (props, forwardedRef) => {
    const { __scopeDialog, ...triggerProps } = props;
    const context = useDialogContext(TRIGGER_NAME, __scopeDialog);
    const composedTriggerRef = useComposedRefs(forwardedRef, context.triggerRef);
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
      DialogTriggerFrame,
      {
        tag: "button",
        "aria-haspopup": "dialog",
        "aria-expanded": context.open,
        "aria-controls": context.contentId,
        "data-state": getState(context.open),
        ...triggerProps,
        ref: composedTriggerRef,
        onPress: (0, import_core7.composeEventHandlers)(props.onPress, context.onOpenToggle)
      }
    );
  }
);
DialogTrigger.displayName = TRIGGER_NAME;
var PORTAL_NAME = "DialogPortal";
var [PortalProvider, usePortalContext] = createDialogContext(
  PORTAL_NAME,
  {
    forceMount: void 0
  }
);
var DialogPortalFrame = (0, import_core7.styled)(YStack, {
  alignItems: "center",
  justifyContent: "center",
  fullscreen: true,
  zIndex: 100,
  ...import_core7.isWeb && {
    maxHeight: "100vh",
    position: "fixed"
  }
});
var DialogPortalItem = /* @__PURE__ */ __name((props) => {
  const themeName = (0, import_core7.useThemeName)();
  const context = useDialogContext(PORTAL_NAME, props.__scopeDialog);
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_portal.PortalItem, { hostName: props.hostName, children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(DialogPortalItemContent, { ...props, themeName, context }) });
}, "DialogPortalItem");
function DialogPortalItemContent(props) {
  const {
    __scopeDialog,
    children,
    context,
    themeName,
    space: space2,
    spaceDirection,
    separator
  } = props;
  let childrenSpaced = children;
  if (space2 || separator) {
    childrenSpaced = (0, import_core7.spacedChildren)({
      children,
      separator,
      space: space2,
      direction: spaceDirection
    });
  }
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(DialogProvider, { scope: __scopeDialog, ...context, children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_core7.Theme, { name: themeName, children: childrenSpaced }) });
}
__name(DialogPortalItemContent, "DialogPortalItemContent");
var DialogPortal = /* @__PURE__ */ __name((props) => {
  const { __scopeDialog, forceMount, children, ...frameProps } = props;
  const context = useDialogContext(PORTAL_NAME, __scopeDialog);
  const isShowing = forceMount || context.open;
  const [isFullyHidden, setIsFullyHidden] = React6.useState(!isShowing);
  if (isShowing && isFullyHidden) {
    setIsFullyHidden(false);
  }
  const contents = /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    import_animate_presence.AnimatePresence,
    {
      onExitComplete: () => {
        setIsFullyHidden(true);
      },
      children: isShowing ? children : null
    }
  );
  const isSheet = useShowDialogSheet(context);
  if (isSheet) {
    return children;
  }
  if (context.modal) {
    if (isFullyHidden) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(DialogPortalItem, { __scopeDialog, children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(PortalProvider, { scope: __scopeDialog, forceMount, children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(DialogPortalFrame, { pointerEvents: isShowing ? "auto" : "none", ...frameProps, children: contents }) }) });
  }
  return contents;
}, "DialogPortal");
DialogPortal.displayName = PORTAL_NAME;
var OVERLAY_NAME = "DialogOverlay";
var DialogOverlayFrame = (0, import_core7.styled)(ThemeableStack, {
  name: OVERLAY_NAME,
  backgrounded: true,
  fullscreen: true
});
var DialogOverlay = React6.forwardRef(
  ({ __scopeDialog, ...props }, forwardedRef) => {
    const portalContext = usePortalContext(OVERLAY_NAME, __scopeDialog);
    const { forceMount = portalContext.forceMount, ...overlayProps } = props;
    const context = useDialogContext(OVERLAY_NAME, __scopeDialog);
    const showSheet = useShowDialogSheet(context);
    if (!forceMount) {
      if (!context.modal || showSheet) {
        return null;
      }
    }
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(DialogOverlayImpl, { context, ...overlayProps, ref: forwardedRef });
  }
);
DialogOverlay.displayName = OVERLAY_NAME;
var DialogOverlayImpl = React6.forwardRef(
  (props, forwardedRef) => {
    const { context, ...overlayProps } = props;
    return (
      // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`
      // ie. when `Overlay` and `Content` are siblings
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
        DialogOverlayFrame,
        {
          "data-state": getState(context.open),
          pointerEvents: context.open ? "auto" : "none",
          ...overlayProps,
          ref: forwardedRef
        }
      )
    );
  }
);
var CONTENT_NAME = "DialogContent";
var DialogContentFrame = (0, import_core7.styled)(ThemeableStack, {
  name: CONTENT_NAME,
  tag: "dialog",
  position: "relative",
  backgrounded: true,
  padded: true,
  radiused: true,
  elevate: true,
  variants: {
    size: {
      "...size": (val2, extras) => {
        return {};
      }
    }
  },
  defaultVariants: {
    size: "$true"
  }
});
var DialogContent = DialogContentFrame.extractable(
  React6.forwardRef(
    ({ __scopeDialog, ...props }, forwardedRef) => {
      const portalContext = usePortalContext(CONTENT_NAME, __scopeDialog);
      const { forceMount = portalContext.forceMount, ...contentProps } = props;
      const context = useDialogContext(CONTENT_NAME, __scopeDialog);
      const contents = context.modal ? /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(DialogContentModal, { context, ...contentProps, ref: forwardedRef }) : /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(DialogContentNonModal, { context, ...contentProps, ref: forwardedRef });
      if (!import_core7.isWeb) {
        return contents;
      }
      return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
        import_remove_scroll.RemoveScroll,
        {
          forwardProps: true,
          enabled: context.open,
          allowPinchZoom: context.allowPinchZoom,
          shards: [context.contentRef],
          removeScrollBar: false,
          children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)("div", { className: "_dsp_contents", children: contents })
        }
      );
    }
  )
);
DialogContent.displayName = CONTENT_NAME;
var DialogContentModal = React6.forwardRef(
  ({ children, context, ...props }, forwardedRef) => {
    const contentRef = React6.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, context.contentRef, contentRef);
    if (import_core7.isWeb) {
      React6.useEffect(() => {
        if (!context.open)
          return;
        const content = contentRef.current;
        if (content)
          return (0, import_aria_hidden.hideOthers)(content);
      }, [context.open]);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
      DialogContentImpl,
      {
        ...props,
        context,
        ref: composedRefs,
        disableOutsidePointerEvents: true,
        onCloseAutoFocus: (0, import_core7.composeEventHandlers)(props.onCloseAutoFocus, (event) => {
          var _a;
          event.preventDefault();
          (_a = context.triggerRef.current) == null ? void 0 : _a.focus();
        }),
        onPointerDownOutside: (0, import_core7.composeEventHandlers)(
          props.onPointerDownOutside,
          (event) => {
            const originalEvent = event["detail"].originalEvent;
            const ctrlLeftClick = originalEvent.button === 0 && originalEvent.ctrlKey === true;
            const isRightClick = originalEvent.button === 2 || ctrlLeftClick;
            if (isRightClick)
              event.preventDefault();
          }
        ),
        onFocusOutside: (0, import_core7.composeEventHandlers)(
          props.onFocusOutside,
          (event) => event.preventDefault()
        ),
        children
      }
    );
  }
);
var DialogContentNonModal = React6.forwardRef(
  (props, forwardedRef) => {
    const hasInteractedOutsideRef = React6.useRef(false);
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
      DialogContentImpl,
      {
        ...props,
        ref: forwardedRef,
        trapFocus: false,
        disableOutsidePointerEvents: false,
        onCloseAutoFocus: (event) => {
          var _a, _b;
          (_a = props.onCloseAutoFocus) == null ? void 0 : _a.call(props, event);
          if (!event.defaultPrevented) {
            if (!hasInteractedOutsideRef.current) {
              (_b = props.context.triggerRef.current) == null ? void 0 : _b.focus();
            }
            event.preventDefault();
          }
          hasInteractedOutsideRef.current = false;
        },
        onInteractOutside: (event) => {
          var _a;
          (_a = props.onInteractOutside) == null ? void 0 : _a.call(props, event);
          if (!event.defaultPrevented)
            hasInteractedOutsideRef.current = true;
          const target = event.target;
          const trigger = props.context.triggerRef.current;
          if (!(trigger instanceof HTMLElement))
            return;
          const targetIsTrigger = trigger.contains(target);
          if (targetIsTrigger)
            event.preventDefault();
        }
      }
    );
  }
);
var DialogContentImpl = React6.forwardRef(
  (props, forwardedRef) => {
    const {
      __scopeDialog,
      trapFocus,
      onOpenAutoFocus,
      onCloseAutoFocus,
      disableOutsidePointerEvents,
      onEscapeKeyDown,
      onPointerDownOutside,
      onFocusOutside,
      onInteractOutside,
      context,
      ...contentProps
    } = props;
    const contentRef = React6.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, contentRef);
    const showSheet = useShowDialogSheet(context);
    const contents = /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
      DialogContentFrame,
      {
        id: context.contentId,
        "aria-describedby": context.descriptionId,
        "aria-labelledby": context.titleId,
        "data-state": getState(context.open),
        ...contentProps
      }
    );
    if (showSheet) {
      return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(DialogPortalItem, { hostName: getSheetContentsName(context), children: contentProps.children });
    }
    if (!import_core7.isWeb) {
      return contents;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [
      /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
        import_focus_scope.FocusScope,
        {
          loop: true,
          trapped: trapFocus,
          onMountAutoFocus: onOpenAutoFocus,
          forceUnmount: !context.open,
          onUnmountAutoFocus: onCloseAutoFocus,
          children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
            import_dismissable.Dismissable,
            {
              disableOutsidePointerEvents: context.open && disableOutsidePointerEvents,
              forceUnmount: !context.open,
              onEscapeKeyDown,
              onPointerDownOutside,
              onFocusOutside,
              onInteractOutside,
              ref: composedRefs,
              onDismiss: () => context.onOpenChange(false),
              children: contents
            }
          )
        }
      ),
      process.env.NODE_ENV === "development" && /* @__PURE__ */ (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [
        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(TitleWarning, { titleId: context.titleId }),
        /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
          DescriptionWarning,
          {
            contentRef,
            descriptionId: context.descriptionId
          }
        )
      ] })
    ] });
  }
);
var TITLE_NAME = "DialogTitle";
var DialogTitleFrame = (0, import_core7.styled)(H2, {
  name: TITLE_NAME
});
var DialogTitle = React6.forwardRef(
  (props, forwardedRef) => {
    const { __scopeDialog, ...titleProps } = props;
    const context = useDialogContext(TITLE_NAME, __scopeDialog);
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(DialogTitleFrame, { id: context.titleId, ...titleProps, ref: forwardedRef });
  }
);
DialogTitle.displayName = TITLE_NAME;
var DialogDescriptionFrame = (0, import_core7.styled)(Paragraph, {
  name: "DialogDescription"
});
var DESCRIPTION_NAME = "DialogDescription";
var DialogDescription = React6.forwardRef(
  (props, forwardedRef) => {
    const { __scopeDialog, ...descriptionProps } = props;
    const context = useDialogContext(DESCRIPTION_NAME, __scopeDialog);
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
      DialogDescriptionFrame,
      {
        id: context.descriptionId,
        ...descriptionProps,
        ref: forwardedRef
      }
    );
  }
);
DialogDescription.displayName = DESCRIPTION_NAME;
var CLOSE_NAME = "DialogClose";
var DialogClose = React6.forwardRef(
  (props, forwardedRef) => {
    const { __scopeDialog, displayWhenAdapted, ...closeProps } = props;
    const context = useDialogContext(CLOSE_NAME, __scopeDialog, {
      warn: false,
      fallback: {}
    });
    const isSheet = useShowDialogSheet(context);
    if (isSheet && !displayWhenAdapted) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
      YStack,
      {
        tag: "button",
        accessibilityLabel: "Dialog Close",
        ...closeProps,
        ref: forwardedRef,
        onPress: (0, import_core7.composeEventHandlers)(
          props.onPress,
          () => context.onOpenChange(false)
        )
      }
    );
  }
);
DialogClose.displayName = CLOSE_NAME;
function getState(open) {
  return open ? "open" : "closed";
}
__name(getState, "getState");
var TITLE_WARNING_NAME = "DialogTitleWarning";
var [DialogWarningProvider, useWarningContext] = (0, import_create_context2.createContext)(TITLE_WARNING_NAME, {
  contentName: CONTENT_NAME,
  titleName: TITLE_NAME,
  docsSlug: "dialog"
});
var TitleWarning = /* @__PURE__ */ __name(({ titleId }) => {
  if (process.env.NODE_ENV === "development") {
    const titleWarningContext = useWarningContext(TITLE_WARNING_NAME);
    const MESSAGE = `\`${titleWarningContext.contentName}\` requires a \`${titleWarningContext.titleName}\` for the component to be accessible for screen reader users.

If you want to hide the \`${titleWarningContext.titleName}\`, you can wrap it with our VisuallyHidden component.

For more information, see https://radix-ui.com/primitives/docs/components/${titleWarningContext.docsSlug}`;
    React6.useEffect(() => {
      if (!import_core7.isWeb)
        return;
      if (titleId) {
        const hasTitle = document.getElementById(titleId);
        if (!hasTitle) {
          console.warn(MESSAGE);
        }
      }
    }, [MESSAGE, titleId]);
  }
  return null;
}, "TitleWarning");
var DESCRIPTION_WARNING_NAME = "DialogDescriptionWarning";
var DescriptionWarning = /* @__PURE__ */ __name(({
  contentRef,
  descriptionId
}) => {
  if (process.env.NODE_ENV === "development") {
    const descriptionWarningContext = useWarningContext(DESCRIPTION_WARNING_NAME);
    const MESSAGE = `Warning: Missing \`Description\` or \`aria-describedby={undefined}\` for {${descriptionWarningContext.contentName}}.`;
    React6.useEffect(() => {
      if (!import_core7.isWeb)
        return;
      const contentNode = contentRef.current;
      if (!(contentNode instanceof HTMLElement)) {
        return;
      }
      const describedById = contentNode.getAttribute("aria-describedby");
      if (descriptionId && describedById) {
        const hasDescription = document.getElementById(descriptionId);
        if (!hasDescription) {
          console.warn(MESSAGE);
        }
      }
    }, [MESSAGE, contentRef, descriptionId]);
  }
  return null;
}, "DescriptionWarning");
var Dialog = (0, import_core7.withStaticProperties)(
  React6.forwardRef(/* @__PURE__ */ __name(function Dialog2(props, ref) {
    const {
      __scopeDialog,
      children,
      open: openProp,
      defaultOpen = false,
      onOpenChange,
      modal = true,
      allowPinchZoom = false
    } = props;
    const scopeId = (0, import_core7.useId)();
    const contentId = (0, import_core7.useId)();
    const titleId = (0, import_core7.useId)();
    const descriptionId = (0, import_core7.useId)();
    const scopeKey = __scopeDialog ? Object.keys(__scopeDialog)[0] : scopeId;
    const sheetContentsName = getSheetContentsName({ scopeKey, contentId });
    const triggerRef = React6.useRef(null);
    const contentRef = React6.useRef(null);
    const [open, setOpen] = useControllableState({
      prop: openProp,
      defaultProp: defaultOpen,
      onChange: onOpenChange
    });
    const onOpenToggle = React6.useCallback(
      () => setOpen((prevOpen) => !prevOpen),
      [setOpen]
    );
    const context = {
      scope: __scopeDialog,
      scopeKey,
      triggerRef,
      contentRef,
      contentId,
      titleId,
      descriptionId,
      open,
      onOpenChange: setOpen,
      onOpenToggle,
      modal,
      allowPinchZoom
    };
    const { when, AdaptProvider } = (0, import_adapt.useAdaptParent)({
      Contents: React6.useCallback(
        (props2) => {
          return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_portal.PortalHost, { forwardProps: props2, name: sheetContentsName });
        },
        [sheetContentsName]
      )
    });
    React6.useImperativeHandle(
      ref,
      () => ({
        open: setOpen
      }),
      [setOpen]
    );
    return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(AdaptProvider, { children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(DialogProvider, { ...context, sheetBreakpoint: when, children: /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(DialogSheetController, { onOpenChange: setOpen, __scopeDialog, children }) }) });
  }, "Dialog2")),
  {
    Trigger: DialogTrigger,
    Portal: DialogPortal,
    Overlay: DialogOverlay,
    Content: DialogContent,
    Title: DialogTitle,
    Description: DialogDescription,
    Close: DialogClose,
    Sheet: import_sheet.ControlledSheet,
    Adapt: import_adapt.Adapt
  }
);
var SHEET_CONTENTS_NAME = "DialogSheetContents";
var DialogSheetContents = /* @__PURE__ */ __name(({
  name,
  ...props
}) => {
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(import_portal.PortalHost, { forwardProps: props, name });
}, "DialogSheetContents");
DialogSheetContents.displayName = SHEET_CONTENTS_NAME;
var getSheetContentsName = /* @__PURE__ */ __name(({
  scopeKey,
  contentId
}) => `${scopeKey || contentId}SheetContents`, "getSheetContentsName");
var DialogSheetController = /* @__PURE__ */ __name((props) => {
  const context = useDialogContext("DialogSheetController", props.__scopeDialog);
  const showSheet = useShowDialogSheet(context);
  const breakpointActive = useSheetBreakpointActive(context);
  const getShowSheet = (0, import_core7.useGet)(showSheet);
  return /* @__PURE__ */ (0, import_jsx_runtime5.jsx)(
    import_sheet.SheetController,
    {
      onOpenChange: (val2) => {
        if (getShowSheet()) {
          props.onOpenChange(val2);
        }
      },
      open: context.open,
      hidden: breakpointActive === false,
      children: props.children
    }
  );
}, "DialogSheetController");
var useSheetBreakpointActive = /* @__PURE__ */ __name((context) => {
  const media2 = (0, import_core7.useMedia)();
  if (!context.sheetBreakpoint)
    return false;
  if (context.sheetBreakpoint === true)
    return true;
  return media2[context.sheetBreakpoint];
}, "useSheetBreakpointActive");
var useShowDialogSheet = /* @__PURE__ */ __name((context) => {
  const breakpointActive = useSheetBreakpointActive(context);
  return context.open === false ? false : breakpointActive;
}, "useShowDialogSheet");

// node_modules/tamagui/dist/esm/index.mjs
__reExport(esm_exports2, __toESM(require_cjs26(), 1));

// node_modules/@tamagui/form/dist/esm/Form.js
var import_jsx_runtime6 = require("react/jsx-runtime");
var import_core8 = require("@tamagui/core-node");
var import_create_context3 = __toESM(require_cjs3());
var import_react6 = require("react");
var FORM_NAME = "Form";
var FormFrame = (0, import_core8.styled)(import_core8.Stack, {
  name: FORM_NAME,
  tag: "form"
});
var [createFormContext] = (0, import_create_context3.createContextScope)(FORM_NAME);
var [FormProvider, useFormContext] = createFormContext(FORM_NAME);
var TRIGGER_NAME2 = "FormTrigger";
var FormTriggerFrame = (0, import_core8.styled)(import_core8.Stack, {
  name: TRIGGER_NAME2
});
var FormTrigger = FormTriggerFrame.extractable(
  (0, import_react6.forwardRef)(
    (props, forwardedRef) => {
      const { __scopeForm, children, ...triggerProps } = props;
      const context = useFormContext(TRIGGER_NAME2, __scopeForm);
      return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(
        FormTriggerFrame,
        {
          tag: "button",
          ...triggerProps,
          children: triggerProps.asChild ? (0, import_react6.cloneElement)(children, { disabled: triggerProps.disabled }) : children,
          ref: forwardedRef,
          onPress: (0, import_core8.composeEventHandlers)(props.onPress, context.onSubmit)
        }
      );
    }
  )
);
function FormComponent({
  onSubmit,
  ...props
}) {
  return /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(FormProvider, { scope: props.__scopeForm, onSubmit, children: /* @__PURE__ */ (0, import_jsx_runtime6.jsx)(FormFrame, { ...props, onSubmit: (e) => e.preventDefault() }) });
}
__name(FormComponent, "FormComponent");
var Form = (0, import_core8.withStaticProperties)(FormFrame.extractable(FormComponent), {
  Trigger: FormTrigger
});

// node_modules/tamagui/dist/esm/index.mjs
__reExport(esm_exports2, __toESM(require_cjs30(), 1));
__reExport(esm_exports2, __toESM(require_cjs29(), 1));
__reExport(esm_exports2, __toESM(require_cjs24(), 1));

// node_modules/@tamagui/label/dist/esm/Label.js
var import_jsx_runtime7 = require("react/jsx-runtime");
var import_create_context4 = __toESM(require_cjs3());
var import_focusable = __toESM(require_cjs31());
var import_get_button_sized3 = __toESM(require_cjs11());
var import_get_font_sized2 = __toESM(require_cjs20());
var import_web6 = require("@tamagui/core-node");
var React7 = __toESM(require("react"));
var NAME2 = "Label";
var [LabelProvider, useLabelContextImpl] = (0, import_create_context4.createContext)(NAME2, {
  id: void 0,
  controlRef: { current: null }
});
var LabelFrame = (0, import_web6.styled)(SizableText, {
  name: "Label",
  tag: "label",
  variants: {
    unstyled: {
      false: {
        size: "$true",
        color: "$color",
        backgroundColor: "transparent",
        display: "flex",
        alignItems: "center",
        userSelect: "none",
        cursor: "default",
        pressStyle: {
          color: "$colorPress"
        }
      }
    },
    size: {
      "...size": (val2, extras) => {
        const buttonStyle = (0, import_get_button_sized3.getButtonSized)(val2, extras);
        return {
          ...(0, import_get_font_sized2.getFontSized)(val2, extras),
          height: buttonStyle.height,
          lineHeight: buttonStyle.height
        };
      }
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
var LabelComponent = React7.forwardRef(
  (props, forwardedRef) => {
    const { htmlFor, id: idProp, ...labelProps } = props;
    const controlRef = React7.useRef(null);
    const ref = React7.useRef(null);
    const composedRefs = useComposedRefs(forwardedRef, ref);
    const backupId = (0, import_web6.useId)();
    const id = idProp ?? backupId;
    if (import_web6.isWeb) {
      React7.useEffect(() => {
        if (htmlFor) {
          const element = document.getElementById(htmlFor);
          const label = ref.current;
          if (label && element) {
            const getAriaLabel = /* @__PURE__ */ __name(() => element.getAttribute("aria-labelledby"), "getAriaLabel");
            const ariaLabelledBy = [id, getAriaLabel()].filter(Boolean).join(" ");
            element.setAttribute("aria-labelledby", ariaLabelledBy);
            controlRef.current = element;
            return () => {
              var _a;
              if (!id)
                return;
              const ariaLabelledBy2 = (_a = getAriaLabel()) == null ? void 0 : _a.replace(id, "");
              if (ariaLabelledBy2 === "") {
                element.removeAttribute("aria-labelledby");
              } else if (ariaLabelledBy2) {
                element.setAttribute("aria-labelledby", ariaLabelledBy2);
              }
            };
          }
        }
      }, [id, htmlFor]);
    }
    return /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(LabelProvider, { id, controlRef, children: /* @__PURE__ */ (0, import_jsx_runtime7.jsx)(
      LabelFrame,
      {
        role: "label",
        id,
        htmlFor,
        ...labelProps,
        ref: composedRefs,
        onMouseDown: (event) => {
          var _a;
          (_a = props.onMouseDown) == null ? void 0 : _a.call(props, event);
          if (!event.defaultPrevented && event.detail > 1) {
            event.preventDefault();
          }
        },
        onPress: (event) => {
          var _a;
          (_a = props.onPress) == null ? void 0 : _a.call(props, event);
          if (import_web6.isWeb) {
            if (htmlFor || !controlRef.current || event.defaultPrevented)
              return;
            const isClickingControl = controlRef.current.contains(
              event.target
            );
            const isUserClick = event.isTrusted === true;
            if (!isClickingControl && isUserClick) {
              controlRef.current.click();
              controlRef.current.focus();
            }
          } else {
            if (props.htmlFor) {
              (0, import_focusable.focusFocusable)(props.htmlFor);
            }
          }
        }
      }
    ) });
  }
);
LabelComponent.displayName = NAME2;
var Label = LabelFrame.extractable((0, import_web6.themeable)(LabelComponent), {
  neverFlatten: true
});
var useLabelContext = /* @__PURE__ */ __name((element) => {
  const context = useLabelContextImpl("LabelConsumer");
  const { controlRef } = context;
  React7.useEffect(() => {
    if (element)
      controlRef.current = element;
  }, [element, controlRef]);
  return context.id;
}, "useLabelContext");

// node_modules/tamagui/dist/esm/index.mjs
__reExport(esm_exports2, __toESM(require_cjs32(), 1));
__reExport(esm_exports2, __toESM(require_cjs35(), 1));
__reExport(esm_exports2, __toESM(require_cjs34(), 1));
__reExport(esm_exports2, __toESM(require_cjs13(), 1));
__reExport(esm_exports2, __toESM(require_cjs36(), 1));
__reExport(esm_exports2, __toESM(require_cjs38(), 1));
__reExport(esm_exports2, __toESM(require_cjs18(), 1));
__reExport(esm_exports2, __toESM(require_cjs40(), 1));
__reExport(esm_exports2, __toESM(require_cjs39(), 1));
__reExport(esm_exports2, __toESM(require_cjs25(), 1));
__reExport(esm_exports2, __toESM(require_cjs19(), 1));
__reExport(esm_exports2, __toESM(require_cjs42(), 1));
__reExport(esm_exports2, __toESM(require_cjs43(), 1));
__reExport(esm_exports2, __toESM(require_cjs46(), 1));
__reExport(esm_exports2, __toESM(require_cjs47(), 1));
__reExport(esm_exports2, __toESM(require_cjs48(), 1));

// node_modules/@tamagui/use-force-update/dist/esm/index.mjs
var import_react10 = require("react");
var isServerSide = process.env.TAMAGUI_TARGET === "web" && typeof window === "undefined";
var idFn3 = /* @__PURE__ */ __name(() => {
}, "idFn");
function useForceUpdate() {
  return isServerSide ? idFn3 : (0, import_react10.useReducer)((x) => x + 1, 0)[1];
}
__name(useForceUpdate, "useForceUpdate");

// node_modules/tamagui/dist/esm/index.mjs
__reExport(esm_exports2, __toESM(require_cjs50(), 1));
__reExport(esm_exports2, __toESM(require_cjs51(), 1));
__reExport(esm_exports2, __toESM(require_cjs52(), 1));

// node_modules/tamagui/dist/esm/createTamagui.js
var import_core10 = require("@tamagui/core-node");
var createTamagui = process.env.NODE_ENV !== "development" ? import_core10.createTamagui : (conf) => {
  const sizeTokenKeys = [
    "$0",
    "$1",
    "$2",
    "$3",
    "$4",
    "$5",
    "$6",
    "$7",
    "$8",
    "$9",
    "$10",
    "$true"
  ];
  const hasKeys = /* @__PURE__ */ __name((expectedKeys, obj) => {
    return expectedKeys.every((k) => typeof obj[k] !== "undefined");
  }, "hasKeys");
  const tamaguiConfig = (0, import_core10.createTamagui)(conf);
  for (const name of ["size", "space"]) {
    const tokenSet = tamaguiConfig.tokensParsed[name];
    if (!tokenSet) {
      throw new Error(
        `Expected tokens for "${name}" in ${Object.keys(
          tamaguiConfig.tokensParsed
        ).join(", ")}`
      );
    }
    if (!hasKeys(sizeTokenKeys, tokenSet)) {
      throw new Error(`
createTamagui() missing definition for expected tokens.${name}:

Received: ${Object.keys(tokenSet).join(", ")}

Expected: ${sizeTokenKeys.join(", ")}

`);
    }
  }
  const expected = Object.keys(tamaguiConfig.tokensParsed.size);
  for (const name of ["radius", "zIndex"]) {
    const tokenSet = tamaguiConfig.tokensParsed[name];
    const received = Object.keys(tokenSet);
    const hasSomeOverlap = received.some((rk) => expected.includes(rk));
    if (!hasSomeOverlap) {
      throw new Error(`
createTamagui() invalid tokens.${name}:

Received: ${received.join(", ")}

Expected a subset of: ${expected.join(", ")}

`);
    }
  }
  return tamaguiConfig;
};

// node_modules/tamagui/dist/esm/views/TamaguiProvider.js
var import_jsx_runtime8 = require("react/jsx-runtime");
var import_core11 = require("@tamagui/core-node");
var import_portal2 = __toESM(require_cjs13());
var TamaguiProvider = import_core11.isRSC ? import_core11.TamaguiProvider : ({ children, ...props }) => {
  return /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_core11.TamaguiProvider, { ...props, children: /* @__PURE__ */ (0, import_jsx_runtime8.jsx)(import_portal2.PortalProvider, { shouldAddRootHost: true, children }) });
};

// node_modules/tamagui/dist/esm/views/Anchor.js
var import_jsx_runtime9 = require("react/jsx-runtime");
var import_core12 = require("@tamagui/core-node");
var import_react11 = require("react");
var import_react_native2 = require("react-native-web-lite");
var AnchorFrame = (0, import_core12.styled)(SizableText, {
  name: "Anchor",
  tag: "a",
  accessibilityRole: "link"
});
var Anchor = AnchorFrame.extractable(
  (0, import_react11.forwardRef)(({ href, target, ...props }, ref) => {
    return /* @__PURE__ */ (0, import_jsx_runtime9.jsx)(
      AnchorFrame,
      {
        ...props,
        ...import_core12.isWeb ? {
          href,
          target
        } : {
          onPress: (event) => {
            var _a;
            (_a = props.onPress) == null ? void 0 : _a.call(props, event);
            if (href !== void 0) {
              import_react_native2.Linking.openURL(href);
            }
          }
        },
        ref
      }
    );
  })
);

// node_modules/tamagui/dist/esm/views/EnsureFlexed.js
var import_core13 = require("@tamagui/core-node");
var EnsureFlexed = (0, import_core13.styled)(import_core13.Text, {
  opacity: 0,
  lineHeight: 0,
  height: 0,
  display: "flex",
  fontSize: 200,
  children: "wwwwwwwwwwwwwwwwwww",
  hoverStyle: {
    backgroundColor: "red"
  },
  pointerEvents: "none"
});
EnsureFlexed["isVisuallyHidden"] = true;

// node_modules/tamagui/dist/esm/views/Fieldset.js
var import_core14 = require("@tamagui/core-node");
var Fieldset = (0, import_core14.styled)(YStack, {
  name: "Fieldset",
  tag: "fieldset",
  variants: {
    horizontal: {
      true: {
        flexDirection: "row",
        alignItems: "center"
      }
    }
  }
});

// node_modules/tamagui/dist/esm/views/Grid.js
var import_jsx_runtime10 = require("react/jsx-runtime");
var import_core15 = require("@tamagui/core-node");
var import_react12 = __toESM(require("react"));
function Grid({ children, columns, itemMinWidth = 200, gap }) {
  if (import_core15.isWeb) {
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
      "div",
      {
        style: {
          gap,
          display: "grid",
          justifyContent: "stretch",
          // gridTemplateRows: 'repeat(4, 1fr)',
          gridTemplateColumns: `repeat( auto-fit, minmax(${itemMinWidth}px, 1fr) )`
          // gridTemplateColumns: '1fr 1fr',
        },
        children
      }
    );
  }
  const childrenList = import_react12.default.Children.toArray(children);
  return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(XStack, { alignItems: "center", justifyContent: "center", flexWrap: "wrap", children: childrenList.map((child, i) => {
    if (!child) {
      return null;
    }
    return /* @__PURE__ */ (0, import_jsx_runtime10.jsx)(
      XStack,
      {
        flex: 1,
        minWidth: itemMinWidth,
        marginRight: gap,
        marginBottom: gap,
        children: child
      },
      i
    );
  }) });
}
__name(Grid, "Grid");

// node_modules/tamagui/dist/esm/views/Input.js
var import_core17 = require("@tamagui/core-node");
var import_focusable2 = __toESM(require_cjs31());
var import_react_native3 = require("react-native-web-lite");

// node_modules/tamagui/dist/esm/helpers/inputHelpers.js
var import_core16 = require("@tamagui/core-node");
var import_get_button_sized4 = __toESM(require_cjs11());
var import_get_font_sized3 = __toESM(require_cjs20());
var import_get_size = __toESM(require_cjs10());
var inputSizeVariant = /* @__PURE__ */ __name((val2 = "$true", extras) => {
  if (extras.props.multiline || extras.props.numberOfLines > 1) {
    return textAreaSizeVariant(val2, extras);
  }
  const buttonStyles = (0, import_get_button_sized4.getButtonSized)(val2, extras);
  const paddingHorizontal = (0, import_get_size.stepTokenUpOrDown)("space", val2, -1, [2]);
  const fontStyle = (0, import_get_font_sized3.getFontSized)(val2, extras);
  if (!import_core16.isWeb && fontStyle) {
    delete fontStyle["lineHeight"];
  }
  return {
    ...fontStyle,
    ...buttonStyles,
    paddingHorizontal
  };
}, "inputSizeVariant");
var textAreaSizeVariant = /* @__PURE__ */ __name((val2 = "$true", extras) => {
  const { props } = extras;
  const buttonStyles = (0, import_get_button_sized4.getButtonSized)(val2, extras);
  const fontStyle = (0, import_get_font_sized3.getFontSized)(val2, extras);
  const height = props.numberOfLines ? (props.numberOfLines || 1) * (0, import_core16.getVariableValue)(fontStyle.lineHeight) : "auto";
  const paddingVertical = (0, import_get_size.stepTokenUpOrDown)("space", val2, -2, [2]);
  const paddingHorizontal = (0, import_get_size.stepTokenUpOrDown)("space", val2, -1, [2]);
  return {
    ...buttonStyles,
    ...fontStyle,
    paddingVertical,
    paddingHorizontal,
    height
  };
}, "textAreaSizeVariant");

// node_modules/tamagui/dist/esm/views/Input.js
(0, import_core17.setupReactNative)({
  TextInput: import_react_native3.TextInput
});
var defaultStyles = {
  size: "$true",
  fontFamily: "$body",
  borderWidth: 1,
  outlineWidth: 0,
  color: "$color",
  focusable: true,
  borderColor: "$borderColor",
  backgroundColor: "$background",
  placeholderTextColor: "$placeholderColor",
  // this fixes a flex bug where it overflows container
  minWidth: 0,
  hoverStyle: {
    borderColor: "$borderColorHover"
  },
  focusStyle: {
    borderColor: "$borderColorFocus",
    borderWidth: 2,
    marginHorizontal: -1
  }
};
var InputFrame = (0, import_core17.styled)(
  import_react_native3.TextInput,
  {
    name: "Input",
    variants: {
      unstyled: {
        false: defaultStyles
      },
      size: {
        "...size": inputSizeVariant
      }
    },
    defaultVariants: {
      unstyled: false
    }
  },
  {
    isInput: true
  }
);
var Input = (0, import_focusable2.focusableInputHOC)(InputFrame);

// node_modules/tamagui/dist/esm/views/Layouts.js
var import_core18 = require("@tamagui/core-node");
var Section = (0, import_core18.styled)(import_core18.Stack, {
  name: "Section",
  tag: "section",
  flexDirection: "column",
  accessibilityRole: "summary"
});
var Article = (0, import_core18.styled)(import_core18.Stack, {
  name: "Article",
  tag: "article",
  flexDirection: "column"
});
var Main = (0, import_core18.styled)(import_core18.Stack, {
  name: "Main",
  tag: "main",
  flexDirection: "column"
});
var Header = (0, import_core18.styled)(import_core18.Stack, {
  name: "Header",
  tag: "header",
  accessibilityRole: "header",
  flexDirection: "column"
});
var Aside = (0, import_core18.styled)(import_core18.Stack, {
  name: "Aside",
  tag: "aside",
  flexDirection: "column"
  // accessibilityRole: 'complementary',
});
var Footer = (0, import_core18.styled)(import_core18.Stack, {
  name: "Footer",
  tag: "footer",
  flexDirection: "column"
  // accessibilityRole: 'contentinfo',
});
var Nav = (0, import_core18.styled)(import_core18.Stack, {
  name: "Nav",
  tag: "nav",
  flexDirection: "column"
  // accessibilityRole: 'navigation',
});

// node_modules/tamagui/dist/esm/views/Spinner.js
var import_jsx_runtime11 = require("react/jsx-runtime");
var import_core19 = require("@tamagui/core-node");
var React11 = __toESM(require("react"));
var import_react_native4 = require("react-native-web-lite");
var Spinner = YStack.extractable(
  (0, import_core19.themeable)(
    React11.forwardRef((props, ref) => {
      const { size: size4, color: colorProp, ...stackProps } = props;
      const theme = (0, import_core19.useTheme)();
      let color3 = colorProp;
      if (color3 && color3[0] === "$") {
        color3 = (0, import_core19.variableToString)(theme[color3]);
      }
      return /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(YStack, { ref, ...stackProps, children: /* @__PURE__ */ (0, import_jsx_runtime11.jsx)(import_react_native4.ActivityIndicator, { size: size4, color: color3 }) });
    }),
    {
      componentName: "Spinner"
    }
  )
);

// node_modules/tamagui/dist/esm/views/TextArea.js
var import_core20 = require("@tamagui/core-node");
var import_focusable3 = __toESM(require_cjs31());
var TextAreaFrame = (0, import_core20.styled)(InputFrame, {
  name: "TextArea",
  multiline: true,
  variants: {
    unstyled: {
      false: {
        ...defaultStyles,
        height: "auto",
        numberOfLines: 4
      }
    },
    size: {
      "...size": textAreaSizeVariant
    }
  },
  defaultVariants: {
    unstyled: false
  }
});
var TextArea = (0, import_focusable3.focusableInputHOC)(TextAreaFrame);

// node_modules/tamagui/dist/esm/index.mjs
var import_core21 = require("@tamagui/core-node");
function LinearGradient(props) {
  if (process.env.NODE_ENV === "development") {
    console.warn(`LinearGradient has been moved to tamagui/linear-gradient as of 1.1`);
  }
  return null;
}
__name(LinearGradient, "LinearGradient");

// tamagui/tamagui.config.ts
var import_shorthands = __toESM(require_cjs53());

// node_modules/@tamagui/create-theme/dist/esm/index.js
var THEME_INFO = /* @__PURE__ */ new WeakMap();
function createTheme2(palette, definition, options) {
  const theme = {
    ...Object.fromEntries(
      Object.entries(definition).map(([key, offset3]) => {
        return [key, getValue(palette, offset3)];
      })
    ),
    ...options == null ? void 0 : options.nonInheritedValues
  };
  THEME_INFO.set(theme, { palette, definition, cache: /* @__PURE__ */ new Map() });
  return theme;
}
__name(createTheme2, "createTheme");
var getValue = /* @__PURE__ */ __name((palette, value) => {
  if (typeof value === "string")
    return value;
  const max3 = palette.length - 1;
  const isPositive = value === 0 ? !isMinusZero(value) : value >= 0;
  const next = isPositive ? value : max3 + value;
  const index3 = Math.min(Math.max(0, next), max3);
  return palette[index3];
}, "getValue");
function addChildren(themes2, getChildren2) {
  const out2 = { ...themes2 };
  for (const key in themes2) {
    const subThemes = getChildren2(key, themes2[key]);
    for (const sKey in subThemes) {
      out2[`${key}_${sKey}`] = subThemes[sKey];
    }
  }
  return out2;
}
__name(addChildren, "addChildren");
var createShiftMask = /* @__PURE__ */ __name(({ inverse } = {}) => {
  return (template2, { skip: skip2, max: maxIn, palette, min: min3 = 0, strength = 1 }) => {
    const values = Object.entries(template2);
    const max3 = maxIn ?? (palette ? Object.values(palette).length - 1 : Infinity);
    const out2 = {};
    for (const [key, value] of values) {
      if (typeof value === "string")
        continue;
      if (skip2 && key in skip2) {
        continue;
      }
      const isPositive = value === 0 ? !isMinusZero(value) : value >= 0;
      const direction = isPositive ? 1 : -1;
      const invert = inverse ? -1 : 1;
      const next = value + strength * direction * invert;
      const clamped = isPositive ? Math.max(min3, Math.min(max3, next)) : Math.min(-min3, Math.max(-max3, next));
      out2[key] = clamped;
    }
    return out2;
  };
}, "createShiftMask");
var createWeakenMask = /* @__PURE__ */ __name(() => createShiftMask(), "createWeakenMask");
var createStrengthenMask = /* @__PURE__ */ __name(() => createShiftMask({ inverse: true }), "createStrengthenMask");
function isMinusZero(value) {
  return 1 / value === -Infinity;
}
__name(isMinusZero, "isMinusZero");
var MaskKeyCache = /* @__PURE__ */ new WeakMap();
function applyMask(theme, mask, options = {}) {
  const info = THEME_INFO.get(theme);
  if (!info) {
    throw new Error(
      process.env.NODE_ENV !== "production" ? `No info found for theme, you must pass the theme created by createThemeFromPalette directly to extendTheme` : `\u274C Err2`
    );
  }
  const maskKey = MaskKeyCache.get(mask) ?? `${Math.random()}`;
  MaskKeyCache.set(mask, maskKey);
  const key = `${maskKey}${JSON.stringify(options)}`;
  if (info.cache.has(key)) {
    return info.cache.get(key);
  }
  const template2 = mask(info.definition, {
    palette: info.palette,
    ...options
  });
  const next = createTheme2(info.palette, template2);
  info.cache.set(key, next);
  return next;
}
__name(applyMask, "applyMask");
if (process.env.NODE_ENV === "development") {
  const palette = ["0", "1", "2", "3", "-3", "-2", "-1", "-0"];
  const template2 = { bg: 1, fg: -1 };
  const stongerMask = createStrengthenMask();
  const weakerMask = createWeakenMask();
  const theme = createTheme2(palette, template2);
  if (theme.bg !== "1")
    throw `\u274C`;
  if (theme.fg !== "-1")
    throw `\u274C`;
  const str = applyMask(theme, stongerMask);
  if (str.bg !== "0")
    throw `\u274C`;
  if (str.fg !== "-0")
    throw `\u274C`;
  const weak = applyMask(theme, weakerMask);
  if (weak.bg !== "2")
    throw `\u274C`;
  if (weak.fg !== "-2")
    throw `\u274C`;
  const weak2 = applyMask(theme, weakerMask, { strength: 2 });
  if (weak2.bg !== "3")
    throw `\u274C`;
  if (weak2.fg !== "-3")
    throw `\u274C`;
}

// node_modules/@tamagui/colors/dist/esm/dark/blue.js
var blue = {
  blue1: "hsl(212, 35.0%, 9.2%)",
  blue2: "hsl(216, 50.0%, 11.8%)",
  blue3: "hsl(214, 59.4%, 15.3%)",
  blue4: "hsl(214, 65.8%, 17.9%)",
  blue5: "hsl(213, 71.2%, 20.2%)",
  blue6: "hsl(212, 77.4%, 23.1%)",
  blue7: "hsl(211, 85.1%, 27.4%)",
  blue8: "hsl(211, 89.7%, 34.1%)",
  blue9: "hsl(206, 100%, 50.0%)",
  blue10: "hsl(209, 100%, 60.6%)",
  blue11: "hsl(210, 100%, 66.1%)",
  blue12: "hsl(206, 98.0%, 95.8%)"
};

// node_modules/@tamagui/colors/dist/esm/dark/gray.js
var gray = {
  gray1: "hsl(0, 0%, 8.5%)",
  gray2: "hsl(0, 0%, 11.0%)",
  gray3: "hsl(0, 0%, 13.6%)",
  gray4: "hsl(0, 0%, 15.8%)",
  gray5: "hsl(0, 0%, 17.9%)",
  gray6: "hsl(0, 0%, 20.5%)",
  gray7: "hsl(0, 0%, 24.3%)",
  gray8: "hsl(0, 0%, 31.2%)",
  gray9: "hsl(0, 0%, 43.9%)",
  gray10: "hsl(0, 0%, 49.4%)",
  gray11: "hsl(0, 0%, 62.8%)",
  gray12: "hsl(0, 0%, 93.0%)"
};

// node_modules/@tamagui/colors/dist/esm/dark/green.js
var green = {
  green1: "hsl(146, 30.0%, 7.4%)",
  green2: "hsl(155, 44.2%, 8.4%)",
  green3: "hsl(155, 46.7%, 10.9%)",
  green4: "hsl(154, 48.4%, 12.9%)",
  green5: "hsl(154, 49.7%, 14.9%)",
  green6: "hsl(154, 50.9%, 17.6%)",
  green7: "hsl(153, 51.8%, 21.8%)",
  green8: "hsl(151, 51.7%, 28.4%)",
  green9: "hsl(151, 55.0%, 41.5%)",
  green10: "hsl(151, 49.3%, 46.5%)",
  green11: "hsl(151, 50.0%, 53.2%)",
  green12: "hsl(137, 72.0%, 94.0%)"
};

// node_modules/@tamagui/colors/dist/esm/dark/orange.js
var orange = {
  orange1: "hsl(30, 70.0%, 7.2%)",
  orange2: "hsl(28, 100%, 8.4%)",
  orange3: "hsl(26, 91.1%, 11.6%)",
  orange4: "hsl(25, 88.3%, 14.1%)",
  orange5: "hsl(24, 87.6%, 16.6%)",
  orange6: "hsl(24, 88.6%, 19.8%)",
  orange7: "hsl(24, 92.4%, 24.0%)",
  orange8: "hsl(25, 100%, 29.0%)",
  orange9: "hsl(24, 94.0%, 50.0%)",
  orange10: "hsl(24, 100%, 58.5%)",
  orange11: "hsl(24, 100%, 62.2%)",
  orange12: "hsl(24, 97.0%, 93.2%)"
};

// node_modules/@tamagui/colors/dist/esm/dark/pink.js
var pink = {
  pink1: "hsl(318, 25.0%, 9.6%)",
  pink2: "hsl(319, 32.2%, 11.6%)",
  pink3: "hsl(319, 41.0%, 16.0%)",
  pink4: "hsl(320, 45.4%, 18.7%)",
  pink5: "hsl(320, 49.0%, 21.1%)",
  pink6: "hsl(321, 53.6%, 24.4%)",
  pink7: "hsl(321, 61.1%, 29.7%)",
  pink8: "hsl(322, 74.9%, 37.5%)",
  pink9: "hsl(322, 65.0%, 54.5%)",
  pink10: "hsl(323, 72.8%, 59.2%)",
  pink11: "hsl(325, 90.0%, 66.4%)",
  pink12: "hsl(322, 90.0%, 95.8%)"
};

// node_modules/@tamagui/colors/dist/esm/dark/purple.js
var purple = {
  purple1: "hsl(284, 20.0%, 9.6%)",
  purple2: "hsl(283, 30.0%, 11.8%)",
  purple3: "hsl(281, 37.5%, 16.5%)",
  purple4: "hsl(280, 41.2%, 20.0%)",
  purple5: "hsl(279, 43.8%, 23.3%)",
  purple6: "hsl(277, 46.4%, 27.5%)",
  purple7: "hsl(275, 49.3%, 34.6%)",
  purple8: "hsl(272, 52.1%, 45.9%)",
  purple9: "hsl(272, 51.0%, 54.0%)",
  purple10: "hsl(273, 57.3%, 59.1%)",
  purple11: "hsl(275, 80.0%, 71.0%)",
  purple12: "hsl(279, 75.0%, 95.7%)"
};

// node_modules/@tamagui/colors/dist/esm/dark/red.js
var red = {
  red1: "hsl(353, 23.0%, 9.8%)",
  red2: "hsl(357, 34.4%, 12.0%)",
  red3: "hsl(356, 43.4%, 16.4%)",
  red4: "hsl(356, 47.6%, 19.2%)",
  red5: "hsl(356, 51.1%, 21.9%)",
  red6: "hsl(356, 55.2%, 25.9%)",
  red7: "hsl(357, 60.2%, 31.8%)",
  red8: "hsl(358, 65.0%, 40.4%)",
  red9: "hsl(358, 75.0%, 59.0%)",
  red10: "hsl(358, 85.3%, 64.0%)",
  red11: "hsl(358, 100%, 69.5%)",
  red12: "hsl(351, 89.0%, 96.0%)"
};

// node_modules/@tamagui/colors/dist/esm/dark/yellow.js
var yellow = {
  yellow1: "hsl(45, 100%, 5.5%)",
  yellow2: "hsl(46, 100%, 6.7%)",
  yellow3: "hsl(45, 100%, 8.7%)",
  yellow4: "hsl(45, 100%, 10.4%)",
  yellow5: "hsl(47, 100%, 12.1%)",
  yellow6: "hsl(49, 100%, 14.3%)",
  yellow7: "hsl(49, 90.3%, 18.4%)",
  yellow8: "hsl(50, 100%, 22.0%)",
  yellow9: "hsl(53, 92.0%, 50.0%)",
  yellow10: "hsl(54, 100%, 68.0%)",
  yellow11: "hsl(48, 100%, 47.0%)",
  yellow12: "hsl(53, 100%, 91.0%)"
};

// node_modules/@tamagui/colors/dist/esm/light/blue.js
var blue2 = {
  blue1: "hsl(206, 100%, 99.2%)",
  blue2: "hsl(210, 100%, 98.0%)",
  blue3: "hsl(209, 100%, 96.5%)",
  blue4: "hsl(210, 98.8%, 94.0%)",
  blue5: "hsl(209, 95.0%, 90.1%)",
  blue6: "hsl(209, 81.2%, 84.5%)",
  blue7: "hsl(208, 77.5%, 76.9%)",
  blue8: "hsl(206, 81.9%, 65.3%)",
  blue9: "hsl(206, 100%, 50.0%)",
  blue10: "hsl(208, 100%, 47.3%)",
  blue11: "hsl(211, 100%, 43.2%)",
  blue12: "hsl(211, 100%, 15.0%)"
};

// node_modules/@tamagui/colors/dist/esm/light/gray.js
var gray2 = {
  gray1: "hsl(0, 0%, 99.0%)",
  gray2: "hsl(0, 0%, 97.3%)",
  gray3: "hsl(0, 0%, 95.1%)",
  gray4: "hsl(0, 0%, 93.0%)",
  gray5: "hsl(0, 0%, 90.9%)",
  gray6: "hsl(0, 0%, 88.7%)",
  gray7: "hsl(0, 0%, 85.8%)",
  gray8: "hsl(0, 0%, 78.0%)",
  gray9: "hsl(0, 0%, 56.1%)",
  gray10: "hsl(0, 0%, 52.3%)",
  gray11: "hsl(0, 0%, 43.5%)",
  gray12: "hsl(0, 0%, 9.0%)"
};

// node_modules/@tamagui/colors/dist/esm/light/green.js
var green2 = {
  green1: "hsl(136, 50.0%, 98.9%)",
  green2: "hsl(138, 62.5%, 96.9%)",
  green3: "hsl(139, 55.2%, 94.5%)",
  green4: "hsl(140, 48.7%, 91.0%)",
  green5: "hsl(141, 43.7%, 86.0%)",
  green6: "hsl(143, 40.3%, 79.0%)",
  green7: "hsl(146, 38.5%, 69.0%)",
  green8: "hsl(151, 40.2%, 54.1%)",
  green9: "hsl(151, 55.0%, 41.5%)",
  green10: "hsl(152, 57.5%, 37.6%)",
  green11: "hsl(153, 67.0%, 28.5%)",
  green12: "hsl(155, 40.0%, 14.0%)"
};

// node_modules/@tamagui/colors/dist/esm/light/orange.js
var orange2 = {
  orange1: "hsl(24, 70.0%, 99.0%)",
  orange2: "hsl(24, 83.3%, 97.6%)",
  orange3: "hsl(24, 100%, 95.3%)",
  orange4: "hsl(25, 100%, 92.2%)",
  orange5: "hsl(25, 100%, 88.2%)",
  orange6: "hsl(25, 100%, 82.8%)",
  orange7: "hsl(24, 100%, 75.3%)",
  orange8: "hsl(24, 94.5%, 64.3%)",
  orange9: "hsl(24, 94.0%, 50.0%)",
  orange10: "hsl(24, 100%, 46.5%)",
  orange11: "hsl(24, 100%, 37.0%)",
  orange12: "hsl(15, 60.0%, 17.0%)"
};

// node_modules/@tamagui/colors/dist/esm/light/pink.js
var pink2 = {
  pink1: "hsl(322, 100%, 99.4%)",
  pink2: "hsl(323, 100%, 98.4%)",
  pink3: "hsl(323, 86.3%, 96.5%)",
  pink4: "hsl(323, 78.7%, 94.2%)",
  pink5: "hsl(323, 72.2%, 91.1%)",
  pink6: "hsl(323, 66.3%, 86.6%)",
  pink7: "hsl(323, 62.0%, 80.1%)",
  pink8: "hsl(323, 60.3%, 72.4%)",
  pink9: "hsl(322, 65.0%, 54.5%)",
  pink10: "hsl(322, 63.9%, 50.7%)",
  pink11: "hsl(322, 75.0%, 46.0%)",
  pink12: "hsl(320, 70.0%, 13.5%)"
};

// node_modules/@tamagui/colors/dist/esm/light/purple.js
var purple2 = {
  purple1: "hsl(280, 65.0%, 99.4%)",
  purple2: "hsl(276, 100%, 99.0%)",
  purple3: "hsl(276, 83.1%, 97.0%)",
  purple4: "hsl(275, 76.4%, 94.7%)",
  purple5: "hsl(275, 70.8%, 91.8%)",
  purple6: "hsl(274, 65.4%, 87.8%)",
  purple7: "hsl(273, 61.0%, 81.7%)",
  purple8: "hsl(272, 60.0%, 73.5%)",
  purple9: "hsl(272, 51.0%, 54.0%)",
  purple10: "hsl(272, 46.8%, 50.3%)",
  purple11: "hsl(272, 50.0%, 45.8%)",
  purple12: "hsl(272, 66.0%, 16.0%)"
};

// node_modules/@tamagui/colors/dist/esm/light/red.js
var red2 = {
  red1: "hsl(359, 100%, 99.4%)",
  red2: "hsl(359, 100%, 98.6%)",
  red3: "hsl(360, 100%, 96.8%)",
  red4: "hsl(360, 97.9%, 94.8%)",
  red5: "hsl(360, 90.2%, 91.9%)",
  red6: "hsl(360, 81.7%, 87.8%)",
  red7: "hsl(359, 74.2%, 81.7%)",
  red8: "hsl(359, 69.5%, 74.3%)",
  red9: "hsl(358, 75.0%, 59.0%)",
  red10: "hsl(358, 69.4%, 55.2%)",
  red11: "hsl(358, 65.0%, 48.7%)",
  red12: "hsl(354, 50.0%, 14.6%)"
};

// node_modules/@tamagui/colors/dist/esm/light/yellow.js
var yellow2 = {
  yellow1: "hsl(60, 54.0%, 98.5%)",
  yellow2: "hsl(52, 100%, 95.5%)",
  yellow3: "hsl(55, 100%, 90.9%)",
  yellow4: "hsl(54, 100%, 86.6%)",
  yellow5: "hsl(52, 97.9%, 82.0%)",
  yellow6: "hsl(50, 89.4%, 76.1%)",
  yellow7: "hsl(47, 80.4%, 68.0%)",
  yellow8: "hsl(48, 100%, 46.1%)",
  yellow9: "hsl(53, 92.0%, 50.0%)",
  yellow10: "hsl(50, 100%, 48.5%)",
  yellow11: "hsl(42, 100%, 29.0%)",
  yellow12: "hsl(40, 55.0%, 13.5%)"
};

// node_modules/@tamagui/themes/dist/esm/tokens.js
var import_web7 = require("@tamagui/core-node");
var size3 = {
  $0: 0,
  "$0.25": 2,
  "$0.5": 4,
  "$0.75": 8,
  $1: 20,
  "$1.5": 24,
  $2: 28,
  "$2.5": 32,
  $3: 36,
  "$3.5": 40,
  $4: 44,
  $true: 44,
  "$4.5": 48,
  $5: 52,
  $6: 64,
  $7: 74,
  $8: 84,
  $9: 94,
  $10: 104,
  $11: 124,
  $12: 144,
  $13: 164,
  $14: 184,
  $15: 204,
  $16: 224,
  $17: 224,
  $18: 244,
  $19: 264,
  $20: 284
};
var spaces = Object.entries(size3).map(([k, v]) => {
  return [k, sizeToSpace(v)];
});
function sizeToSpace(v) {
  if (v === 0)
    return 0;
  if (v === 2)
    return 0.5;
  if (v === 4)
    return 1;
  if (v === 8)
    return 1.5;
  if (v <= 16)
    return Math.round(v * 0.333);
  return Math.floor(v * 0.7 - 12);
}
__name(sizeToSpace, "sizeToSpace");
var spacesNegative = spaces.map(([k, v]) => [`-${k.slice(1)}`, -v]);
var space = {
  ...Object.fromEntries(spaces),
  ...Object.fromEntries(spacesNegative)
};
var zIndex = {
  0: 0,
  1: 100,
  2: 200,
  3: 300,
  4: 400,
  5: 500
};
var colorTokens = {
  light: {
    blue: blue2,
    gray: gray2,
    green: green2,
    orange: orange2,
    pink: pink2,
    purple: purple2,
    red: red2,
    yellow: yellow2
  },
  dark: {
    blue,
    gray,
    green,
    orange,
    pink,
    purple,
    red,
    yellow
  }
};
var darkColors = {
  ...colorTokens.dark.blue,
  ...colorTokens.dark.gray,
  ...colorTokens.dark.green,
  ...colorTokens.dark.orange,
  ...colorTokens.dark.pink,
  ...colorTokens.dark.purple,
  ...colorTokens.dark.red,
  ...colorTokens.dark.yellow
};
var lightColors = {
  ...colorTokens.light.blue,
  ...colorTokens.light.gray,
  ...colorTokens.light.green,
  ...colorTokens.light.orange,
  ...colorTokens.light.pink,
  ...colorTokens.light.purple,
  ...colorTokens.light.red,
  ...colorTokens.light.yellow
};
var color = {
  ...postfixObjKeys(lightColors, "Light"),
  ...postfixObjKeys(darkColors, "Dark")
};
function postfixObjKeys(obj, postfix) {
  return Object.fromEntries(
    Object.entries(obj).map(([k, v]) => [`${k}${postfix}`, v])
  );
}
__name(postfixObjKeys, "postfixObjKeys");
var radius = {
  0: 0,
  1: 3,
  2: 5,
  3: 7,
  4: 9,
  true: 9,
  5: 10,
  6: 16,
  7: 19,
  8: 22,
  9: 26,
  10: 34,
  11: 42,
  12: 50
};
var tokens = (0, import_web7.createTokens)({
  color,
  radius,
  zIndex,
  space,
  size: size3
});

// node_modules/@tamagui/themes/dist/esm/themes.js
var lightTransparent = "rgba(255,255,255,0)";
var darkTransparent = "rgba(10,10,10,0)";
var palettes = {
  dark: [
    darkTransparent,
    "#050505",
    "#151515",
    "#191919",
    "#232323",
    "#282828",
    "#323232",
    "#424242",
    "#494949",
    "#545454",
    "#626262",
    "#a5a5a5",
    "#fff",
    lightTransparent
  ],
  light: [
    lightTransparent,
    "#fff",
    "#f9f9f9",
    "hsl(0, 0%, 97.3%)",
    "hsl(0, 0%, 95.1%)",
    "hsl(0, 0%, 94.0%)",
    "hsl(0, 0%, 92.0%)",
    "hsl(0, 0%, 89.5%)",
    "hsl(0, 0%, 81.0%)",
    "hsl(0, 0%, 56.1%)",
    "hsl(0, 0%, 50.3%)",
    "hsl(0, 0%, 42.5%)",
    "hsl(0, 0%, 9.0%)",
    darkTransparent
  ]
};
var templateColors = {
  color1: 1,
  color2: 2,
  color3: 3,
  color4: 4,
  color5: 5,
  color6: 6,
  color7: 7,
  color8: 8,
  color9: 9,
  color10: 10,
  color11: 11,
  color12: 12
};
var templateShadows = {
  shadowColor: 1,
  shadowColorHover: 1,
  shadowColorPress: 2,
  shadowColorFocus: 2
};
var skip = {
  ...templateColors,
  ...templateShadows
};
var template = {
  ...skip,
  // the background, color, etc keys here work like generics - they make it so you
  // can publish components for others to use without mandating a specific color scale
  // the @tamagui/button Button component looks for `$background`, so you set the
  // dark_red_Button theme to have a stronger background than the dark_red theme.
  background: 2,
  backgroundHover: 3,
  backgroundPress: 1,
  backgroundFocus: 2,
  backgroundStrong: 1,
  backgroundTransparent: 0,
  color: -1,
  colorHover: -2,
  colorPress: -1,
  colorFocus: -2,
  colorTransparent: -0,
  borderColor: 4,
  borderColorHover: 5,
  borderColorPress: 3,
  borderColorFocus: 4,
  placeholderColor: -4
};
var lightShadowColor = "rgba(0,0,0,0.02)";
var lightShadowColorStrong = "rgba(0,0,0,0.066)";
var darkShadowColor = "rgba(0,0,0,0.2)";
var darkShadowColorStrong = "rgba(0,0,0,0.3)";
var lightShadows = {
  shadowColor: lightShadowColorStrong,
  shadowColorHover: lightShadowColorStrong,
  shadowColorPress: lightShadowColor,
  shadowColorFocus: lightShadowColor
};
var darkShadows = {
  shadowColor: darkShadowColorStrong,
  shadowColorHover: darkShadowColorStrong,
  shadowColorPress: darkShadowColor,
  shadowColorFocus: darkShadowColor
};
var lightTemplate = {
  ...template,
  // our light color palette is... a bit unique
  borderColor: 6,
  borderColorHover: 7,
  borderColorFocus: 5,
  borderColorPress: 6,
  ...lightShadows
};
var darkTemplate = { ...template, ...darkShadows };
var light = createTheme2(palettes.light, lightTemplate);
var dark = createTheme2(palettes.dark, darkTemplate);
var baseThemes = {
  light,
  dark
};
var masks = {
  weaker: createWeakenMask(),
  stronger: createStrengthenMask()
};
var maskOptions = {
  skip,
  // avoids the transparent ends
  max: palettes.light.length - 2,
  min: 1
};
var allThemes = addChildren(baseThemes, (name, theme) => {
  const isLight = name === "light";
  const inverseName = isLight ? "dark" : "light";
  const inverseTheme = baseThemes[inverseName];
  const transparent = /* @__PURE__ */ __name((hsl, opacity3 = 0) => hsl.replace(`%)`, `%, ${opacity3})`).replace(`hsl(`, `hsla(`), "transparent");
  const [colorThemes, inverseColorThemes] = [
    colorTokens[name],
    colorTokens[inverseName]
  ].map((colorSet) => {
    return Object.fromEntries(
      Object.keys(colorSet).map((color3) => {
        const colorPalette = Object.values(colorSet[color3]);
        const [head, tail] = [
          colorPalette.slice(0, 6),
          colorPalette.slice(colorPalette.length - 5)
        ];
        const palette = [
          transparent(colorPalette[0]),
          ...head,
          ...tail,
          theme.color,
          transparent(colorPalette[colorPalette.length - 1])
        ];
        const colorTheme = createTheme2(
          palette,
          isLight ? {
            ...lightTemplate,
            // light color themes are a bit less sensitive
            borderColor: 4,
            borderColorHover: 5,
            borderColorFocus: 4,
            borderColorPress: 4
          } : darkTemplate
        );
        return [color3, colorTheme];
      })
    );
  });
  const allColorThemes = addChildren(colorThemes, (colorName, colorTheme) => {
    const inverse = inverseColorThemes[colorName];
    return {
      ...getAltThemes(colorTheme, inverse),
      ...getComponentThemes(colorTheme, inverse)
    };
  });
  const baseActiveTheme = applyMask(colorThemes.blue, masks.weaker, {
    ...maskOptions,
    strength: 4
  });
  const baseSubThemes = {
    ...getAltThemes(theme, inverseTheme, baseActiveTheme),
    ...getComponentThemes(theme, inverseTheme)
  };
  return {
    ...baseSubThemes,
    ...allColorThemes
  };
  function getAltThemes(theme2, inverse, activeTheme) {
    const maskOptionsAlt = {
      ...maskOptions,
      skip: templateShadows
    };
    const alt1 = applyMask(theme2, masks.weaker, maskOptionsAlt);
    const alt2 = applyMask(alt1, masks.weaker, maskOptionsAlt);
    const active = activeTheme ?? applyMask(theme2, masks.weaker, {
      ...maskOptions,
      strength: 4
    });
    return addChildren({ alt1, alt2, active }, (_, subTheme) => {
      return getComponentThemes(subTheme, subTheme === inverse ? theme2 : inverse);
    });
  }
  __name(getAltThemes, "getAltThemes");
  function getComponentThemes(theme2, inverse) {
    const weaker1 = applyMask(theme2, masks.weaker, maskOptions);
    const weaker2 = applyMask(weaker1, masks.weaker, maskOptions);
    const stronger1 = applyMask(theme2, masks.stronger, maskOptions);
    const inverse1 = applyMask(inverse, masks.weaker, maskOptions);
    const inverse2 = applyMask(inverse1, masks.weaker, maskOptions);
    const strongerBorderLighterBackground = isLight ? {
      ...stronger1,
      borderColor: weaker1.borderColor,
      borderColorHover: weaker1.borderColorHover,
      borderColorPress: weaker1.borderColorPress,
      borderColorFocus: weaker1.borderColorFocus
    } : {
      ...theme2,
      borderColor: weaker1.borderColor,
      borderColorHover: weaker1.borderColorHover,
      borderColorPress: weaker1.borderColorPress,
      borderColorFocus: weaker1.borderColorFocus
    };
    return {
      Card: weaker1,
      Button: weaker2,
      Checkbox: weaker2,
      DrawerFrame: weaker1,
      SliderTrack: stronger1,
      SliderTrackActive: weaker2,
      SliderThumb: inverse1,
      Progress: weaker1,
      ProgressIndicator: inverse,
      Switch: weaker2,
      SwitchThumb: inverse2,
      TooltipArrow: weaker1,
      TooltipContent: weaker2,
      Input: strongerBorderLighterBackground,
      TextArea: strongerBorderLighterBackground,
      Tooltip: inverse1
    };
  }
  __name(getComponentThemes, "getComponentThemes");
});
var themes = {
  ...allThemes,
  // bring back the full type, the rest use a subset to avoid clogging up ts,
  // tamagui will be smart and use the top level themes as the type for useTheme() etc
  light: createTheme2(palettes.light, lightTemplate, { nonInheritedValues: lightColors }),
  dark: createTheme2(palettes.dark, darkTemplate, { nonInheritedValues: darkColors })
};

// tamagui/mediaQueries.ts
var import_react_native_media_driver = __toESM(require_cjs54());
var media = (0, import_react_native_media_driver.createMedia)({
  // for site
  xl: { maxWidth: 1650 },
  lg: { maxWidth: 1280 },
  md: { maxWidth: 1020 },
  sm: { maxWidth: 800 },
  xs: { maxWidth: 660 },
  xxs: { maxWidth: 390 },
  gtXs: { minWidth: 660 + 1 },
  gtSm: { minWidth: 800 + 1 },
  gtMd: { minWidth: 1020 + 1 },
  gtLg: { minWidth: 1280 + 1 },
  gtXl: { minWidth: 1650 + 1 },
  hoverNone: { hover: "none" },
  pointerCoarse: { pointer: "coarse" }
});
var mediaQueryDefaultActive = {
  xl: true,
  lg: true,
  md: true,
  sm: true,
  xs: true,
  // false
  xxs: false
};

// tamagui/animations.ts
var import_animations_reanimated = __toESM(require_cjs56());
var animations = (0, import_animations_reanimated.createAnimations)({
  bouncy: {
    type: "spring",
    damping: 9,
    mass: 0.9,
    stiffness: 150
  },
  lazy: {
    type: "spring",
    damping: 18,
    stiffness: 50
  },
  slow: {
    type: "spring",
    damping: 15,
    stiffness: 40
  },
  quick: {
    type: "spring",
    damping: 20,
    mass: 1.2,
    stiffness: 250
  },
  tooltip: {
    type: "spring",
    damping: 10,
    mass: 0.9,
    stiffness: 100
  }
});

// tamagui/fonts.ts
var import_font_silkscreen = __toESM(require_cjs57());
var import_font_inter = __toESM(require_cjs58());
var genericFontSizes = {
  1: 10,
  2: 11,
  3: 12,
  4: 14,
  5: 15,
  6: 16,
  7: 20,
  8: 22,
  9: 30,
  10: 42,
  11: 52,
  12: 62,
  13: 72,
  14: 92,
  15: 114,
  16: 124
};
function createGenericFont(family, font = {}, {
  sizeLineHeight = /* @__PURE__ */ __name((val2) => val2 * 1.35, "sizeLineHeight")
} = {}) {
  const size4 = font.size || genericFontSizes;
  return (0, import_core21.createFont)({
    family,
    size: size4,
    lineHeight: Object.fromEntries(
      Object.entries(size4).map(([k, v]) => [k, sizeLineHeight(+v)])
    ),
    weight: { 0: "300" },
    letterSpacing: { 4: 0 },
    ...font
  });
}
__name(createGenericFont, "createGenericFont");
var systemFamily = process.env.TAMAGUI_TARGET === "native" ? "Inter-Medium" : '-apple-system, BlinkMacSystemFont, "Segoe UI", Roboto, Helvetica, Arial, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol"';
var silkscreenFont = (0, import_font_silkscreen.createSilkscreenFont)();
var headingFont = (0, import_font_inter.createInterFont)(
  {
    size: {
      5: 13,
      6: 15,
      9: 32,
      10: 44
    },
    transform: {
      6: "uppercase",
      7: "none"
    },
    weight: {
      6: "400",
      7: "700"
    },
    color: {
      6: "$colorFocus",
      7: "$color"
    },
    letterSpacing: {
      5: 2,
      6: 1,
      7: 0,
      8: 0,
      9: -1,
      10: -1.5,
      12: -2,
      14: -3,
      15: -4
    },
    // for native
    face: {
      700: { normal: "Inter-Bold" },
      800: { normal: "Inter-Bold" },
      900: { normal: "Inter-Bold" }
    }
  },
  { sizeLineHeight: (size4) => Math.round(size4 * 1.1 + (size4 < 30 ? 10 : 5)) }
);
var bodyFont = (0, import_font_inter.createInterFont)(
  {
    family: systemFamily,
    weight: {
      1: "500",
      7: "600"
    },
    // for native
    face: {
      900: { normal: "Inter-Bold" }
    }
  },
  {
    sizeSize: (size4) => Math.round(size4),
    sizeLineHeight: (size4) => Math.round(size4 * 1.1 + (size4 >= 12 ? 8 : 4))
  }
);
var monoFont = createGenericFont(
  '"ui-monospace", "SFMono-Regular", "SF Mono", Menlo, Consolas, "Liberation Mono", monospace',
  {
    weight: {
      1: "500"
    },
    size: {
      1: 11,
      2: 12,
      3: 13,
      4: 14,
      5: 16,
      6: 18,
      7: 20,
      8: 22,
      9: 30,
      10: 42,
      11: 52,
      12: 62,
      13: 72,
      14: 92,
      15: 114,
      16: 124
    }
  },
  {
    sizeLineHeight: (x) => x * 1.5
  }
);
var fonts_default = {
  // noto: notoFont as any,
  heading: headingFont,
  body: bodyFont,
  mono: monoFont,
  silkscreen: silkscreenFont
};

// tamagui/tamagui.config.ts
var appConfig = createTamagui({
  shouldAddPrefersColorThemes: true,
  // themeClassNameOnRoot: true,
  animations,
  fonts: fonts_default,
  shorthands: import_shorthands.shorthands,
  themes,
  tokens,
  media
});
appConfig.mediaQueryDefaultActive = mediaQueryDefaultActive;
var tamagui_config_default = appConfig;

// tamagui/index.ts
var tamagui_default = tamagui_config_default;
/*! Bundled license information:

use-sync-external-store/cjs/use-sync-external-store-shim.production.min.js:
  (**
   * @license React
   * use-sync-external-store-shim.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim.development.js:
  (**
   * @license React
   * use-sync-external-store-shim.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.production.min.js:
  (**
   * @license React
   * use-sync-external-store-shim/with-selector.production.min.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

use-sync-external-store/cjs/use-sync-external-store-shim/with-selector.development.js:
  (**
   * @license React
   * use-sync-external-store-shim/with-selector.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

tabbable/dist/index.js:
  (*!
  * tabbable 6.2.0
  * @license MIT, https://github.com/focus-trap/tabbable/blob/master/LICENSE
  *)
*/
