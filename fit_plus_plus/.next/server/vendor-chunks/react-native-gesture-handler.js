"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/react-native-gesture-handler";
exports.ids = ["vendor-chunks/react-native-gesture-handler"];
exports.modules = {

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/ActionType.js":
/*!******************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/ActionType.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ActionType = void 0;\nconst ActionType = {\n    REANIMATED_WORKLET: 1,\n    NATIVE_ANIMATED_EVENT: 2,\n    JS_FUNCTION_OLD_API: 3,\n    JS_FUNCTION_NEW_API: 4\n}; // eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; it can be used as a type and as a value\nexports.ActionType = ActionType; //# sourceMappingURL=ActionType.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvQWN0aW9uVHlwZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUcsS0FBSztBQUMxQixNQUFNRSxhQUFhO0lBQ2pCQyxvQkFBb0I7SUFDcEJDLHVCQUF1QjtJQUN2QkMscUJBQXFCO0lBQ3JCQyxxQkFBcUI7QUFDdkIsR0FBRyw4SEFBOEg7QUFFaklOLGtCQUFrQixHQUFHRSxZQUNyQixzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL0FjdGlvblR5cGUuanM/M2JmYiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuQWN0aW9uVHlwZSA9IHZvaWQgMDtcbmNvbnN0IEFjdGlvblR5cGUgPSB7XG4gIFJFQU5JTUFURURfV09SS0xFVDogMSxcbiAgTkFUSVZFX0FOSU1BVEVEX0VWRU5UOiAyLFxuICBKU19GVU5DVElPTl9PTERfQVBJOiAzLFxuICBKU19GVU5DVElPTl9ORVdfQVBJOiA0XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZSAtLSBiYWNrd2FyZCBjb21wYXRpYmlsaXR5OyBpdCBjYW4gYmUgdXNlZCBhcyBhIHR5cGUgYW5kIGFzIGEgdmFsdWVcblxuZXhwb3J0cy5BY3Rpb25UeXBlID0gQWN0aW9uVHlwZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUFjdGlvblR5cGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiQWN0aW9uVHlwZSIsIlJFQU5JTUFURURfV09SS0xFVCIsIk5BVElWRV9BTklNQVRFRF9FVkVOVCIsIkpTX0ZVTkNUSU9OX09MRF9BUEkiLCJKU19GVU5DVElPTl9ORVdfQVBJIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/ActionType.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/Directions.js":
/*!******************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/Directions.js ***!
  \******************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Directions = void 0;\nconst Directions = {\n    RIGHT: 1,\n    LEFT: 2,\n    UP: 4,\n    DOWN: 8\n}; // eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; it can be used as a type and as a value\nexports.Directions = Directions; //# sourceMappingURL=Directions.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvRGlyZWN0aW9ucy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUcsS0FBSztBQUMxQixNQUFNRSxhQUFhO0lBQ2pCQyxPQUFPO0lBQ1BDLE1BQU07SUFDTkMsSUFBSTtJQUNKQyxNQUFNO0FBQ1IsR0FBRyw4SEFBOEg7QUFFaklOLGtCQUFrQixHQUFHRSxZQUNyQixzQ0FBc0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL0RpcmVjdGlvbnMuanM/YzNjZiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRGlyZWN0aW9ucyA9IHZvaWQgMDtcbmNvbnN0IERpcmVjdGlvbnMgPSB7XG4gIFJJR0hUOiAxLFxuICBMRUZUOiAyLFxuICBVUDogNCxcbiAgRE9XTjogOFxufTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmUgLS0gYmFja3dhcmQgY29tcGF0aWJpbGl0eTsgaXQgY2FuIGJlIHVzZWQgYXMgYSB0eXBlIGFuZCBhcyBhIHZhbHVlXG5cbmV4cG9ydHMuRGlyZWN0aW9ucyA9IERpcmVjdGlvbnM7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EaXJlY3Rpb25zLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkRpcmVjdGlvbnMiLCJSSUdIVCIsIkxFRlQiLCJVUCIsIkRPV04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/Directions.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/EnableExperimentalWebImplementation.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/EnableExperimentalWebImplementation.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.enableExperimentalWebImplementation = enableExperimentalWebImplementation;\nexports.isExperimentalWebImplementationEnabled = isExperimentalWebImplementationEnabled;\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nlet EXPERIMENTAL_WEB_IMPLEMENTATION = false;\nlet getWasCalled = false;\nfunction enableExperimentalWebImplementation(shouldEnable = true) {\n    if (_reactNative.Platform.OS !== \"web\" || EXPERIMENTAL_WEB_IMPLEMENTATION === shouldEnable) {\n        return;\n    }\n    if (getWasCalled) {\n        console.error(\"Some parts of this application have already started using old gesture handler implementation. No changes will be applied. You can try enabling new implementation earlier.\");\n        return;\n    }\n    EXPERIMENTAL_WEB_IMPLEMENTATION = shouldEnable;\n}\nfunction isExperimentalWebImplementationEnabled() {\n    getWasCalled = true;\n    return EXPERIMENTAL_WEB_IMPLEMENTATION;\n} //# sourceMappingURL=EnableExperimentalWebImplementation.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvRW5hYmxlRXhwZXJpbWVudGFsV2ViSW1wbGVtZW50YXRpb24uanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELDJDQUEyQyxHQUFHRTtBQUM5Q0YsOENBQThDLEdBQUdHO0FBRWpELElBQUlDLGVBQWVDLG1CQUFPQSxDQUFDLHVFQUFjO0FBRXpDLElBQUlDLGtDQUFrQztBQUN0QyxJQUFJQyxlQUFlO0FBRW5CLFNBQVNMLG9DQUFvQ00sZUFBZSxJQUFJO0lBQzlELElBQUlKLGFBQWFLLFFBQVEsQ0FBQ0MsRUFBRSxLQUFLLFNBQVNKLG9DQUFvQ0UsY0FBYztRQUMxRjtJQUNGO0lBRUEsSUFBSUQsY0FBYztRQUNoQkksUUFBUUMsS0FBSyxDQUFDO1FBQ2Q7SUFDRjtJQUVBTixrQ0FBa0NFO0FBQ3BDO0FBRUEsU0FBU0w7SUFDUEksZUFBZTtJQUNmLE9BQU9EO0FBQ1QsRUFDQSwrREFBK0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL0VuYWJsZUV4cGVyaW1lbnRhbFdlYkltcGxlbWVudGF0aW9uLmpzP2RhZDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmVuYWJsZUV4cGVyaW1lbnRhbFdlYkltcGxlbWVudGF0aW9uID0gZW5hYmxlRXhwZXJpbWVudGFsV2ViSW1wbGVtZW50YXRpb247XG5leHBvcnRzLmlzRXhwZXJpbWVudGFsV2ViSW1wbGVtZW50YXRpb25FbmFibGVkID0gaXNFeHBlcmltZW50YWxXZWJJbXBsZW1lbnRhdGlvbkVuYWJsZWQ7XG5cbnZhciBfcmVhY3ROYXRpdmUgPSByZXF1aXJlKFwicmVhY3QtbmF0aXZlXCIpO1xuXG5sZXQgRVhQRVJJTUVOVEFMX1dFQl9JTVBMRU1FTlRBVElPTiA9IGZhbHNlO1xubGV0IGdldFdhc0NhbGxlZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBlbmFibGVFeHBlcmltZW50YWxXZWJJbXBsZW1lbnRhdGlvbihzaG91bGRFbmFibGUgPSB0cnVlKSB7XG4gIGlmIChfcmVhY3ROYXRpdmUuUGxhdGZvcm0uT1MgIT09ICd3ZWInIHx8IEVYUEVSSU1FTlRBTF9XRUJfSU1QTEVNRU5UQVRJT04gPT09IHNob3VsZEVuYWJsZSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGlmIChnZXRXYXNDYWxsZWQpIHtcbiAgICBjb25zb2xlLmVycm9yKCdTb21lIHBhcnRzIG9mIHRoaXMgYXBwbGljYXRpb24gaGF2ZSBhbHJlYWR5IHN0YXJ0ZWQgdXNpbmcgb2xkIGdlc3R1cmUgaGFuZGxlciBpbXBsZW1lbnRhdGlvbi4gTm8gY2hhbmdlcyB3aWxsIGJlIGFwcGxpZWQuIFlvdSBjYW4gdHJ5IGVuYWJsaW5nIG5ldyBpbXBsZW1lbnRhdGlvbiBlYXJsaWVyLicpO1xuICAgIHJldHVybjtcbiAgfVxuXG4gIEVYUEVSSU1FTlRBTF9XRUJfSU1QTEVNRU5UQVRJT04gPSBzaG91bGRFbmFibGU7XG59XG5cbmZ1bmN0aW9uIGlzRXhwZXJpbWVudGFsV2ViSW1wbGVtZW50YXRpb25FbmFibGVkKCkge1xuICBnZXRXYXNDYWxsZWQgPSB0cnVlO1xuICByZXR1cm4gRVhQRVJJTUVOVEFMX1dFQl9JTVBMRU1FTlRBVElPTjtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUVuYWJsZUV4cGVyaW1lbnRhbFdlYkltcGxlbWVudGF0aW9uLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImVuYWJsZUV4cGVyaW1lbnRhbFdlYkltcGxlbWVudGF0aW9uIiwiaXNFeHBlcmltZW50YWxXZWJJbXBsZW1lbnRhdGlvbkVuYWJsZWQiLCJfcmVhY3ROYXRpdmUiLCJyZXF1aXJlIiwiRVhQRVJJTUVOVEFMX1dFQl9JTVBMRU1FTlRBVElPTiIsImdldFdhc0NhbGxlZCIsInNob3VsZEVuYWJsZSIsIlBsYXRmb3JtIiwiT1MiLCJjb25zb2xlIiwiZXJyb3IiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/EnableExperimentalWebImplementation.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/GestureHandlerRootView.web.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/GestureHandlerRootView.web.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = GestureHandlerRootView;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction GestureHandlerRootView(props) {\n    return /*#__PURE__*/ React.createElement(_reactNative.View, props);\n} //# sourceMappingURL=GestureHandlerRootView.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvR2VzdHVyZUhhbmRsZXJSb290Vmlldy53ZWIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFlLEdBQUdHO0FBRWxCLElBQUlDLFFBQVFDLHdCQUF3QkMsbUJBQU9BLENBQUMsb0JBQU87QUFFbkQsSUFBSUMsZUFBZUQsbUJBQU9BLENBQUMsdUVBQWM7QUFFekMsU0FBU0U7SUFBNkIsSUFBSSxPQUFPQyxZQUFZLFlBQVksT0FBTztJQUFNLElBQUlDLFFBQVEsSUFBSUQ7SUFBV0QsMkJBQTJCO1FBQWMsT0FBT0U7SUFBTztJQUFHLE9BQU9BO0FBQU87QUFFekwsU0FBU0wsd0JBQXdCTSxHQUFHO0lBQUksSUFBSUEsT0FBT0EsSUFBSUMsVUFBVSxFQUFFO1FBQUUsT0FBT0Q7SUFBSztJQUFFLElBQUlBLFFBQVEsUUFBUSxPQUFPQSxRQUFRLFlBQVksT0FBT0EsUUFBUSxZQUFZO1FBQUUsT0FBTztZQUFFVCxTQUFTUztRQUFJO0lBQUc7SUFBRSxJQUFJRCxRQUFRRjtJQUE0QixJQUFJRSxTQUFTQSxNQUFNRyxHQUFHLENBQUNGLE1BQU07UUFBRSxPQUFPRCxNQUFNSSxHQUFHLENBQUNIO0lBQU07SUFBRSxJQUFJSSxTQUFTLENBQUM7SUFBRyxJQUFJQyx3QkFBd0JsQixPQUFPQyxjQUFjLElBQUlELE9BQU9tQix3QkFBd0I7SUFBRSxJQUFLLElBQUlDLE9BQU9QLElBQUs7UUFBRSxJQUFJYixPQUFPcUIsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1YsS0FBS08sTUFBTTtZQUFFLElBQUlJLE9BQU9OLHdCQUF3QmxCLE9BQU9tQix3QkFBd0IsQ0FBQ04sS0FBS08sT0FBTztZQUFNLElBQUlJLFFBQVNBLENBQUFBLEtBQUtSLEdBQUcsSUFBSVEsS0FBS0MsR0FBRyxHQUFHO2dCQUFFekIsT0FBT0MsY0FBYyxDQUFDZ0IsUUFBUUcsS0FBS0k7WUFBTyxPQUFPO2dCQUFFUCxNQUFNLENBQUNHLElBQUksR0FBR1AsR0FBRyxDQUFDTyxJQUFJO1lBQUU7UUFBRTtJQUFFO0lBQUVILE9BQU9iLE9BQU8sR0FBR1M7SUFBSyxJQUFJRCxPQUFPO1FBQUVBLE1BQU1hLEdBQUcsQ0FBQ1osS0FBS0k7SUFBUztJQUFFLE9BQU9BO0FBQVE7QUFFdHVCLFNBQVNaLHVCQUF1QnFCLEtBQUs7SUFDbkMsT0FBTyxXQUFXLEdBQUVwQixNQUFNcUIsYUFBYSxDQUFDbEIsYUFBYW1CLElBQUksRUFBRUY7QUFDN0QsRUFDQSxzREFBc0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL0dlc3R1cmVIYW5kbGVyUm9vdFZpZXcud2ViLmpzP2ZmZWMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSBHZXN0dXJlSGFuZGxlclJvb3RWaWV3O1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0TmF0aXZlID0gcmVxdWlyZShcInJlYWN0LW5hdGl2ZVwiKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIEdlc3R1cmVIYW5kbGVyUm9vdFZpZXcocHJvcHMpIHtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9yZWFjdE5hdGl2ZS5WaWV3LCBwcm9wcyk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HZXN0dXJlSGFuZGxlclJvb3RWaWV3LndlYi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiR2VzdHVyZUhhbmRsZXJSb290VmlldyIsIlJlYWN0IiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJyZXF1aXJlIiwiX3JlYWN0TmF0aXZlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsImNhY2hlIiwib2JqIiwiX19lc01vZHVsZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJwcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJWaWV3Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/GestureHandlerRootView.web.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/PlatformConstants.web.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/PlatformConstants.web.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _default = {\n    get forceTouchAvailable () {\n        return false;\n    }\n};\nexports[\"default\"] = _default; //# sourceMappingURL=PlatformConstants.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvUGxhdGZvcm1Db25zdGFudHMud2ViLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFDdkIsSUFBSUcsV0FBVztJQUNiLElBQUlDLHVCQUFzQjtRQUN4QixPQUFPO0lBQ1Q7QUFFRjtBQUNBSixrQkFBZSxHQUFHRyxVQUNsQixpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL1BsYXRmb3JtQ29uc3RhbnRzLndlYi5qcz83MzA0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9kZWZhdWx0ID0ge1xuICBnZXQgZm9yY2VUb3VjaEF2YWlsYWJsZSgpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxufTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9UGxhdGZvcm1Db25zdGFudHMud2ViLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfZGVmYXVsdCIsImZvcmNlVG91Y2hBdmFpbGFibGUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/PlatformConstants.web.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/RNGestureHandlerModule.web.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/RNGestureHandlerModule.web.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.HammerGestures = exports.Gestures = void 0;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\nvar _EnableExperimentalWebImplementation = __webpack_require__(/*! ./EnableExperimentalWebImplementation */ \"./node_modules/react-native-gesture-handler/lib/commonjs/EnableExperimentalWebImplementation.js\");\nvar _InteractionManager = _interopRequireDefault(__webpack_require__(/*! ./web/tools/InteractionManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/InteractionManager.js\"));\nvar _NodeManager = _interopRequireDefault(__webpack_require__(/*! ./web/tools/NodeManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/NodeManager.js\"));\nvar _PanGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./web/handlers/PanGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/PanGestureHandler.js\"));\nvar _TapGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./web/handlers/TapGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/TapGestureHandler.js\"));\nvar _LongPressGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./web/handlers/LongPressGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/LongPressGestureHandler.js\"));\nvar _PinchGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./web/handlers/PinchGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/PinchGestureHandler.js\"));\nvar _RotationGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./web/handlers/RotationGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/RotationGestureHandler.js\"));\nvar _FlingGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./web/handlers/FlingGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/FlingGestureHandler.js\"));\nvar _NativeViewGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./web/handlers/NativeViewGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/NativeViewGestureHandler.js\"));\nvar _ManualGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./web/handlers/ManualGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/ManualGestureHandler.js\"));\nvar HammerNodeManager = _interopRequireWildcard(__webpack_require__(/*! ./web_hammer/NodeManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NodeManager.js\"));\nvar _NativeViewGestureHandler2 = _interopRequireDefault(__webpack_require__(/*! ./web_hammer/NativeViewGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NativeViewGestureHandler.js\"));\nvar _PanGestureHandler2 = _interopRequireDefault(__webpack_require__(/*! ./web_hammer/PanGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PanGestureHandler.js\"));\nvar _TapGestureHandler2 = _interopRequireDefault(__webpack_require__(/*! ./web_hammer/TapGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/TapGestureHandler.js\"));\nvar _LongPressGestureHandler2 = _interopRequireDefault(__webpack_require__(/*! ./web_hammer/LongPressGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/LongPressGestureHandler.js\"));\nvar _PinchGestureHandler2 = _interopRequireDefault(__webpack_require__(/*! ./web_hammer/PinchGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PinchGestureHandler.js\"));\nvar _RotationGestureHandler2 = _interopRequireDefault(__webpack_require__(/*! ./web_hammer/RotationGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/RotationGestureHandler.js\"));\nvar _FlingGestureHandler2 = _interopRequireDefault(__webpack_require__(/*! ./web_hammer/FlingGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/FlingGestureHandler.js\"));\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n//GestureHandlers\n//Hammer Handlers\nconst Gestures = {\n    NativeViewGestureHandler: _NativeViewGestureHandler.default,\n    PanGestureHandler: _PanGestureHandler.default,\n    TapGestureHandler: _TapGestureHandler.default,\n    LongPressGestureHandler: _LongPressGestureHandler.default,\n    PinchGestureHandler: _PinchGestureHandler.default,\n    RotationGestureHandler: _RotationGestureHandler.default,\n    FlingGestureHandler: _FlingGestureHandler.default,\n    ManualGestureHandler: _ManualGestureHandler.default\n};\nexports.Gestures = Gestures;\nconst HammerGestures = {\n    NativeViewGestureHandler: _NativeViewGestureHandler2.default,\n    PanGestureHandler: _PanGestureHandler2.default,\n    TapGestureHandler: _TapGestureHandler2.default,\n    LongPressGestureHandler: _LongPressGestureHandler2.default,\n    PinchGestureHandler: _PinchGestureHandler2.default,\n    RotationGestureHandler: _RotationGestureHandler2.default,\n    FlingGestureHandler: _FlingGestureHandler2.default\n};\nexports.HammerGestures = HammerGestures;\nvar _default = {\n    handleSetJSResponder (tag, blockNativeResponder) {\n        console.warn(\"handleSetJSResponder: \", tag, blockNativeResponder);\n    },\n    handleClearJSResponder () {\n        console.warn(\"handleClearJSResponder: \");\n    },\n    createGestureHandler (handlerName, handlerTag, config) {\n        if ((0, _EnableExperimentalWebImplementation.isExperimentalWebImplementationEnabled)()) {\n            if (!(handlerName in Gestures)) {\n                throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n            }\n            const GestureClass = Gestures[handlerName];\n            _NodeManager.default.createGestureHandler(handlerTag, new GestureClass());\n            _InteractionManager.default.getInstance().configureInteractions(_NodeManager.default.getHandler(handlerTag), config);\n        } else {\n            if (!(handlerName in HammerGestures)) {\n                throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n            } // @ts-ignore If it doesn't exist, the error is thrown\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n            const GestureClass = HammerGestures[handlerName]; // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n            HammerNodeManager.createGestureHandler(handlerTag, new GestureClass());\n        }\n        this.updateGestureHandler(handlerTag, config);\n    },\n    attachGestureHandler (handlerTag, newView, _actionType, propsRef) {\n        if (!(newView instanceof HTMLElement || newView instanceof _react.default.Component)) {\n            return;\n        }\n        if ((0, _EnableExperimentalWebImplementation.isExperimentalWebImplementationEnabled)()) {\n            //@ts-ignore Types should be HTMLElement or React.Component\n            _NodeManager.default.getHandler(handlerTag).init(newView, propsRef);\n        } else {\n            //@ts-ignore Types should be HTMLElement or React.Component\n            HammerNodeManager.getHandler(handlerTag).setView(newView, propsRef);\n        }\n    },\n    updateGestureHandler (handlerTag, newConfig) {\n        if ((0, _EnableExperimentalWebImplementation.isExperimentalWebImplementationEnabled)()) {\n            _NodeManager.default.getHandler(handlerTag).updateGestureConfig(newConfig);\n            _InteractionManager.default.getInstance().configureInteractions(_NodeManager.default.getHandler(handlerTag), newConfig);\n        } else {\n            HammerNodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n        }\n    },\n    getGestureHandlerNode (handlerTag) {\n        if ((0, _EnableExperimentalWebImplementation.isExperimentalWebImplementationEnabled)()) {\n            return _NodeManager.default.getHandler(handlerTag);\n        } else {\n            return HammerNodeManager.getHandler(handlerTag);\n        }\n    },\n    dropGestureHandler (handlerTag) {\n        if ((0, _EnableExperimentalWebImplementation.isExperimentalWebImplementationEnabled)()) {\n            _NodeManager.default.dropGestureHandler(handlerTag);\n        } else {\n            HammerNodeManager.dropGestureHandler(handlerTag);\n        }\n    },\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\n    flushOperations () {}\n};\nexports[\"default\"] = _default; //# sourceMappingURL=RNGestureHandlerModule.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/RNGestureHandlerModule.web.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/RNRenderer.web.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/RNRenderer.web.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RNRenderer = void 0;\nconst RNRenderer = {\n    findHostInstance_DEPRECATED: (_ref)=>null\n};\nexports.RNRenderer = RNRenderer; //# sourceMappingURL=RNRenderer.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvUk5SZW5kZXJlci53ZWIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFrQixHQUFHLEtBQUs7QUFDMUIsTUFBTUUsYUFBYTtJQUNqQkMsNkJBQTZCQyxDQUFBQSxPQUFRO0FBQ3ZDO0FBQ0FKLGtCQUFrQixHQUFHRSxZQUNyQiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL1JOUmVuZGVyZXIud2ViLmpzP2NmZGYiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlJOUmVuZGVyZXIgPSB2b2lkIDA7XG5jb25zdCBSTlJlbmRlcmVyID0ge1xuICBmaW5kSG9zdEluc3RhbmNlX0RFUFJFQ0FURUQ6IF9yZWYgPT4gbnVsbFxufTtcbmV4cG9ydHMuUk5SZW5kZXJlciA9IFJOUmVuZGVyZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1STlJlbmRlcmVyLndlYi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJSTlJlbmRlcmVyIiwiZmluZEhvc3RJbnN0YW5jZV9ERVBSRUNBVEVEIiwiX3JlZiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/RNRenderer.web.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/State.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/State.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.State = void 0;\n// TODO use State from RNModule\nconst State = {\n    UNDETERMINED: 0,\n    FAILED: 1,\n    BEGAN: 2,\n    CANCELLED: 3,\n    ACTIVE: 4,\n    END: 5\n}; // eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; it can be used as a type and as a value\nexports.State = State; //# sourceMappingURL=State.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvU3RhdGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGFBQWEsR0FBRyxLQUFLO0FBQ3JCLCtCQUErQjtBQUMvQixNQUFNRSxRQUFRO0lBQ1pDLGNBQWM7SUFDZEMsUUFBUTtJQUNSQyxPQUFPO0lBQ1BDLFdBQVc7SUFDWEMsUUFBUTtJQUNSQyxLQUFLO0FBQ1AsR0FBRyw4SEFBOEg7QUFFaklSLGFBQWEsR0FBR0UsT0FDaEIsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZml0X3BsdXNfcGx1cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy9TdGF0ZS5qcz9hM2ZiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5TdGF0ZSA9IHZvaWQgMDtcbi8vIFRPRE8gdXNlIFN0YXRlIGZyb20gUk5Nb2R1bGVcbmNvbnN0IFN0YXRlID0ge1xuICBVTkRFVEVSTUlORUQ6IDAsXG4gIEZBSUxFRDogMSxcbiAgQkVHQU46IDIsXG4gIENBTkNFTExFRDogMyxcbiAgQUNUSVZFOiA0LFxuICBFTkQ6IDVcbn07IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlIC0tIGJhY2t3YXJkIGNvbXBhdGliaWxpdHk7IGl0IGNhbiBiZSB1c2VkIGFzIGEgdHlwZSBhbmQgYXMgYSB2YWx1ZVxuXG5leHBvcnRzLlN0YXRlID0gU3RhdGU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1TdGF0ZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJTdGF0ZSIsIlVOREVURVJNSU5FRCIsIkZBSUxFRCIsIkJFR0FOIiwiQ0FOQ0VMTEVEIiwiQUNUSVZFIiwiRU5EIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/State.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/TouchEventType.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/TouchEventType.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TouchEventType = void 0;\nconst TouchEventType = {\n    UNDETERMINED: 0,\n    TOUCHES_DOWN: 1,\n    TOUCHES_MOVE: 2,\n    TOUCHES_UP: 3,\n    TOUCHES_CANCELLED: 4\n}; // eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; it can be used as a type and as a value\nexports.TouchEventType = TouchEventType; //# sourceMappingURL=TouchEventType.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvVG91Y2hFdmVudFR5cGUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELHNCQUFzQixHQUFHLEtBQUs7QUFDOUIsTUFBTUUsaUJBQWlCO0lBQ3JCQyxjQUFjO0lBQ2RDLGNBQWM7SUFDZEMsY0FBYztJQUNkQyxZQUFZO0lBQ1pDLG1CQUFtQjtBQUNyQixHQUFHLDhIQUE4SDtBQUVqSVAsc0JBQXNCLEdBQUdFLGdCQUN6QiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL1RvdWNoRXZlbnRUeXBlLmpzPzdkOTMiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlRvdWNoRXZlbnRUeXBlID0gdm9pZCAwO1xuY29uc3QgVG91Y2hFdmVudFR5cGUgPSB7XG4gIFVOREVURVJNSU5FRDogMCxcbiAgVE9VQ0hFU19ET1dOOiAxLFxuICBUT1VDSEVTX01PVkU6IDIsXG4gIFRPVUNIRVNfVVA6IDMsXG4gIFRPVUNIRVNfQ0FOQ0VMTEVEOiA0XG59OyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZSAtLSBiYWNrd2FyZCBjb21wYXRpYmlsaXR5OyBpdCBjYW4gYmUgdXNlZCBhcyBhIHR5cGUgYW5kIGFzIGEgdmFsdWVcblxuZXhwb3J0cy5Ub3VjaEV2ZW50VHlwZSA9IFRvdWNoRXZlbnRUeXBlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VG91Y2hFdmVudFR5cGUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVG91Y2hFdmVudFR5cGUiLCJVTkRFVEVSTUlORUQiLCJUT1VDSEVTX0RPV04iLCJUT1VDSEVTX01PVkUiLCJUT1VDSEVTX1VQIiwiVE9VQ0hFU19DQU5DRUxMRUQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/TouchEventType.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/DrawerLayout.js":
/*!*******************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/DrawerLayout.js ***!
  \*******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _invariant = _interopRequireDefault(__webpack_require__(/*! invariant */ \"invariant\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _PanGestureHandler = __webpack_require__(/*! ../handlers/PanGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PanGestureHandler.js\");\nvar _TapGestureHandler = __webpack_require__(/*! ../handlers/TapGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/TapGestureHandler.js\");\nvar _State = __webpack_require__(/*! ../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst DRAG_TOSS = 0.05;\nconst IDLE = \"Idle\";\nconst DRAGGING = \"Dragging\";\nconst SETTLING = \"Settling\";\nclass DrawerLayout extends React.Component {\n    constructor(_props){\n        super(_props);\n        _defineProperty(this, \"openValue\", void 0);\n        _defineProperty(this, \"onGestureEvent\", void 0);\n        _defineProperty(this, \"accessibilityIsModalView\", /*#__PURE__*/ React.createRef());\n        _defineProperty(this, \"pointerEventsView\", /*#__PURE__*/ React.createRef());\n        _defineProperty(this, \"panGestureHandler\", /*#__PURE__*/ React.createRef());\n        _defineProperty(this, \"drawerShown\", false);\n        _defineProperty(this, \"updateAnimatedEvent\", (props, state)=>{\n            // Event definition is based on\n            const { drawerPosition, drawerWidth, drawerType } = props;\n            const { dragX: dragXValue, touchX: touchXValue, drawerTranslation, containerWidth } = state;\n            let dragX = dragXValue;\n            let touchX = touchXValue;\n            if (drawerPosition !== \"left\") {\n                // Most of the code is written in a way to handle left-side drawer. In\n                // order to handle right-side drawer the only thing we need to do is to\n                // reverse events coming from gesture handler in a way they emulate\n                // left-side drawer gestures. E.g. dragX is simply -dragX, and touchX is\n                // calulcated by subtracing real touchX from the width of the container\n                // (such that when touch happens at the right edge the value is simply 0)\n                dragX = _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragXValue); // TODO(TS): (for all \"as\" in this file) make sure we can map this\n                touchX = _reactNative.Animated.add(new _reactNative.Animated.Value(containerWidth), _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), touchXValue)); // TODO(TS): make sure we can map this;\n                touchXValue.setValue(containerWidth);\n            } else {\n                touchXValue.setValue(0);\n            } // While closing the drawer when user starts gesture outside of its area (in greyed\n            // out part of the window), we want the drawer to follow only once finger reaches the\n            // edge of the drawer.\n            // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n            // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n            // an arrow pointing left\n            // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n            //    +---------------+    +---------------+    +---------------+    +---------------+\n            //\n            // For the above to work properly we define animated value that will keep\n            // start position of the gesture. Then we use that value to calculate how\n            // much we need to subtract from the dragX. If the gesture started on the\n            // greyed out area we take the distance from the edge of the drawer to the\n            // start position. Otherwise we don't subtract at all and the drawer be\n            // pulled back as soon as you start the pan.\n            //\n            // This is used only when drawerType is \"front\"\n            //\n            let translationX = dragX;\n            if (drawerType === \"front\") {\n                const startPositionX = _reactNative.Animated.add(touchX, _reactNative.Animated.multiply(new _reactNative.Animated.Value(-1), dragX));\n                const dragOffsetFromOnStartPosition = startPositionX.interpolate({\n                    inputRange: [\n                        drawerWidth - 1,\n                        drawerWidth,\n                        drawerWidth + 1\n                    ],\n                    outputRange: [\n                        0,\n                        0,\n                        1\n                    ]\n                });\n                translationX = _reactNative.Animated.add(dragX, dragOffsetFromOnStartPosition); // TODO: as above\n            }\n            this.openValue = _reactNative.Animated.add(translationX, drawerTranslation).interpolate({\n                inputRange: [\n                    0,\n                    drawerWidth\n                ],\n                outputRange: [\n                    0,\n                    1\n                ],\n                extrapolate: \"clamp\"\n            });\n            const gestureOptions = {\n                useNativeDriver: props.useNativeAnimations\n            };\n            if (this.props.onDrawerSlide) {\n                gestureOptions.listener = (ev)=>{\n                    var _this$props$onDrawerS, _this$props;\n                    const translationX = Math.floor(Math.abs(ev.nativeEvent.translationX));\n                    const position = translationX / this.state.containerWidth;\n                    (_this$props$onDrawerS = (_this$props = this.props).onDrawerSlide) === null || _this$props$onDrawerS === void 0 ? void 0 : _this$props$onDrawerS.call(_this$props, position);\n                };\n            }\n            this.onGestureEvent = _reactNative.Animated.event([\n                {\n                    nativeEvent: {\n                        translationX: dragXValue,\n                        x: touchXValue\n                    }\n                }\n            ], gestureOptions);\n        });\n        _defineProperty(this, \"handleContainerLayout\", ({ nativeEvent })=>{\n            this.setState({\n                containerWidth: nativeEvent.layout.width\n            });\n        });\n        _defineProperty(this, \"emitStateChanged\", (newState, drawerWillShow)=>{\n            var _this$props$onDrawerS2, _this$props2;\n            (_this$props$onDrawerS2 = (_this$props2 = this.props).onDrawerStateChanged) === null || _this$props$onDrawerS2 === void 0 ? void 0 : _this$props$onDrawerS2.call(_this$props2, newState, drawerWillShow);\n        });\n        _defineProperty(this, \"openingHandlerStateChange\", ({ nativeEvent })=>{\n            if (nativeEvent.oldState === _State.State.ACTIVE) {\n                this.handleRelease({\n                    nativeEvent\n                });\n            } else if (nativeEvent.state === _State.State.ACTIVE) {\n                this.emitStateChanged(DRAGGING, false);\n                this.setState({\n                    drawerState: DRAGGING\n                });\n                if (this.props.keyboardDismissMode === \"on-drag\") {\n                    _reactNative.Keyboard.dismiss();\n                }\n                if (this.props.hideStatusBar) {\n                    _reactNative.StatusBar.setHidden(true, this.props.statusBarAnimation || \"slide\");\n                }\n            }\n        });\n        _defineProperty(this, \"onTapHandlerStateChange\", ({ nativeEvent })=>{\n            if (this.drawerShown && nativeEvent.oldState === _State.State.ACTIVE && this.props.drawerLockMode !== \"locked-open\") {\n                this.closeDrawer();\n            }\n        });\n        _defineProperty(this, \"handleRelease\", ({ nativeEvent })=>{\n            const { drawerWidth, drawerPosition, drawerType } = this.props;\n            const { containerWidth } = this.state;\n            let { translationX: dragX, velocityX, x: touchX } = nativeEvent;\n            if (drawerPosition !== \"left\") {\n                // See description in _updateAnimatedEvent about why events are flipped\n                // for right-side drawer\n                dragX = -dragX;\n                touchX = containerWidth - touchX;\n                velocityX = -velocityX;\n            }\n            const gestureStartX = touchX - dragX;\n            let dragOffsetBasedOnStart = 0;\n            if (drawerType === \"front\") {\n                dragOffsetBasedOnStart = gestureStartX > drawerWidth ? gestureStartX - drawerWidth : 0;\n            }\n            const startOffsetX = dragX + dragOffsetBasedOnStart + (this.drawerShown ? drawerWidth : 0);\n            const projOffsetX = startOffsetX + DRAG_TOSS * velocityX;\n            const shouldOpen = projOffsetX > drawerWidth / 2;\n            if (shouldOpen) {\n                this.animateDrawer(startOffsetX, drawerWidth, velocityX);\n            } else {\n                this.animateDrawer(startOffsetX, 0, velocityX);\n            }\n        });\n        _defineProperty(this, \"updateShowing\", (showing)=>{\n            var _this$accessibilityIs, _this$pointerEventsVi, _this$panGestureHandl;\n            this.drawerShown = showing;\n            (_this$accessibilityIs = this.accessibilityIsModalView.current) === null || _this$accessibilityIs === void 0 ? void 0 : _this$accessibilityIs.setNativeProps({\n                accessibilityViewIsModal: showing\n            });\n            (_this$pointerEventsVi = this.pointerEventsView.current) === null || _this$pointerEventsVi === void 0 ? void 0 : _this$pointerEventsVi.setNativeProps({\n                pointerEvents: showing ? \"auto\" : \"none\"\n            });\n            const { drawerPosition, minSwipeDistance, edgeWidth } = this.props;\n            const fromLeft = drawerPosition === \"left\"; // gestureOrientation is 1 if the expected gesture is from left to right and\n            // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n            // to right gesture, thus orientation will be 1.\n            const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1); // When drawer is closed we want the hitSlop to be horizontally shorter than\n            // the container size by the value of SLOP. This will make it only activate\n            // when gesture happens not further than SLOP away from the edge\n            const hitSlop = fromLeft ? {\n                left: 0,\n                width: showing ? undefined : edgeWidth\n            } : {\n                right: 0,\n                width: showing ? undefined : edgeWidth\n            }; // @ts-ignore internal API, maybe could be fixed in handler types\n            (_this$panGestureHandl = this.panGestureHandler.current) === null || _this$panGestureHandl === void 0 ? void 0 : _this$panGestureHandl.setNativeProps({\n                hitSlop,\n                activeOffsetX: gestureOrientation * minSwipeDistance\n            });\n        });\n        _defineProperty(this, \"animateDrawer\", (fromValue, toValue, velocity, speed)=>{\n            this.state.dragX.setValue(0);\n            this.state.touchX.setValue(this.props.drawerPosition === \"left\" ? 0 : this.state.containerWidth);\n            if (fromValue != null) {\n                let nextFramePosition = fromValue;\n                if (this.props.useNativeAnimations) {\n                    // When using native driver, we predict the next position of the\n                    // animation because it takes one frame of a roundtrip to pass RELEASE\n                    // event from native driver to JS before we can start animating. Without\n                    // it, it is more noticable that the frame is dropped.\n                    if (fromValue < toValue && velocity > 0) {\n                        nextFramePosition = Math.min(fromValue + velocity / 60.0, toValue);\n                    } else if (fromValue > toValue && velocity < 0) {\n                        nextFramePosition = Math.max(fromValue + velocity / 60.0, toValue);\n                    }\n                }\n                this.state.drawerTranslation.setValue(nextFramePosition);\n            }\n            const willShow = toValue !== 0;\n            this.updateShowing(willShow);\n            this.emitStateChanged(SETTLING, willShow);\n            this.setState({\n                drawerState: SETTLING\n            });\n            if (this.props.hideStatusBar) {\n                _reactNative.StatusBar.setHidden(willShow, this.props.statusBarAnimation || \"slide\");\n            }\n            _reactNative.Animated.spring(this.state.drawerTranslation, {\n                velocity,\n                bounciness: 0,\n                toValue,\n                useNativeDriver: this.props.useNativeAnimations,\n                speed: speed !== null && speed !== void 0 ? speed : undefined\n            }).start(({ finished })=>{\n                if (finished) {\n                    this.emitStateChanged(IDLE, willShow);\n                    this.setState({\n                        drawerOpened: willShow\n                    });\n                    if (this.state.drawerState !== DRAGGING) {\n                        // it's possilbe that user started drag while the drawer\n                        // was settling, don't override state in this case\n                        this.setState({\n                            drawerState: IDLE\n                        });\n                    }\n                    if (willShow) {\n                        var _this$props$onDrawerO, _this$props3;\n                        (_this$props$onDrawerO = (_this$props3 = this.props).onDrawerOpen) === null || _this$props$onDrawerO === void 0 ? void 0 : _this$props$onDrawerO.call(_this$props3);\n                    } else {\n                        var _this$props$onDrawerC, _this$props4;\n                        (_this$props$onDrawerC = (_this$props4 = this.props).onDrawerClose) === null || _this$props$onDrawerC === void 0 ? void 0 : _this$props$onDrawerC.call(_this$props4);\n                    }\n                }\n            });\n        });\n        _defineProperty(this, \"openDrawer\", (options = {})=>{\n            this.animateDrawer(undefined, this.props.drawerWidth, options.velocity ? options.velocity : 0, options.speed); // We need to force the update, otherwise the overlay is not rerendered and\n            // it would not be clickable\n            this.forceUpdate();\n        });\n        _defineProperty(this, \"closeDrawer\", (options = {})=>{\n            // TODO: decide if it should be null or undefined is the proper value\n            this.animateDrawer(undefined, 0, options.velocity ? options.velocity : 0, options.speed); // We need to force the update, otherwise the overlay is not rerendered and\n            // it would be still clickable\n            this.forceUpdate();\n        });\n        _defineProperty(this, \"renderOverlay\", ()=>{\n            /* Overlay styles */ (0, _invariant.default)(this.openValue, \"should be set\");\n            let overlayOpacity;\n            if (this.state.drawerState !== IDLE) {\n                overlayOpacity = this.openValue;\n            } else {\n                overlayOpacity = this.state.drawerOpened ? 1 : 0;\n            }\n            const dynamicOverlayStyles = {\n                opacity: overlayOpacity,\n                backgroundColor: this.props.overlayColor\n            };\n            return /*#__PURE__*/ React.createElement(_TapGestureHandler.TapGestureHandler, {\n                onHandlerStateChange: this.onTapHandlerStateChange\n            }, /*#__PURE__*/ React.createElement(_reactNative.Animated.View, {\n                pointerEvents: this.drawerShown ? \"auto\" : \"none\",\n                ref: this.pointerEventsView,\n                style: [\n                    styles.overlay,\n                    dynamicOverlayStyles\n                ]\n            }));\n        });\n        _defineProperty(this, \"renderDrawer\", ()=>{\n            const { drawerBackgroundColor, drawerWidth, drawerPosition, drawerType, drawerContainerStyle, contentContainerStyle } = this.props;\n            const fromLeft = drawerPosition === \"left\";\n            const drawerSlide = drawerType !== \"back\";\n            const containerSlide = drawerType !== \"front\"; // we rely on row and row-reverse flex directions to position the drawer\n            // properly. Apparently for RTL these are flipped which requires us to use\n            // the opposite setting for the drawer to appear from left or right\n            // according to the drawerPosition prop\n            const reverseContentDirection = _reactNative.I18nManager.isRTL ? fromLeft : !fromLeft;\n            const dynamicDrawerStyles = {\n                backgroundColor: drawerBackgroundColor,\n                width: drawerWidth\n            };\n            const openValue = this.openValue;\n            (0, _invariant.default)(openValue, \"should be set\");\n            let containerStyles;\n            if (containerSlide) {\n                const containerTranslateX = openValue.interpolate({\n                    inputRange: [\n                        0,\n                        1\n                    ],\n                    outputRange: fromLeft ? [\n                        0,\n                        drawerWidth\n                    ] : [\n                        0,\n                        -drawerWidth\n                    ],\n                    extrapolate: \"clamp\"\n                });\n                containerStyles = {\n                    transform: [\n                        {\n                            translateX: containerTranslateX\n                        }\n                    ]\n                };\n            }\n            let drawerTranslateX = 0;\n            if (drawerSlide) {\n                const closedDrawerOffset = fromLeft ? -drawerWidth : drawerWidth;\n                if (this.state.drawerState !== IDLE) {\n                    drawerTranslateX = openValue.interpolate({\n                        inputRange: [\n                            0,\n                            1\n                        ],\n                        outputRange: [\n                            closedDrawerOffset,\n                            0\n                        ],\n                        extrapolate: \"clamp\"\n                    });\n                } else {\n                    drawerTranslateX = this.state.drawerOpened ? 0 : closedDrawerOffset;\n                }\n            }\n            const drawerStyles = {\n                transform: [\n                    {\n                        translateX: drawerTranslateX\n                    }\n                ],\n                flexDirection: reverseContentDirection ? \"row-reverse\" : \"row\"\n            };\n            return /*#__PURE__*/ React.createElement(_reactNative.Animated.View, {\n                style: styles.main,\n                onLayout: this.handleContainerLayout\n            }, /*#__PURE__*/ React.createElement(_reactNative.Animated.View, {\n                style: [\n                    drawerType === \"front\" ? styles.containerOnBack : styles.containerInFront,\n                    containerStyles,\n                    contentContainerStyle\n                ],\n                importantForAccessibility: this.drawerShown ? \"no-hide-descendants\" : \"yes\"\n            }, typeof this.props.children === \"function\" ? this.props.children(this.openValue) : this.props.children, this.renderOverlay()), /*#__PURE__*/ React.createElement(_reactNative.Animated.View, {\n                pointerEvents: \"box-none\",\n                ref: this.accessibilityIsModalView,\n                accessibilityViewIsModal: this.drawerShown,\n                style: [\n                    styles.drawerContainer,\n                    drawerStyles,\n                    drawerContainerStyle\n                ]\n            }, /*#__PURE__*/ React.createElement(_reactNative.View, {\n                style: dynamicDrawerStyles\n            }, this.props.renderNavigationView(this.openValue))));\n        });\n        _defineProperty(this, \"setPanGestureRef\", (ref)=>{\n            var _this$props$onGesture, _this$props5;\n            // TODO(TS): make sure it is OK taken from\n            // https://github.com/DefinitelyTyped/DefinitelyTyped/issues/31065#issuecomment-596081842\n            this.panGestureHandler.current = ref;\n            (_this$props$onGesture = (_this$props5 = this.props).onGestureRef) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props5, ref);\n        });\n        const _dragX = new _reactNative.Animated.Value(0);\n        const _touchX = new _reactNative.Animated.Value(0);\n        const _drawerTranslation = new _reactNative.Animated.Value(0);\n        this.state = {\n            dragX: _dragX,\n            touchX: _touchX,\n            drawerTranslation: _drawerTranslation,\n            containerWidth: 0,\n            drawerState: IDLE,\n            drawerOpened: false\n        };\n        this.updateAnimatedEvent(_props, this.state);\n    }\n    shouldComponentUpdate(props, state) {\n        if (this.props.drawerPosition !== props.drawerPosition || this.props.drawerWidth !== props.drawerWidth || this.props.drawerType !== props.drawerType || this.state.containerWidth !== state.containerWidth) {\n            this.updateAnimatedEvent(props, state);\n        }\n        return true;\n    }\n    render() {\n        const { drawerPosition, drawerLockMode, edgeWidth, minSwipeDistance } = this.props;\n        const fromLeft = drawerPosition === \"left\"; // gestureOrientation is 1 if the expected gesture is from left to right and\n        // -1 otherwise e.g. when drawer is on the left and is closed we expect left\n        // to right gesture, thus orientation will be 1.\n        const gestureOrientation = (fromLeft ? 1 : -1) * (this.drawerShown ? -1 : 1); // When drawer is closed we want the hitSlop to be horizontally shorter than\n        // the container size by the value of SLOP. This will make it only activate\n        // when gesture happens not further than SLOP away from the edge\n        const hitSlop = fromLeft ? {\n            left: 0,\n            width: this.drawerShown ? undefined : edgeWidth\n        } : {\n            right: 0,\n            width: this.drawerShown ? undefined : edgeWidth\n        };\n        return /*#__PURE__*/ React.createElement(_PanGestureHandler.PanGestureHandler // @ts-ignore could be fixed in handler types\n        , {\n            userSelect: this.props.userSelect,\n            ref: this.setPanGestureRef,\n            hitSlop: hitSlop,\n            activeOffsetX: gestureOrientation * minSwipeDistance,\n            failOffsetY: [\n                -15,\n                15\n            ],\n            onGestureEvent: this.onGestureEvent,\n            onHandlerStateChange: this.openingHandlerStateChange,\n            enableTrackpadTwoFingerGesture: this.props.enableTrackpadTwoFingerGesture,\n            enabled: drawerLockMode !== \"locked-closed\" && drawerLockMode !== \"locked-open\"\n        }, this.renderDrawer());\n    }\n}\nexports[\"default\"] = DrawerLayout;\n_defineProperty(DrawerLayout, \"defaultProps\", {\n    drawerWidth: 200,\n    drawerPosition: \"left\",\n    useNativeAnimations: true,\n    drawerType: \"front\",\n    edgeWidth: 20,\n    minSwipeDistance: 3,\n    overlayColor: \"rgba(0, 0, 0, 0.7)\",\n    drawerLockMode: \"unlocked\",\n    enableTrackpadTwoFingerGesture: false\n});\n_defineProperty(DrawerLayout, \"positions\", {\n    Left: \"left\",\n    Right: \"right\"\n});\nconst styles = _reactNative.StyleSheet.create({\n    drawerContainer: {\n        ..._reactNative.StyleSheet.absoluteFillObject,\n        zIndex: 1001,\n        flexDirection: \"row\"\n    },\n    containerInFront: {\n        ..._reactNative.StyleSheet.absoluteFillObject,\n        zIndex: 1002\n    },\n    containerOnBack: {\n        ..._reactNative.StyleSheet.absoluteFillObject\n    },\n    main: {\n        flex: 1,\n        zIndex: 0,\n        overflow: \"hidden\"\n    },\n    overlay: {\n        ..._reactNative.StyleSheet.absoluteFillObject,\n        zIndex: 1000\n    }\n}); //# sourceMappingURL=DrawerLayout.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/DrawerLayout.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureButtons.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureButtons.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"PureNativeButton\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureHandlerButton.default;\n    }\n}));\nexports.BorderlessButton = exports.RectButton = exports.BaseButton = exports.RawButton = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _createNativeWrapper = _interopRequireDefault(__webpack_require__(/*! ../handlers/createNativeWrapper */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createNativeWrapper.js\"));\nvar _GestureHandlerButton = _interopRequireDefault(__webpack_require__(/*! ./GestureHandlerButton */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureHandlerButton.web.js\"));\nvar _State = __webpack_require__(/*! ../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst RawButton = (0, _createNativeWrapper.default)(_GestureHandlerButton.default, {\n    shouldCancelWhenOutside: false,\n    shouldActivateOnStart: false\n});\nexports.RawButton = RawButton;\nclass BaseButton extends React.Component {\n    constructor(props){\n        super(props);\n        _defineProperty(this, \"lastActive\", void 0);\n        _defineProperty(this, \"longPressTimeout\", void 0);\n        _defineProperty(this, \"longPressDetected\", void 0);\n        _defineProperty(this, \"handleEvent\", ({ nativeEvent })=>{\n            const { state, oldState, pointerInside } = nativeEvent;\n            const active = pointerInside && state === _State.State.ACTIVE;\n            if (active !== this.lastActive && this.props.onActiveStateChange) {\n                this.props.onActiveStateChange(active);\n            }\n            if (!this.longPressDetected && oldState === _State.State.ACTIVE && state !== _State.State.CANCELLED && this.lastActive && this.props.onPress) {\n                this.props.onPress(active);\n            }\n            if (!this.lastActive && // NativeViewGestureHandler sends different events based on platform\n            state === (_reactNative.Platform.OS !== \"android\" ? _State.State.ACTIVE : _State.State.BEGAN) && pointerInside) {\n                this.longPressDetected = false;\n                if (this.props.onLongPress) {\n                    this.longPressTimeout = setTimeout(this.onLongPress, this.props.delayLongPress);\n                }\n            } else if (state === _State.State.ACTIVE && !pointerInside && this.longPressTimeout !== undefined) {\n                clearTimeout(this.longPressTimeout);\n                this.longPressTimeout = undefined;\n            } else if (this.longPressTimeout !== undefined && (state === _State.State.END || state === _State.State.CANCELLED || state === _State.State.FAILED)) {\n                clearTimeout(this.longPressTimeout);\n                this.longPressTimeout = undefined;\n            }\n            this.lastActive = active;\n        });\n        _defineProperty(this, \"onLongPress\", ()=>{\n            var _this$props$onLongPre, _this$props;\n            this.longPressDetected = true;\n            (_this$props$onLongPre = (_this$props = this.props).onLongPress) === null || _this$props$onLongPre === void 0 ? void 0 : _this$props$onLongPre.call(_this$props);\n        });\n        _defineProperty(this, \"onHandlerStateChange\", (e)=>{\n            var _this$props$onHandler, _this$props2;\n            (_this$props$onHandler = (_this$props2 = this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props2, e);\n            this.handleEvent(e);\n        });\n        _defineProperty(this, \"onGestureEvent\", (e)=>{\n            var _this$props$onGesture, _this$props3;\n            (_this$props$onGesture = (_this$props3 = this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props3, e);\n            this.handleEvent(e); // TODO: maybe it is not correct\n        });\n        this.lastActive = false;\n        this.longPressDetected = false;\n    }\n    render() {\n        const { rippleColor, ...rest } = this.props;\n        return /*#__PURE__*/ React.createElement(RawButton, _extends({\n            rippleColor: (0, _reactNative.processColor)(rippleColor)\n        }, rest, {\n            onGestureEvent: this.onGestureEvent,\n            onHandlerStateChange: this.onHandlerStateChange\n        }));\n    }\n}\nexports.BaseButton = BaseButton;\n_defineProperty(BaseButton, \"defaultProps\", {\n    delayLongPress: 600\n});\nconst AnimatedBaseButton = _reactNative.Animated.createAnimatedComponent(BaseButton);\nconst btnStyles = _reactNative.StyleSheet.create({\n    underlay: {\n        position: \"absolute\",\n        left: 0,\n        right: 0,\n        bottom: 0,\n        top: 0\n    }\n});\nclass RectButton extends React.Component {\n    constructor(props){\n        super(props);\n        _defineProperty(this, \"opacity\", void 0);\n        _defineProperty(this, \"onActiveStateChange\", (active)=>{\n            var _this$props$onActiveS, _this$props4;\n            if (_reactNative.Platform.OS !== \"android\") {\n                this.opacity.setValue(active ? this.props.activeOpacity : 0);\n            }\n            (_this$props$onActiveS = (_this$props4 = this.props).onActiveStateChange) === null || _this$props$onActiveS === void 0 ? void 0 : _this$props$onActiveS.call(_this$props4, active);\n        });\n        this.opacity = new _reactNative.Animated.Value(0);\n    }\n    render() {\n        const { children, style, ...rest } = this.props;\n        const resolvedStyle = _reactNative.StyleSheet.flatten(style !== null && style !== void 0 ? style : {});\n        return /*#__PURE__*/ React.createElement(BaseButton, _extends({}, rest, {\n            style: resolvedStyle,\n            onActiveStateChange: this.onActiveStateChange\n        }), /*#__PURE__*/ React.createElement(_reactNative.Animated.View, {\n            style: [\n                btnStyles.underlay,\n                {\n                    opacity: this.opacity,\n                    backgroundColor: this.props.underlayColor,\n                    borderRadius: resolvedStyle.borderRadius,\n                    borderTopLeftRadius: resolvedStyle.borderTopLeftRadius,\n                    borderTopRightRadius: resolvedStyle.borderTopRightRadius,\n                    borderBottomLeftRadius: resolvedStyle.borderBottomLeftRadius,\n                    borderBottomRightRadius: resolvedStyle.borderBottomRightRadius\n                }\n            ]\n        }), children);\n    }\n}\nexports.RectButton = RectButton;\n_defineProperty(RectButton, \"defaultProps\", {\n    activeOpacity: 0.105,\n    underlayColor: \"black\"\n});\nclass BorderlessButton extends React.Component {\n    constructor(props){\n        super(props);\n        _defineProperty(this, \"opacity\", void 0);\n        _defineProperty(this, \"onActiveStateChange\", (active)=>{\n            var _this$props$onActiveS2, _this$props5;\n            if (_reactNative.Platform.OS !== \"android\") {\n                this.opacity.setValue(active ? this.props.activeOpacity : 1);\n            }\n            (_this$props$onActiveS2 = (_this$props5 = this.props).onActiveStateChange) === null || _this$props$onActiveS2 === void 0 ? void 0 : _this$props$onActiveS2.call(_this$props5, active);\n        });\n        this.opacity = new _reactNative.Animated.Value(1);\n    }\n    render() {\n        const { children, style, ...rest } = this.props;\n        return /*#__PURE__*/ React.createElement(AnimatedBaseButton, _extends({}, rest, {\n            onActiveStateChange: this.onActiveStateChange,\n            style: [\n                style,\n                _reactNative.Platform.OS === \"ios\" && {\n                    opacity: this.opacity\n                }\n            ]\n        }), children);\n    }\n}\nexports.BorderlessButton = BorderlessButton;\n_defineProperty(BorderlessButton, \"defaultProps\", {\n    activeOpacity: 0.3,\n    borderless: true\n}); //# sourceMappingURL=GestureButtons.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureButtons.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureComponents.web.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureComponents.web.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FlatList = exports.RefreshControl = exports.DrawerLayoutAndroid = exports.TextInput = exports.Switch = exports.ScrollView = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _createNativeWrapper = _interopRequireDefault(__webpack_require__(/*! ../handlers/createNativeWrapper */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createNativeWrapper.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nconst ScrollView = (0, _createNativeWrapper.default)(_reactNative.ScrollView, {\n    disallowInterruption: false\n});\nexports.ScrollView = ScrollView;\nconst Switch = (0, _createNativeWrapper.default)(_reactNative.Switch, {\n    shouldCancelWhenOutside: false,\n    shouldActivateOnStart: true,\n    disallowInterruption: true\n});\nexports.Switch = Switch;\nconst TextInput = (0, _createNativeWrapper.default)(_reactNative.TextInput);\nexports.TextInput = TextInput;\nconst DrawerLayoutAndroid = (0, _createNativeWrapper.default)(_reactNative.DrawerLayoutAndroid, {\n    disallowInterruption: true\n}); // @ts-ignore -- TODO(TS) to investigate if it's needed\nexports.DrawerLayoutAndroid = DrawerLayoutAndroid;\nDrawerLayoutAndroid.positions = _reactNative.DrawerLayoutAndroid.positions; // RefreshControl is implemented as a functional component, rendering a View\n// NativeViewGestureHandler needs to set a ref on its child, which cannot be done\n// on functional components\nconst RefreshControl = (0, _createNativeWrapper.default)(_reactNative.View);\nexports.RefreshControl = RefreshControl;\nconst FlatList = /*#__PURE__*/ React.forwardRef((props, ref)=>/*#__PURE__*/ React.createElement(_reactNative.FlatList, _extends({\n        ref: ref\n    }, props, {\n        renderScrollComponent: (scrollProps)=>/*#__PURE__*/ React.createElement(ScrollView, scrollProps)\n    })));\nexports.FlatList = FlatList; //# sourceMappingURL=GestureComponents.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvY29tcG9uZW50cy9HZXN0dXJlQ29tcG9uZW50cy53ZWIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGdCQUFnQixHQUFHQSxzQkFBc0IsR0FBR0EsMkJBQTJCLEdBQUdBLGlCQUFpQixHQUFHQSxjQUFjLEdBQUdBLGtCQUFrQixHQUFHLEtBQUs7QUFFekksSUFBSVEsUUFBUUMsd0JBQXdCQyxtQkFBT0EsQ0FBQyxvQkFBTztBQUVuRCxJQUFJQyxlQUFlRCxtQkFBT0EsQ0FBQyx1RUFBYztBQUV6QyxJQUFJRSx1QkFBdUJDLHVCQUF1QkgsbUJBQU9BLENBQUMsaUlBQWlDO0FBRTNGLFNBQVNHLHVCQUF1QkMsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlDLFVBQVUsR0FBR0QsTUFBTTtRQUFFRSxTQUFTRjtJQUFJO0FBQUc7QUFFOUYsU0FBU0c7SUFBNkIsSUFBSSxPQUFPQyxZQUFZLFlBQVksT0FBTztJQUFNLElBQUlDLFFBQVEsSUFBSUQ7SUFBV0QsMkJBQTJCO1FBQWMsT0FBT0U7SUFBTztJQUFHLE9BQU9BO0FBQU87QUFFekwsU0FBU1Ysd0JBQXdCSyxHQUFHO0lBQUksSUFBSUEsT0FBT0EsSUFBSUMsVUFBVSxFQUFFO1FBQUUsT0FBT0Q7SUFBSztJQUFFLElBQUlBLFFBQVEsUUFBUSxPQUFPQSxRQUFRLFlBQVksT0FBT0EsUUFBUSxZQUFZO1FBQUUsT0FBTztZQUFFRSxTQUFTRjtRQUFJO0lBQUc7SUFBRSxJQUFJSyxRQUFRRjtJQUE0QixJQUFJRSxTQUFTQSxNQUFNQyxHQUFHLENBQUNOLE1BQU07UUFBRSxPQUFPSyxNQUFNRSxHQUFHLENBQUNQO0lBQU07SUFBRSxJQUFJUSxTQUFTLENBQUM7SUFBRyxJQUFJQyx3QkFBd0J6QixPQUFPQyxjQUFjLElBQUlELE9BQU8wQix3QkFBd0I7SUFBRSxJQUFLLElBQUlDLE9BQU9YLElBQUs7UUFBRSxJQUFJaEIsT0FBTzRCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNkLEtBQUtXLE1BQU07WUFBRSxJQUFJSSxPQUFPTix3QkFBd0J6QixPQUFPMEIsd0JBQXdCLENBQUNWLEtBQUtXLE9BQU87WUFBTSxJQUFJSSxRQUFTQSxDQUFBQSxLQUFLUixHQUFHLElBQUlRLEtBQUtDLEdBQUcsR0FBRztnQkFBRWhDLE9BQU9DLGNBQWMsQ0FBQ3VCLFFBQVFHLEtBQUtJO1lBQU8sT0FBTztnQkFBRVAsTUFBTSxDQUFDRyxJQUFJLEdBQUdYLEdBQUcsQ0FBQ1csSUFBSTtZQUFFO1FBQUU7SUFBRTtJQUFFSCxPQUFPTixPQUFPLEdBQUdGO0lBQUssSUFBSUssT0FBTztRQUFFQSxNQUFNVyxHQUFHLENBQUNoQixLQUFLUTtJQUFTO0lBQUUsT0FBT0E7QUFBUTtBQUV0dUIsU0FBU1M7SUFBYUEsV0FBV2pDLE9BQU9rQyxNQUFNLElBQUksU0FBVUMsTUFBTTtRQUFJLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJQyxVQUFVQyxNQUFNLEVBQUVGLElBQUs7WUFBRSxJQUFJRyxTQUFTRixTQUFTLENBQUNELEVBQUU7WUFBRSxJQUFLLElBQUlULE9BQU9ZLE9BQVE7Z0JBQUUsSUFBSXZDLE9BQU80QixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDUyxRQUFRWixNQUFNO29CQUFFUSxNQUFNLENBQUNSLElBQUksR0FBR1ksTUFBTSxDQUFDWixJQUFJO2dCQUFFO1lBQUU7UUFBRTtRQUFFLE9BQU9RO0lBQVE7SUFBRyxPQUFPRixTQUFTTyxLQUFLLENBQUMsSUFBSSxFQUFFSDtBQUFZO0FBRTVULE1BQU01QixhQUFhLENBQUMsR0FBR0sscUJBQXFCSSxPQUFPLEVBQUVMLGFBQWFKLFVBQVUsRUFBRTtJQUM1RWdDLHNCQUFzQjtBQUN4QjtBQUNBdkMsa0JBQWtCLEdBQUdPO0FBQ3JCLE1BQU1ELFNBQVMsQ0FBQyxHQUFHTSxxQkFBcUJJLE9BQU8sRUFBRUwsYUFBYUwsTUFBTSxFQUFFO0lBQ3BFa0MseUJBQXlCO0lBQ3pCQyx1QkFBdUI7SUFDdkJGLHNCQUFzQjtBQUN4QjtBQUNBdkMsY0FBYyxHQUFHTTtBQUNqQixNQUFNRCxZQUFZLENBQUMsR0FBR08scUJBQXFCSSxPQUFPLEVBQUVMLGFBQWFOLFNBQVM7QUFDMUVMLGlCQUFpQixHQUFHSztBQUNwQixNQUFNRCxzQkFBc0IsQ0FBQyxHQUFHUSxxQkFBcUJJLE9BQU8sRUFBRUwsYUFBYVAsbUJBQW1CLEVBQUU7SUFDOUZtQyxzQkFBc0I7QUFDeEIsSUFBSSx1REFBdUQ7QUFFM0R2QywyQkFBMkIsR0FBR0k7QUFDOUJBLG9CQUFvQnNDLFNBQVMsR0FBRy9CLGFBQWFQLG1CQUFtQixDQUFDc0MsU0FBUyxFQUFFLDRFQUE0RTtBQUN4SixpRkFBaUY7QUFDakYsMkJBQTJCO0FBRTNCLE1BQU12QyxpQkFBaUIsQ0FBQyxHQUFHUyxxQkFBcUJJLE9BQU8sRUFBRUwsYUFBYWdDLElBQUk7QUFDMUUzQyxzQkFBc0IsR0FBR0c7QUFDekIsTUFBTUQsV0FBVyxXQUFXLEdBQUVNLE1BQU1vQyxVQUFVLENBQUMsQ0FBQ0MsT0FBT0MsTUFBUSxXQUFXLEdBQUV0QyxNQUFNdUMsYUFBYSxDQUFDcEMsYUFBYVQsUUFBUSxFQUFFNkIsU0FBUztRQUM5SGUsS0FBS0E7SUFDUCxHQUFHRCxPQUFPO1FBQ1JHLHVCQUF1QkMsQ0FBQUEsY0FBZSxXQUFXLEdBQUV6QyxNQUFNdUMsYUFBYSxDQUFDeEMsWUFBWTBDO0lBQ3JGO0FBQ0FqRCxnQkFBZ0IsR0FBR0UsVUFDbkIsaURBQWlEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZml0X3BsdXNfcGx1cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy9jb21wb25lbnRzL0dlc3R1cmVDb21wb25lbnRzLndlYi5qcz83ODI1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5GbGF0TGlzdCA9IGV4cG9ydHMuUmVmcmVzaENvbnRyb2wgPSBleHBvcnRzLkRyYXdlckxheW91dEFuZHJvaWQgPSBleHBvcnRzLlRleHRJbnB1dCA9IGV4cG9ydHMuU3dpdGNoID0gZXhwb3J0cy5TY3JvbGxWaWV3ID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0TmF0aXZlID0gcmVxdWlyZShcInJlYWN0LW5hdGl2ZVwiKTtcblxudmFyIF9jcmVhdGVOYXRpdmVXcmFwcGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vaGFuZGxlcnMvY3JlYXRlTmF0aXZlV3JhcHBlclwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5jb25zdCBTY3JvbGxWaWV3ID0gKDAsIF9jcmVhdGVOYXRpdmVXcmFwcGVyLmRlZmF1bHQpKF9yZWFjdE5hdGl2ZS5TY3JvbGxWaWV3LCB7XG4gIGRpc2FsbG93SW50ZXJydXB0aW9uOiBmYWxzZVxufSk7XG5leHBvcnRzLlNjcm9sbFZpZXcgPSBTY3JvbGxWaWV3O1xuY29uc3QgU3dpdGNoID0gKDAsIF9jcmVhdGVOYXRpdmVXcmFwcGVyLmRlZmF1bHQpKF9yZWFjdE5hdGl2ZS5Td2l0Y2gsIHtcbiAgc2hvdWxkQ2FuY2VsV2hlbk91dHNpZGU6IGZhbHNlLFxuICBzaG91bGRBY3RpdmF0ZU9uU3RhcnQ6IHRydWUsXG4gIGRpc2FsbG93SW50ZXJydXB0aW9uOiB0cnVlXG59KTtcbmV4cG9ydHMuU3dpdGNoID0gU3dpdGNoO1xuY29uc3QgVGV4dElucHV0ID0gKDAsIF9jcmVhdGVOYXRpdmVXcmFwcGVyLmRlZmF1bHQpKF9yZWFjdE5hdGl2ZS5UZXh0SW5wdXQpO1xuZXhwb3J0cy5UZXh0SW5wdXQgPSBUZXh0SW5wdXQ7XG5jb25zdCBEcmF3ZXJMYXlvdXRBbmRyb2lkID0gKDAsIF9jcmVhdGVOYXRpdmVXcmFwcGVyLmRlZmF1bHQpKF9yZWFjdE5hdGl2ZS5EcmF3ZXJMYXlvdXRBbmRyb2lkLCB7XG4gIGRpc2FsbG93SW50ZXJydXB0aW9uOiB0cnVlXG59KTsgLy8gQHRzLWlnbm9yZSAtLSBUT0RPKFRTKSB0byBpbnZlc3RpZ2F0ZSBpZiBpdCdzIG5lZWRlZFxuXG5leHBvcnRzLkRyYXdlckxheW91dEFuZHJvaWQgPSBEcmF3ZXJMYXlvdXRBbmRyb2lkO1xuRHJhd2VyTGF5b3V0QW5kcm9pZC5wb3NpdGlvbnMgPSBfcmVhY3ROYXRpdmUuRHJhd2VyTGF5b3V0QW5kcm9pZC5wb3NpdGlvbnM7IC8vIFJlZnJlc2hDb250cm9sIGlzIGltcGxlbWVudGVkIGFzIGEgZnVuY3Rpb25hbCBjb21wb25lbnQsIHJlbmRlcmluZyBhIFZpZXdcbi8vIE5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlciBuZWVkcyB0byBzZXQgYSByZWYgb24gaXRzIGNoaWxkLCB3aGljaCBjYW5ub3QgYmUgZG9uZVxuLy8gb24gZnVuY3Rpb25hbCBjb21wb25lbnRzXG5cbmNvbnN0IFJlZnJlc2hDb250cm9sID0gKDAsIF9jcmVhdGVOYXRpdmVXcmFwcGVyLmRlZmF1bHQpKF9yZWFjdE5hdGl2ZS5WaWV3KTtcbmV4cG9ydHMuUmVmcmVzaENvbnRyb2wgPSBSZWZyZXNoQ29udHJvbDtcbmNvbnN0IEZsYXRMaXN0ID0gLyojX19QVVJFX18qL1JlYWN0LmZvcndhcmRSZWYoKHByb3BzLCByZWYpID0+IC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9yZWFjdE5hdGl2ZS5GbGF0TGlzdCwgX2V4dGVuZHMoe1xuICByZWY6IHJlZlxufSwgcHJvcHMsIHtcbiAgcmVuZGVyU2Nyb2xsQ29tcG9uZW50OiBzY3JvbGxQcm9wcyA9PiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChTY3JvbGxWaWV3LCBzY3JvbGxQcm9wcylcbn0pKSk7XG5leHBvcnRzLkZsYXRMaXN0ID0gRmxhdExpc3Q7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1HZXN0dXJlQ29tcG9uZW50cy53ZWIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRmxhdExpc3QiLCJSZWZyZXNoQ29udHJvbCIsIkRyYXdlckxheW91dEFuZHJvaWQiLCJUZXh0SW5wdXQiLCJTd2l0Y2giLCJTY3JvbGxWaWV3IiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfY3JlYXRlTmF0aXZlV3JhcHBlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIldlYWtNYXAiLCJjYWNoZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsImRpc2FsbG93SW50ZXJydXB0aW9uIiwic2hvdWxkQ2FuY2VsV2hlbk91dHNpZGUiLCJzaG91bGRBY3RpdmF0ZU9uU3RhcnQiLCJwb3NpdGlvbnMiLCJWaWV3IiwiZm9yd2FyZFJlZiIsInByb3BzIiwicmVmIiwiY3JlYXRlRWxlbWVudCIsInJlbmRlclNjcm9sbENvbXBvbmVudCIsInNjcm9sbFByb3BzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureComponents.web.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureHandlerButton.web.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureHandlerButton.web.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nvar _default = /*#__PURE__*/ React.forwardRef((props, ref)=>/*#__PURE__*/ React.createElement(_reactNative.View, _extends({\n        ref: ref,\n        accessibilityRole: \"button\"\n    }, props)));\nexports[\"default\"] = _default; //# sourceMappingURL=GestureHandlerButton.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvY29tcG9uZW50cy9HZXN0dXJlSGFuZGxlckJ1dHRvbi53ZWIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFlLEdBQUcsS0FBSztBQUV2QixJQUFJRyxRQUFRQyx3QkFBd0JDLG1CQUFPQSxDQUFDLG9CQUFPO0FBRW5ELElBQUlDLGVBQWVELG1CQUFPQSxDQUFDLHVFQUFjO0FBRXpDLFNBQVNFO0lBQTZCLElBQUksT0FBT0MsWUFBWSxZQUFZLE9BQU87SUFBTSxJQUFJQyxRQUFRLElBQUlEO0lBQVdELDJCQUEyQjtRQUFjLE9BQU9FO0lBQU87SUFBRyxPQUFPQTtBQUFPO0FBRXpMLFNBQVNMLHdCQUF3Qk0sR0FBRztJQUFJLElBQUlBLE9BQU9BLElBQUlDLFVBQVUsRUFBRTtRQUFFLE9BQU9EO0lBQUs7SUFBRSxJQUFJQSxRQUFRLFFBQVEsT0FBT0EsUUFBUSxZQUFZLE9BQU9BLFFBQVEsWUFBWTtRQUFFLE9BQU87WUFBRVIsU0FBU1E7UUFBSTtJQUFHO0lBQUUsSUFBSUQsUUFBUUY7SUFBNEIsSUFBSUUsU0FBU0EsTUFBTUcsR0FBRyxDQUFDRixNQUFNO1FBQUUsT0FBT0QsTUFBTUksR0FBRyxDQUFDSDtJQUFNO0lBQUUsSUFBSUksU0FBUyxDQUFDO0lBQUcsSUFBSUMsd0JBQXdCakIsT0FBT0MsY0FBYyxJQUFJRCxPQUFPa0Isd0JBQXdCO0lBQUUsSUFBSyxJQUFJQyxPQUFPUCxJQUFLO1FBQUUsSUFBSVosT0FBT29CLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNWLEtBQUtPLE1BQU07WUFBRSxJQUFJSSxPQUFPTix3QkFBd0JqQixPQUFPa0Isd0JBQXdCLENBQUNOLEtBQUtPLE9BQU87WUFBTSxJQUFJSSxRQUFTQSxDQUFBQSxLQUFLUixHQUFHLElBQUlRLEtBQUtDLEdBQUcsR0FBRztnQkFBRXhCLE9BQU9DLGNBQWMsQ0FBQ2UsUUFBUUcsS0FBS0k7WUFBTyxPQUFPO2dCQUFFUCxNQUFNLENBQUNHLElBQUksR0FBR1AsR0FBRyxDQUFDTyxJQUFJO1lBQUU7UUFBRTtJQUFFO0lBQUVILE9BQU9aLE9BQU8sR0FBR1E7SUFBSyxJQUFJRCxPQUFPO1FBQUVBLE1BQU1hLEdBQUcsQ0FBQ1osS0FBS0k7SUFBUztJQUFFLE9BQU9BO0FBQVE7QUFFdHVCLFNBQVNTO0lBQWFBLFdBQVd6QixPQUFPMEIsTUFBTSxJQUFJLFNBQVVDLE1BQU07UUFBSSxJQUFLLElBQUlDLElBQUksR0FBR0EsSUFBSUMsVUFBVUMsTUFBTSxFQUFFRixJQUFLO1lBQUUsSUFBSUcsU0FBU0YsU0FBUyxDQUFDRCxFQUFFO1lBQUUsSUFBSyxJQUFJVCxPQUFPWSxPQUFRO2dCQUFFLElBQUkvQixPQUFPb0IsU0FBUyxDQUFDQyxjQUFjLENBQUNDLElBQUksQ0FBQ1MsUUFBUVosTUFBTTtvQkFBRVEsTUFBTSxDQUFDUixJQUFJLEdBQUdZLE1BQU0sQ0FBQ1osSUFBSTtnQkFBRTtZQUFFO1FBQUU7UUFBRSxPQUFPUTtJQUFRO0lBQUcsT0FBT0YsU0FBU08sS0FBSyxDQUFDLElBQUksRUFBRUg7QUFBWTtBQUU1VCxJQUFJSSxXQUFXLFdBQVcsR0FBRTVCLE1BQU02QixVQUFVLENBQUMsQ0FBQ0MsT0FBT0MsTUFBUSxXQUFXLEdBQUUvQixNQUFNZ0MsYUFBYSxDQUFDN0IsYUFBYThCLElBQUksRUFBRWIsU0FBUztRQUN4SFcsS0FBS0E7UUFDTEcsbUJBQW1CO0lBQ3JCLEdBQUdKO0FBRUhqQyxrQkFBZSxHQUFHK0IsVUFDbEIsb0RBQW9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZml0X3BsdXNfcGx1cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy9jb21wb25lbnRzL0dlc3R1cmVIYW5kbGVyQnV0dG9uLndlYi5qcz84MzA1Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0TmF0aXZlID0gcmVxdWlyZShcInJlYWN0LW5hdGl2ZVwiKTtcblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5cbnZhciBfZGVmYXVsdCA9IC8qI19fUFVSRV9fKi9SZWFjdC5mb3J3YXJkUmVmKChwcm9wcywgcmVmKSA9PiAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChfcmVhY3ROYXRpdmUuVmlldywgX2V4dGVuZHMoe1xuICByZWY6IHJlZixcbiAgYWNjZXNzaWJpbGl0eVJvbGU6IFwiYnV0dG9uXCJcbn0sIHByb3BzKSkpO1xuXG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUdlc3R1cmVIYW5kbGVyQnV0dG9uLndlYi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcmVhY3ROYXRpdmUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJXZWFrTWFwIiwiY2FjaGUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImFwcGx5IiwiX2RlZmF1bHQiLCJmb3J3YXJkUmVmIiwicHJvcHMiLCJyZWYiLCJjcmVhdGVFbGVtZW50IiwiVmlldyIsImFjY2Vzc2liaWxpdHlSb2xlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureHandlerButton.web.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/Swipeable.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/Swipeable.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _PanGestureHandler = __webpack_require__(/*! ../handlers/PanGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PanGestureHandler.js\");\nvar _TapGestureHandler = __webpack_require__(/*! ../handlers/TapGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/TapGestureHandler.js\");\nvar _State = __webpack_require__(/*! ../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst DRAG_TOSS = 0.05;\nclass Swipeable extends React.Component {\n    constructor(_props){\n        super(_props);\n        _defineProperty(this, \"onGestureEvent\", void 0);\n        _defineProperty(this, \"transX\", void 0);\n        _defineProperty(this, \"showLeftAction\", void 0);\n        _defineProperty(this, \"leftActionTranslate\", void 0);\n        _defineProperty(this, \"showRightAction\", void 0);\n        _defineProperty(this, \"rightActionTranslate\", void 0);\n        _defineProperty(this, \"updateAnimatedEvent\", (props, state)=>{\n            const { friction, overshootFriction } = props;\n            const { dragX, rowTranslation, leftWidth = 0, rowWidth = 0 } = state;\n            const { rightOffset = rowWidth } = state;\n            const rightWidth = Math.max(0, rowWidth - rightOffset);\n            const { overshootLeft = leftWidth > 0, overshootRight = rightWidth > 0 } = props;\n            const transX = _reactNative.Animated.add(rowTranslation, dragX.interpolate({\n                inputRange: [\n                    0,\n                    friction\n                ],\n                outputRange: [\n                    0,\n                    1\n                ]\n            })).interpolate({\n                inputRange: [\n                    -rightWidth - 1,\n                    -rightWidth,\n                    leftWidth,\n                    leftWidth + 1\n                ],\n                outputRange: [\n                    -rightWidth - (overshootRight ? 1 / overshootFriction : 0),\n                    -rightWidth,\n                    leftWidth,\n                    leftWidth + (overshootLeft ? 1 / overshootFriction : 0)\n                ]\n            });\n            this.transX = transX;\n            this.showLeftAction = leftWidth > 0 ? transX.interpolate({\n                inputRange: [\n                    -1,\n                    0,\n                    leftWidth\n                ],\n                outputRange: [\n                    0,\n                    0,\n                    1\n                ]\n            }) : new _reactNative.Animated.Value(0);\n            this.leftActionTranslate = this.showLeftAction.interpolate({\n                inputRange: [\n                    0,\n                    Number.MIN_VALUE\n                ],\n                outputRange: [\n                    -10000,\n                    0\n                ],\n                extrapolate: \"clamp\"\n            });\n            this.showRightAction = rightWidth > 0 ? transX.interpolate({\n                inputRange: [\n                    -rightWidth,\n                    0,\n                    1\n                ],\n                outputRange: [\n                    1,\n                    0,\n                    0\n                ]\n            }) : new _reactNative.Animated.Value(0);\n            this.rightActionTranslate = this.showRightAction.interpolate({\n                inputRange: [\n                    0,\n                    Number.MIN_VALUE\n                ],\n                outputRange: [\n                    -10000,\n                    0\n                ],\n                extrapolate: \"clamp\"\n            });\n        });\n        _defineProperty(this, \"onTapHandlerStateChange\", ({ nativeEvent })=>{\n            if (nativeEvent.oldState === _State.State.ACTIVE) {\n                this.close();\n            }\n        });\n        _defineProperty(this, \"onHandlerStateChange\", (ev)=>{\n            if (ev.nativeEvent.oldState === _State.State.ACTIVE) {\n                this.handleRelease(ev);\n            }\n        });\n        _defineProperty(this, \"handleRelease\", (ev)=>{\n            const { velocityX, translationX: dragX } = ev.nativeEvent;\n            const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n            const { rightOffset = rowWidth } = this.state;\n            const rightWidth = rowWidth - rightOffset;\n            const { friction, leftThreshold = leftWidth / 2, rightThreshold = rightWidth / 2 } = this.props;\n            const startOffsetX = this.currentOffset() + dragX / friction;\n            const translationX = (dragX + DRAG_TOSS * velocityX) / friction;\n            let toValue = 0;\n            if (rowState === 0) {\n                if (translationX > leftThreshold) {\n                    toValue = leftWidth;\n                } else if (translationX < -rightThreshold) {\n                    toValue = -rightWidth;\n                }\n            } else if (rowState === 1) {\n                // swiped to left\n                if (translationX > -leftThreshold) {\n                    toValue = leftWidth;\n                }\n            } else {\n                // swiped to right\n                if (translationX < rightThreshold) {\n                    toValue = -rightWidth;\n                }\n            }\n            this.animateRow(startOffsetX, toValue, velocityX / friction);\n        });\n        _defineProperty(this, \"animateRow\", (fromValue, toValue, velocityX)=>{\n            const { dragX, rowTranslation } = this.state;\n            dragX.setValue(0);\n            rowTranslation.setValue(fromValue);\n            this.setState({\n                rowState: Math.sign(toValue)\n            });\n            _reactNative.Animated.spring(rowTranslation, {\n                restSpeedThreshold: 1.7,\n                restDisplacementThreshold: 0.4,\n                velocity: velocityX,\n                bounciness: 0,\n                toValue,\n                useNativeDriver: this.props.useNativeAnimations,\n                ...this.props.animationOptions\n            }).start(({ finished })=>{\n                if (finished) {\n                    if (toValue > 0) {\n                        var _this$props$onSwipeab, _this$props, _this$props$onSwipeab2, _this$props2;\n                        (_this$props$onSwipeab = (_this$props = this.props).onSwipeableLeftOpen) === null || _this$props$onSwipeab === void 0 ? void 0 : _this$props$onSwipeab.call(_this$props);\n                        (_this$props$onSwipeab2 = (_this$props2 = this.props).onSwipeableOpen) === null || _this$props$onSwipeab2 === void 0 ? void 0 : _this$props$onSwipeab2.call(_this$props2, \"left\", this);\n                    } else if (toValue < 0) {\n                        var _this$props$onSwipeab3, _this$props3, _this$props$onSwipeab4, _this$props4;\n                        (_this$props$onSwipeab3 = (_this$props3 = this.props).onSwipeableRightOpen) === null || _this$props$onSwipeab3 === void 0 ? void 0 : _this$props$onSwipeab3.call(_this$props3);\n                        (_this$props$onSwipeab4 = (_this$props4 = this.props).onSwipeableOpen) === null || _this$props$onSwipeab4 === void 0 ? void 0 : _this$props$onSwipeab4.call(_this$props4, \"right\", this);\n                    } else {\n                        var _this$props$onSwipeab5, _this$props5;\n                        const closingDirection = fromValue > 0 ? \"left\" : \"right\";\n                        (_this$props$onSwipeab5 = (_this$props5 = this.props).onSwipeableClose) === null || _this$props$onSwipeab5 === void 0 ? void 0 : _this$props$onSwipeab5.call(_this$props5, closingDirection, this);\n                    }\n                }\n            });\n            if (toValue > 0) {\n                var _this$props$onSwipeab6, _this$props6, _this$props$onSwipeab7, _this$props7;\n                (_this$props$onSwipeab6 = (_this$props6 = this.props).onSwipeableLeftWillOpen) === null || _this$props$onSwipeab6 === void 0 ? void 0 : _this$props$onSwipeab6.call(_this$props6);\n                (_this$props$onSwipeab7 = (_this$props7 = this.props).onSwipeableWillOpen) === null || _this$props$onSwipeab7 === void 0 ? void 0 : _this$props$onSwipeab7.call(_this$props7, \"left\");\n            } else if (toValue < 0) {\n                var _this$props$onSwipeab8, _this$props8, _this$props$onSwipeab9, _this$props9;\n                (_this$props$onSwipeab8 = (_this$props8 = this.props).onSwipeableRightWillOpen) === null || _this$props$onSwipeab8 === void 0 ? void 0 : _this$props$onSwipeab8.call(_this$props8);\n                (_this$props$onSwipeab9 = (_this$props9 = this.props).onSwipeableWillOpen) === null || _this$props$onSwipeab9 === void 0 ? void 0 : _this$props$onSwipeab9.call(_this$props9, \"right\");\n            } else {\n                var _this$props$onSwipeab10, _this$props10;\n                const closingDirection = fromValue > 0 ? \"left\" : \"right\";\n                (_this$props$onSwipeab10 = (_this$props10 = this.props).onSwipeableWillClose) === null || _this$props$onSwipeab10 === void 0 ? void 0 : _this$props$onSwipeab10.call(_this$props10, closingDirection);\n            }\n        });\n        _defineProperty(this, \"onRowLayout\", ({ nativeEvent })=>{\n            this.setState({\n                rowWidth: nativeEvent.layout.width\n            });\n        });\n        _defineProperty(this, \"currentOffset\", ()=>{\n            const { leftWidth = 0, rowWidth = 0, rowState } = this.state;\n            const { rightOffset = rowWidth } = this.state;\n            const rightWidth = rowWidth - rightOffset;\n            if (rowState === 1) {\n                return leftWidth;\n            } else if (rowState === -1) {\n                return -rightWidth;\n            }\n            return 0;\n        });\n        _defineProperty(this, \"close\", ()=>{\n            this.animateRow(this.currentOffset(), 0);\n        });\n        _defineProperty(this, \"openLeft\", ()=>{\n            const { leftWidth = 0 } = this.state;\n            this.animateRow(this.currentOffset(), leftWidth);\n        });\n        _defineProperty(this, \"openRight\", ()=>{\n            const { rowWidth = 0 } = this.state;\n            const { rightOffset = rowWidth } = this.state;\n            const rightWidth = rowWidth - rightOffset;\n            this.animateRow(this.currentOffset(), -rightWidth);\n        });\n        const _dragX = new _reactNative.Animated.Value(0);\n        this.state = {\n            dragX: _dragX,\n            rowTranslation: new _reactNative.Animated.Value(0),\n            rowState: 0,\n            leftWidth: undefined,\n            rightOffset: undefined,\n            rowWidth: undefined\n        };\n        this.updateAnimatedEvent(_props, this.state);\n        this.onGestureEvent = _reactNative.Animated.event([\n            {\n                nativeEvent: {\n                    translationX: _dragX\n                }\n            }\n        ], {\n            useNativeDriver: _props.useNativeAnimations\n        });\n    }\n    shouldComponentUpdate(props, state) {\n        if (this.props.friction !== props.friction || this.props.overshootLeft !== props.overshootLeft || this.props.overshootRight !== props.overshootRight || this.props.overshootFriction !== props.overshootFriction || this.state.leftWidth !== state.leftWidth || this.state.rightOffset !== state.rightOffset || this.state.rowWidth !== state.rowWidth) {\n            this.updateAnimatedEvent(props, state);\n        }\n        return true;\n    }\n    render() {\n        const { rowState } = this.state;\n        const { children, renderLeftActions, renderRightActions } = this.props;\n        const left = renderLeftActions && /*#__PURE__*/ React.createElement(_reactNative.Animated.View, {\n            style: [\n                styles.leftActions,\n                // asigned in constructor in `updateAnimatedEvent` but TS cannot spot\n                // it for some reason\n                {\n                    transform: [\n                        {\n                            translateX: this.leftActionTranslate\n                        }\n                    ]\n                }\n            ]\n        }, renderLeftActions(this.showLeftAction, this.transX), /*#__PURE__*/ React.createElement(_reactNative.View, {\n            onLayout: ({ nativeEvent })=>this.setState({\n                    leftWidth: nativeEvent.layout.x\n                })\n        }));\n        const right = renderRightActions && /*#__PURE__*/ React.createElement(_reactNative.Animated.View, {\n            style: [\n                styles.rightActions,\n                {\n                    transform: [\n                        {\n                            translateX: this.rightActionTranslate\n                        }\n                    ]\n                }\n            ]\n        }, renderRightActions(this.showRightAction, this.transX, this), /*#__PURE__*/ React.createElement(_reactNative.View, {\n            onLayout: ({ nativeEvent })=>this.setState({\n                    rightOffset: nativeEvent.layout.x\n                })\n        }));\n        return /*#__PURE__*/ React.createElement(_PanGestureHandler.PanGestureHandler, _extends({\n            activeOffsetX: [\n                -10,\n                10\n            ]\n        }, this.props, {\n            onGestureEvent: this.onGestureEvent,\n            onHandlerStateChange: this.onHandlerStateChange\n        }), /*#__PURE__*/ React.createElement(_reactNative.Animated.View, {\n            onLayout: this.onRowLayout,\n            style: [\n                styles.container,\n                this.props.containerStyle\n            ]\n        }, left, right, /*#__PURE__*/ React.createElement(_TapGestureHandler.TapGestureHandler, {\n            enabled: rowState !== 0,\n            onHandlerStateChange: this.onTapHandlerStateChange\n        }, /*#__PURE__*/ React.createElement(_reactNative.Animated.View, {\n            pointerEvents: rowState === 0 ? \"auto\" : \"box-only\",\n            style: [\n                {\n                    transform: [\n                        {\n                            translateX: this.transX\n                        }\n                    ]\n                },\n                this.props.childrenContainerStyle\n            ]\n        }, children))));\n    }\n}\nexports[\"default\"] = Swipeable;\n_defineProperty(Swipeable, \"defaultProps\", {\n    friction: 1,\n    overshootFriction: 1,\n    useNativeAnimations: true\n});\nconst styles = _reactNative.StyleSheet.create({\n    container: {\n        overflow: \"hidden\"\n    },\n    leftActions: {\n        ..._reactNative.StyleSheet.absoluteFillObject,\n        flexDirection: _reactNative.I18nManager.isRTL ? \"row-reverse\" : \"row\"\n    },\n    rightActions: {\n        ..._reactNative.StyleSheet.absoluteFillObject,\n        flexDirection: _reactNative.I18nManager.isRTL ? \"row\" : \"row-reverse\"\n    }\n}); //# sourceMappingURL=Swipeable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/Swipeable.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/GenericTouchable.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/GenericTouchable.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = exports.TOUCHABLE_STATE = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _GestureButtons = __webpack_require__(/*! ../GestureButtons */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureButtons.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/**\n * Each touchable is a states' machine which preforms transitions.\n * On very beginning (and on the very end or recognition) touchable is\n * UNDETERMINED. Then it moves to BEGAN. If touchable recognizes that finger\n * travel outside it transits to special MOVED_OUTSIDE state. Gesture recognition\n * finishes in UNDETERMINED state.\n */ const TOUCHABLE_STATE = {\n    UNDETERMINED: 0,\n    BEGAN: 1,\n    MOVED_OUTSIDE: 2\n};\nexports.TOUCHABLE_STATE = TOUCHABLE_STATE;\n/**\n * GenericTouchable is not intented to be used as it is.\n * Should be treated as a source for the rest of touchables\n */ class GenericTouchable extends React.Component {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"pressInTimeout\", void 0);\n        _defineProperty(this, \"pressOutTimeout\", void 0);\n        _defineProperty(this, \"longPressTimeout\", void 0);\n        _defineProperty(this, \"longPressDetected\", false);\n        _defineProperty(this, \"pointerInside\", true);\n        _defineProperty(this, \"STATE\", TOUCHABLE_STATE.UNDETERMINED);\n        _defineProperty(this, \"onGestureEvent\", ({ nativeEvent: { pointerInside } })=>{\n            if (this.pointerInside !== pointerInside) {\n                if (pointerInside) {\n                    this.onMoveIn();\n                } else {\n                    this.onMoveOut();\n                }\n            }\n            this.pointerInside = pointerInside;\n        });\n        _defineProperty(this, \"onHandlerStateChange\", ({ nativeEvent })=>{\n            const { state } = nativeEvent;\n            if (state === _State.State.CANCELLED || state === _State.State.FAILED) {\n                // Need to handle case with external cancellation (e.g. by ScrollView)\n                this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n            } else if (// And Android \"Active\" state is achieving on first move of a finger, not on press in.\n            // On iOS event on \"Began\" is not delivered.\n            state === (_reactNative.Platform.OS !== \"android\" ? _State.State.ACTIVE : _State.State.BEGAN) && this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n                // Moving inside requires\n                this.handlePressIn();\n            } else if (state === _State.State.END) {\n                const shouldCallOnPress = !this.longPressDetected && this.STATE !== TOUCHABLE_STATE.MOVED_OUTSIDE && this.pressOutTimeout === null;\n                this.handleGoToUndetermined();\n                if (shouldCallOnPress) {\n                    var _this$props$onPress, _this$props;\n                    // Calls only inside component whether no long press was called previously\n                    (_this$props$onPress = (_this$props = this.props).onPress) === null || _this$props$onPress === void 0 ? void 0 : _this$props$onPress.call(_this$props);\n                }\n            }\n        });\n        _defineProperty(this, \"onLongPressDetected\", ()=>{\n            var _this$props$onLongPre, _this$props2;\n            this.longPressDetected = true; // checked for in the caller of `onLongPressDetected`, but better to check twice\n            (_this$props$onLongPre = (_this$props2 = this.props).onLongPress) === null || _this$props$onLongPre === void 0 ? void 0 : _this$props$onLongPre.call(_this$props2);\n        });\n    }\n    // handlePressIn in called on first touch on traveling inside component.\n    // Handles state transition with delay.\n    handlePressIn() {\n        if (this.props.delayPressIn) {\n            this.pressInTimeout = setTimeout(()=>{\n                this.moveToState(TOUCHABLE_STATE.BEGAN);\n                this.pressInTimeout = null;\n            }, this.props.delayPressIn);\n        } else {\n            this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n        if (this.props.onLongPress) {\n            const time = (this.props.delayPressIn || 0) + (this.props.delayLongPress || 0);\n            this.longPressTimeout = setTimeout(this.onLongPressDetected, time);\n        }\n    }\n    // Handles state transition with delay.\n    handleMoveOutside() {\n        if (this.props.delayPressOut) {\n            this.pressOutTimeout = this.pressOutTimeout || setTimeout(()=>{\n                this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n                this.pressOutTimeout = null;\n            }, this.props.delayPressOut);\n        } else {\n            this.moveToState(TOUCHABLE_STATE.MOVED_OUTSIDE);\n        }\n    }\n    handleGoToUndetermined() {\n        clearTimeout(this.pressOutTimeout); // TODO: maybe it can be undefined\n        if (this.props.delayPressOut) {\n            this.pressOutTimeout = setTimeout(()=>{\n                if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n                    this.moveToState(TOUCHABLE_STATE.BEGAN);\n                }\n                this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n                this.pressOutTimeout = null;\n            }, this.props.delayPressOut);\n        } else {\n            if (this.STATE === TOUCHABLE_STATE.UNDETERMINED) {\n                this.moveToState(TOUCHABLE_STATE.BEGAN);\n            }\n            this.moveToState(TOUCHABLE_STATE.UNDETERMINED);\n        }\n    }\n    componentDidMount() {\n        this.reset();\n    }\n    reset() {\n        this.longPressDetected = false;\n        this.pointerInside = true;\n        clearTimeout(this.pressInTimeout);\n        clearTimeout(this.pressOutTimeout);\n        clearTimeout(this.longPressTimeout);\n        this.pressOutTimeout = null;\n        this.longPressTimeout = null;\n        this.pressInTimeout = null;\n    }\n    moveToState(newState) {\n        var _this$props$onStateCh, _this$props6;\n        if (newState === this.STATE) {\n            // Ignore dummy transitions\n            return;\n        }\n        if (newState === TOUCHABLE_STATE.BEGAN) {\n            var _this$props$onPressIn, _this$props3;\n            // First touch and moving inside\n            (_this$props$onPressIn = (_this$props3 = this.props).onPressIn) === null || _this$props$onPressIn === void 0 ? void 0 : _this$props$onPressIn.call(_this$props3);\n        } else if (newState === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n            var _this$props$onPressOu, _this$props4;\n            // Moving outside\n            (_this$props$onPressOu = (_this$props4 = this.props).onPressOut) === null || _this$props$onPressOu === void 0 ? void 0 : _this$props$onPressOu.call(_this$props4);\n        } else if (newState === TOUCHABLE_STATE.UNDETERMINED) {\n            // Need to reset each time on transition to UNDETERMINED\n            this.reset();\n            if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n                var _this$props$onPressOu2, _this$props5;\n                // ... and if it happens inside button.\n                (_this$props$onPressOu2 = (_this$props5 = this.props).onPressOut) === null || _this$props$onPressOu2 === void 0 ? void 0 : _this$props$onPressOu2.call(_this$props5);\n            }\n        } // Finally call lister (used by subclasses)\n        (_this$props$onStateCh = (_this$props6 = this.props).onStateChange) === null || _this$props$onStateCh === void 0 ? void 0 : _this$props$onStateCh.call(_this$props6, this.STATE, newState); // ... and make transition.\n        this.STATE = newState;\n    }\n    componentWillUnmount() {\n        // to prevent memory leaks\n        this.reset();\n    }\n    onMoveIn() {\n        if (this.STATE === TOUCHABLE_STATE.MOVED_OUTSIDE) {\n            // This call is not throttled with delays (like in RN's implementation).\n            this.moveToState(TOUCHABLE_STATE.BEGAN);\n        }\n    }\n    onMoveOut() {\n        // long press should no longer be detected\n        clearTimeout(this.longPressTimeout);\n        this.longPressTimeout = null;\n        if (this.STATE === TOUCHABLE_STATE.BEGAN) {\n            this.handleMoveOutside();\n        }\n    }\n    render() {\n        var _this$props$touchSoun;\n        const coreProps = {\n            accessible: this.props.accessible !== false,\n            accessibilityLabel: this.props.accessibilityLabel,\n            accessibilityHint: this.props.accessibilityHint,\n            accessibilityRole: this.props.accessibilityRole,\n            // TODO: check if changed to no 's' correctly, also removed 2 props that are no longer available: `accessibilityComponentType` and `accessibilityTraits`,\n            // would be good to check if it is ok for sure, see: https://github.com/facebook/react-native/issues/24016\n            accessibilityState: this.props.accessibilityState,\n            accessibilityActions: this.props.accessibilityActions,\n            onAccessibilityAction: this.props.onAccessibilityAction,\n            nativeID: this.props.nativeID,\n            onLayout: this.props.onLayout,\n            hitSlop: this.props.hitSlop\n        };\n        return /*#__PURE__*/ React.createElement(_GestureButtons.BaseButton, _extends({\n            style: this.props.containerStyle,\n            onHandlerStateChange: this.props.disabled ? undefined : this.onHandlerStateChange,\n            onGestureEvent: this.onGestureEvent,\n            hitSlop: this.props.hitSlop,\n            shouldActivateOnStart: this.props.shouldActivateOnStart,\n            disallowInterruption: this.props.disallowInterruption,\n            testID: this.props.testID,\n            touchSoundDisabled: (_this$props$touchSoun = this.props.touchSoundDisabled) !== null && _this$props$touchSoun !== void 0 ? _this$props$touchSoun : false,\n            enabled: !this.props.disabled\n        }, this.props.extraButtonProps), /*#__PURE__*/ React.createElement(_reactNative.Animated.View, _extends({}, coreProps, {\n            style: this.props.style\n        }), this.props.children));\n    }\n}\nexports[\"default\"] = GenericTouchable;\n_defineProperty(GenericTouchable, \"defaultProps\", {\n    delayLongPress: 600,\n    extraButtonProps: {\n        rippleColor: \"transparent\",\n        exclusive: true\n    }\n}); //# sourceMappingURL=GenericTouchable.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/GenericTouchable.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableHighlight.js":
/*!************************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableHighlight.js ***!
  \************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _GenericTouchable = _interopRequireWildcard(__webpack_require__(/*! ./GenericTouchable */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/GenericTouchable.js\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/**\n * TouchableHighlight follows RN's implementation\n */ class TouchableHighlight extends React.Component {\n    constructor(props){\n        super(props);\n        _defineProperty(this, \"showUnderlay\", ()=>{\n            var _this$props$onShowUnd, _this$props;\n            if (!this.hasPressHandler()) {\n                return;\n            }\n            this.setState({\n                extraChildStyle: {\n                    opacity: this.props.activeOpacity\n                },\n                extraUnderlayStyle: {\n                    backgroundColor: this.props.underlayColor\n                }\n            });\n            (_this$props$onShowUnd = (_this$props = this.props).onShowUnderlay) === null || _this$props$onShowUnd === void 0 ? void 0 : _this$props$onShowUnd.call(_this$props);\n        });\n        _defineProperty(this, \"hasPressHandler\", ()=>this.props.onPress || this.props.onPressIn || this.props.onPressOut || this.props.onLongPress);\n        _defineProperty(this, \"hideUnderlay\", ()=>{\n            var _this$props$onHideUnd, _this$props2;\n            this.setState({\n                extraChildStyle: null,\n                extraUnderlayStyle: null\n            });\n            (_this$props$onHideUnd = (_this$props2 = this.props).onHideUnderlay) === null || _this$props$onHideUnd === void 0 ? void 0 : _this$props$onHideUnd.call(_this$props2);\n        });\n        _defineProperty(this, \"onStateChange\", (_from, to)=>{\n            if (to === _GenericTouchable.TOUCHABLE_STATE.BEGAN) {\n                this.showUnderlay();\n            } else if (to === _GenericTouchable.TOUCHABLE_STATE.UNDETERMINED || to === _GenericTouchable.TOUCHABLE_STATE.MOVED_OUTSIDE) {\n                this.hideUnderlay();\n            }\n        });\n        this.state = {\n            extraChildStyle: null,\n            extraUnderlayStyle: null\n        };\n    }\n    renderChildren() {\n        if (!this.props.children) {\n            return /*#__PURE__*/ React.createElement(_reactNative.View, null);\n        }\n        const child = React.Children.only(this.props.children); // TODO: not sure if OK but fixes error\n        return /*#__PURE__*/ React.cloneElement(child, {\n            style: _reactNative.StyleSheet.compose(child.props.style, this.state.extraChildStyle)\n        });\n    }\n    render() {\n        const { style = {}, ...rest } = this.props;\n        const { extraUnderlayStyle } = this.state;\n        return /*#__PURE__*/ React.createElement(_GenericTouchable.default, _extends({}, rest, {\n            style: [\n                style,\n                extraUnderlayStyle\n            ],\n            onStateChange: this.onStateChange\n        }), this.renderChildren());\n    }\n}\nexports[\"default\"] = TouchableHighlight;\n_defineProperty(TouchableHighlight, \"defaultProps\", {\n    ..._GenericTouchable.default.defaultProps,\n    activeOpacity: 0.85,\n    delayPressOut: 100,\n    underlayColor: \"black\"\n}); //# sourceMappingURL=TouchableHighlight.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableHighlight.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableNativeFeedback.js":
/*!*****************************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableNativeFeedback.js ***!
  \*****************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _default = _reactNative.TouchableNativeFeedback;\nexports[\"default\"] = _default; //# sourceMappingURL=TouchableNativeFeedback.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvY29tcG9uZW50cy90b3VjaGFibGVzL1RvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFFdkIsSUFBSUcsZUFBZUMsbUJBQU9BLENBQUMsdUVBQWM7QUFFekMsSUFBSUMsV0FBV0YsYUFBYUcsdUJBQXVCO0FBQ25ETixrQkFBZSxHQUFHSyxVQUNsQixtREFBbUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2NvbXBvbmVudHMvdG91Y2hhYmxlcy9Ub3VjaGFibGVOYXRpdmVGZWVkYmFjay5qcz9jMDBmIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX3JlYWN0TmF0aXZlID0gcmVxdWlyZShcInJlYWN0LW5hdGl2ZVwiKTtcblxudmFyIF9kZWZhdWx0ID0gX3JlYWN0TmF0aXZlLlRvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Ub3VjaGFibGVOYXRpdmVGZWVkYmFjay5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX3JlYWN0TmF0aXZlIiwicmVxdWlyZSIsIl9kZWZhdWx0IiwiVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2siXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableNativeFeedback.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableOpacity.js":
/*!**********************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableOpacity.js ***!
  \**********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _GenericTouchable = _interopRequireWildcard(__webpack_require__(/*! ./GenericTouchable */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/GenericTouchable.js\"));\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/**\n * TouchableOpacity bases on timing animation which has been used in RN's core\n */ class TouchableOpacity extends React.Component {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"getChildStyleOpacityWithDefault\", ()=>{\n            const childStyle = _reactNative.StyleSheet.flatten(this.props.style) || {};\n            return childStyle.opacity == null ? 1 : childStyle.opacity;\n        });\n        _defineProperty(this, \"opacity\", new _reactNative.Animated.Value(this.getChildStyleOpacityWithDefault()));\n        _defineProperty(this, \"setOpacityTo\", (value, duration)=>{\n            var _this$props$useNative;\n            _reactNative.Animated.timing(this.opacity, {\n                toValue: value,\n                duration: duration,\n                easing: _reactNative.Easing.inOut(_reactNative.Easing.quad),\n                useNativeDriver: (_this$props$useNative = this.props.useNativeAnimations) !== null && _this$props$useNative !== void 0 ? _this$props$useNative : true\n            }).start();\n        });\n        _defineProperty(this, \"onStateChange\", (_from, to)=>{\n            if (to === _GenericTouchable.TOUCHABLE_STATE.BEGAN) {\n                this.setOpacityTo(this.props.activeOpacity, 0);\n            } else if (to === _GenericTouchable.TOUCHABLE_STATE.UNDETERMINED || to === _GenericTouchable.TOUCHABLE_STATE.MOVED_OUTSIDE) {\n                this.setOpacityTo(this.getChildStyleOpacityWithDefault(), 150);\n            }\n        });\n    }\n    render() {\n        const { style = {}, ...rest } = this.props;\n        return /*#__PURE__*/ React.createElement(_GenericTouchable.default, _extends({}, rest, {\n            style: [\n                style,\n                {\n                    opacity: this.opacity // TODO: fix this\n                }\n            ],\n            onStateChange: this.onStateChange\n        }), this.props.children ? this.props.children : /*#__PURE__*/ React.createElement(_reactNative.View, null));\n    }\n}\nexports[\"default\"] = TouchableOpacity;\n_defineProperty(TouchableOpacity, \"defaultProps\", {\n    ..._GenericTouchable.default.defaultProps,\n    activeOpacity: 0.2\n}); //# sourceMappingURL=TouchableOpacity.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableOpacity.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableWithoutFeedback.js":
/*!******************************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableWithoutFeedback.js ***!
  \******************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _GenericTouchable = _interopRequireDefault(__webpack_require__(/*! ./GenericTouchable */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/GenericTouchable.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\nconst TouchableWithoutFeedback = /*#__PURE__*/ React.forwardRef((props, ref)=>/*#__PURE__*/ React.createElement(_GenericTouchable.default, _extends({\n        ref: ref\n    }, props)));\nTouchableWithoutFeedback.defaultProps = _GenericTouchable.default.defaultProps;\nvar _default = TouchableWithoutFeedback;\nexports[\"default\"] = _default; //# sourceMappingURL=TouchableWithoutFeedback.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvY29tcG9uZW50cy90b3VjaGFibGVzL1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFjay5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWUsR0FBRyxLQUFLO0FBRXZCLElBQUlHLFFBQVFDLHdCQUF3QkMsbUJBQU9BLENBQUMsb0JBQU87QUFFbkQsSUFBSUMsb0JBQW9CQyx1QkFBdUJGLG1CQUFPQSxDQUFDLDhIQUFvQjtBQUUzRSxTQUFTRSx1QkFBdUJDLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRU4sU0FBU007SUFBSTtBQUFHO0FBRTlGLFNBQVNFO0lBQTZCLElBQUksT0FBT0MsWUFBWSxZQUFZLE9BQU87SUFBTSxJQUFJQyxRQUFRLElBQUlEO0lBQVdELDJCQUEyQjtRQUFjLE9BQU9FO0lBQU87SUFBRyxPQUFPQTtBQUFPO0FBRXpMLFNBQVNSLHdCQUF3QkksR0FBRztJQUFJLElBQUlBLE9BQU9BLElBQUlDLFVBQVUsRUFBRTtRQUFFLE9BQU9EO0lBQUs7SUFBRSxJQUFJQSxRQUFRLFFBQVEsT0FBT0EsUUFBUSxZQUFZLE9BQU9BLFFBQVEsWUFBWTtRQUFFLE9BQU87WUFBRU4sU0FBU007UUFBSTtJQUFHO0lBQUUsSUFBSUksUUFBUUY7SUFBNEIsSUFBSUUsU0FBU0EsTUFBTUMsR0FBRyxDQUFDTCxNQUFNO1FBQUUsT0FBT0ksTUFBTUUsR0FBRyxDQUFDTjtJQUFNO0lBQUUsSUFBSU8sU0FBUyxDQUFDO0lBQUcsSUFBSUMsd0JBQXdCbEIsT0FBT0MsY0FBYyxJQUFJRCxPQUFPbUIsd0JBQXdCO0lBQUUsSUFBSyxJQUFJQyxPQUFPVixJQUFLO1FBQUUsSUFBSVYsT0FBT3FCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNiLEtBQUtVLE1BQU07WUFBRSxJQUFJSSxPQUFPTix3QkFBd0JsQixPQUFPbUIsd0JBQXdCLENBQUNULEtBQUtVLE9BQU87WUFBTSxJQUFJSSxRQUFTQSxDQUFBQSxLQUFLUixHQUFHLElBQUlRLEtBQUtDLEdBQUcsR0FBRztnQkFBRXpCLE9BQU9DLGNBQWMsQ0FBQ2dCLFFBQVFHLEtBQUtJO1lBQU8sT0FBTztnQkFBRVAsTUFBTSxDQUFDRyxJQUFJLEdBQUdWLEdBQUcsQ0FBQ1UsSUFBSTtZQUFFO1FBQUU7SUFBRTtJQUFFSCxPQUFPYixPQUFPLEdBQUdNO0lBQUssSUFBSUksT0FBTztRQUFFQSxNQUFNVyxHQUFHLENBQUNmLEtBQUtPO0lBQVM7SUFBRSxPQUFPQTtBQUFRO0FBRXR1QixTQUFTUztJQUFhQSxXQUFXMUIsT0FBTzJCLE1BQU0sSUFBSSxTQUFVQyxNQUFNO1FBQUksSUFBSyxJQUFJQyxJQUFJLEdBQUdBLElBQUlDLFVBQVVDLE1BQU0sRUFBRUYsSUFBSztZQUFFLElBQUlHLFNBQVNGLFNBQVMsQ0FBQ0QsRUFBRTtZQUFFLElBQUssSUFBSVQsT0FBT1ksT0FBUTtnQkFBRSxJQUFJaEMsT0FBT3FCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNTLFFBQVFaLE1BQU07b0JBQUVRLE1BQU0sQ0FBQ1IsSUFBSSxHQUFHWSxNQUFNLENBQUNaLElBQUk7Z0JBQUU7WUFBRTtRQUFFO1FBQUUsT0FBT1E7SUFBUTtJQUFHLE9BQU9GLFNBQVNPLEtBQUssQ0FBQyxJQUFJLEVBQUVIO0FBQVk7QUFFNVQsTUFBTUksMkJBQTJCLFdBQVcsR0FBRTdCLE1BQU04QixVQUFVLENBQUMsQ0FBQ0MsT0FBT0MsTUFBUSxXQUFXLEdBQUVoQyxNQUFNaUMsYUFBYSxDQUFDOUIsa0JBQWtCSixPQUFPLEVBQUVzQixTQUFTO1FBQ2xKVyxLQUFLQTtJQUNQLEdBQUdEO0FBQ0hGLHlCQUF5QkssWUFBWSxHQUFHL0Isa0JBQWtCSixPQUFPLENBQUNtQyxZQUFZO0FBQzlFLElBQUlDLFdBQVdOO0FBQ2ZoQyxrQkFBZSxHQUFHc0MsVUFDbEIsb0RBQW9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZml0X3BsdXNfcGx1cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy9jb21wb25lbnRzL3RvdWNoYWJsZXMvVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrLmpzPzU0NDciXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfR2VuZXJpY1RvdWNoYWJsZSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vR2VuZXJpY1RvdWNoYWJsZVwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmZ1bmN0aW9uIF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGUgPSBuZXcgV2Vha01hcCgpOyBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjYWNoZTsgfTsgcmV0dXJuIGNhY2hlOyB9XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKG9iaikgeyBpZiAob2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KSkgeyB2YXIgZGVzYyA9IGhhc1Byb3BlcnR5RGVzY3JpcHRvciA/IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqLCBrZXkpIDogbnVsbDsgaWYgKGRlc2MgJiYgKGRlc2MuZ2V0IHx8IGRlc2Muc2V0KSkgeyBPYmplY3QuZGVmaW5lUHJvcGVydHkobmV3T2JqLCBrZXksIGRlc2MpOyB9IGVsc2UgeyBuZXdPYmpba2V5XSA9IG9ialtrZXldOyB9IH0gfSBuZXdPYmouZGVmYXVsdCA9IG9iajsgaWYgKGNhY2hlKSB7IGNhY2hlLnNldChvYmosIG5ld09iaik7IH0gcmV0dXJuIG5ld09iajsgfVxuXG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuXG5jb25zdCBUb3VjaGFibGVXaXRob3V0RmVlZGJhY2sgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX0dlbmVyaWNUb3VjaGFibGUuZGVmYXVsdCwgX2V4dGVuZHMoe1xuICByZWY6IHJlZlxufSwgcHJvcHMpKSk7XG5Ub3VjaGFibGVXaXRob3V0RmVlZGJhY2suZGVmYXVsdFByb3BzID0gX0dlbmVyaWNUb3VjaGFibGUuZGVmYXVsdC5kZWZhdWx0UHJvcHM7XG52YXIgX2RlZmF1bHQgPSBUb3VjaGFibGVXaXRob3V0RmVlZGJhY2s7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVRvdWNoYWJsZVdpdGhvdXRGZWVkYmFjay5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfR2VuZXJpY1RvdWNoYWJsZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9leHRlbmRzIiwiYXNzaWduIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImFwcGx5IiwiVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrIiwiZm9yd2FyZFJlZiIsInByb3BzIiwicmVmIiwiY3JlYXRlRWxlbWVudCIsImRlZmF1bHRQcm9wcyIsIl9kZWZhdWx0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableWithoutFeedback.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/index.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/index.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"TouchableNativeFeedback\", ({\n    enumerable: true,\n    get: function() {\n        return _TouchableNativeFeedback.default;\n    }\n}));\nObject.defineProperty(exports, \"TouchableWithoutFeedback\", ({\n    enumerable: true,\n    get: function() {\n        return _TouchableWithoutFeedback.default;\n    }\n}));\nObject.defineProperty(exports, \"TouchableOpacity\", ({\n    enumerable: true,\n    get: function() {\n        return _TouchableOpacity.default;\n    }\n}));\nObject.defineProperty(exports, \"TouchableHighlight\", ({\n    enumerable: true,\n    get: function() {\n        return _TouchableHighlight.default;\n    }\n}));\nvar _TouchableNativeFeedback = _interopRequireDefault(__webpack_require__(/*! ./TouchableNativeFeedback */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableNativeFeedback.js\"));\nvar _TouchableWithoutFeedback = _interopRequireDefault(__webpack_require__(/*! ./TouchableWithoutFeedback */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableWithoutFeedback.js\"));\nvar _TouchableOpacity = _interopRequireDefault(__webpack_require__(/*! ./TouchableOpacity */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableOpacity.js\"));\nvar _TouchableHighlight = _interopRequireDefault(__webpack_require__(/*! ./TouchableHighlight */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/TouchableHighlight.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n} //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvY29tcG9uZW50cy90b3VjaGFibGVzL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGSCwyREFBMEQ7SUFDeERJLFlBQVk7SUFDWkMsS0FBSztRQUNILE9BQU9DLHlCQUF5QkMsT0FBTztJQUN6QztBQUNGLENBQUMsRUFBQztBQUNGUCw0REFBMkQ7SUFDekRJLFlBQVk7SUFDWkMsS0FBSztRQUNILE9BQU9HLDBCQUEwQkQsT0FBTztJQUMxQztBQUNGLENBQUMsRUFBQztBQUNGUCxvREFBbUQ7SUFDakRJLFlBQVk7SUFDWkMsS0FBSztRQUNILE9BQU9JLGtCQUFrQkYsT0FBTztJQUNsQztBQUNGLENBQUMsRUFBQztBQUNGUCxzREFBcUQ7SUFDbkRJLFlBQVk7SUFDWkMsS0FBSztRQUNILE9BQU9LLG9CQUFvQkgsT0FBTztJQUNwQztBQUNGLENBQUMsRUFBQztBQUVGLElBQUlELDJCQUEyQkssdUJBQXVCQyxtQkFBT0EsQ0FBQyw0SUFBMkI7QUFFekYsSUFBSUosNEJBQTRCRyx1QkFBdUJDLG1CQUFPQSxDQUFDLDhJQUE0QjtBQUUzRixJQUFJSCxvQkFBb0JFLHVCQUF1QkMsbUJBQU9BLENBQUMsOEhBQW9CO0FBRTNFLElBQUlGLHNCQUFzQkMsdUJBQXVCQyxtQkFBT0EsQ0FBQyxrSUFBc0I7QUFFL0UsU0FBU0QsdUJBQXVCRSxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSUMsVUFBVSxHQUFHRCxNQUFNO1FBQUVOLFNBQVNNO0lBQUk7QUFBRyxFQUM5RixpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2NvbXBvbmVudHMvdG91Y2hhYmxlcy9pbmRleC5qcz8wYjhjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2tcIiwge1xuICBlbnVtZXJhYmxlOiB0cnVlLFxuICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gX1RvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrLmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrXCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9Ub3VjaGFibGVXaXRob3V0RmVlZGJhY2suZGVmYXVsdDtcbiAgfVxufSk7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJUb3VjaGFibGVPcGFjaXR5XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9Ub3VjaGFibGVPcGFjaXR5LmRlZmF1bHQ7XG4gIH1cbn0pO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiVG91Y2hhYmxlSGlnaGxpZ2h0XCIsIHtcbiAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIF9Ub3VjaGFibGVIaWdobGlnaHQuZGVmYXVsdDtcbiAgfVxufSk7XG5cbnZhciBfVG91Y2hhYmxlTmF0aXZlRmVlZGJhY2sgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RvdWNoYWJsZU5hdGl2ZUZlZWRiYWNrXCIpKTtcblxudmFyIF9Ub3VjaGFibGVXaXRob3V0RmVlZGJhY2sgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1RvdWNoYWJsZVdpdGhvdXRGZWVkYmFja1wiKSk7XG5cbnZhciBfVG91Y2hhYmxlT3BhY2l0eSA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vVG91Y2hhYmxlT3BhY2l0eVwiKSk7XG5cbnZhciBfVG91Y2hhYmxlSGlnaGxpZ2h0ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9Ub3VjaGFibGVIaWdobGlnaHRcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5kZXguanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZW51bWVyYWJsZSIsImdldCIsIl9Ub3VjaGFibGVOYXRpdmVGZWVkYmFjayIsImRlZmF1bHQiLCJfVG91Y2hhYmxlV2l0aG91dEZlZWRiYWNrIiwiX1RvdWNoYWJsZU9wYWNpdHkiLCJfVG91Y2hhYmxlSGlnaGxpZ2h0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJfX2VzTW9kdWxlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/index.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/gestureHandlerRootHOC.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/gestureHandlerRootHOC.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = gestureHandlerRootHOC;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _hoistNonReactStatics = _interopRequireDefault(__webpack_require__(/*! hoist-non-react-statics */ \"hoist-non-react-statics\"));\nvar _GestureHandlerRootView = _interopRequireDefault(__webpack_require__(/*! ./GestureHandlerRootView */ \"./node_modules/react-native-gesture-handler/lib/commonjs/GestureHandlerRootView.web.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction gestureHandlerRootHOC(Component, containerStyles) {\n    function Wrapper(props) {\n        return /*#__PURE__*/ React.createElement(_GestureHandlerRootView.default, {\n            style: [\n                styles.container,\n                containerStyles\n            ]\n        }, /*#__PURE__*/ React.createElement(Component, props));\n    }\n    Wrapper.displayName = `gestureHandlerRootHOC(${Component.displayName || Component.name})`; // @ts-ignore - hoistNonReactStatics uses old version of @types/react\n    (0, _hoistNonReactStatics.default)(Wrapper, Component);\n    return Wrapper;\n}\nconst styles = _reactNative.StyleSheet.create({\n    container: {\n        flex: 1\n    }\n}); //# sourceMappingURL=gestureHandlerRootHOC.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvZ2VzdHVyZUhhbmRsZXJSb290SE9DLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHRztBQUVsQixJQUFJQyxRQUFRQyx3QkFBd0JDLG1CQUFPQSxDQUFDLG9CQUFPO0FBRW5ELElBQUlDLGVBQWVELG1CQUFPQSxDQUFDLHVFQUFjO0FBRXpDLElBQUlFLHdCQUF3QkMsdUJBQXVCSCxtQkFBT0EsQ0FBQyx3REFBeUI7QUFFcEYsSUFBSUksMEJBQTBCRCx1QkFBdUJILG1CQUFPQSxDQUFDLHdIQUEwQjtBQUV2RixTQUFTRyx1QkFBdUJFLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRVQsU0FBU1M7SUFBSTtBQUFHO0FBRTlGLFNBQVNFO0lBQTZCLElBQUksT0FBT0MsWUFBWSxZQUFZLE9BQU87SUFBTSxJQUFJQyxRQUFRLElBQUlEO0lBQVdELDJCQUEyQjtRQUFjLE9BQU9FO0lBQU87SUFBRyxPQUFPQTtBQUFPO0FBRXpMLFNBQVNWLHdCQUF3Qk0sR0FBRztJQUFJLElBQUlBLE9BQU9BLElBQUlDLFVBQVUsRUFBRTtRQUFFLE9BQU9EO0lBQUs7SUFBRSxJQUFJQSxRQUFRLFFBQVEsT0FBT0EsUUFBUSxZQUFZLE9BQU9BLFFBQVEsWUFBWTtRQUFFLE9BQU87WUFBRVQsU0FBU1M7UUFBSTtJQUFHO0lBQUUsSUFBSUksUUFBUUY7SUFBNEIsSUFBSUUsU0FBU0EsTUFBTUMsR0FBRyxDQUFDTCxNQUFNO1FBQUUsT0FBT0ksTUFBTUUsR0FBRyxDQUFDTjtJQUFNO0lBQUUsSUFBSU8sU0FBUyxDQUFDO0lBQUcsSUFBSUMsd0JBQXdCckIsT0FBT0MsY0FBYyxJQUFJRCxPQUFPc0Isd0JBQXdCO0lBQUUsSUFBSyxJQUFJQyxPQUFPVixJQUFLO1FBQUUsSUFBSWIsT0FBT3dCLFNBQVMsQ0FBQ0MsY0FBYyxDQUFDQyxJQUFJLENBQUNiLEtBQUtVLE1BQU07WUFBRSxJQUFJSSxPQUFPTix3QkFBd0JyQixPQUFPc0Isd0JBQXdCLENBQUNULEtBQUtVLE9BQU87WUFBTSxJQUFJSSxRQUFTQSxDQUFBQSxLQUFLUixHQUFHLElBQUlRLEtBQUtDLEdBQUcsR0FBRztnQkFBRTVCLE9BQU9DLGNBQWMsQ0FBQ21CLFFBQVFHLEtBQUtJO1lBQU8sT0FBTztnQkFBRVAsTUFBTSxDQUFDRyxJQUFJLEdBQUdWLEdBQUcsQ0FBQ1UsSUFBSTtZQUFFO1FBQUU7SUFBRTtJQUFFSCxPQUFPaEIsT0FBTyxHQUFHUztJQUFLLElBQUlJLE9BQU87UUFBRUEsTUFBTVcsR0FBRyxDQUFDZixLQUFLTztJQUFTO0lBQUUsT0FBT0E7QUFBUTtBQUV0dUIsU0FBU2Ysc0JBQXNCd0IsU0FBUyxFQUFFQyxlQUFlO0lBQ3ZELFNBQVNDLFFBQVFDLEtBQUs7UUFDcEIsT0FBTyxXQUFXLEdBQUUxQixNQUFNMkIsYUFBYSxDQUFDckIsd0JBQXdCUixPQUFPLEVBQUU7WUFDdkU4QixPQUFPO2dCQUFDQyxPQUFPQyxTQUFTO2dCQUFFTjthQUFnQjtRQUM1QyxHQUFHLFdBQVcsR0FBRXhCLE1BQU0yQixhQUFhLENBQUNKLFdBQVdHO0lBQ2pEO0lBRUFELFFBQVFNLFdBQVcsR0FBRyxDQUFDLHNCQUFzQixFQUFFUixVQUFVUSxXQUFXLElBQUlSLFVBQVVTLElBQUksQ0FBQyxDQUFDLENBQUMsRUFBRSxxRUFBcUU7SUFFL0osSUFBRzVCLHNCQUFzQk4sT0FBTyxFQUFFMkIsU0FBU0Y7SUFDNUMsT0FBT0U7QUFDVDtBQUVBLE1BQU1JLFNBQVMxQixhQUFhOEIsVUFBVSxDQUFDQyxNQUFNLENBQUM7SUFDNUNKLFdBQVc7UUFDVEssTUFBTTtJQUNSO0FBQ0YsSUFDQSxpREFBaUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2dlc3R1cmVIYW5kbGVyUm9vdEhPQy5qcz83ZGQ0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gZ2VzdHVyZUhhbmRsZXJSb290SE9DO1xuXG52YXIgUmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xuXG52YXIgX3JlYWN0TmF0aXZlID0gcmVxdWlyZShcInJlYWN0LW5hdGl2ZVwiKTtcblxudmFyIF9ob2lzdE5vblJlYWN0U3RhdGljcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImhvaXN0LW5vbi1yZWFjdC1zdGF0aWNzXCIpKTtcblxudmFyIF9HZXN0dXJlSGFuZGxlclJvb3RWaWV3ID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9HZXN0dXJlSGFuZGxlclJvb3RWaWV3XCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCkgeyBpZiAodHlwZW9mIFdlYWtNYXAgIT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIG51bGw7IHZhciBjYWNoZSA9IG5ldyBXZWFrTWFwKCk7IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGNhY2hlOyB9OyByZXR1cm4gY2FjaGU7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqKSB7IGlmIChvYmogJiYgb2JqLl9fZXNNb2R1bGUpIHsgcmV0dXJuIG9iajsgfSBpZiAob2JqID09PSBudWxsIHx8IHR5cGVvZiBvYmogIT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG9iaiAhPT0gXCJmdW5jdGlvblwiKSB7IHJldHVybiB7IGRlZmF1bHQ6IG9iaiB9OyB9IHZhciBjYWNoZSA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSgpOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5cbmZ1bmN0aW9uIGdlc3R1cmVIYW5kbGVyUm9vdEhPQyhDb21wb25lbnQsIGNvbnRhaW5lclN0eWxlcykge1xuICBmdW5jdGlvbiBXcmFwcGVyKHByb3BzKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KF9HZXN0dXJlSGFuZGxlclJvb3RWaWV3LmRlZmF1bHQsIHtcbiAgICAgIHN0eWxlOiBbc3R5bGVzLmNvbnRhaW5lciwgY29udGFpbmVyU3R5bGVzXVxuICAgIH0sIC8qI19fUFVSRV9fKi9SZWFjdC5jcmVhdGVFbGVtZW50KENvbXBvbmVudCwgcHJvcHMpKTtcbiAgfVxuXG4gIFdyYXBwZXIuZGlzcGxheU5hbWUgPSBgZ2VzdHVyZUhhbmRsZXJSb290SE9DKCR7Q29tcG9uZW50LmRpc3BsYXlOYW1lIHx8IENvbXBvbmVudC5uYW1lfSlgOyAvLyBAdHMtaWdub3JlIC0gaG9pc3ROb25SZWFjdFN0YXRpY3MgdXNlcyBvbGQgdmVyc2lvbiBvZiBAdHlwZXMvcmVhY3RcblxuICAoMCwgX2hvaXN0Tm9uUmVhY3RTdGF0aWNzLmRlZmF1bHQpKFdyYXBwZXIsIENvbXBvbmVudCk7XG4gIHJldHVybiBXcmFwcGVyO1xufVxuXG5jb25zdCBzdHlsZXMgPSBfcmVhY3ROYXRpdmUuU3R5bGVTaGVldC5jcmVhdGUoe1xuICBjb250YWluZXI6IHtcbiAgICBmbGV4OiAxXG4gIH1cbn0pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Z2VzdHVyZUhhbmRsZXJSb290SE9DLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJnZXN0dXJlSGFuZGxlclJvb3RIT0MiLCJSZWFjdCIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIl9ob2lzdE5vblJlYWN0U3RhdGljcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfR2VzdHVyZUhhbmRsZXJSb290VmlldyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJXZWFrTWFwIiwiY2FjaGUiLCJoYXMiLCJnZXQiLCJuZXdPYmoiLCJoYXNQcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJkZXNjIiwic2V0IiwiQ29tcG9uZW50IiwiY29udGFpbmVyU3R5bGVzIiwiV3JhcHBlciIsInByb3BzIiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwic3R5bGVzIiwiY29udGFpbmVyIiwiZGlzcGxheU5hbWUiLCJuYW1lIiwiU3R5bGVTaGVldCIsImNyZWF0ZSIsImZsZXgiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/gestureHandlerRootHOC.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/getShadowNodeFromRef.web.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/getShadowNodeFromRef.web.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getShadowNodeFromRef = getShadowNodeFromRef;\n// Used by GestureDetector (unsupported on web at the moment) to check whether the\n// attached view may get flattened on Fabric. Original implementation causes errors\n// on web due to the static resolution of `require` statements by webpack breaking\n// the conditional importing.\nfunction getShadowNodeFromRef(_ref) {\n    return null;\n} //# sourceMappingURL=getShadowNodeFromRef.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvZ2V0U2hhZG93Tm9kZUZyb21SZWYud2ViLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCw0QkFBNEIsR0FBR0U7QUFFL0Isa0ZBQWtGO0FBQ2xGLG1GQUFtRjtBQUNuRixrRkFBa0Y7QUFDbEYsNkJBQTZCO0FBQzdCLFNBQVNBLHFCQUFxQkMsSUFBSTtJQUNoQyxPQUFPO0FBQ1QsRUFDQSxvREFBb0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2dldFNoYWRvd05vZGVGcm9tUmVmLndlYi5qcz8wMTgwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRTaGFkb3dOb2RlRnJvbVJlZiA9IGdldFNoYWRvd05vZGVGcm9tUmVmO1xuXG4vLyBVc2VkIGJ5IEdlc3R1cmVEZXRlY3RvciAodW5zdXBwb3J0ZWQgb24gd2ViIGF0IHRoZSBtb21lbnQpIHRvIGNoZWNrIHdoZXRoZXIgdGhlXG4vLyBhdHRhY2hlZCB2aWV3IG1heSBnZXQgZmxhdHRlbmVkIG9uIEZhYnJpYy4gT3JpZ2luYWwgaW1wbGVtZW50YXRpb24gY2F1c2VzIGVycm9yc1xuLy8gb24gd2ViIGR1ZSB0byB0aGUgc3RhdGljIHJlc29sdXRpb24gb2YgYHJlcXVpcmVgIHN0YXRlbWVudHMgYnkgd2VicGFjayBicmVha2luZ1xuLy8gdGhlIGNvbmRpdGlvbmFsIGltcG9ydGluZy5cbmZ1bmN0aW9uIGdldFNoYWRvd05vZGVGcm9tUmVmKF9yZWYpIHtcbiAgcmV0dXJuIG51bGw7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXRTaGFkb3dOb2RlRnJvbVJlZi53ZWIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZ2V0U2hhZG93Tm9kZUZyb21SZWYiLCJfcmVmIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/getShadowNodeFromRef.web.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/FlingGestureHandler.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/FlingGestureHandler.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FlingGestureHandler = exports.flingHandlerName = exports.flingGestureHandlerProps = void 0;\nvar _createHandler = _interopRequireDefault(__webpack_require__(/*! ./createHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js\"));\nvar _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst flingGestureHandlerProps = [\n    \"numberOfPointers\",\n    \"direction\"\n];\nexports.flingGestureHandlerProps = flingGestureHandlerProps;\nconst flingHandlerName = \"FlingGestureHandler\";\nexports.flingHandlerName = flingHandlerName;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nconst FlingGestureHandler = (0, _createHandler.default)({\n    name: flingHandlerName,\n    allowedProps: [\n        ..._gestureHandlerCommon.baseGestureHandlerProps,\n        ...flingGestureHandlerProps\n    ],\n    config: {}\n});\nexports.FlingGestureHandler = FlingGestureHandler; //# sourceMappingURL=FlingGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvRmxpbmdHZXN0dXJlSGFuZGxlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsMkJBQTJCLEdBQUdBLHdCQUF3QixHQUFHQSxnQ0FBZ0MsR0FBRyxLQUFLO0FBRWpHLElBQUlLLGlCQUFpQkMsdUJBQXVCQyxtQkFBT0EsQ0FBQywyR0FBaUI7QUFFckUsSUFBSUMsd0JBQXdCRCxtQkFBT0EsQ0FBQyx5SEFBd0I7QUFFNUQsU0FBU0QsdUJBQXVCRyxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSUMsVUFBVSxHQUFHRCxNQUFNO1FBQUVFLFNBQVNGO0lBQUk7QUFBRztBQUU5RixNQUFNTCwyQkFBMkI7SUFBQztJQUFvQjtDQUFZO0FBQ2xFSixnQ0FBZ0MsR0FBR0k7QUFDbkMsTUFBTUQsbUJBQW1CO0FBQ3pCSCx3QkFBd0IsR0FBR0c7QUFDM0IsaUpBQWlKO0FBQ2pKLE1BQU1ELHNCQUFzQixDQUFDLEdBQUdHLGVBQWVNLE9BQU8sRUFBRTtJQUN0REMsTUFBTVQ7SUFDTlUsY0FBYztXQUFJTCxzQkFBc0JNLHVCQUF1QjtXQUFLVjtLQUF5QjtJQUM3RlcsUUFBUSxDQUFDO0FBQ1g7QUFDQWYsMkJBQTJCLEdBQUdFLHFCQUM5QiwrQ0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2hhbmRsZXJzL0ZsaW5nR2VzdHVyZUhhbmRsZXIuanM/YzU4ZCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRmxpbmdHZXN0dXJlSGFuZGxlciA9IGV4cG9ydHMuZmxpbmdIYW5kbGVyTmFtZSA9IGV4cG9ydHMuZmxpbmdHZXN0dXJlSGFuZGxlclByb3BzID0gdm9pZCAwO1xuXG52YXIgX2NyZWF0ZUhhbmRsZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZUhhbmRsZXJcIikpO1xuXG52YXIgX2dlc3R1cmVIYW5kbGVyQ29tbW9uID0gcmVxdWlyZShcIi4vZ2VzdHVyZUhhbmRsZXJDb21tb25cIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IGZsaW5nR2VzdHVyZUhhbmRsZXJQcm9wcyA9IFsnbnVtYmVyT2ZQb2ludGVycycsICdkaXJlY3Rpb24nXTtcbmV4cG9ydHMuZmxpbmdHZXN0dXJlSGFuZGxlclByb3BzID0gZmxpbmdHZXN0dXJlSGFuZGxlclByb3BzO1xuY29uc3QgZmxpbmdIYW5kbGVyTmFtZSA9ICdGbGluZ0dlc3R1cmVIYW5kbGVyJztcbmV4cG9ydHMuZmxpbmdIYW5kbGVyTmFtZSA9IGZsaW5nSGFuZGxlck5hbWU7XG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLXJlZGVjbGFyZSAtLSBiYWNrd2FyZCBjb21wYXRpYmlsaXR5OyBzZWUgZGVzY3JpcHRpb24gb24gdGhlIHRvcCBvZiBnZXN0dXJlSGFuZGxlckNvbW1vbi50cyBmaWxlXG5jb25zdCBGbGluZ0dlc3R1cmVIYW5kbGVyID0gKDAsIF9jcmVhdGVIYW5kbGVyLmRlZmF1bHQpKHtcbiAgbmFtZTogZmxpbmdIYW5kbGVyTmFtZSxcbiAgYWxsb3dlZFByb3BzOiBbLi4uX2dlc3R1cmVIYW5kbGVyQ29tbW9uLmJhc2VHZXN0dXJlSGFuZGxlclByb3BzLCAuLi5mbGluZ0dlc3R1cmVIYW5kbGVyUHJvcHNdLFxuICBjb25maWc6IHt9XG59KTtcbmV4cG9ydHMuRmxpbmdHZXN0dXJlSGFuZGxlciA9IEZsaW5nR2VzdHVyZUhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1GbGluZ0dlc3R1cmVIYW5kbGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkZsaW5nR2VzdHVyZUhhbmRsZXIiLCJmbGluZ0hhbmRsZXJOYW1lIiwiZmxpbmdHZXN0dXJlSGFuZGxlclByb3BzIiwiX2NyZWF0ZUhhbmRsZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9nZXN0dXJlSGFuZGxlckNvbW1vbiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwibmFtZSIsImFsbG93ZWRQcm9wcyIsImJhc2VHZXN0dXJlSGFuZGxlclByb3BzIiwiY29uZmlnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/FlingGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/ForceTouchGestureHandler.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/ForceTouchGestureHandler.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ForceTouchGestureHandler = exports.forceTouchHandlerName = exports.forceTouchGestureHandlerProps = void 0;\nvar _react = _interopRequireDefault(__webpack_require__(/*! react */ \"react\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/utils.js\");\nvar _PlatformConstants = _interopRequireDefault(__webpack_require__(/*! ../PlatformConstants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/PlatformConstants.web.js\"));\nvar _createHandler = _interopRequireDefault(__webpack_require__(/*! ./createHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js\"));\nvar _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst forceTouchGestureHandlerProps = [\n    \"minForce\",\n    \"maxForce\",\n    \"feedbackOnActivation\"\n]; // implicit `children` prop has been removed in @types/react^18.0.0\nexports.forceTouchGestureHandlerProps = forceTouchGestureHandlerProps;\nclass ForceTouchFallback extends _react.default.Component {\n    componentDidMount() {\n        console.warn((0, _utils.tagMessage)(\"ForceTouchGestureHandler is not available on this platform. Please use ForceTouchGestureHandler.forceTouchAvailable to conditionally render other components that would provide a fallback behavior specific to your usecase\"));\n    }\n    render() {\n        return this.props.children;\n    }\n}\n_defineProperty(ForceTouchFallback, \"forceTouchAvailable\", false);\nconst forceTouchHandlerName = \"ForceTouchGestureHandler\"; // eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nexports.forceTouchHandlerName = forceTouchHandlerName;\nconst ForceTouchGestureHandler = _PlatformConstants.default !== null && _PlatformConstants.default !== void 0 && _PlatformConstants.default.forceTouchAvailable ? (0, _createHandler.default)({\n    name: forceTouchHandlerName,\n    allowedProps: [\n        ..._gestureHandlerCommon.baseGestureHandlerProps,\n        ...forceTouchGestureHandlerProps\n    ],\n    config: {}\n}) : ForceTouchFallback;\nexports.ForceTouchGestureHandler = ForceTouchGestureHandler;\nForceTouchGestureHandler.forceTouchAvailable = (_PlatformConstants.default === null || _PlatformConstants.default === void 0 ? void 0 : _PlatformConstants.default.forceTouchAvailable) || false; //# sourceMappingURL=ForceTouchGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvRm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxnQ0FBZ0MsR0FBR0EsNkJBQTZCLEdBQUdBLHFDQUFxQyxHQUFHLEtBQUs7QUFFaEgsSUFBSUssU0FBU0MsdUJBQXVCQyxtQkFBT0EsQ0FBQyxvQkFBTztBQUVuRCxJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQyxtRkFBVTtBQUUvQixJQUFJRSxxQkFBcUJILHVCQUF1QkMsbUJBQU9BLENBQUMsK0dBQXNCO0FBRTlFLElBQUlHLGlCQUFpQkosdUJBQXVCQyxtQkFBT0EsQ0FBQywyR0FBaUI7QUFFckUsSUFBSUksd0JBQXdCSixtQkFBT0EsQ0FBQyx5SEFBd0I7QUFFNUQsU0FBU0QsdUJBQXVCTSxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSUMsVUFBVSxHQUFHRCxNQUFNO1FBQUVFLFNBQVNGO0lBQUk7QUFBRztBQUU5RixTQUFTRyxnQkFBZ0JILEdBQUcsRUFBRUksR0FBRyxFQUFFZixLQUFLO0lBQUksSUFBSWUsT0FBT0osS0FBSztRQUFFZCxPQUFPQyxjQUFjLENBQUNhLEtBQUtJLEtBQUs7WUFBRWYsT0FBT0E7WUFBT2dCLFlBQVk7WUFBTUMsY0FBYztZQUFNQyxVQUFVO1FBQUs7SUFBSSxPQUFPO1FBQUVQLEdBQUcsQ0FBQ0ksSUFBSSxHQUFHZjtJQUFPO0lBQUUsT0FBT1c7QUFBSztBQUVoTixNQUFNUixnQ0FBZ0M7SUFBQztJQUFZO0lBQVk7Q0FBdUIsRUFBRSxtRUFBbUU7QUFFM0pKLHFDQUFxQyxHQUFHSTtBQUV4QyxNQUFNZ0IsMkJBQTJCZixPQUFPUyxPQUFPLENBQUNPLFNBQVM7SUFDdkRDLG9CQUFvQjtRQUNsQkMsUUFBUUMsSUFBSSxDQUFDLENBQUMsR0FBR2hCLE9BQU9pQixVQUFVLEVBQUU7SUFDdEM7SUFFQUMsU0FBUztRQUNQLE9BQU8sSUFBSSxDQUFDQyxLQUFLLENBQUNDLFFBQVE7SUFDNUI7QUFFRjtBQUVBYixnQkFBZ0JLLG9CQUFvQix1QkFBdUI7QUFFM0QsTUFBTWpCLHdCQUF3Qiw0QkFBNEIsaUpBQWlKO0FBRTNNSCw2QkFBNkIsR0FBR0c7QUFDaEMsTUFBTUQsMkJBQTJCTyxtQkFBbUJLLE9BQU8sS0FBSyxRQUFRTCxtQkFBbUJLLE9BQU8sS0FBSyxLQUFLLEtBQUtMLG1CQUFtQkssT0FBTyxDQUFDZSxtQkFBbUIsR0FBRyxDQUFDLEdBQUduQixlQUFlSSxPQUFPLEVBQUU7SUFDNUxnQixNQUFNM0I7SUFDTjRCLGNBQWM7V0FBSXBCLHNCQUFzQnFCLHVCQUF1QjtXQUFLNUI7S0FBOEI7SUFDbEc2QixRQUFRLENBQUM7QUFDWCxLQUFLYjtBQUNMcEIsZ0NBQWdDLEdBQUdFO0FBQ25DQSx5QkFBeUIyQixtQkFBbUIsR0FBRyxDQUFDcEIsbUJBQW1CSyxPQUFPLEtBQUssUUFBUUwsbUJBQW1CSyxPQUFPLEtBQUssS0FBSyxJQUFJLEtBQUssSUFBSUwsbUJBQW1CSyxPQUFPLENBQUNlLG1CQUFtQixLQUFLLE9BQzNMLG9EQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpdF9wbHVzX3BsdXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvRm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyLmpzPzUxODAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkZvcmNlVG91Y2hHZXN0dXJlSGFuZGxlciA9IGV4cG9ydHMuZm9yY2VUb3VjaEhhbmRsZXJOYW1lID0gZXhwb3J0cy5mb3JjZVRvdWNoR2VzdHVyZUhhbmRsZXJQcm9wcyA9IHZvaWQgMDtcblxudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuLi91dGlsc1wiKTtcblxudmFyIF9QbGF0Zm9ybUNvbnN0YW50cyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4uL1BsYXRmb3JtQ29uc3RhbnRzXCIpKTtcblxudmFyIF9jcmVhdGVIYW5kbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVIYW5kbGVyXCIpKTtcblxudmFyIF9nZXN0dXJlSGFuZGxlckNvbW1vbiA9IHJlcXVpcmUoXCIuL2dlc3R1cmVIYW5kbGVyQ29tbW9uXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5jb25zdCBmb3JjZVRvdWNoR2VzdHVyZUhhbmRsZXJQcm9wcyA9IFsnbWluRm9yY2UnLCAnbWF4Rm9yY2UnLCAnZmVlZGJhY2tPbkFjdGl2YXRpb24nXTsgLy8gaW1wbGljaXQgYGNoaWxkcmVuYCBwcm9wIGhhcyBiZWVuIHJlbW92ZWQgaW4gQHR5cGVzL3JlYWN0XjE4LjAuMFxuXG5leHBvcnRzLmZvcmNlVG91Y2hHZXN0dXJlSGFuZGxlclByb3BzID0gZm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyUHJvcHM7XG5cbmNsYXNzIEZvcmNlVG91Y2hGYWxsYmFjayBleHRlbmRzIF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCB7XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIGNvbnNvbGUud2FybigoMCwgX3V0aWxzLnRhZ01lc3NhZ2UpKCdGb3JjZVRvdWNoR2VzdHVyZUhhbmRsZXIgaXMgbm90IGF2YWlsYWJsZSBvbiB0aGlzIHBsYXRmb3JtLiBQbGVhc2UgdXNlIEZvcmNlVG91Y2hHZXN0dXJlSGFuZGxlci5mb3JjZVRvdWNoQXZhaWxhYmxlIHRvIGNvbmRpdGlvbmFsbHkgcmVuZGVyIG90aGVyIGNvbXBvbmVudHMgdGhhdCB3b3VsZCBwcm92aWRlIGEgZmFsbGJhY2sgYmVoYXZpb3Igc3BlY2lmaWMgdG8geW91ciB1c2VjYXNlJykpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICB9XG5cbn1cblxuX2RlZmluZVByb3BlcnR5KEZvcmNlVG91Y2hGYWxsYmFjaywgXCJmb3JjZVRvdWNoQXZhaWxhYmxlXCIsIGZhbHNlKTtcblxuY29uc3QgZm9yY2VUb3VjaEhhbmRsZXJOYW1lID0gJ0ZvcmNlVG91Y2hHZXN0dXJlSGFuZGxlcic7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlIC0tIGJhY2t3YXJkIGNvbXBhdGliaWxpdHk7IHNlZSBkZXNjcmlwdGlvbiBvbiB0aGUgdG9wIG9mIGdlc3R1cmVIYW5kbGVyQ29tbW9uLnRzIGZpbGVcblxuZXhwb3J0cy5mb3JjZVRvdWNoSGFuZGxlck5hbWUgPSBmb3JjZVRvdWNoSGFuZGxlck5hbWU7XG5jb25zdCBGb3JjZVRvdWNoR2VzdHVyZUhhbmRsZXIgPSBfUGxhdGZvcm1Db25zdGFudHMuZGVmYXVsdCAhPT0gbnVsbCAmJiBfUGxhdGZvcm1Db25zdGFudHMuZGVmYXVsdCAhPT0gdm9pZCAwICYmIF9QbGF0Zm9ybUNvbnN0YW50cy5kZWZhdWx0LmZvcmNlVG91Y2hBdmFpbGFibGUgPyAoMCwgX2NyZWF0ZUhhbmRsZXIuZGVmYXVsdCkoe1xuICBuYW1lOiBmb3JjZVRvdWNoSGFuZGxlck5hbWUsXG4gIGFsbG93ZWRQcm9wczogWy4uLl9nZXN0dXJlSGFuZGxlckNvbW1vbi5iYXNlR2VzdHVyZUhhbmRsZXJQcm9wcywgLi4uZm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyUHJvcHNdLFxuICBjb25maWc6IHt9XG59KSA6IEZvcmNlVG91Y2hGYWxsYmFjaztcbmV4cG9ydHMuRm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyID0gRm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyO1xuRm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyLmZvcmNlVG91Y2hBdmFpbGFibGUgPSAoX1BsYXRmb3JtQ29uc3RhbnRzLmRlZmF1bHQgPT09IG51bGwgfHwgX1BsYXRmb3JtQ29uc3RhbnRzLmRlZmF1bHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9QbGF0Zm9ybUNvbnN0YW50cy5kZWZhdWx0LmZvcmNlVG91Y2hBdmFpbGFibGUpIHx8IGZhbHNlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Rm9yY2VUb3VjaEdlc3R1cmVIYW5kbGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkZvcmNlVG91Y2hHZXN0dXJlSGFuZGxlciIsImZvcmNlVG91Y2hIYW5kbGVyTmFtZSIsImZvcmNlVG91Y2hHZXN0dXJlSGFuZGxlclByb3BzIiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdXRpbHMiLCJfUGxhdGZvcm1Db25zdGFudHMiLCJfY3JlYXRlSGFuZGxlciIsIl9nZXN0dXJlSGFuZGxlckNvbW1vbiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwiX2RlZmluZVByb3BlcnR5Iiwia2V5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiRm9yY2VUb3VjaEZhbGxiYWNrIiwiQ29tcG9uZW50IiwiY29tcG9uZW50RGlkTW91bnQiLCJjb25zb2xlIiwid2FybiIsInRhZ01lc3NhZ2UiLCJyZW5kZXIiLCJwcm9wcyIsImNoaWxkcmVuIiwiZm9yY2VUb3VjaEF2YWlsYWJsZSIsIm5hbWUiLCJhbGxvd2VkUHJvcHMiLCJiYXNlR2VzdHVyZUhhbmRsZXJQcm9wcyIsImNvbmZpZyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/ForceTouchGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/LongPressGestureHandler.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/LongPressGestureHandler.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LongPressGestureHandler = exports.longPressHandlerName = exports.longPressGestureHandlerProps = void 0;\nvar _createHandler = _interopRequireDefault(__webpack_require__(/*! ./createHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js\"));\nvar _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst longPressGestureHandlerProps = [\n    \"minDurationMs\",\n    \"maxDist\"\n];\nexports.longPressGestureHandlerProps = longPressGestureHandlerProps;\nconst longPressHandlerName = \"LongPressGestureHandler\";\nexports.longPressHandlerName = longPressHandlerName;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nconst LongPressGestureHandler = (0, _createHandler.default)({\n    name: longPressHandlerName,\n    allowedProps: [\n        ..._gestureHandlerCommon.baseGestureHandlerProps,\n        ...longPressGestureHandlerProps\n    ],\n    config: {\n        shouldCancelWhenOutside: true\n    }\n});\nexports.LongPressGestureHandler = LongPressGestureHandler; //# sourceMappingURL=LongPressGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvTG9uZ1ByZXNzR2VzdHVyZUhhbmRsZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELCtCQUErQixHQUFHQSw0QkFBNEIsR0FBR0Esb0NBQW9DLEdBQUcsS0FBSztBQUU3RyxJQUFJSyxpQkFBaUJDLHVCQUF1QkMsbUJBQU9BLENBQUMsMkdBQWlCO0FBRXJFLElBQUlDLHdCQUF3QkQsbUJBQU9BLENBQUMseUhBQXdCO0FBRTVELFNBQVNELHVCQUF1QkcsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlDLFVBQVUsR0FBR0QsTUFBTTtRQUFFRSxTQUFTRjtJQUFJO0FBQUc7QUFFOUYsTUFBTUwsK0JBQStCO0lBQUM7SUFBaUI7Q0FBVTtBQUNqRUosb0NBQW9DLEdBQUdJO0FBQ3ZDLE1BQU1ELHVCQUF1QjtBQUM3QkgsNEJBQTRCLEdBQUdHO0FBQy9CLGlKQUFpSjtBQUNqSixNQUFNRCwwQkFBMEIsQ0FBQyxHQUFHRyxlQUFlTSxPQUFPLEVBQUU7SUFDMURDLE1BQU1UO0lBQ05VLGNBQWM7V0FBSUwsc0JBQXNCTSx1QkFBdUI7V0FBS1Y7S0FBNkI7SUFDakdXLFFBQVE7UUFDTkMseUJBQXlCO0lBQzNCO0FBQ0Y7QUFDQWhCLCtCQUErQixHQUFHRSx5QkFDbEMsbURBQW1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZml0X3BsdXNfcGx1cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy9oYW5kbGVycy9Mb25nUHJlc3NHZXN0dXJlSGFuZGxlci5qcz8xMzRkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Mb25nUHJlc3NHZXN0dXJlSGFuZGxlciA9IGV4cG9ydHMubG9uZ1ByZXNzSGFuZGxlck5hbWUgPSBleHBvcnRzLmxvbmdQcmVzc0dlc3R1cmVIYW5kbGVyUHJvcHMgPSB2b2lkIDA7XG5cbnZhciBfY3JlYXRlSGFuZGxlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vY3JlYXRlSGFuZGxlclwiKSk7XG5cbnZhciBfZ2VzdHVyZUhhbmRsZXJDb21tb24gPSByZXF1aXJlKFwiLi9nZXN0dXJlSGFuZGxlckNvbW1vblwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgbG9uZ1ByZXNzR2VzdHVyZUhhbmRsZXJQcm9wcyA9IFsnbWluRHVyYXRpb25NcycsICdtYXhEaXN0J107XG5leHBvcnRzLmxvbmdQcmVzc0dlc3R1cmVIYW5kbGVyUHJvcHMgPSBsb25nUHJlc3NHZXN0dXJlSGFuZGxlclByb3BzO1xuY29uc3QgbG9uZ1ByZXNzSGFuZGxlck5hbWUgPSAnTG9uZ1ByZXNzR2VzdHVyZUhhbmRsZXInO1xuZXhwb3J0cy5sb25nUHJlc3NIYW5kbGVyTmFtZSA9IGxvbmdQcmVzc0hhbmRsZXJOYW1lO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmUgLS0gYmFja3dhcmQgY29tcGF0aWJpbGl0eTsgc2VlIGRlc2NyaXB0aW9uIG9uIHRoZSB0b3Agb2YgZ2VzdHVyZUhhbmRsZXJDb21tb24udHMgZmlsZVxuY29uc3QgTG9uZ1ByZXNzR2VzdHVyZUhhbmRsZXIgPSAoMCwgX2NyZWF0ZUhhbmRsZXIuZGVmYXVsdCkoe1xuICBuYW1lOiBsb25nUHJlc3NIYW5kbGVyTmFtZSxcbiAgYWxsb3dlZFByb3BzOiBbLi4uX2dlc3R1cmVIYW5kbGVyQ29tbW9uLmJhc2VHZXN0dXJlSGFuZGxlclByb3BzLCAuLi5sb25nUHJlc3NHZXN0dXJlSGFuZGxlclByb3BzXSxcbiAgY29uZmlnOiB7XG4gICAgc2hvdWxkQ2FuY2VsV2hlbk91dHNpZGU6IHRydWVcbiAgfVxufSk7XG5leHBvcnRzLkxvbmdQcmVzc0dlc3R1cmVIYW5kbGVyID0gTG9uZ1ByZXNzR2VzdHVyZUhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Mb25nUHJlc3NHZXN0dXJlSGFuZGxlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJMb25nUHJlc3NHZXN0dXJlSGFuZGxlciIsImxvbmdQcmVzc0hhbmRsZXJOYW1lIiwibG9uZ1ByZXNzR2VzdHVyZUhhbmRsZXJQcm9wcyIsIl9jcmVhdGVIYW5kbGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfZ2VzdHVyZUhhbmRsZXJDb21tb24iLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIm5hbWUiLCJhbGxvd2VkUHJvcHMiLCJiYXNlR2VzdHVyZUhhbmRsZXJQcm9wcyIsImNvbmZpZyIsInNob3VsZENhbmNlbFdoZW5PdXRzaWRlIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/LongPressGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/NativeViewGestureHandler.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/NativeViewGestureHandler.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.NativeViewGestureHandler = exports.nativeViewHandlerName = exports.nativeViewProps = exports.nativeViewGestureHandlerProps = void 0;\nvar _createHandler = _interopRequireDefault(__webpack_require__(/*! ./createHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js\"));\nvar _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst nativeViewGestureHandlerProps = [\n    \"shouldActivateOnStart\",\n    \"disallowInterruption\"\n];\nexports.nativeViewGestureHandlerProps = nativeViewGestureHandlerProps;\nconst nativeViewProps = [\n    ..._gestureHandlerCommon.baseGestureHandlerProps,\n    ...nativeViewGestureHandlerProps\n];\nexports.nativeViewProps = nativeViewProps;\nconst nativeViewHandlerName = \"NativeViewGestureHandler\";\nexports.nativeViewHandlerName = nativeViewHandlerName;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nconst NativeViewGestureHandler = (0, _createHandler.default)({\n    name: nativeViewHandlerName,\n    allowedProps: nativeViewProps,\n    config: {}\n});\nexports.NativeViewGestureHandler = NativeViewGestureHandler; //# sourceMappingURL=NativeViewGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxnQ0FBZ0MsR0FBR0EsNkJBQTZCLEdBQUdBLHVCQUF1QixHQUFHQSxxQ0FBcUMsR0FBRyxLQUFLO0FBRTFJLElBQUlNLGlCQUFpQkMsdUJBQXVCQyxtQkFBT0EsQ0FBQywyR0FBaUI7QUFFckUsSUFBSUMsd0JBQXdCRCxtQkFBT0EsQ0FBQyx5SEFBd0I7QUFFNUQsU0FBU0QsdUJBQXVCRyxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSUMsVUFBVSxHQUFHRCxNQUFNO1FBQUVFLFNBQVNGO0lBQUk7QUFBRztBQUU5RixNQUFNTCxnQ0FBZ0M7SUFBQztJQUF5QjtDQUF1QjtBQUN2RkwscUNBQXFDLEdBQUdLO0FBQ3hDLE1BQU1ELGtCQUFrQjtPQUFJSyxzQkFBc0JJLHVCQUF1QjtPQUFLUjtDQUE4QjtBQUM1R0wsdUJBQXVCLEdBQUdJO0FBQzFCLE1BQU1ELHdCQUF3QjtBQUM5QkgsNkJBQTZCLEdBQUdHO0FBQ2hDLGlKQUFpSjtBQUNqSixNQUFNRCwyQkFBMkIsQ0FBQyxHQUFHSSxlQUFlTSxPQUFPLEVBQUU7SUFDM0RFLE1BQU1YO0lBQ05ZLGNBQWNYO0lBQ2RZLFFBQVEsQ0FBQztBQUNYO0FBQ0FoQixnQ0FBZ0MsR0FBR0UsMEJBQ25DLG9EQUFvRCIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpdF9wbHVzX3BsdXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyLmpzPzVhYzAiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLk5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlciA9IGV4cG9ydHMubmF0aXZlVmlld0hhbmRsZXJOYW1lID0gZXhwb3J0cy5uYXRpdmVWaWV3UHJvcHMgPSBleHBvcnRzLm5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlclByb3BzID0gdm9pZCAwO1xuXG52YXIgX2NyZWF0ZUhhbmRsZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZUhhbmRsZXJcIikpO1xuXG52YXIgX2dlc3R1cmVIYW5kbGVyQ29tbW9uID0gcmVxdWlyZShcIi4vZ2VzdHVyZUhhbmRsZXJDb21tb25cIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IG5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlclByb3BzID0gWydzaG91bGRBY3RpdmF0ZU9uU3RhcnQnLCAnZGlzYWxsb3dJbnRlcnJ1cHRpb24nXTtcbmV4cG9ydHMubmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyUHJvcHMgPSBuYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXJQcm9wcztcbmNvbnN0IG5hdGl2ZVZpZXdQcm9wcyA9IFsuLi5fZ2VzdHVyZUhhbmRsZXJDb21tb24uYmFzZUdlc3R1cmVIYW5kbGVyUHJvcHMsIC4uLm5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlclByb3BzXTtcbmV4cG9ydHMubmF0aXZlVmlld1Byb3BzID0gbmF0aXZlVmlld1Byb3BzO1xuY29uc3QgbmF0aXZlVmlld0hhbmRsZXJOYW1lID0gJ05hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlcic7XG5leHBvcnRzLm5hdGl2ZVZpZXdIYW5kbGVyTmFtZSA9IG5hdGl2ZVZpZXdIYW5kbGVyTmFtZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlIC0tIGJhY2t3YXJkIGNvbXBhdGliaWxpdHk7IHNlZSBkZXNjcmlwdGlvbiBvbiB0aGUgdG9wIG9mIGdlc3R1cmVIYW5kbGVyQ29tbW9uLnRzIGZpbGVcbmNvbnN0IE5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlciA9ICgwLCBfY3JlYXRlSGFuZGxlci5kZWZhdWx0KSh7XG4gIG5hbWU6IG5hdGl2ZVZpZXdIYW5kbGVyTmFtZSxcbiAgYWxsb3dlZFByb3BzOiBuYXRpdmVWaWV3UHJvcHMsXG4gIGNvbmZpZzoge31cbn0pO1xuZXhwb3J0cy5OYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXIgPSBOYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1OYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyIiwibmF0aXZlVmlld0hhbmRsZXJOYW1lIiwibmF0aXZlVmlld1Byb3BzIiwibmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyUHJvcHMiLCJfY3JlYXRlSGFuZGxlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2dlc3R1cmVIYW5kbGVyQ29tbW9uIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJiYXNlR2VzdHVyZUhhbmRsZXJQcm9wcyIsIm5hbWUiLCJhbGxvd2VkUHJvcHMiLCJjb25maWciXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/NativeViewGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PanGestureHandler.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PanGestureHandler.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.managePanProps = managePanProps;\nexports.PanGestureHandler = exports.panHandlerName = exports.panGestureHandlerCustomNativeProps = exports.panGestureHandlerProps = void 0;\nvar _createHandler = _interopRequireDefault(__webpack_require__(/*! ./createHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js\"));\nvar _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst panGestureHandlerProps = [\n    \"activeOffsetY\",\n    \"activeOffsetX\",\n    \"failOffsetY\",\n    \"failOffsetX\",\n    \"minDist\",\n    \"minVelocity\",\n    \"minVelocityX\",\n    \"minVelocityY\",\n    \"minPointers\",\n    \"maxPointers\",\n    \"avgTouches\",\n    \"enableTrackpadTwoFingerGesture\",\n    \"activateAfterLongPress\"\n];\nexports.panGestureHandlerProps = panGestureHandlerProps;\nconst panGestureHandlerCustomNativeProps = [\n    \"activeOffsetYStart\",\n    \"activeOffsetYEnd\",\n    \"activeOffsetXStart\",\n    \"activeOffsetXEnd\",\n    \"failOffsetYStart\",\n    \"failOffsetYEnd\",\n    \"failOffsetXStart\",\n    \"failOffsetXEnd\"\n];\nexports.panGestureHandlerCustomNativeProps = panGestureHandlerCustomNativeProps;\nconst panHandlerName = \"PanGestureHandler\";\nexports.panHandlerName = panHandlerName;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nconst PanGestureHandler = (0, _createHandler.default)({\n    name: panHandlerName,\n    allowedProps: [\n        ..._gestureHandlerCommon.baseGestureHandlerProps,\n        ...panGestureHandlerProps\n    ],\n    config: {},\n    transformProps: managePanProps,\n    customNativeProps: panGestureHandlerCustomNativeProps\n});\nexports.PanGestureHandler = PanGestureHandler;\nfunction validatePanGestureHandlerProps(props) {\n    if (Array.isArray(props.activeOffsetX) && (props.activeOffsetX[0] > 0 || props.activeOffsetX[1] < 0)) {\n        throw new Error(`First element of activeOffsetX should be negative, a the second one should be positive`);\n    }\n    if (Array.isArray(props.activeOffsetY) && (props.activeOffsetY[0] > 0 || props.activeOffsetY[1] < 0)) {\n        throw new Error(`First element of activeOffsetY should be negative, a the second one should be positive`);\n    }\n    if (Array.isArray(props.failOffsetX) && (props.failOffsetX[0] > 0 || props.failOffsetX[1] < 0)) {\n        throw new Error(`First element of failOffsetX should be negative, a the second one should be positive`);\n    }\n    if (Array.isArray(props.failOffsetY) && (props.failOffsetY[0] > 0 || props.failOffsetY[1] < 0)) {\n        throw new Error(`First element of failOffsetY should be negative, a the second one should be positive`);\n    }\n    if (props.minDist && (props.failOffsetX || props.failOffsetY)) {\n        throw new Error(`It is not supported to use minDist with failOffsetX or failOffsetY, use activeOffsetX and activeOffsetY instead`);\n    }\n    if (props.minDist && (props.activeOffsetX || props.activeOffsetY)) {\n        throw new Error(`It is not supported to use minDist with activeOffsetX or activeOffsetY`);\n    }\n}\nfunction transformPanGestureHandlerProps(props) {\n    const res = {\n        ...props\n    };\n    if (props.activeOffsetX !== undefined) {\n        delete res.activeOffsetX;\n        if (Array.isArray(props.activeOffsetX)) {\n            res.activeOffsetXStart = props.activeOffsetX[0];\n            res.activeOffsetXEnd = props.activeOffsetX[1];\n        } else if (props.activeOffsetX < 0) {\n            res.activeOffsetXStart = props.activeOffsetX;\n        } else {\n            res.activeOffsetXEnd = props.activeOffsetX;\n        }\n    }\n    if (props.activeOffsetY !== undefined) {\n        delete res.activeOffsetY;\n        if (Array.isArray(props.activeOffsetY)) {\n            res.activeOffsetYStart = props.activeOffsetY[0];\n            res.activeOffsetYEnd = props.activeOffsetY[1];\n        } else if (props.activeOffsetY < 0) {\n            res.activeOffsetYStart = props.activeOffsetY;\n        } else {\n            res.activeOffsetYEnd = props.activeOffsetY;\n        }\n    }\n    if (props.failOffsetX !== undefined) {\n        delete res.failOffsetX;\n        if (Array.isArray(props.failOffsetX)) {\n            res.failOffsetXStart = props.failOffsetX[0];\n            res.failOffsetXEnd = props.failOffsetX[1];\n        } else if (props.failOffsetX < 0) {\n            res.failOffsetXStart = props.failOffsetX;\n        } else {\n            res.failOffsetXEnd = props.failOffsetX;\n        }\n    }\n    if (props.failOffsetY !== undefined) {\n        delete res.failOffsetY;\n        if (Array.isArray(props.failOffsetY)) {\n            res.failOffsetYStart = props.failOffsetY[0];\n            res.failOffsetYEnd = props.failOffsetY[1];\n        } else if (props.failOffsetY < 0) {\n            res.failOffsetYStart = props.failOffsetY;\n        } else {\n            res.failOffsetYEnd = props.failOffsetY;\n        }\n    }\n    return res;\n}\nfunction managePanProps(props) {\n    if (true) {\n        validatePanGestureHandlerProps(props);\n    }\n    return transformPanGestureHandlerProps(props);\n} //# sourceMappingURL=PanGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PanGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PinchGestureHandler.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PinchGestureHandler.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PinchGestureHandler = exports.pinchHandlerName = void 0;\nvar _createHandler = _interopRequireDefault(__webpack_require__(/*! ./createHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js\"));\nvar _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst pinchHandlerName = \"PinchGestureHandler\";\nexports.pinchHandlerName = pinchHandlerName;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nconst PinchGestureHandler = (0, _createHandler.default)({\n    name: pinchHandlerName,\n    allowedProps: _gestureHandlerCommon.baseGestureHandlerProps,\n    config: {}\n});\nexports.PinchGestureHandler = PinchGestureHandler; //# sourceMappingURL=PinchGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvUGluY2hHZXN0dXJlSGFuZGxlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsMkJBQTJCLEdBQUdBLHdCQUF3QixHQUFHLEtBQUs7QUFFOUQsSUFBSUksaUJBQWlCQyx1QkFBdUJDLG1CQUFPQSxDQUFDLDJHQUFpQjtBQUVyRSxJQUFJQyx3QkFBd0JELG1CQUFPQSxDQUFDLHlIQUF3QjtBQUU1RCxTQUFTRCx1QkFBdUJHLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUUsU0FBU0Y7SUFBSTtBQUFHO0FBRTlGLE1BQU1MLG1CQUFtQjtBQUN6Qkgsd0JBQXdCLEdBQUdHO0FBQzNCLGlKQUFpSjtBQUNqSixNQUFNRCxzQkFBc0IsQ0FBQyxHQUFHRSxlQUFlTSxPQUFPLEVBQUU7SUFDdERDLE1BQU1SO0lBQ05TLGNBQWNMLHNCQUFzQk0sdUJBQXVCO0lBQzNEQyxRQUFRLENBQUM7QUFDWDtBQUNBZCwyQkFBMkIsR0FBR0UscUJBQzlCLCtDQUErQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpdF9wbHVzX3BsdXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvUGluY2hHZXN0dXJlSGFuZGxlci5qcz84MzBhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5QaW5jaEdlc3R1cmVIYW5kbGVyID0gZXhwb3J0cy5waW5jaEhhbmRsZXJOYW1lID0gdm9pZCAwO1xuXG52YXIgX2NyZWF0ZUhhbmRsZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZUhhbmRsZXJcIikpO1xuXG52YXIgX2dlc3R1cmVIYW5kbGVyQ29tbW9uID0gcmVxdWlyZShcIi4vZ2VzdHVyZUhhbmRsZXJDb21tb25cIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IHBpbmNoSGFuZGxlck5hbWUgPSAnUGluY2hHZXN0dXJlSGFuZGxlcic7XG5leHBvcnRzLnBpbmNoSGFuZGxlck5hbWUgPSBwaW5jaEhhbmRsZXJOYW1lO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmUgLS0gYmFja3dhcmQgY29tcGF0aWJpbGl0eTsgc2VlIGRlc2NyaXB0aW9uIG9uIHRoZSB0b3Agb2YgZ2VzdHVyZUhhbmRsZXJDb21tb24udHMgZmlsZVxuY29uc3QgUGluY2hHZXN0dXJlSGFuZGxlciA9ICgwLCBfY3JlYXRlSGFuZGxlci5kZWZhdWx0KSh7XG4gIG5hbWU6IHBpbmNoSGFuZGxlck5hbWUsXG4gIGFsbG93ZWRQcm9wczogX2dlc3R1cmVIYW5kbGVyQ29tbW9uLmJhc2VHZXN0dXJlSGFuZGxlclByb3BzLFxuICBjb25maWc6IHt9XG59KTtcbmV4cG9ydHMuUGluY2hHZXN0dXJlSGFuZGxlciA9IFBpbmNoR2VzdHVyZUhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1QaW5jaEdlc3R1cmVIYW5kbGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlBpbmNoR2VzdHVyZUhhbmRsZXIiLCJwaW5jaEhhbmRsZXJOYW1lIiwiX2NyZWF0ZUhhbmRsZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9nZXN0dXJlSGFuZGxlckNvbW1vbiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwibmFtZSIsImFsbG93ZWRQcm9wcyIsImJhc2VHZXN0dXJlSGFuZGxlclByb3BzIiwiY29uZmlnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PinchGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PressabilityDebugView.web.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PressabilityDebugView.web.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PressabilityDebugView = PressabilityDebugView;\n// PressabilityDebugView is not implemented in react-native-web\nfunction PressabilityDebugView() {\n    return null;\n} //# sourceMappingURL=PressabilityDebugView.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvUHJlc3NhYmlsaXR5RGVidWdWaWV3LndlYi5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsNkJBQTZCLEdBQUdFO0FBRWhDLCtEQUErRDtBQUMvRCxTQUFTQTtJQUNQLE9BQU87QUFDVCxFQUNBLHFEQUFxRCIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpdF9wbHVzX3BsdXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvUHJlc3NhYmlsaXR5RGVidWdWaWV3LndlYi5qcz82YjI3Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5QcmVzc2FiaWxpdHlEZWJ1Z1ZpZXcgPSBQcmVzc2FiaWxpdHlEZWJ1Z1ZpZXc7XG5cbi8vIFByZXNzYWJpbGl0eURlYnVnVmlldyBpcyBub3QgaW1wbGVtZW50ZWQgaW4gcmVhY3QtbmF0aXZlLXdlYlxuZnVuY3Rpb24gUHJlc3NhYmlsaXR5RGVidWdWaWV3KCkge1xuICByZXR1cm4gbnVsbDtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVByZXNzYWJpbGl0eURlYnVnVmlldy53ZWIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUHJlc3NhYmlsaXR5RGVidWdWaWV3Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PressabilityDebugView.web.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/RotationGestureHandler.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/RotationGestureHandler.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RotationGestureHandler = exports.rotationHandlerName = void 0;\nvar _createHandler = _interopRequireDefault(__webpack_require__(/*! ./createHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js\"));\nvar _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst rotationHandlerName = \"RotationGestureHandler\";\nexports.rotationHandlerName = rotationHandlerName;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nconst RotationGestureHandler = (0, _createHandler.default)({\n    name: rotationHandlerName,\n    allowedProps: _gestureHandlerCommon.baseGestureHandlerProps,\n    config: {}\n});\nexports.RotationGestureHandler = RotationGestureHandler; //# sourceMappingURL=RotationGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvUm90YXRpb25HZXN0dXJlSGFuZGxlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsOEJBQThCLEdBQUdBLDJCQUEyQixHQUFHLEtBQUs7QUFFcEUsSUFBSUksaUJBQWlCQyx1QkFBdUJDLG1CQUFPQSxDQUFDLDJHQUFpQjtBQUVyRSxJQUFJQyx3QkFBd0JELG1CQUFPQSxDQUFDLHlIQUF3QjtBQUU1RCxTQUFTRCx1QkFBdUJHLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUUsU0FBU0Y7SUFBSTtBQUFHO0FBRTlGLE1BQU1MLHNCQUFzQjtBQUM1QkgsMkJBQTJCLEdBQUdHO0FBQzlCLGlKQUFpSjtBQUNqSixNQUFNRCx5QkFBeUIsQ0FBQyxHQUFHRSxlQUFlTSxPQUFPLEVBQUU7SUFDekRDLE1BQU1SO0lBQ05TLGNBQWNMLHNCQUFzQk0sdUJBQXVCO0lBQzNEQyxRQUFRLENBQUM7QUFDWDtBQUNBZCw4QkFBOEIsR0FBR0Usd0JBQ2pDLGtEQUFrRCIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpdF9wbHVzX3BsdXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvUm90YXRpb25HZXN0dXJlSGFuZGxlci5qcz84MDhhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Sb3RhdGlvbkdlc3R1cmVIYW5kbGVyID0gZXhwb3J0cy5yb3RhdGlvbkhhbmRsZXJOYW1lID0gdm9pZCAwO1xuXG52YXIgX2NyZWF0ZUhhbmRsZXIgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL2NyZWF0ZUhhbmRsZXJcIikpO1xuXG52YXIgX2dlc3R1cmVIYW5kbGVyQ29tbW9uID0gcmVxdWlyZShcIi4vZ2VzdHVyZUhhbmRsZXJDb21tb25cIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IHJvdGF0aW9uSGFuZGxlck5hbWUgPSAnUm90YXRpb25HZXN0dXJlSGFuZGxlcic7XG5leHBvcnRzLnJvdGF0aW9uSGFuZGxlck5hbWUgPSByb3RhdGlvbkhhbmRsZXJOYW1lO1xuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1yZWRlY2xhcmUgLS0gYmFja3dhcmQgY29tcGF0aWJpbGl0eTsgc2VlIGRlc2NyaXB0aW9uIG9uIHRoZSB0b3Agb2YgZ2VzdHVyZUhhbmRsZXJDb21tb24udHMgZmlsZVxuY29uc3QgUm90YXRpb25HZXN0dXJlSGFuZGxlciA9ICgwLCBfY3JlYXRlSGFuZGxlci5kZWZhdWx0KSh7XG4gIG5hbWU6IHJvdGF0aW9uSGFuZGxlck5hbWUsXG4gIGFsbG93ZWRQcm9wczogX2dlc3R1cmVIYW5kbGVyQ29tbW9uLmJhc2VHZXN0dXJlSGFuZGxlclByb3BzLFxuICBjb25maWc6IHt9XG59KTtcbmV4cG9ydHMuUm90YXRpb25HZXN0dXJlSGFuZGxlciA9IFJvdGF0aW9uR2VzdHVyZUhhbmRsZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1Sb3RhdGlvbkdlc3R1cmVIYW5kbGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlJvdGF0aW9uR2VzdHVyZUhhbmRsZXIiLCJyb3RhdGlvbkhhbmRsZXJOYW1lIiwiX2NyZWF0ZUhhbmRsZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9nZXN0dXJlSGFuZGxlckNvbW1vbiIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwibmFtZSIsImFsbG93ZWRQcm9wcyIsImJhc2VHZXN0dXJlSGFuZGxlclByb3BzIiwiY29uZmlnIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/RotationGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/TapGestureHandler.js":
/*!**********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/TapGestureHandler.js ***!
  \**********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TapGestureHandler = exports.tapHandlerName = exports.tapGestureHandlerProps = void 0;\nvar _createHandler = _interopRequireDefault(__webpack_require__(/*! ./createHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js\"));\nvar _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst tapGestureHandlerProps = [\n    \"maxDurationMs\",\n    \"maxDelayMs\",\n    \"numberOfTaps\",\n    \"maxDeltaX\",\n    \"maxDeltaY\",\n    \"maxDist\",\n    \"minPointers\"\n];\nexports.tapGestureHandlerProps = tapGestureHandlerProps;\nconst tapHandlerName = \"TapGestureHandler\";\nexports.tapHandlerName = tapHandlerName;\n// eslint-disable-next-line @typescript-eslint/no-redeclare -- backward compatibility; see description on the top of gestureHandlerCommon.ts file\nconst TapGestureHandler = (0, _createHandler.default)({\n    name: tapHandlerName,\n    allowedProps: [\n        ..._gestureHandlerCommon.baseGestureHandlerProps,\n        ...tapGestureHandlerProps\n    ],\n    config: {\n        shouldCancelWhenOutside: true\n    }\n});\nexports.TapGestureHandler = TapGestureHandler; //# sourceMappingURL=TapGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvVGFwR2VzdHVyZUhhbmRsZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELHlCQUF5QixHQUFHQSxzQkFBc0IsR0FBR0EsOEJBQThCLEdBQUcsS0FBSztBQUUzRixJQUFJSyxpQkFBaUJDLHVCQUF1QkMsbUJBQU9BLENBQUMsMkdBQWlCO0FBRXJFLElBQUlDLHdCQUF3QkQsbUJBQU9BLENBQUMseUhBQXdCO0FBRTVELFNBQVNELHVCQUF1QkcsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlDLFVBQVUsR0FBR0QsTUFBTTtRQUFFRSxTQUFTRjtJQUFJO0FBQUc7QUFFOUYsTUFBTUwseUJBQXlCO0lBQUM7SUFBaUI7SUFBYztJQUFnQjtJQUFhO0lBQWE7SUFBVztDQUFjO0FBQ2xJSiw4QkFBOEIsR0FBR0k7QUFDakMsTUFBTUQsaUJBQWlCO0FBQ3ZCSCxzQkFBc0IsR0FBR0c7QUFDekIsaUpBQWlKO0FBQ2pKLE1BQU1ELG9CQUFvQixDQUFDLEdBQUdHLGVBQWVNLE9BQU8sRUFBRTtJQUNwREMsTUFBTVQ7SUFDTlUsY0FBYztXQUFJTCxzQkFBc0JNLHVCQUF1QjtXQUFLVjtLQUF1QjtJQUMzRlcsUUFBUTtRQUNOQyx5QkFBeUI7SUFDM0I7QUFDRjtBQUNBaEIseUJBQXlCLEdBQUdFLG1CQUM1Qiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2hhbmRsZXJzL1RhcEdlc3R1cmVIYW5kbGVyLmpzPzNmODEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlRhcEdlc3R1cmVIYW5kbGVyID0gZXhwb3J0cy50YXBIYW5kbGVyTmFtZSA9IGV4cG9ydHMudGFwR2VzdHVyZUhhbmRsZXJQcm9wcyA9IHZvaWQgMDtcblxudmFyIF9jcmVhdGVIYW5kbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9jcmVhdGVIYW5kbGVyXCIpKTtcblxudmFyIF9nZXN0dXJlSGFuZGxlckNvbW1vbiA9IHJlcXVpcmUoXCIuL2dlc3R1cmVIYW5kbGVyQ29tbW9uXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jb25zdCB0YXBHZXN0dXJlSGFuZGxlclByb3BzID0gWydtYXhEdXJhdGlvbk1zJywgJ21heERlbGF5TXMnLCAnbnVtYmVyT2ZUYXBzJywgJ21heERlbHRhWCcsICdtYXhEZWx0YVknLCAnbWF4RGlzdCcsICdtaW5Qb2ludGVycyddO1xuZXhwb3J0cy50YXBHZXN0dXJlSGFuZGxlclByb3BzID0gdGFwR2VzdHVyZUhhbmRsZXJQcm9wcztcbmNvbnN0IHRhcEhhbmRsZXJOYW1lID0gJ1RhcEdlc3R1cmVIYW5kbGVyJztcbmV4cG9ydHMudGFwSGFuZGxlck5hbWUgPSB0YXBIYW5kbGVyTmFtZTtcbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tcmVkZWNsYXJlIC0tIGJhY2t3YXJkIGNvbXBhdGliaWxpdHk7IHNlZSBkZXNjcmlwdGlvbiBvbiB0aGUgdG9wIG9mIGdlc3R1cmVIYW5kbGVyQ29tbW9uLnRzIGZpbGVcbmNvbnN0IFRhcEdlc3R1cmVIYW5kbGVyID0gKDAsIF9jcmVhdGVIYW5kbGVyLmRlZmF1bHQpKHtcbiAgbmFtZTogdGFwSGFuZGxlck5hbWUsXG4gIGFsbG93ZWRQcm9wczogWy4uLl9nZXN0dXJlSGFuZGxlckNvbW1vbi5iYXNlR2VzdHVyZUhhbmRsZXJQcm9wcywgLi4udGFwR2VzdHVyZUhhbmRsZXJQcm9wc10sXG4gIGNvbmZpZzoge1xuICAgIHNob3VsZENhbmNlbFdoZW5PdXRzaWRlOiB0cnVlXG4gIH1cbn0pO1xuZXhwb3J0cy5UYXBHZXN0dXJlSGFuZGxlciA9IFRhcEdlc3R1cmVIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9VGFwR2VzdHVyZUhhbmRsZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVGFwR2VzdHVyZUhhbmRsZXIiLCJ0YXBIYW5kbGVyTmFtZSIsInRhcEdlc3R1cmVIYW5kbGVyUHJvcHMiLCJfY3JlYXRlSGFuZGxlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX2dlc3R1cmVIYW5kbGVyQ29tbW9uIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJuYW1lIiwiYWxsb3dlZFByb3BzIiwiYmFzZUdlc3R1cmVIYW5kbGVyUHJvcHMiLCJjb25maWciLCJzaG91bGRDYW5jZWxXaGVuT3V0c2lkZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/TapGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = createHandler;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _isEqual = _interopRequireDefault(__webpack_require__(/*! lodash/isEqual */ \"lodash/isEqual\"));\nvar _RNGestureHandlerModule = _interopRequireDefault(__webpack_require__(/*! ../RNGestureHandlerModule */ \"./node_modules/react-native-gesture-handler/lib/commonjs/RNGestureHandlerModule.web.js\"));\nvar _State = __webpack_require__(/*! ../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _handlersRegistry = __webpack_require__(/*! ./handlersRegistry */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/handlersRegistry.js\");\nvar _gestureHandlerCommon = __webpack_require__(/*! ./gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/utils.js\");\nvar _ActionType = __webpack_require__(/*! ../ActionType */ \"./node_modules/react-native-gesture-handler/lib/commonjs/ActionType.js\");\nvar _PressabilityDebugView = __webpack_require__(/*! ./PressabilityDebugView */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PressabilityDebugView.web.js\");\nvar _UIManagerAny$getView, _UIManagerAny$getView2, _UIManagerAny$getCons;\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst UIManagerAny = _reactNative.UIManager;\nconst customGHEventsConfigFabricAndroid = {\n    topOnGestureHandlerEvent: {\n        registrationName: \"onGestureHandlerEvent\"\n    },\n    topOnGestureHandlerStateChange: {\n        registrationName: \"onGestureHandlerStateChange\"\n    }\n};\nconst customGHEventsConfig = {\n    onGestureHandlerEvent: {\n        registrationName: \"onGestureHandlerEvent\"\n    },\n    onGestureHandlerStateChange: {\n        registrationName: \"onGestureHandlerStateChange\"\n    },\n    // When using React Native Gesture Handler for Animated.event with useNativeDriver: true\n    // on Android with Fabric enabled, the native part still sends the native events to JS\n    // but prefixed with \"top\". We cannot simply rename the events above so they are prefixed\n    // with \"top\" instead of \"on\" because in such case Animated.events would not be registered.\n    // That's why we need to register another pair of event names.\n    // The incoming events will be queued but never handled.\n    // Without this piece of code below, you'll get the following JS error:\n    // Unsupported top level event type \"topOnGestureHandlerEvent\" dispatched\n    ...(0, _utils.isFabric)() && _reactNative.Platform.OS === \"android\" && customGHEventsConfigFabricAndroid\n}; // Add gesture specific events to genericDirectEventTypes object exported from UIManager\n// native module.\n// Once new event types are registered with react it is possible to dispatch these\n// events to all kind of native views.\nUIManagerAny.genericDirectEventTypes = {\n    ...UIManagerAny.genericDirectEventTypes,\n    ...customGHEventsConfig\n}; // In newer versions of RN the `genericDirectEventTypes` is located in the object\n// returned by UIManager.getViewManagerConfig('getConstants') or in older RN UIManager.getConstants(), we need to add it there as well to make\n// it compatible with RN 61+\nconst UIManagerConstants = (_UIManagerAny$getView = (_UIManagerAny$getView2 = UIManagerAny.getViewManagerConfig) === null || _UIManagerAny$getView2 === void 0 ? void 0 : _UIManagerAny$getView2.call(UIManagerAny, \"getConstants\")) !== null && _UIManagerAny$getView !== void 0 ? _UIManagerAny$getView : (_UIManagerAny$getCons = UIManagerAny.getConstants) === null || _UIManagerAny$getCons === void 0 ? void 0 : _UIManagerAny$getCons.call(UIManagerAny);\nif (UIManagerConstants) {\n    UIManagerConstants.genericDirectEventTypes = {\n        ...UIManagerConstants.genericDirectEventTypes,\n        ...customGHEventsConfig\n    };\n} // Wrap JS responder calls and notify gesture handler manager\nconst { setJSResponder: oldSetJSResponder = ()=>{}, clearJSResponder: oldClearJSResponder = ()=>{} } = UIManagerAny;\nUIManagerAny.setJSResponder = (tag, blockNativeResponder)=>{\n    _RNGestureHandlerModule.default.handleSetJSResponder(tag, blockNativeResponder);\n    oldSetJSResponder(tag, blockNativeResponder);\n};\nUIManagerAny.clearJSResponder = ()=>{\n    _RNGestureHandlerModule.default.handleClearJSResponder();\n    oldClearJSResponder();\n};\nlet allowTouches = true;\nconst DEV_ON_ANDROID =  true && _reactNative.Platform.OS === \"android\"; // Toggled inspector blocks touch events in order to allow inspecting on Android\n// This needs to be a global variable in order to set initial state for `allowTouches` property in Handler component\nif (DEV_ON_ANDROID) {\n    _reactNative.DeviceEventEmitter.addListener(\"toggleElementInspector\", ()=>{\n        allowTouches = !allowTouches;\n    });\n}\nfunction hasUnresolvedRefs(props) {\n    // TODO(TS) - add type for extract arg\n    const extract = (refs)=>{\n        if (!Array.isArray(refs)) {\n            return refs && refs.current === null;\n        }\n        return refs.some((r)=>r && r.current === null);\n    };\n    return extract(props[\"simultaneousHandlers\"]) || extract(props[\"waitFor\"]);\n}\nconst stateToPropMappings = {\n    [_State.State.UNDETERMINED]: undefined,\n    [_State.State.BEGAN]: \"onBegan\",\n    [_State.State.FAILED]: \"onFailed\",\n    [_State.State.CANCELLED]: \"onCancelled\",\n    [_State.State.ACTIVE]: \"onActivated\",\n    [_State.State.END]: \"onEnded\"\n};\nconst UNRESOLVED_REFS_RETRY_LIMIT = 1; // TODO(TS) - make sure that BaseGestureHandlerProps doesn't need other generic parameter to work with custom properties.\nfunction createHandler({ name, allowedProps = [], config = {}, transformProps, customNativeProps = [] }) {\n    class Handler extends React.Component {\n        constructor(props){\n            super(props);\n            _defineProperty(this, \"handlerTag\", void 0);\n            _defineProperty(this, \"config\", void 0);\n            _defineProperty(this, \"propsRef\", void 0);\n            _defineProperty(this, \"viewNode\", void 0);\n            _defineProperty(this, \"viewTag\", void 0);\n            _defineProperty(this, \"updateEnqueued\", null);\n            _defineProperty(this, \"inspectorToggleListener\", void 0);\n            _defineProperty(this, \"onGestureHandlerEvent\", (event)=>{\n                if (event.nativeEvent.handlerTag === this.handlerTag) {\n                    if (typeof this.props.onGestureEvent === \"function\") {\n                        var _this$props$onGesture, _this$props;\n                        (_this$props$onGesture = (_this$props = this.props).onGestureEvent) === null || _this$props$onGesture === void 0 ? void 0 : _this$props$onGesture.call(_this$props, event);\n                    }\n                } else {\n                    var _this$props$onGesture2, _this$props2;\n                    (_this$props$onGesture2 = (_this$props2 = this.props).onGestureHandlerEvent) === null || _this$props$onGesture2 === void 0 ? void 0 : _this$props$onGesture2.call(_this$props2, event);\n                }\n            });\n            _defineProperty(this, \"onGestureHandlerStateChange\", (event)=>{\n                if (event.nativeEvent.handlerTag === this.handlerTag) {\n                    if (typeof this.props.onHandlerStateChange === \"function\") {\n                        var _this$props$onHandler, _this$props3;\n                        (_this$props$onHandler = (_this$props3 = this.props).onHandlerStateChange) === null || _this$props$onHandler === void 0 ? void 0 : _this$props$onHandler.call(_this$props3, event);\n                    }\n                    const state = event.nativeEvent.state;\n                    const stateEventName = stateToPropMappings[state];\n                    const eventHandler = stateEventName && this.props[stateEventName];\n                    if (eventHandler && typeof eventHandler === \"function\") {\n                        eventHandler(event);\n                    }\n                } else {\n                    var _this$props$onGesture3, _this$props4;\n                    (_this$props$onGesture3 = (_this$props4 = this.props).onGestureHandlerStateChange) === null || _this$props$onGesture3 === void 0 ? void 0 : _this$props$onGesture3.call(_this$props4, event);\n                }\n            });\n            _defineProperty(this, \"refHandler\", (node)=>{\n                this.viewNode = node;\n                const child = React.Children.only(this.props.children); // TODO(TS) fix ref type\n                const { ref } = child;\n                if (ref !== null) {\n                    if (typeof ref === \"function\") {\n                        ref(node);\n                    } else {\n                        ref.current = node;\n                    }\n                }\n            });\n            _defineProperty(this, \"createGestureHandler\", (newConfig)=>{\n                this.config = newConfig;\n                _RNGestureHandlerModule.default.createGestureHandler(name, this.handlerTag, newConfig);\n            });\n            _defineProperty(this, \"attachGestureHandler\", (newViewTag)=>{\n                this.viewTag = newViewTag;\n                if (_reactNative.Platform.OS === \"web\") {\n                    // typecast due to dynamic resolution, attachGestureHandler should have web version signature in this branch\n                    _RNGestureHandlerModule.default.attachGestureHandler(this.handlerTag, newViewTag, _ActionType.ActionType.JS_FUNCTION_OLD_API, this.propsRef);\n                } else {\n                    (0, _handlersRegistry.registerOldGestureHandler)(this.handlerTag, {\n                        onGestureEvent: this.onGestureHandlerEvent,\n                        onGestureStateChange: this.onGestureHandlerStateChange\n                    });\n                    const actionType = (()=>{\n                        var _this$props5, _this$props6;\n                        if ((_this$props5 = this.props) !== null && _this$props5 !== void 0 && _this$props5.onGestureEvent && \"current\" in this.props.onGestureEvent) {\n                            // Reanimated worklet\n                            return _ActionType.ActionType.REANIMATED_WORKLET;\n                        } else if ((_this$props6 = this.props) !== null && _this$props6 !== void 0 && _this$props6.onGestureEvent && \"__isNative\" in this.props.onGestureEvent) {\n                            // Animated.event with useNativeDriver: true\n                            return _ActionType.ActionType.NATIVE_ANIMATED_EVENT;\n                        } else {\n                            // JS callback or Animated.event with useNativeDriver: false\n                            return _ActionType.ActionType.JS_FUNCTION_OLD_API;\n                        }\n                    })();\n                    _RNGestureHandlerModule.default.attachGestureHandler(this.handlerTag, newViewTag, actionType);\n                }\n                (0, _gestureHandlerCommon.scheduleFlushOperations)();\n            });\n            _defineProperty(this, \"updateGestureHandler\", (newConfig)=>{\n                this.config = newConfig;\n                _RNGestureHandlerModule.default.updateGestureHandler(this.handlerTag, newConfig);\n                (0, _gestureHandlerCommon.scheduleFlushOperations)();\n            });\n            this.handlerTag = (0, _handlersRegistry.getNextHandlerTag)();\n            this.config = {};\n            this.propsRef = /*#__PURE__*/ React.createRef();\n            this.state = {\n                allowTouches\n            };\n            if (props.id) {\n                if (_handlersRegistry.handlerIDToTag[props.id] !== undefined) {\n                    throw new Error(`Handler with ID \"${props.id}\" already registered`);\n                }\n                _handlersRegistry.handlerIDToTag[props.id] = this.handlerTag;\n            }\n        }\n        componentDidMount() {\n            const props = this.props;\n            if (DEV_ON_ANDROID) {\n                this.inspectorToggleListener = _reactNative.DeviceEventEmitter.addListener(\"toggleElementInspector\", ()=>{\n                    this.setState((_)=>({\n                            allowTouches\n                        }));\n                    this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n                });\n            }\n            if (hasUnresolvedRefs(props)) {\n                // If there are unresolved refs (e.g. \".current\" has not yet been set)\n                // passed as `simultaneousHandlers` or `waitFor`, we enqueue a call to\n                // _update method that will try to update native handler props using\n                // setImmediate. This makes it so update() function gets called after all\n                // react components are mounted and we expect the missing ref object to\n                // be resolved by then.\n                this.updateEnqueued = setImmediate(()=>{\n                    this.updateEnqueued = null;\n                    this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n                });\n            }\n            this.createGestureHandler((0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(this.props) : this.props, [\n                ...allowedProps,\n                ...customNativeProps\n            ], config));\n            this.attachGestureHandler((0, _gestureHandlerCommon.findNodeHandle)(this.viewNode)); // TODO(TS) - check if this can be null\n        }\n        componentDidUpdate() {\n            const viewTag = (0, _gestureHandlerCommon.findNodeHandle)(this.viewNode);\n            if (this.viewTag !== viewTag) {\n                this.attachGestureHandler(viewTag); // TODO(TS) - check interaction between _viewTag & findNodeHandle\n            }\n            this.update(UNRESOLVED_REFS_RETRY_LIMIT);\n        }\n        componentWillUnmount() {\n            var _this$inspectorToggle;\n            (_this$inspectorToggle = this.inspectorToggleListener) === null || _this$inspectorToggle === void 0 ? void 0 : _this$inspectorToggle.remove();\n            _RNGestureHandlerModule.default.dropGestureHandler(this.handlerTag);\n            (0, _gestureHandlerCommon.scheduleFlushOperations)();\n            if (this.updateEnqueued) {\n                clearImmediate(this.updateEnqueued);\n            } // We can't use this.props.id directly due to TS generic type narrowing bug, see https://github.com/microsoft/TypeScript/issues/13995 for more context\n            const handlerID = this.props.id;\n            if (handlerID) {\n                // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                delete _handlersRegistry.handlerIDToTag[handlerID];\n            }\n        }\n        update(remainingTries) {\n            const props = this.props; // When ref is set via a function i.e. `ref={(r) => refObject.current = r}` instead of\n            // `ref={refObject}` it's possible that it won't be resolved in time. Seems like trying\n            // again is easy enough fix.\n            if (hasUnresolvedRefs(props) && remainingTries > 0) {\n                this.updateEnqueued = setImmediate(()=>{\n                    this.updateEnqueued = null;\n                    this.update(remainingTries - 1);\n                });\n            } else {\n                const newConfig = (0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(this.props) : this.props, [\n                    ...allowedProps,\n                    ...customNativeProps\n                ], config);\n                if (!(0, _isEqual.default)(this.config, newConfig)) {\n                    this.updateGestureHandler(newConfig);\n                }\n            }\n        }\n        setNativeProps(updates) {\n            const mergedProps = {\n                ...this.props,\n                ...updates\n            };\n            const newConfig = (0, _gestureHandlerCommon.filterConfig)(transformProps ? transformProps(mergedProps) : mergedProps, [\n                ...allowedProps,\n                ...customNativeProps\n            ], config);\n            this.updateGestureHandler(newConfig);\n        }\n        render() {\n            var _this$props$testID;\n            let gestureEventHandler = this.onGestureHandlerEvent; // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n            const { onGestureEvent, onGestureHandlerEvent } = this.props;\n            if (onGestureEvent && typeof onGestureEvent !== \"function\") {\n                // If it's not a method it should be an native Animated.event\n                // object. We set it directly as the handler for the view\n                // In this case nested handlers are not going to be supported\n                if (onGestureHandlerEvent) {\n                    throw new Error(\"Nesting touch handlers with native animated driver is not supported yet\");\n                }\n                gestureEventHandler = onGestureEvent;\n            } else {\n                if (onGestureHandlerEvent && typeof onGestureHandlerEvent !== \"function\") {\n                    throw new Error(\"Nesting touch handlers with native animated driver is not supported yet\");\n                }\n            }\n            let gestureStateEventHandler = this.onGestureHandlerStateChange; // Another instance of https://github.com/microsoft/TypeScript/issues/13995\n            const { onHandlerStateChange, onGestureHandlerStateChange } = this.props;\n            if (onHandlerStateChange && typeof onHandlerStateChange !== \"function\") {\n                // If it's not a method it should be an native Animated.event\n                // object. We set it directly as the handler for the view\n                // In this case nested handlers are not going to be supported\n                if (onGestureHandlerStateChange) {\n                    throw new Error(\"Nesting touch handlers with native animated driver is not supported yet\");\n                }\n                gestureStateEventHandler = onHandlerStateChange;\n            } else {\n                if (onGestureHandlerStateChange && typeof onGestureHandlerStateChange !== \"function\") {\n                    throw new Error(\"Nesting touch handlers with native animated driver is not supported yet\");\n                }\n            }\n            const events = {\n                onGestureHandlerEvent: this.state.allowTouches ? gestureEventHandler : undefined,\n                onGestureHandlerStateChange: this.state.allowTouches ? gestureStateEventHandler : undefined\n            };\n            this.propsRef.current = events;\n            let child = null;\n            try {\n                child = React.Children.only(this.props.children);\n            } catch (e) {\n                throw new Error((0, _utils.tagMessage)(`${name} got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`));\n            }\n            let grandChildren = child.props.children;\n            if ( true && child.type && (child.type === \"RNGestureHandlerButton\" || child.type.name === \"View\" || child.type.displayName === \"View\")) {\n                grandChildren = React.Children.toArray(grandChildren);\n                grandChildren.push(/*#__PURE__*/ React.createElement(_PressabilityDebugView.PressabilityDebugView, {\n                    key: \"pressabilityDebugView\",\n                    color: \"mediumspringgreen\",\n                    hitSlop: child.props.hitSlop\n                }));\n            }\n            return /*#__PURE__*/ React.cloneElement(child, {\n                ref: this.refHandler,\n                collapsable: false,\n                ...(0, _utils.isJestEnv)() ? {\n                    handlerType: name,\n                    handlerTag: this.handlerTag\n                } : {},\n                testID: (_this$props$testID = this.props.testID) !== null && _this$props$testID !== void 0 ? _this$props$testID : child.props.testID,\n                ...events\n            }, grandChildren);\n        }\n    }\n    _defineProperty(Handler, \"displayName\", name);\n    return Handler;\n} //# sourceMappingURL=createHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createNativeWrapper.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createNativeWrapper.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = createNativeWrapper;\nvar React = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _NativeViewGestureHandler = __webpack_require__(/*! ./NativeViewGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/NativeViewGestureHandler.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _extends() {\n    _extends = Object.assign || function(target) {\n        for(var i = 1; i < arguments.length; i++){\n            var source = arguments[i];\n            for(var key in source){\n                if (Object.prototype.hasOwnProperty.call(source, key)) {\n                    target[key] = source[key];\n                }\n            }\n        }\n        return target;\n    };\n    return _extends.apply(this, arguments);\n}\n/*\n * This array should consist of:\n *   - All keys in propTypes from NativeGestureHandler\n *     (and all keys in GestureHandlerPropTypes)\n *   - 'onGestureHandlerEvent'\n *   - 'onGestureHandlerStateChange'\n */ const NATIVE_WRAPPER_PROPS_FILTER = [\n    ..._NativeViewGestureHandler.nativeViewProps,\n    \"onGestureHandlerEvent\",\n    \"onGestureHandlerStateChange\"\n];\nfunction createNativeWrapper(Component, config = {}) {\n    var _Component$render;\n    const ComponentWrapper = /*#__PURE__*/ React.forwardRef((props, ref)=>{\n        // filter out props that should be passed to gesture handler wrapper\n        const gestureHandlerProps = Object.keys(props).reduce((res, key)=>{\n            // TS being overly protective with it's types, see https://github.com/microsoft/TypeScript/issues/26255#issuecomment-458013731 for more info\n            const allowedKeys = NATIVE_WRAPPER_PROPS_FILTER;\n            if (allowedKeys.includes(key)) {\n                // @ts-ignore FIXME(TS)\n                res[key] = props[key];\n            }\n            return res;\n        }, {\n            ...config\n        } // watch out not to modify config\n        );\n        const _ref = (0, React.useRef)();\n        const _gestureHandlerRef = (0, React.useRef)();\n        (0, React.useImperativeHandle)(ref, ()=>{\n            const node = _gestureHandlerRef.current; // add handlerTag for relations config\n            if (_ref.current && node) {\n                // @ts-ignore FIXME(TS) think about createHandler return type\n                _ref.current.handlerTag = node.handlerTag;\n                return _ref.current;\n            }\n            return null;\n        }, [\n            _ref,\n            _gestureHandlerRef\n        ]);\n        return /*#__PURE__*/ React.createElement(_NativeViewGestureHandler.NativeViewGestureHandler, _extends({}, gestureHandlerProps, {\n            // @ts-ignore TODO(TS)\n            ref: _gestureHandlerRef\n        }), /*#__PURE__*/ React.createElement(Component, _extends({}, props, {\n            ref: _ref\n        })));\n    }); // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n    ComponentWrapper.displayName = (Component === null || Component === void 0 ? void 0 : Component.displayName) || (Component === null || Component === void 0 ? void 0 : (_Component$render = Component.render) === null || _Component$render === void 0 ? void 0 : _Component$render.name) || typeof Component === \"string\" && Component || \"ComponentWrapper\";\n    return ComponentWrapper;\n} //# sourceMappingURL=createNativeWrapper.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvY3JlYXRlTmF0aXZlV3JhcHBlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWUsR0FBR0c7QUFFbEIsSUFBSUMsUUFBUUMsd0JBQXdCQyxtQkFBT0EsQ0FBQyxvQkFBTztBQUVuRCxJQUFJQyw0QkFBNEJELG1CQUFPQSxDQUFDLGlJQUE0QjtBQUVwRSxTQUFTRTtJQUE2QixJQUFJLE9BQU9DLFlBQVksWUFBWSxPQUFPO0lBQU0sSUFBSUMsUUFBUSxJQUFJRDtJQUFXRCwyQkFBMkI7UUFBYyxPQUFPRTtJQUFPO0lBQUcsT0FBT0E7QUFBTztBQUV6TCxTQUFTTCx3QkFBd0JNLEdBQUc7SUFBSSxJQUFJQSxPQUFPQSxJQUFJQyxVQUFVLEVBQUU7UUFBRSxPQUFPRDtJQUFLO0lBQUUsSUFBSUEsUUFBUSxRQUFRLE9BQU9BLFFBQVEsWUFBWSxPQUFPQSxRQUFRLFlBQVk7UUFBRSxPQUFPO1lBQUVULFNBQVNTO1FBQUk7SUFBRztJQUFFLElBQUlELFFBQVFGO0lBQTRCLElBQUlFLFNBQVNBLE1BQU1HLEdBQUcsQ0FBQ0YsTUFBTTtRQUFFLE9BQU9ELE1BQU1JLEdBQUcsQ0FBQ0g7SUFBTTtJQUFFLElBQUlJLFNBQVMsQ0FBQztJQUFHLElBQUlDLHdCQUF3QmxCLE9BQU9DLGNBQWMsSUFBSUQsT0FBT21CLHdCQUF3QjtJQUFFLElBQUssSUFBSUMsT0FBT1AsSUFBSztRQUFFLElBQUliLE9BQU9xQixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDVixLQUFLTyxNQUFNO1lBQUUsSUFBSUksT0FBT04sd0JBQXdCbEIsT0FBT21CLHdCQUF3QixDQUFDTixLQUFLTyxPQUFPO1lBQU0sSUFBSUksUUFBU0EsQ0FBQUEsS0FBS1IsR0FBRyxJQUFJUSxLQUFLQyxHQUFHLEdBQUc7Z0JBQUV6QixPQUFPQyxjQUFjLENBQUNnQixRQUFRRyxLQUFLSTtZQUFPLE9BQU87Z0JBQUVQLE1BQU0sQ0FBQ0csSUFBSSxHQUFHUCxHQUFHLENBQUNPLElBQUk7WUFBRTtRQUFFO0lBQUU7SUFBRUgsT0FBT2IsT0FBTyxHQUFHUztJQUFLLElBQUlELE9BQU87UUFBRUEsTUFBTWEsR0FBRyxDQUFDWixLQUFLSTtJQUFTO0lBQUUsT0FBT0E7QUFBUTtBQUV0dUIsU0FBU1M7SUFBYUEsV0FBVzFCLE9BQU8yQixNQUFNLElBQUksU0FBVUMsTUFBTTtRQUFJLElBQUssSUFBSUMsSUFBSSxHQUFHQSxJQUFJQyxVQUFVQyxNQUFNLEVBQUVGLElBQUs7WUFBRSxJQUFJRyxTQUFTRixTQUFTLENBQUNELEVBQUU7WUFBRSxJQUFLLElBQUlULE9BQU9ZLE9BQVE7Z0JBQUUsSUFBSWhDLE9BQU9xQixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDUyxRQUFRWixNQUFNO29CQUFFUSxNQUFNLENBQUNSLElBQUksR0FBR1ksTUFBTSxDQUFDWixJQUFJO2dCQUFFO1lBQUU7UUFBRTtRQUFFLE9BQU9RO0lBQVE7SUFBRyxPQUFPRixTQUFTTyxLQUFLLENBQUMsSUFBSSxFQUFFSDtBQUFZO0FBRTVUOzs7Ozs7Q0FNQyxHQUNELE1BQU1JLDhCQUE4QjtPQUFJekIsMEJBQTBCMEIsZUFBZTtJQUFFO0lBQXlCO0NBQThCO0FBRTFJLFNBQVM5QixvQkFBb0IrQixTQUFTLEVBQUVDLFNBQVMsQ0FBQyxDQUFDO0lBQ2pELElBQUlDO0lBRUosTUFBTUMsbUJBQW1CLFdBQVcsR0FBRWpDLE1BQU1rQyxVQUFVLENBQUMsQ0FBQ0MsT0FBT0M7UUFDN0Qsb0VBQW9FO1FBQ3BFLE1BQU1DLHNCQUFzQjNDLE9BQU80QyxJQUFJLENBQUNILE9BQU9JLE1BQU0sQ0FBQyxDQUFDQyxLQUFLMUI7WUFDMUQsNElBQTRJO1lBQzVJLE1BQU0yQixjQUFjYjtZQUVwQixJQUFJYSxZQUFZQyxRQUFRLENBQUM1QixNQUFNO2dCQUM3Qix1QkFBdUI7Z0JBQ3ZCMEIsR0FBRyxDQUFDMUIsSUFBSSxHQUFHcUIsS0FBSyxDQUFDckIsSUFBSTtZQUN2QjtZQUVBLE9BQU8wQjtRQUNULEdBQUc7WUFBRSxHQUFHVCxNQUFNO1FBQ2QsRUFBRSxpQ0FBaUM7O1FBR25DLE1BQU1ZLE9BQU8sQ0FBQyxHQUFHM0MsTUFBTTRDLE1BQU07UUFFN0IsTUFBTUMscUJBQXFCLENBQUMsR0FBRzdDLE1BQU00QyxNQUFNO1FBRTFDLElBQUc1QyxNQUFNOEMsbUJBQW1CLEVBQUVWLEtBQy9CO1lBQ0UsTUFBTVcsT0FBT0YsbUJBQW1CRyxPQUFPLEVBQUUsc0NBQXNDO1lBRS9FLElBQUlMLEtBQUtLLE9BQU8sSUFBSUQsTUFBTTtnQkFDeEIsNkRBQTZEO2dCQUM3REosS0FBS0ssT0FBTyxDQUFDQyxVQUFVLEdBQUdGLEtBQUtFLFVBQVU7Z0JBQ3pDLE9BQU9OLEtBQUtLLE9BQU87WUFDckI7WUFFQSxPQUFPO1FBQ1QsR0FBRztZQUFDTDtZQUFNRTtTQUFtQjtRQUM3QixPQUFPLFdBQVcsR0FBRTdDLE1BQU1rRCxhQUFhLENBQUMvQywwQkFBMEJnRCx3QkFBd0IsRUFBRS9CLFNBQVMsQ0FBQyxHQUFHaUIscUJBQXFCO1lBQzVILHNCQUFzQjtZQUN0QkQsS0FBS1M7UUFDUCxJQUFJLFdBQVcsR0FBRTdDLE1BQU1rRCxhQUFhLENBQUNwQixXQUFXVixTQUFTLENBQUMsR0FBR2UsT0FBTztZQUNsRUMsS0FBS087UUFDUDtJQUNGLElBQUksbUVBQW1FO0lBRXZFVixpQkFBaUJtQixXQUFXLEdBQUcsQ0FBQ3RCLGNBQWMsUUFBUUEsY0FBYyxLQUFLLElBQUksS0FBSyxJQUFJQSxVQUFVc0IsV0FBVyxLQUMzR3RCLENBQUFBLGNBQWMsUUFBUUEsY0FBYyxLQUFLLElBQUksS0FBSyxJQUFJLENBQUNFLG9CQUFvQkYsVUFBVXVCLE1BQU0sTUFBTSxRQUFRckIsc0JBQXNCLEtBQUssSUFBSSxLQUFLLElBQUlBLGtCQUFrQnNCLElBQUksS0FBSyxPQUFPeEIsY0FBYyxZQUFZQSxhQUFhO0lBQzFOLE9BQU9HO0FBQ1QsRUFDQSwrQ0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2hhbmRsZXJzL2NyZWF0ZU5hdGl2ZVdyYXBwZXIuanM/NjhlNiJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IGNyZWF0ZU5hdGl2ZVdyYXBwZXI7XG5cbnZhciBSZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG5cbnZhciBfTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyID0gcmVxdWlyZShcIi4vTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyXCIpO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiB8fCBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cblxuLypcbiAqIFRoaXMgYXJyYXkgc2hvdWxkIGNvbnNpc3Qgb2Y6XG4gKiAgIC0gQWxsIGtleXMgaW4gcHJvcFR5cGVzIGZyb20gTmF0aXZlR2VzdHVyZUhhbmRsZXJcbiAqICAgICAoYW5kIGFsbCBrZXlzIGluIEdlc3R1cmVIYW5kbGVyUHJvcFR5cGVzKVxuICogICAtICdvbkdlc3R1cmVIYW5kbGVyRXZlbnQnXG4gKiAgIC0gJ29uR2VzdHVyZUhhbmRsZXJTdGF0ZUNoYW5nZSdcbiAqL1xuY29uc3QgTkFUSVZFX1dSQVBQRVJfUFJPUFNfRklMVEVSID0gWy4uLl9OYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXIubmF0aXZlVmlld1Byb3BzLCAnb25HZXN0dXJlSGFuZGxlckV2ZW50JywgJ29uR2VzdHVyZUhhbmRsZXJTdGF0ZUNoYW5nZSddO1xuXG5mdW5jdGlvbiBjcmVhdGVOYXRpdmVXcmFwcGVyKENvbXBvbmVudCwgY29uZmlnID0ge30pIHtcbiAgdmFyIF9Db21wb25lbnQkcmVuZGVyO1xuXG4gIGNvbnN0IENvbXBvbmVudFdyYXBwZXIgPSAvKiNfX1BVUkVfXyovUmVhY3QuZm9yd2FyZFJlZigocHJvcHMsIHJlZikgPT4ge1xuICAgIC8vIGZpbHRlciBvdXQgcHJvcHMgdGhhdCBzaG91bGQgYmUgcGFzc2VkIHRvIGdlc3R1cmUgaGFuZGxlciB3cmFwcGVyXG4gICAgY29uc3QgZ2VzdHVyZUhhbmRsZXJQcm9wcyA9IE9iamVjdC5rZXlzKHByb3BzKS5yZWR1Y2UoKHJlcywga2V5KSA9PiB7XG4gICAgICAvLyBUUyBiZWluZyBvdmVybHkgcHJvdGVjdGl2ZSB3aXRoIGl0J3MgdHlwZXMsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbWljcm9zb2Z0L1R5cGVTY3JpcHQvaXNzdWVzLzI2MjU1I2lzc3VlY29tbWVudC00NTgwMTM3MzEgZm9yIG1vcmUgaW5mb1xuICAgICAgY29uc3QgYWxsb3dlZEtleXMgPSBOQVRJVkVfV1JBUFBFUl9QUk9QU19GSUxURVI7XG5cbiAgICAgIGlmIChhbGxvd2VkS2V5cy5pbmNsdWRlcyhrZXkpKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgRklYTUUoVFMpXG4gICAgICAgIHJlc1trZXldID0gcHJvcHNba2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHJlcztcbiAgICB9LCB7IC4uLmNvbmZpZ1xuICAgIH0gLy8gd2F0Y2ggb3V0IG5vdCB0byBtb2RpZnkgY29uZmlnXG4gICAgKTtcblxuICAgIGNvbnN0IF9yZWYgPSAoMCwgUmVhY3QudXNlUmVmKSgpO1xuXG4gICAgY29uc3QgX2dlc3R1cmVIYW5kbGVyUmVmID0gKDAsIFJlYWN0LnVzZVJlZikoKTtcblxuICAgICgwLCBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKShyZWYsIC8vIEB0cy1pZ25vcmUgVE9ETyhUUykgZGVjaWRlIGhvdyBudWxscyB3b3JrIGluIHRoaXMgY29udGV4dFxuICAgICgpID0+IHtcbiAgICAgIGNvbnN0IG5vZGUgPSBfZ2VzdHVyZUhhbmRsZXJSZWYuY3VycmVudDsgLy8gYWRkIGhhbmRsZXJUYWcgZm9yIHJlbGF0aW9ucyBjb25maWdcblxuICAgICAgaWYgKF9yZWYuY3VycmVudCAmJiBub2RlKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgRklYTUUoVFMpIHRoaW5rIGFib3V0IGNyZWF0ZUhhbmRsZXIgcmV0dXJuIHR5cGVcbiAgICAgICAgX3JlZi5jdXJyZW50LmhhbmRsZXJUYWcgPSBub2RlLmhhbmRsZXJUYWc7XG4gICAgICAgIHJldHVybiBfcmVmLmN1cnJlbnQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBudWxsO1xuICAgIH0sIFtfcmVmLCBfZ2VzdHVyZUhhbmRsZXJSZWZdKTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL1JlYWN0LmNyZWF0ZUVsZW1lbnQoX05hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlci5OYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXIsIF9leHRlbmRzKHt9LCBnZXN0dXJlSGFuZGxlclByb3BzLCB7XG4gICAgICAvLyBAdHMtaWdub3JlIFRPRE8oVFMpXG4gICAgICByZWY6IF9nZXN0dXJlSGFuZGxlclJlZlxuICAgIH0pLCAvKiNfX1BVUkVfXyovUmVhY3QuY3JlYXRlRWxlbWVudChDb21wb25lbnQsIF9leHRlbmRzKHt9LCBwcm9wcywge1xuICAgICAgcmVmOiBfcmVmXG4gICAgfSkpKTtcbiAgfSk7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLWFzc2lnbm1lbnRcblxuICBDb21wb25lbnRXcmFwcGVyLmRpc3BsYXlOYW1lID0gKENvbXBvbmVudCA9PT0gbnVsbCB8fCBDb21wb25lbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IENvbXBvbmVudC5kaXNwbGF5TmFtZSkgfHwgKCAvLyBAdHMtaWdub3JlIGlmIHJlbmRlciBkb2Vzbid0IGV4aXN0IGl0IHdpbGwgcmV0dXJuIHVuZGVmaW5lZCBhbmQgZ28gZnVydGhlclxuICBDb21wb25lbnQgPT09IG51bGwgfHwgQ29tcG9uZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiAoX0NvbXBvbmVudCRyZW5kZXIgPSBDb21wb25lbnQucmVuZGVyKSA9PT0gbnVsbCB8fCBfQ29tcG9uZW50JHJlbmRlciA9PT0gdm9pZCAwID8gdm9pZCAwIDogX0NvbXBvbmVudCRyZW5kZXIubmFtZSkgfHwgdHlwZW9mIENvbXBvbmVudCA9PT0gJ3N0cmluZycgJiYgQ29tcG9uZW50IHx8ICdDb21wb25lbnRXcmFwcGVyJztcbiAgcmV0dXJuIENvbXBvbmVudFdyYXBwZXI7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jcmVhdGVOYXRpdmVXcmFwcGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJjcmVhdGVOYXRpdmVXcmFwcGVyIiwiUmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyIiwiX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlIiwiV2Vha01hcCIsImNhY2hlIiwib2JqIiwiX19lc01vZHVsZSIsImhhcyIsImdldCIsIm5ld09iaiIsImhhc1Byb3BlcnR5RGVzY3JpcHRvciIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImRlc2MiLCJzZXQiLCJfZXh0ZW5kcyIsImFzc2lnbiIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsIk5BVElWRV9XUkFQUEVSX1BST1BTX0ZJTFRFUiIsIm5hdGl2ZVZpZXdQcm9wcyIsIkNvbXBvbmVudCIsImNvbmZpZyIsIl9Db21wb25lbnQkcmVuZGVyIiwiQ29tcG9uZW50V3JhcHBlciIsImZvcndhcmRSZWYiLCJwcm9wcyIsInJlZiIsImdlc3R1cmVIYW5kbGVyUHJvcHMiLCJrZXlzIiwicmVkdWNlIiwicmVzIiwiYWxsb3dlZEtleXMiLCJpbmNsdWRlcyIsIl9yZWYiLCJ1c2VSZWYiLCJfZ2VzdHVyZUhhbmRsZXJSZWYiLCJ1c2VJbXBlcmF0aXZlSGFuZGxlIiwibm9kZSIsImN1cnJlbnQiLCJoYW5kbGVyVGFnIiwiY3JlYXRlRWxlbWVudCIsIk5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlciIsImRpc3BsYXlOYW1lIiwicmVuZGVyIiwibmFtZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createNativeWrapper.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.filterConfig = filterConfig;\nexports.findNodeHandle = findNodeHandle;\nexports.scheduleFlushOperations = scheduleFlushOperations;\nexports.baseGestureHandlerWithMonitorProps = exports.baseGestureHandlerProps = void 0;\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _handlersRegistry = __webpack_require__(/*! ./handlersRegistry */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/handlersRegistry.js\");\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/utils.js\");\nvar _RNGestureHandlerModule = _interopRequireDefault(__webpack_require__(/*! ../RNGestureHandlerModule */ \"./node_modules/react-native-gesture-handler/lib/commonjs/RNGestureHandlerModule.web.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n// Previous types exported gesture handlers as classes which creates an interface and variable, both named the same as class.\n// Without those types, we'd introduce breaking change, forcing users to prefix every handler type specification with typeof\n// e.g. React.createRef<TapGestureHandler> -> React.createRef<typeof TapGestureHandler>.\n// See https://www.typescriptlang.org/docs/handbook/classes.html#constructor-functions for reference.\nconst commonProps = [\n    \"id\",\n    \"enabled\",\n    \"shouldCancelWhenOutside\",\n    \"hitSlop\",\n    \"cancelsTouchesInView\",\n    \"userSelect\"\n];\nconst componentInteractionProps = [\n    \"waitFor\",\n    \"simultaneousHandlers\"\n];\nconst baseGestureHandlerProps = [\n    ...commonProps,\n    ...componentInteractionProps,\n    \"onBegan\",\n    \"onFailed\",\n    \"onCancelled\",\n    \"onActivated\",\n    \"onEnded\",\n    \"onGestureEvent\",\n    \"onHandlerStateChange\"\n];\nexports.baseGestureHandlerProps = baseGestureHandlerProps;\nconst baseGestureHandlerWithMonitorProps = [\n    ...commonProps,\n    \"needsPointerData\",\n    \"manualActivation\"\n];\nexports.baseGestureHandlerWithMonitorProps = baseGestureHandlerWithMonitorProps;\nfunction isConfigParam(param, name) {\n    // param !== Object(param) returns false if `param` is a function\n    // or an object and returns true if `param` is null\n    return param !== undefined && (param !== Object(param) || !(\"__isNative\" in param)) && name !== \"onHandlerStateChange\" && name !== \"onGestureEvent\";\n}\nfunction filterConfig(props, validProps, defaults = {}) {\n    const filteredConfig = {\n        ...defaults\n    };\n    for (const key of validProps){\n        let value = props[key];\n        if (isConfigParam(value, key)) {\n            if (key === \"simultaneousHandlers\" || key === \"waitFor\") {\n                value = transformIntoHandlerTags(props[key]);\n            } else if (key === \"hitSlop\" && typeof value !== \"object\") {\n                value = {\n                    top: value,\n                    left: value,\n                    bottom: value,\n                    right: value\n                };\n            }\n            filteredConfig[key] = value;\n        }\n    }\n    return filteredConfig;\n}\nfunction transformIntoHandlerTags(handlerIDs) {\n    handlerIDs = (0, _utils.toArray)(handlerIDs);\n    if (_reactNative.Platform.OS === \"web\") {\n        return handlerIDs.map(({ current })=>current).filter((handle)=>handle);\n    } // converts handler string IDs into their numeric tags\n    return handlerIDs.map((handlerID)=>{\n        var _handlerID$current;\n        return _handlersRegistry.handlerIDToTag[handlerID] || ((_handlerID$current = handlerID.current) === null || _handlerID$current === void 0 ? void 0 : _handlerID$current.handlerTag) || -1;\n    }).filter((handlerTag)=>handlerTag > 0);\n}\nfunction findNodeHandle(node) {\n    if (_reactNative.Platform.OS === \"web\") {\n        return node;\n    }\n    return (0, _reactNative.findNodeHandle)(node);\n}\nlet scheduledFlushOperationsId = null;\nfunction scheduleFlushOperations() {\n    if (scheduledFlushOperationsId === null) {\n        scheduledFlushOperationsId = requestAnimationFrame(()=>{\n            _RNGestureHandlerModule.default.flushOperations();\n            scheduledFlushOperationsId = null;\n        });\n    }\n} //# sourceMappingURL=gestureHandlerCommon.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GestureDetector = void 0;\nvar _react = _interopRequireWildcard(__webpack_require__(/*! react */ \"react\"));\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nvar _reanimatedWrapper = __webpack_require__(/*! ./reanimatedWrapper */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/reanimatedWrapper.js\");\nvar _handlersRegistry = __webpack_require__(/*! ../handlersRegistry */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/handlersRegistry.js\");\nvar _RNGestureHandlerModule = _interopRequireDefault(__webpack_require__(/*! ../../RNGestureHandlerModule */ \"./node_modules/react-native-gesture-handler/lib/commonjs/RNGestureHandlerModule.web.js\"));\nvar _gestureHandlerCommon = __webpack_require__(/*! ../gestureHandlerCommon */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestureHandlerCommon.js\");\nvar _gestureStateManager = __webpack_require__(/*! ./gestureStateManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureStateManager.web.js\");\nvar _FlingGestureHandler = __webpack_require__(/*! ../FlingGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/FlingGestureHandler.js\");\nvar _ForceTouchGestureHandler = __webpack_require__(/*! ../ForceTouchGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/ForceTouchGestureHandler.js\");\nvar _LongPressGestureHandler = __webpack_require__(/*! ../LongPressGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/LongPressGestureHandler.js\");\nvar _PanGestureHandler = __webpack_require__(/*! ../PanGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PanGestureHandler.js\");\nvar _TapGestureHandler = __webpack_require__(/*! ../TapGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/TapGestureHandler.js\");\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _TouchEventType = __webpack_require__(/*! ../../TouchEventType */ \"./node_modules/react-native-gesture-handler/lib/commonjs/TouchEventType.js\");\nvar _ActionType = __webpack_require__(/*! ../../ActionType */ \"./node_modules/react-native-gesture-handler/lib/commonjs/ActionType.js\");\nvar _utils = __webpack_require__(/*! ../../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/utils.js\");\nvar _getShadowNodeFromRef = __webpack_require__(/*! ../../getShadowNodeFromRef */ \"./node_modules/react-native-gesture-handler/lib/commonjs/getShadowNodeFromRef.web.js\");\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _eventReceiver = __webpack_require__(/*! ./eventReceiver */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/eventReceiver.js\");\nvar _RNRenderer = __webpack_require__(/*! ../../RNRenderer */ \"./node_modules/react-native-gesture-handler/lib/commonjs/RNRenderer.web.js\");\nvar _EnableExperimentalWebImplementation = __webpack_require__(/*! ../../EnableExperimentalWebImplementation */ \"./node_modules/react-native-gesture-handler/lib/commonjs/EnableExperimentalWebImplementation.js\");\nvar _Reanimated$default$c, _Reanimated$default;\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nconst ALLOWED_PROPS = [\n    ..._gestureHandlerCommon.baseGestureHandlerWithMonitorProps,\n    ..._TapGestureHandler.tapGestureHandlerProps,\n    ..._PanGestureHandler.panGestureHandlerProps,\n    ..._PanGestureHandler.panGestureHandlerCustomNativeProps,\n    ..._LongPressGestureHandler.longPressGestureHandlerProps,\n    ..._ForceTouchGestureHandler.forceTouchGestureHandlerProps,\n    ..._FlingGestureHandler.flingGestureHandlerProps\n];\nfunction convertToHandlerTag(ref) {\n    if (typeof ref === \"number\") {\n        return ref;\n    } else if (ref instanceof _gesture.BaseGesture) {\n        return ref.handlerTag;\n    } else {\n        var _ref$current$handlerT, _ref$current;\n        // @ts-ignore in this case it should be a ref either to gesture object or\n        // a gesture handler component, in both cases handlerTag property exists\n        return (_ref$current$handlerT = (_ref$current = ref.current) === null || _ref$current === void 0 ? void 0 : _ref$current.handlerTag) !== null && _ref$current$handlerT !== void 0 ? _ref$current$handlerT : -1;\n    }\n}\nfunction extractValidHandlerTags(interactionGroup) {\n    var _interactionGroup$map, _interactionGroup$map2;\n    return (_interactionGroup$map = interactionGroup === null || interactionGroup === void 0 ? void 0 : (_interactionGroup$map2 = interactionGroup.map(convertToHandlerTag)) === null || _interactionGroup$map2 === void 0 ? void 0 : _interactionGroup$map2.filter((tag)=>tag > 0)) !== null && _interactionGroup$map !== void 0 ? _interactionGroup$map : [];\n}\nfunction dropHandlers(preparedGesture) {\n    for (const handler of preparedGesture.config){\n        _RNGestureHandlerModule.default.dropGestureHandler(handler.handlerTag);\n        (0, _handlersRegistry.unregisterHandler)(handler.handlerTag, handler.config.testId);\n    }\n    (0, _gestureHandlerCommon.scheduleFlushOperations)();\n}\nfunction checkGestureCallbacksForWorklets(gesture) {\n    // if a gesture is explicitly marked to run on the JS thread there is no need to check\n    // if callbacks are worklets as the user is aware they will be ran on the JS thread\n    if (gesture.config.runOnJS) {\n        return;\n    }\n    const areSomeNotWorklets = gesture.handlers.isWorklet.includes(false);\n    const areSomeWorklets = gesture.handlers.isWorklet.includes(true); // if some of the callbacks are worklets and some are not, and the gesture is not\n    // explicitly marked with `.runOnJS(true)` show an error\n    if (areSomeNotWorklets && areSomeWorklets) {\n        console.error((0, _utils.tagMessage)(`Some of the callbacks in the gesture are worklets and some are not. Either make sure that all calbacks are marked as 'worklet' if you wish to run them on the UI thread or use '.runOnJS(true)' modifier on the gesture explicitly to run all callbacks on the JS thread.`));\n    }\n}\nfunction attachHandlers({ preparedGesture, gestureConfig, gesture, viewTag, webEventHandlersRef, mountedRef }) {\n    if (!preparedGesture.firstExecution) {\n        gestureConfig.initialize();\n    } else {\n        preparedGesture.firstExecution = false;\n    } // use setImmediate to extract handlerTags, because all refs should be initialized\n    // when it's ran\n    setImmediate(()=>{\n        if (!mountedRef.current) {\n            return;\n        }\n        gestureConfig.prepare();\n    });\n    for (const handler of gesture){\n        checkGestureCallbacksForWorklets(handler);\n        _RNGestureHandlerModule.default.createGestureHandler(handler.handlerName, handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(handler.config, ALLOWED_PROPS));\n        (0, _handlersRegistry.registerHandler)(handler.handlerTag, handler, handler.config.testId);\n    } // use setImmediate to extract handlerTags, because all refs should be initialized\n    // when it's ran\n    setImmediate(()=>{\n        if (!mountedRef.current) {\n            return;\n        }\n        for (const handler of gesture){\n            let requireToFail = [];\n            if (handler.config.requireToFail) {\n                requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n            }\n            let simultaneousWith = [];\n            if (handler.config.simultaneousWith) {\n                simultaneousWith = extractValidHandlerTags(handler.config.simultaneousWith);\n            }\n            _RNGestureHandlerModule.default.updateGestureHandler(handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(handler.config, ALLOWED_PROPS, {\n                simultaneousHandlers: simultaneousWith,\n                waitFor: requireToFail\n            }));\n        }\n        (0, _gestureHandlerCommon.scheduleFlushOperations)();\n    });\n    preparedGesture.config = gesture;\n    for (const gesture of preparedGesture.config){\n        const actionType = gesture.shouldUseReanimated ? _ActionType.ActionType.REANIMATED_WORKLET : _ActionType.ActionType.JS_FUNCTION_NEW_API;\n        if (_reactNative.Platform.OS === \"web\") {\n            _RNGestureHandlerModule.default.attachGestureHandler(gesture.handlerTag, viewTag, _ActionType.ActionType.JS_FUNCTION_OLD_API, webEventHandlersRef);\n        } else {\n            _RNGestureHandlerModule.default.attachGestureHandler(gesture.handlerTag, viewTag, actionType);\n        }\n    }\n    if (preparedGesture.animatedHandlers) {\n        const isAnimatedGesture = (g)=>g.shouldUseReanimated;\n        preparedGesture.animatedHandlers.value = gesture.filter(isAnimatedGesture).map((g)=>g.handlers);\n    }\n}\nfunction updateHandlers(preparedGesture, gestureConfig, gesture, mountedRef) {\n    gestureConfig.prepare();\n    for(let i = 0; i < gesture.length; i++){\n        const handler = preparedGesture.config[i];\n        checkGestureCallbacksForWorklets(handler); // only update handlerTag when it's actually different, it may be the same\n        // if gesture config object is wrapped with useMemo\n        if (gesture[i].handlerTag !== handler.handlerTag) {\n            gesture[i].handlerTag = handler.handlerTag;\n            gesture[i].handlers.handlerTag = handler.handlerTag;\n        }\n    } // use setImmediate to extract handlerTags, because when it's ran, all refs should be updated\n    // and handlerTags in BaseGesture references should be updated in the loop above (we need to wait\n    // in case of external relations)\n    setImmediate(()=>{\n        if (!mountedRef.current) {\n            return;\n        }\n        for(let i = 0; i < gesture.length; i++){\n            const handler = preparedGesture.config[i];\n            handler.config = gesture[i].config;\n            handler.handlers = gesture[i].handlers;\n            const requireToFail = extractValidHandlerTags(handler.config.requireToFail);\n            const simultaneousWith = extractValidHandlerTags(handler.config.simultaneousWith);\n            _RNGestureHandlerModule.default.updateGestureHandler(handler.handlerTag, (0, _gestureHandlerCommon.filterConfig)(handler.config, ALLOWED_PROPS, {\n                simultaneousHandlers: simultaneousWith,\n                waitFor: requireToFail\n            }));\n            (0, _handlersRegistry.registerHandler)(handler.handlerTag, handler, handler.config.testId);\n        }\n        if (preparedGesture.animatedHandlers) {\n            var _preparedGesture$anim;\n            const previousHandlersValue = (_preparedGesture$anim = preparedGesture.animatedHandlers.value) !== null && _preparedGesture$anim !== void 0 ? _preparedGesture$anim : [];\n            const newHandlersValue = preparedGesture.config.filter((g)=>g.shouldUseReanimated) // ignore gestures that shouldn't run on UI\n            .map((g)=>g.handlers); // if amount of gesture configs changes, we need to update the callbacks in shared value\n            let shouldUpdateSharedValue = previousHandlersValue.length !== newHandlersValue.length;\n            if (!shouldUpdateSharedValue) {\n                // if the amount is the same, we need to check if any of the configs inside has changed\n                for(let i = 0; i < newHandlersValue.length; i++){\n                    if (newHandlersValue[i].gestureId !== previousHandlersValue[i].gestureId) {\n                        shouldUpdateSharedValue = true;\n                        break;\n                    }\n                }\n            }\n            if (shouldUpdateSharedValue) {\n                preparedGesture.animatedHandlers.value = newHandlersValue;\n            }\n        }\n        (0, _gestureHandlerCommon.scheduleFlushOperations)();\n    });\n}\nfunction needsToReattach(preparedGesture, gesture) {\n    if (gesture.length !== preparedGesture.config.length) {\n        return true;\n    }\n    for(let i = 0; i < gesture.length; i++){\n        if (gesture[i].handlerName !== preparedGesture.config[i].handlerName || gesture[i].shouldUseReanimated !== preparedGesture.config[i].shouldUseReanimated) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isStateChangeEvent(event) {\n    \"worklet\"; // @ts-ignore Yes, the oldState prop is missing on GestureTouchEvent, that's the point\n    return event.oldState != null;\n}\nfunction isTouchEvent(event) {\n    \"worklet\";\n    return event.eventType != null;\n}\nfunction getHandler(type, gesture) {\n    \"worklet\";\n    switch(type){\n        case _gesture.CALLBACK_TYPE.BEGAN:\n            return gesture.onBegin;\n        case _gesture.CALLBACK_TYPE.START:\n            return gesture.onStart;\n        case _gesture.CALLBACK_TYPE.UPDATE:\n            return gesture.onUpdate;\n        case _gesture.CALLBACK_TYPE.CHANGE:\n            return gesture.onChange;\n        case _gesture.CALLBACK_TYPE.END:\n            return gesture.onEnd;\n        case _gesture.CALLBACK_TYPE.FINALIZE:\n            return gesture.onFinalize;\n        case _gesture.CALLBACK_TYPE.TOUCHES_DOWN:\n            return gesture.onTouchesDown;\n        case _gesture.CALLBACK_TYPE.TOUCHES_MOVE:\n            return gesture.onTouchesMove;\n        case _gesture.CALLBACK_TYPE.TOUCHES_UP:\n            return gesture.onTouchesUp;\n        case _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED:\n            return gesture.onTouchesCancelled;\n    }\n}\nfunction touchEventTypeToCallbackType(eventType) {\n    \"worklet\";\n    switch(eventType){\n        case _TouchEventType.TouchEventType.TOUCHES_DOWN:\n            return _gesture.CALLBACK_TYPE.TOUCHES_DOWN;\n        case _TouchEventType.TouchEventType.TOUCHES_MOVE:\n            return _gesture.CALLBACK_TYPE.TOUCHES_MOVE;\n        case _TouchEventType.TouchEventType.TOUCHES_UP:\n            return _gesture.CALLBACK_TYPE.TOUCHES_UP;\n        case _TouchEventType.TouchEventType.TOUCHES_CANCELLED:\n            return _gesture.CALLBACK_TYPE.TOUCHES_CANCELLED;\n    }\n    return _gesture.CALLBACK_TYPE.UNDEFINED;\n}\nfunction runWorklet(type, gesture, event, ...args) {\n    \"worklet\";\n    const handler = getHandler(type, gesture);\n    if (gesture.isWorklet[type]) {\n        // @ts-ignore Logic below makes sure the correct event is send to the\n        // correct handler.\n        handler === null || handler === void 0 ? void 0 : handler(event, ...args);\n    } else if (handler) {\n        console.warn((0, _utils.tagMessage)(\"Animated gesture callback must be a worklet\"));\n    }\n}\nfunction useAnimatedGesture(preparedGesture, needsRebuild) {\n    if (!_reanimatedWrapper.Reanimated) {\n        return;\n    } // Hooks are called conditionally, but the condition is whether the\n    // react-native-reanimated is installed, which shouldn't change while running\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    const sharedHandlersCallbacks = _reanimatedWrapper.Reanimated.useSharedValue(null); // eslint-disable-next-line react-hooks/rules-of-hooks\n    const lastUpdateEvent = _reanimatedWrapper.Reanimated.useSharedValue([]); // not every gesture needs a state controller, init them lazily\n    const stateControllers = [];\n    const callback = (event)=>{\n        \"worklet\";\n        const currentCallback = sharedHandlersCallbacks.value;\n        if (!currentCallback) {\n            return;\n        }\n        for(let i = 0; i < currentCallback.length; i++){\n            const gesture = currentCallback[i];\n            if (event.handlerTag === gesture.handlerTag) {\n                if (isStateChangeEvent(event)) {\n                    if (event.oldState === _State.State.UNDETERMINED && event.state === _State.State.BEGAN) {\n                        runWorklet(_gesture.CALLBACK_TYPE.BEGAN, gesture, event);\n                    } else if ((event.oldState === _State.State.BEGAN || event.oldState === _State.State.UNDETERMINED) && event.state === _State.State.ACTIVE) {\n                        runWorklet(_gesture.CALLBACK_TYPE.START, gesture, event);\n                        lastUpdateEvent.value[gesture.handlerTag] = undefined;\n                    } else if (event.oldState !== event.state && event.state === _State.State.END) {\n                        if (event.oldState === _State.State.ACTIVE) {\n                            runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, true);\n                        }\n                        runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, true);\n                    } else if ((event.state === _State.State.FAILED || event.state === _State.State.CANCELLED) && event.state !== event.oldState) {\n                        if (event.oldState === _State.State.ACTIVE) {\n                            runWorklet(_gesture.CALLBACK_TYPE.END, gesture, event, false);\n                        }\n                        runWorklet(_gesture.CALLBACK_TYPE.FINALIZE, gesture, event, false);\n                    }\n                } else if (isTouchEvent(event)) {\n                    if (!stateControllers[i]) {\n                        stateControllers[i] = _gestureStateManager.GestureStateManager.create(event.handlerTag);\n                    }\n                    if (event.eventType !== _TouchEventType.TouchEventType.UNDETERMINED) {\n                        runWorklet(touchEventTypeToCallbackType(event.eventType), gesture, event, stateControllers[i]);\n                    }\n                } else {\n                    runWorklet(_gesture.CALLBACK_TYPE.UPDATE, gesture, event);\n                    if (gesture.onChange && gesture.changeEventCalculator) {\n                        var _gesture$changeEventC;\n                        runWorklet(_gesture.CALLBACK_TYPE.CHANGE, gesture, (_gesture$changeEventC = gesture.changeEventCalculator) === null || _gesture$changeEventC === void 0 ? void 0 : _gesture$changeEventC.call(gesture, event, lastUpdateEvent.value[gesture.handlerTag]));\n                        lastUpdateEvent.value[gesture.handlerTag] = event;\n                    }\n                }\n            }\n        }\n    }; // eslint-disable-next-line react-hooks/rules-of-hooks\n    const event = _reanimatedWrapper.Reanimated.useEvent(callback, [\n        \"onGestureHandlerStateChange\",\n        \"onGestureHandlerEvent\"\n    ], needsRebuild);\n    preparedGesture.animatedEventHandler = event;\n    preparedGesture.animatedHandlers = sharedHandlersCallbacks;\n} // eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction validateDetectorChildren(ref) {\n    // finds the first native view under the Wrap component and traverses the fiber tree upwards\n    // to check whether there is more than one native view as a pseudo-direct child of GestureDetector\n    // i.e. this is not ok:\n    //            Wrap\n    //             |\n    //            / \\\n    //           /   \\\n    //          /     \\\n    //         /       \\\n    //   NativeView  NativeView\n    //\n    // but this is fine:\n    //            Wrap\n    //             |\n    //         NativeView\n    //             |\n    //            / \\\n    //           /   \\\n    //          /     \\\n    //         /       \\\n    //   NativeView  NativeView\n    if ( true && _reactNative.Platform.OS !== \"web\") {\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        const wrapType = _utils.REACT_NATIVE_VERSION.minor > 63 || _utils.REACT_NATIVE_VERSION.major > 0 ? ref._reactInternals.elementType : ref._reactInternalFiber.elementType; // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n        let instance = _RNRenderer.RNRenderer.findHostInstance_DEPRECATED(ref)._internalFiberInstanceHandleDEV; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        while(instance && instance.elementType !== wrapType){\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (instance.sibling) {\n                throw new Error(\"GestureDetector has more than one native view as its children. This can happen if you are using a custom component that renders multiple views, like React.Fragment. You should wrap content of GestureDetector with a <View> or <Animated.View>.\");\n            } // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment, @typescript-eslint/no-unsafe-member-access\n            instance = instance.return;\n        }\n    }\n}\nconst applyUserSelectProp = (userSelect, gesture)=>{\n    for (const g of gesture.toGestureArray()){\n        g.config.userSelect = userSelect;\n    }\n};\nconst GestureDetector = (props)=>{\n    const gestureConfig = props.gesture;\n    if (props.userSelect) {\n        applyUserSelectProp(props.userSelect, gestureConfig);\n    }\n    const gesture = gestureConfig.toGestureArray();\n    const useReanimatedHook = gesture.some((g)=>g.shouldUseReanimated); // store state in ref to prevent unnecessary renders\n    const state = (0, _react.useRef)({\n        firstRender: true,\n        viewRef: null,\n        previousViewTag: -1,\n        forceReattach: false\n    }).current;\n    const mountedRef = (0, _react.useRef)(false);\n    const webEventHandlersRef = (0, _react.useRef)({\n        onGestureHandlerEvent: (e)=>{\n            (0, _eventReceiver.onGestureHandlerEvent)(e.nativeEvent);\n        },\n        onGestureHandlerStateChange: (0, _EnableExperimentalWebImplementation.isExperimentalWebImplementationEnabled)() ? (e)=>{\n            (0, _eventReceiver.onGestureHandlerEvent)(e.nativeEvent);\n        } : undefined\n    });\n    const [renderState, setRenderState] = (0, _react.useState)(false);\n    function forceRender() {\n        setRenderState(!renderState);\n    }\n    const preparedGesture = _react.default.useRef({\n        config: gesture,\n        animatedEventHandler: null,\n        animatedHandlers: null,\n        firstExecution: true,\n        useReanimatedHook: useReanimatedHook\n    }).current;\n    if (useReanimatedHook !== preparedGesture.useReanimatedHook) {\n        throw new Error((0, _utils.tagMessage)(\"You cannot change the thread the callbacks are ran on while the app is running\"));\n    }\n    function onHandlersUpdate(skipConfigUpdate) {\n        // if the underlying view has changed we need to reattach handlers to the new view\n        const viewTag = (0, _gestureHandlerCommon.findNodeHandle)(state.viewRef);\n        const forceReattach = viewTag !== state.previousViewTag;\n        if (forceReattach || needsToReattach(preparedGesture, gesture)) {\n            validateDetectorChildren(state.viewRef);\n            dropHandlers(preparedGesture);\n            attachHandlers({\n                preparedGesture,\n                gestureConfig,\n                gesture,\n                webEventHandlersRef,\n                viewTag,\n                mountedRef\n            });\n            state.previousViewTag = viewTag;\n            state.forceReattach = forceReattach;\n            if (forceReattach) {\n                forceRender();\n            }\n        } else if (!skipConfigUpdate) {\n            updateHandlers(preparedGesture, gestureConfig, gesture, mountedRef);\n        }\n    } // Reanimated event should be rebuilt only when gestures are reattached, otherwise\n    // config update will be enough as all necessary items are stored in shared values anyway\n    const needsToRebuildReanimatedEvent = preparedGesture.firstExecution || needsToReattach(preparedGesture, gesture) || state.forceReattach;\n    state.forceReattach = false;\n    if (preparedGesture.firstExecution) {\n        gestureConfig.initialize();\n    }\n    if (useReanimatedHook) {\n        // Whether animatedGesture or gesture is used shouldn't change while the app is running\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        useAnimatedGesture(preparedGesture, needsToRebuildReanimatedEvent);\n    }\n    (0, _react.useEffect)(()=>{\n        const viewTag = (0, _gestureHandlerCommon.findNodeHandle)(state.viewRef);\n        state.firstRender = true;\n        mountedRef.current = true;\n        validateDetectorChildren(state.viewRef);\n        attachHandlers({\n            preparedGesture,\n            gestureConfig,\n            gesture,\n            webEventHandlersRef,\n            viewTag,\n            mountedRef\n        });\n        return ()=>{\n            mountedRef.current = false;\n            dropHandlers(preparedGesture);\n        };\n    }, []);\n    (0, _react.useEffect)(()=>{\n        if (!state.firstRender) {\n            onHandlersUpdate();\n        } else {\n            state.firstRender = false;\n        }\n    }, [\n        props\n    ]);\n    const refFunction = (ref)=>{\n        if (ref !== null) {\n            // @ts-ignore Just setting the view ref\n            state.viewRef = ref; // if it's the first render, also set the previousViewTag to prevent reattaching gestures when not needed\n            if (state.previousViewTag === -1) {\n                state.previousViewTag = (0, _gestureHandlerCommon.findNodeHandle)(state.viewRef);\n            } // pass true as `skipConfigUpdate`, here we only want to trigger the eventual reattaching of handlers\n            // in case the view has changed, while config update would be handled be the `useEffect` above\n            onHandlersUpdate(true);\n            if ((0, _utils.isFabric)()) {\n                const node = (0, _getShadowNodeFromRef.getShadowNodeFromRef)(ref);\n                if (global.isFormsStackingContext(node) === false) {\n                    console.error((0, _utils.tagMessage)(\"GestureDetector has received a child that may get view-flattened. \" + \"\\nTo prevent it from misbehaving you need to wrap the child with a `<View collapsable={false}>`.\"));\n                }\n            }\n        }\n    };\n    if (useReanimatedHook) {\n        return /*#__PURE__*/ _react.default.createElement(AnimatedWrap, {\n            ref: refFunction,\n            onGestureHandlerEvent: preparedGesture.animatedEventHandler\n        }, props.children);\n    } else {\n        return /*#__PURE__*/ _react.default.createElement(Wrap, {\n            ref: refFunction\n        }, props.children);\n    }\n};\nexports.GestureDetector = GestureDetector;\nclass Wrap extends _react.default.Component {\n    render() {\n        try {\n            // I don't think that fighting with types over such a simple function is worth it\n            // The only thing it does is add 'collapsable: false' to the child component\n            // to make sure it is in the native view hierarchy so the detector can find\n            // correct viewTag to attach to.\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const child = _react.default.Children.only(this.props.children);\n            return /*#__PURE__*/ _react.default.cloneElement(child, {\n                collapsable: false\n            }, child.props.children);\n        } catch (e) {\n            throw new Error((0, _utils.tagMessage)(`GestureDetector got more than one view as a child. If you want the gesture to work on multiple views, wrap them with a common parent and attach the gesture to that view.`));\n        }\n    }\n}\nconst AnimatedWrap = (_Reanimated$default$c = _reanimatedWrapper.Reanimated === null || _reanimatedWrapper.Reanimated === void 0 ? void 0 : (_Reanimated$default = _reanimatedWrapper.Reanimated.default) === null || _Reanimated$default === void 0 ? void 0 : _Reanimated$default.createAnimatedComponent(Wrap)) !== null && _Reanimated$default$c !== void 0 ? _Reanimated$default$c : Wrap; //# sourceMappingURL=GestureDetector.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/eventReceiver.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/eventReceiver.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.onGestureHandlerEvent = onGestureHandlerEvent;\nexports.startListening = startListening;\nexports.stopListening = stopListening;\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _TouchEventType = __webpack_require__(/*! ../../TouchEventType */ \"./node_modules/react-native-gesture-handler/lib/commonjs/TouchEventType.js\");\nvar _handlersRegistry = __webpack_require__(/*! ../handlersRegistry */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/handlersRegistry.js\");\nvar _gestureStateManager = __webpack_require__(/*! ./gestureStateManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureStateManager.web.js\");\nlet gestureHandlerEventSubscription = null;\nlet gestureHandlerStateChangeEventSubscription = null;\nconst gestureStateManagers = new Map();\nconst lastUpdateEvent = [];\nfunction isStateChangeEvent(event) {\n    // @ts-ignore oldState doesn't exist on GestureTouchEvent and that's the point\n    return event.oldState != null;\n}\nfunction isTouchEvent(event) {\n    return event.eventType != null;\n}\nfunction onGestureHandlerEvent(event) {\n    var _handler$handlers7, _handler$handlers7$on, _handler$handlers8, _handler$handlers8$on, _handler$handlers9, _handler$handlers9$on, _handler$handlers10, _handler$handlers10$o;\n    const handler = (0, _handlersRegistry.findHandler)(event.handlerTag);\n    if (handler) {\n        if (isStateChangeEvent(event)) {\n            if (event.oldState === _State.State.UNDETERMINED && event.state === _State.State.BEGAN) {\n                var _handler$handlers$onB, _handler$handlers;\n                (_handler$handlers$onB = (_handler$handlers = handler.handlers).onBegin) === null || _handler$handlers$onB === void 0 ? void 0 : _handler$handlers$onB.call(_handler$handlers, event);\n            } else if ((event.oldState === _State.State.BEGAN || event.oldState === _State.State.UNDETERMINED) && event.state === _State.State.ACTIVE) {\n                var _handler$handlers$onS, _handler$handlers2;\n                (_handler$handlers$onS = (_handler$handlers2 = handler.handlers).onStart) === null || _handler$handlers$onS === void 0 ? void 0 : _handler$handlers$onS.call(_handler$handlers2, event);\n                lastUpdateEvent[handler.handlers.handlerTag] = event;\n            } else if (event.oldState !== event.state && event.state === _State.State.END) {\n                var _handler$handlers$onF, _handler$handlers4;\n                if (event.oldState === _State.State.ACTIVE) {\n                    var _handler$handlers$onE, _handler$handlers3;\n                    (_handler$handlers$onE = (_handler$handlers3 = handler.handlers).onEnd) === null || _handler$handlers$onE === void 0 ? void 0 : _handler$handlers$onE.call(_handler$handlers3, event, true);\n                }\n                (_handler$handlers$onF = (_handler$handlers4 = handler.handlers).onFinalize) === null || _handler$handlers$onF === void 0 ? void 0 : _handler$handlers$onF.call(_handler$handlers4, event, true);\n                lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n            } else if ((event.state === _State.State.FAILED || event.state === _State.State.CANCELLED) && event.oldState !== event.state) {\n                var _handler$handlers$onF2, _handler$handlers6;\n                if (event.oldState === _State.State.ACTIVE) {\n                    var _handler$handlers$onE2, _handler$handlers5;\n                    (_handler$handlers$onE2 = (_handler$handlers5 = handler.handlers).onEnd) === null || _handler$handlers$onE2 === void 0 ? void 0 : _handler$handlers$onE2.call(_handler$handlers5, event, false);\n                }\n                (_handler$handlers$onF2 = (_handler$handlers6 = handler.handlers).onFinalize) === null || _handler$handlers$onF2 === void 0 ? void 0 : _handler$handlers$onF2.call(_handler$handlers6, event, false);\n                gestureStateManagers.delete(event.handlerTag);\n                lastUpdateEvent[handler.handlers.handlerTag] = undefined;\n            }\n        } else if (isTouchEvent(event)) {\n            if (!gestureStateManagers.has(event.handlerTag)) {\n                gestureStateManagers.set(event.handlerTag, _gestureStateManager.GestureStateManager.create(event.handlerTag));\n            } // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            const manager = gestureStateManagers.get(event.handlerTag);\n            switch(event.eventType){\n                case _TouchEventType.TouchEventType.TOUCHES_DOWN:\n                    (_handler$handlers7 = handler.handlers) === null || _handler$handlers7 === void 0 ? void 0 : (_handler$handlers7$on = _handler$handlers7.onTouchesDown) === null || _handler$handlers7$on === void 0 ? void 0 : _handler$handlers7$on.call(_handler$handlers7, event, manager);\n                    break;\n                case _TouchEventType.TouchEventType.TOUCHES_MOVE:\n                    (_handler$handlers8 = handler.handlers) === null || _handler$handlers8 === void 0 ? void 0 : (_handler$handlers8$on = _handler$handlers8.onTouchesMove) === null || _handler$handlers8$on === void 0 ? void 0 : _handler$handlers8$on.call(_handler$handlers8, event, manager);\n                    break;\n                case _TouchEventType.TouchEventType.TOUCHES_UP:\n                    (_handler$handlers9 = handler.handlers) === null || _handler$handlers9 === void 0 ? void 0 : (_handler$handlers9$on = _handler$handlers9.onTouchesUp) === null || _handler$handlers9$on === void 0 ? void 0 : _handler$handlers9$on.call(_handler$handlers9, event, manager);\n                    break;\n                case _TouchEventType.TouchEventType.TOUCHES_CANCELLED:\n                    (_handler$handlers10 = handler.handlers) === null || _handler$handlers10 === void 0 ? void 0 : (_handler$handlers10$o = _handler$handlers10.onTouchesCancelled) === null || _handler$handlers10$o === void 0 ? void 0 : _handler$handlers10$o.call(_handler$handlers10, event, manager);\n                    break;\n            }\n        } else {\n            var _handler$handlers$onU, _handler$handlers11;\n            (_handler$handlers$onU = (_handler$handlers11 = handler.handlers).onUpdate) === null || _handler$handlers$onU === void 0 ? void 0 : _handler$handlers$onU.call(_handler$handlers11, event);\n            if (handler.handlers.onChange && handler.handlers.changeEventCalculator) {\n                var _handler$handlers$onC, _handler$handlers12, _handler$handlers$cha, _handler$handlers13;\n                (_handler$handlers$onC = (_handler$handlers12 = handler.handlers).onChange) === null || _handler$handlers$onC === void 0 ? void 0 : _handler$handlers$onC.call(_handler$handlers12, (_handler$handlers$cha = (_handler$handlers13 = handler.handlers).changeEventCalculator) === null || _handler$handlers$cha === void 0 ? void 0 : _handler$handlers$cha.call(_handler$handlers13, event, lastUpdateEvent[handler.handlers.handlerTag]));\n                lastUpdateEvent[handler.handlers.handlerTag] = event;\n            }\n        }\n    } else {\n        const oldHandler = (0, _handlersRegistry.findOldGestureHandler)(event.handlerTag);\n        if (oldHandler) {\n            const nativeEvent = {\n                nativeEvent: event\n            };\n            if (isStateChangeEvent(event)) {\n                oldHandler.onGestureStateChange(nativeEvent);\n            } else {\n                oldHandler.onGestureEvent(nativeEvent);\n            }\n            return;\n        }\n    }\n}\nfunction startListening() {\n    stopListening();\n    gestureHandlerEventSubscription = _reactNative.DeviceEventEmitter.addListener(\"onGestureHandlerEvent\", onGestureHandlerEvent);\n    gestureHandlerStateChangeEventSubscription = _reactNative.DeviceEventEmitter.addListener(\"onGestureHandlerStateChange\", onGestureHandlerEvent);\n}\nfunction stopListening() {\n    if (gestureHandlerEventSubscription) {\n        gestureHandlerEventSubscription.remove();\n        gestureHandlerEventSubscription = null;\n    }\n    if (gestureHandlerStateChangeEventSubscription) {\n        gestureHandlerStateChangeEventSubscription.remove();\n        gestureHandlerStateChangeEventSubscription = null;\n    }\n} //# sourceMappingURL=eventReceiver.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/eventReceiver.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/flingGesture.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/flingGesture.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.FlingGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass FlingGesture extends _gesture.BaseGesture {\n    constructor(){\n        super();\n        _defineProperty(this, \"config\", {});\n        this.handlerName = \"FlingGestureHandler\";\n    }\n    numberOfPointers(pointers) {\n        this.config.numberOfPointers = pointers;\n        return this;\n    }\n    direction(direction) {\n        this.config.direction = direction;\n        return this;\n    }\n}\nexports.FlingGesture = FlingGesture; //# sourceMappingURL=flingGesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvZmxpbmdHZXN0dXJlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxvQkFBb0IsR0FBRyxLQUFLO0FBRTVCLElBQUlHLFdBQVdDLG1CQUFPQSxDQUFDLHdHQUFXO0FBRWxDLFNBQVNDLGdCQUFnQkMsR0FBRyxFQUFFQyxHQUFHLEVBQUVOLEtBQUs7SUFBSSxJQUFJTSxPQUFPRCxLQUFLO1FBQUVSLE9BQU9DLGNBQWMsQ0FBQ08sS0FBS0MsS0FBSztZQUFFTixPQUFPQTtZQUFPTyxZQUFZO1lBQU1DLGNBQWM7WUFBTUMsVUFBVTtRQUFLO0lBQUksT0FBTztRQUFFSixHQUFHLENBQUNDLElBQUksR0FBR047SUFBTztJQUFFLE9BQU9LO0FBQUs7QUFFaE4sTUFBTUoscUJBQXFCQyxTQUFTUSxXQUFXO0lBQzdDQyxhQUFjO1FBQ1osS0FBSztRQUVMUCxnQkFBZ0IsSUFBSSxFQUFFLFVBQVUsQ0FBQztRQUVqQyxJQUFJLENBQUNRLFdBQVcsR0FBRztJQUNyQjtJQUVBQyxpQkFBaUJDLFFBQVEsRUFBRTtRQUN6QixJQUFJLENBQUNDLE1BQU0sQ0FBQ0YsZ0JBQWdCLEdBQUdDO1FBQy9CLE9BQU8sSUFBSTtJQUNiO0lBRUFFLFVBQVVBLFNBQVMsRUFBRTtRQUNuQixJQUFJLENBQUNELE1BQU0sQ0FBQ0MsU0FBUyxHQUFHQTtRQUN4QixPQUFPLElBQUk7SUFDYjtBQUVGO0FBRUFqQixvQkFBb0IsR0FBR0UsY0FDdkIsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZml0X3BsdXNfcGx1cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy9oYW5kbGVycy9nZXN0dXJlcy9mbGluZ0dlc3R1cmUuanM/NTdmOSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRmxpbmdHZXN0dXJlID0gdm9pZCAwO1xuXG52YXIgX2dlc3R1cmUgPSByZXF1aXJlKFwiLi9nZXN0dXJlXCIpO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5jbGFzcyBGbGluZ0dlc3R1cmUgZXh0ZW5kcyBfZ2VzdHVyZS5CYXNlR2VzdHVyZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb25maWdcIiwge30pO1xuXG4gICAgdGhpcy5oYW5kbGVyTmFtZSA9ICdGbGluZ0dlc3R1cmVIYW5kbGVyJztcbiAgfVxuXG4gIG51bWJlck9mUG9pbnRlcnMocG9pbnRlcnMpIHtcbiAgICB0aGlzLmNvbmZpZy5udW1iZXJPZlBvaW50ZXJzID0gcG9pbnRlcnM7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBkaXJlY3Rpb24oZGlyZWN0aW9uKSB7XG4gICAgdGhpcy5jb25maWcuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbn1cblxuZXhwb3J0cy5GbGluZ0dlc3R1cmUgPSBGbGluZ0dlc3R1cmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mbGluZ0dlc3R1cmUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRmxpbmdHZXN0dXJlIiwiX2dlc3R1cmUiLCJyZXF1aXJlIiwiX2RlZmluZVByb3BlcnR5Iiwib2JqIiwia2V5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiQmFzZUdlc3R1cmUiLCJjb25zdHJ1Y3RvciIsImhhbmRsZXJOYW1lIiwibnVtYmVyT2ZQb2ludGVycyIsInBvaW50ZXJzIiwiY29uZmlnIiwiZGlyZWN0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/flingGesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/forceTouchGesture.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/forceTouchGesture.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ForceTouchGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction changeEventCalculator(current, previous) {\n    \"worklet\";\n    let changePayload;\n    if (previous === undefined) {\n        changePayload = {\n            forceChange: current.force\n        };\n    } else {\n        changePayload = {\n            forceChange: current.force - previous.force\n        };\n    }\n    return {\n        ...current,\n        ...changePayload\n    };\n}\nclass ForceTouchGesture extends _gesture.ContinousBaseGesture {\n    constructor(){\n        super();\n        _defineProperty(this, \"config\", {});\n        this.handlerName = \"ForceTouchGestureHandler\";\n    }\n    minForce(force) {\n        this.config.minForce = force;\n        return this;\n    }\n    maxForce(force) {\n        this.config.maxForce = force;\n        return this;\n    }\n    feedbackOnActivation(value) {\n        this.config.feedbackOnActivation = value;\n        return this;\n    }\n    onChange(callback) {\n        // @ts-ignore TS being overprotective, ForceTouchGestureHandlerEventPayload is Record\n        this.handlers.changeEventCalculator = changeEventCalculator;\n        return super.onChange(callback);\n    }\n}\nexports.ForceTouchGesture = ForceTouchGesture; //# sourceMappingURL=forceTouchGesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvZm9yY2VUb3VjaEdlc3R1cmUuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELHlCQUF5QixHQUFHLEtBQUs7QUFFakMsSUFBSUcsV0FBV0MsbUJBQU9BLENBQUMsd0dBQVc7QUFFbEMsU0FBU0MsZ0JBQWdCQyxHQUFHLEVBQUVDLEdBQUcsRUFBRU4sS0FBSztJQUFJLElBQUlNLE9BQU9ELEtBQUs7UUFBRVIsT0FBT0MsY0FBYyxDQUFDTyxLQUFLQyxLQUFLO1lBQUVOLE9BQU9BO1lBQU9PLFlBQVk7WUFBTUMsY0FBYztZQUFNQyxVQUFVO1FBQUs7SUFBSSxPQUFPO1FBQUVKLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHTjtJQUFPO0lBQUUsT0FBT0s7QUFBSztBQUVoTixTQUFTSyxzQkFBc0JDLE9BQU8sRUFBRUMsUUFBUTtJQUM5QztJQUVBLElBQUlDO0lBRUosSUFBSUQsYUFBYUUsV0FBVztRQUMxQkQsZ0JBQWdCO1lBQ2RFLGFBQWFKLFFBQVFLLEtBQUs7UUFDNUI7SUFDRixPQUFPO1FBQ0xILGdCQUFnQjtZQUNkRSxhQUFhSixRQUFRSyxLQUFLLEdBQUdKLFNBQVNJLEtBQUs7UUFDN0M7SUFDRjtJQUVBLE9BQU87UUFBRSxHQUFHTCxPQUFPO1FBQ2pCLEdBQUdFLGFBQWE7SUFDbEI7QUFDRjtBQUVBLE1BQU1aLDBCQUEwQkMsU0FBU2Usb0JBQW9CO0lBQzNEQyxhQUFjO1FBQ1osS0FBSztRQUVMZCxnQkFBZ0IsSUFBSSxFQUFFLFVBQVUsQ0FBQztRQUVqQyxJQUFJLENBQUNlLFdBQVcsR0FBRztJQUNyQjtJQUVBQyxTQUFTSixLQUFLLEVBQUU7UUFDZCxJQUFJLENBQUNLLE1BQU0sQ0FBQ0QsUUFBUSxHQUFHSjtRQUN2QixPQUFPLElBQUk7SUFDYjtJQUVBTSxTQUFTTixLQUFLLEVBQUU7UUFDZCxJQUFJLENBQUNLLE1BQU0sQ0FBQ0MsUUFBUSxHQUFHTjtRQUN2QixPQUFPLElBQUk7SUFDYjtJQUVBTyxxQkFBcUJ2QixLQUFLLEVBQUU7UUFDMUIsSUFBSSxDQUFDcUIsTUFBTSxDQUFDRSxvQkFBb0IsR0FBR3ZCO1FBQ25DLE9BQU8sSUFBSTtJQUNiO0lBRUF3QixTQUFTQyxRQUFRLEVBQUU7UUFDakIscUZBQXFGO1FBQ3JGLElBQUksQ0FBQ0MsUUFBUSxDQUFDaEIscUJBQXFCLEdBQUdBO1FBQ3RDLE9BQU8sS0FBSyxDQUFDYyxTQUFTQztJQUN4QjtBQUVGO0FBRUExQix5QkFBeUIsR0FBR0UsbUJBQzVCLDZDQUE2QyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpdF9wbHVzX3BsdXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvZm9yY2VUb3VjaEdlc3R1cmUuanM/MGMzNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRm9yY2VUb3VjaEdlc3R1cmUgPSB2b2lkIDA7XG5cbnZhciBfZ2VzdHVyZSA9IHJlcXVpcmUoXCIuL2dlc3R1cmVcIik7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmZ1bmN0aW9uIGNoYW5nZUV2ZW50Q2FsY3VsYXRvcihjdXJyZW50LCBwcmV2aW91cykge1xuICAnd29ya2xldCc7XG5cbiAgbGV0IGNoYW5nZVBheWxvYWQ7XG5cbiAgaWYgKHByZXZpb3VzID09PSB1bmRlZmluZWQpIHtcbiAgICBjaGFuZ2VQYXlsb2FkID0ge1xuICAgICAgZm9yY2VDaGFuZ2U6IGN1cnJlbnQuZm9yY2VcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGNoYW5nZVBheWxvYWQgPSB7XG4gICAgICBmb3JjZUNoYW5nZTogY3VycmVudC5mb3JjZSAtIHByZXZpb3VzLmZvcmNlXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7IC4uLmN1cnJlbnQsXG4gICAgLi4uY2hhbmdlUGF5bG9hZFxuICB9O1xufVxuXG5jbGFzcyBGb3JjZVRvdWNoR2VzdHVyZSBleHRlbmRzIF9nZXN0dXJlLkNvbnRpbm91c0Jhc2VHZXN0dXJlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcblxuICAgIF9kZWZpbmVQcm9wZXJ0eSh0aGlzLCBcImNvbmZpZ1wiLCB7fSk7XG5cbiAgICB0aGlzLmhhbmRsZXJOYW1lID0gJ0ZvcmNlVG91Y2hHZXN0dXJlSGFuZGxlcic7XG4gIH1cblxuICBtaW5Gb3JjZShmb3JjZSkge1xuICAgIHRoaXMuY29uZmlnLm1pbkZvcmNlID0gZm9yY2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBtYXhGb3JjZShmb3JjZSkge1xuICAgIHRoaXMuY29uZmlnLm1heEZvcmNlID0gZm9yY2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBmZWVkYmFja09uQWN0aXZhdGlvbih2YWx1ZSkge1xuICAgIHRoaXMuY29uZmlnLmZlZWRiYWNrT25BY3RpdmF0aW9uID0gdmFsdWU7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBvbkNoYW5nZShjYWxsYmFjaykge1xuICAgIC8vIEB0cy1pZ25vcmUgVFMgYmVpbmcgb3ZlcnByb3RlY3RpdmUsIEZvcmNlVG91Y2hHZXN0dXJlSGFuZGxlckV2ZW50UGF5bG9hZCBpcyBSZWNvcmRcbiAgICB0aGlzLmhhbmRsZXJzLmNoYW5nZUV2ZW50Q2FsY3VsYXRvciA9IGNoYW5nZUV2ZW50Q2FsY3VsYXRvcjtcbiAgICByZXR1cm4gc3VwZXIub25DaGFuZ2UoY2FsbGJhY2spO1xuICB9XG5cbn1cblxuZXhwb3J0cy5Gb3JjZVRvdWNoR2VzdHVyZSA9IEZvcmNlVG91Y2hHZXN0dXJlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm9yY2VUb3VjaEdlc3R1cmUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiRm9yY2VUb3VjaEdlc3R1cmUiLCJfZ2VzdHVyZSIsInJlcXVpcmUiLCJfZGVmaW5lUHJvcGVydHkiLCJvYmoiLCJrZXkiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJjaGFuZ2VFdmVudENhbGN1bGF0b3IiLCJjdXJyZW50IiwicHJldmlvdXMiLCJjaGFuZ2VQYXlsb2FkIiwidW5kZWZpbmVkIiwiZm9yY2VDaGFuZ2UiLCJmb3JjZSIsIkNvbnRpbm91c0Jhc2VHZXN0dXJlIiwiY29uc3RydWN0b3IiLCJoYW5kbGVyTmFtZSIsIm1pbkZvcmNlIiwiY29uZmlnIiwibWF4Rm9yY2UiLCJmZWVkYmFja09uQWN0aXZhdGlvbiIsIm9uQ2hhbmdlIiwiY2FsbGJhY2siLCJoYW5kbGVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/forceTouchGesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ContinousBaseGesture = exports.BaseGesture = exports.Gesture = exports.CALLBACK_TYPE = void 0;\nvar _handlersRegistry = __webpack_require__(/*! ../handlersRegistry */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/handlersRegistry.js\");\nvar _utils = __webpack_require__(/*! ../../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/utils.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst CALLBACK_TYPE = {\n    UNDEFINED: 0,\n    BEGAN: 1,\n    START: 2,\n    UPDATE: 3,\n    CHANGE: 4,\n    END: 5,\n    FINALIZE: 6,\n    TOUCHES_DOWN: 7,\n    TOUCHES_MOVE: 8,\n    TOUCHES_UP: 9,\n    TOUCHES_CANCELLED: 10\n}; // Allow using CALLBACK_TYPE as object and type\n// eslint-disable-next-line @typescript-eslint/no-redeclare\nexports.CALLBACK_TYPE = CALLBACK_TYPE;\nclass Gesture {\n}\nexports.Gesture = Gesture;\nlet nextGestureId = 0;\nclass BaseGesture extends Gesture {\n    constructor(){\n        super(); // Used to check whether the gesture config has been updated when wrapping it\n        // with `useMemo`. Since every config will have a unique id, when the dependencies\n        // don't change, the config won't be recreated and the id will stay the same.\n        // If the id is different, it means that the config has changed and the gesture\n        // needs to be updated.\n        _defineProperty(this, \"gestureId\", -1);\n        _defineProperty(this, \"handlerTag\", -1);\n        _defineProperty(this, \"handlerName\", \"\");\n        _defineProperty(this, \"config\", {});\n        _defineProperty(this, \"handlers\", {\n            gestureId: -1,\n            handlerTag: -1,\n            isWorklet: []\n        });\n        this.gestureId = nextGestureId++;\n        this.handlers.gestureId = this.gestureId;\n    }\n    addDependency(key, gesture) {\n        const value = this.config[key];\n        this.config[key] = value ? Array().concat(value, gesture) : [\n            gesture\n        ];\n    }\n    withRef(ref) {\n        this.config.ref = ref;\n        return this;\n    }\n    isWorklet(callback) {\n        //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n        return callback.__workletHash !== undefined;\n    }\n    onBegin(callback) {\n        this.handlers.onBegin = callback;\n        this.handlers.isWorklet[CALLBACK_TYPE.BEGAN] = this.isWorklet(callback);\n        return this;\n    }\n    onStart(callback) {\n        this.handlers.onStart = callback;\n        this.handlers.isWorklet[CALLBACK_TYPE.START] = this.isWorklet(callback);\n        return this;\n    }\n    onEnd(callback) {\n        this.handlers.onEnd = callback; //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n        this.handlers.isWorklet[CALLBACK_TYPE.END] = this.isWorklet(callback);\n        return this;\n    }\n    onFinalize(callback) {\n        this.handlers.onFinalize = callback; //@ts-ignore if callback is a worklet, the property will be available, if not then the check will return false\n        this.handlers.isWorklet[CALLBACK_TYPE.FINALIZE] = this.isWorklet(callback);\n        return this;\n    }\n    onTouchesDown(callback) {\n        this.config.needsPointerData = true;\n        this.handlers.onTouchesDown = callback;\n        this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_DOWN] = this.isWorklet(callback);\n        return this;\n    }\n    onTouchesMove(callback) {\n        this.config.needsPointerData = true;\n        this.handlers.onTouchesMove = callback;\n        this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_MOVE] = this.isWorklet(callback);\n        return this;\n    }\n    onTouchesUp(callback) {\n        this.config.needsPointerData = true;\n        this.handlers.onTouchesUp = callback;\n        this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_UP] = this.isWorklet(callback);\n        return this;\n    }\n    onTouchesCancelled(callback) {\n        this.config.needsPointerData = true;\n        this.handlers.onTouchesCancelled = callback;\n        this.handlers.isWorklet[CALLBACK_TYPE.TOUCHES_CANCELLED] = this.isWorklet(callback);\n        return this;\n    }\n    enabled(enabled) {\n        this.config.enabled = enabled;\n        return this;\n    }\n    shouldCancelWhenOutside(value) {\n        this.config.shouldCancelWhenOutside = value;\n        return this;\n    }\n    hitSlop(hitSlop) {\n        this.config.hitSlop = hitSlop;\n        return this;\n    }\n    runOnJS(runOnJS) {\n        this.config.runOnJS = runOnJS;\n        return this;\n    }\n    simultaneousWithExternalGesture(...gestures) {\n        for (const gesture of gestures){\n            this.addDependency(\"simultaneousWith\", gesture);\n        }\n        return this;\n    }\n    requireExternalGestureToFail(...gestures) {\n        for (const gesture of gestures){\n            this.addDependency(\"requireToFail\", gesture);\n        }\n        return this;\n    }\n    withTestId(id) {\n        this.config.testId = id;\n        return this;\n    }\n    cancelsTouchesInView(value) {\n        this.config.cancelsTouchesInView = value;\n        return this;\n    }\n    initialize() {\n        this.handlerTag = (0, _handlersRegistry.getNextHandlerTag)();\n        this.handlers = {\n            ...this.handlers,\n            handlerTag: this.handlerTag\n        };\n        if (this.config.ref) {\n            this.config.ref.current = this;\n        }\n    }\n    toGestureArray() {\n        return [\n            this\n        ];\n    }\n    prepare() {}\n    get shouldUseReanimated() {\n        // use Reanimated when runOnJS isn't set explicitly,\n        // and all defined callbacks are worklets,\n        // and remote debugging is disabled\n        return this.config.runOnJS !== true && !this.handlers.isWorklet.includes(false) && !(0, _utils.isRemoteDebuggingEnabled)();\n    }\n}\nexports.BaseGesture = BaseGesture;\nclass ContinousBaseGesture extends BaseGesture {\n    onUpdate(callback) {\n        this.handlers.onUpdate = callback;\n        this.handlers.isWorklet[CALLBACK_TYPE.UPDATE] = this.isWorklet(callback);\n        return this;\n    }\n    onChange(callback) {\n        this.handlers.onChange = callback;\n        this.handlers.isWorklet[CALLBACK_TYPE.CHANGE] = this.isWorklet(callback);\n        return this;\n    }\n    manualActivation(manualActivation) {\n        this.config.manualActivation = manualActivation;\n        return this;\n    }\n}\nexports.ContinousBaseGesture = ContinousBaseGesture; //# sourceMappingURL=gesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureComposition.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureComposition.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ExclusiveGesture = exports.SimultaneousGesture = exports.ComposedGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction extendRelation(currentRelation, extendWith) {\n    if (currentRelation === undefined) {\n        return [\n            ...extendWith\n        ];\n    } else {\n        return [\n            ...currentRelation,\n            ...extendWith\n        ];\n    }\n}\nclass ComposedGesture extends _gesture.Gesture {\n    constructor(...gestures){\n        super();\n        _defineProperty(this, \"gestures\", []);\n        _defineProperty(this, \"simultaneousGestures\", []);\n        _defineProperty(this, \"requireGesturesToFail\", []);\n        this.gestures = gestures;\n    }\n    prepareSingleGesture(gesture, simultaneousGestures, requireGesturesToFail) {\n        if (gesture instanceof _gesture.BaseGesture) {\n            const newConfig = {\n                ...gesture.config\n            };\n            newConfig.simultaneousWith = extendRelation(newConfig.simultaneousWith, simultaneousGestures);\n            newConfig.requireToFail = extendRelation(newConfig.requireToFail, requireGesturesToFail);\n            gesture.config = newConfig;\n        } else if (gesture instanceof ComposedGesture) {\n            gesture.simultaneousGestures = simultaneousGestures;\n            gesture.requireGesturesToFail = requireGesturesToFail;\n            gesture.prepare();\n        }\n    }\n    prepare() {\n        for (const gesture of this.gestures){\n            this.prepareSingleGesture(gesture, this.simultaneousGestures, this.requireGesturesToFail);\n        }\n    }\n    initialize() {\n        for (const gesture of this.gestures){\n            gesture.initialize();\n        }\n    }\n    toGestureArray() {\n        return this.gestures.flatMap((gesture)=>gesture.toGestureArray());\n    }\n}\nexports.ComposedGesture = ComposedGesture;\nclass SimultaneousGesture extends ComposedGesture {\n    prepare() {\n        // this piece of magic works something like this:\n        // for every gesture in the array\n        const simultaneousArrays = this.gestures.map((gesture)=>this.gestures // and make a copy without it\n            .filter((x)=>x !== gesture) // then we flatmap the result to get list of raw (not composed) gestures\n            // this way we don't make the gestures simultaneous with themselves, which is\n            // important when the gesture is `ExclusiveGesture` - we don't want to make\n            // exclusive gestures simultaneous\n            .flatMap((x)=>x.toGestureArray()));\n        for(let i = 0; i < this.gestures.length; i++){\n            this.prepareSingleGesture(this.gestures[i], simultaneousArrays[i], this.requireGesturesToFail);\n        }\n    }\n}\nexports.SimultaneousGesture = SimultaneousGesture;\nclass ExclusiveGesture extends ComposedGesture {\n    prepare() {\n        // transforms the array of gestures into array of grouped raw (not composed) gestures\n        // i.e. [gesture1, gesture2, ComposedGesture(gesture3, gesture4)] -> [[gesture1], [gesture2], [gesture3, gesture4]]\n        const gestureArrays = this.gestures.map((gesture)=>gesture.toGestureArray());\n        let requireToFail = [];\n        for(let i = 0; i < this.gestures.length; i++){\n            this.prepareSingleGesture(this.gestures[i], this.simultaneousGestures, this.requireGesturesToFail.concat(requireToFail)); // every group gets to wait for all groups before it\n            requireToFail = requireToFail.concat(gestureArrays[i]);\n        }\n    }\n}\nexports.ExclusiveGesture = ExclusiveGesture; //# sourceMappingURL=gestureComposition.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureComposition.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureObjects.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureObjects.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GestureObjects = void 0;\nvar _flingGesture = __webpack_require__(/*! ./flingGesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/flingGesture.js\");\nvar _forceTouchGesture = __webpack_require__(/*! ./forceTouchGesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/forceTouchGesture.js\");\nvar _gestureComposition = __webpack_require__(/*! ./gestureComposition */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureComposition.js\");\nvar _longPressGesture = __webpack_require__(/*! ./longPressGesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/longPressGesture.js\");\nvar _panGesture = __webpack_require__(/*! ./panGesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/panGesture.js\");\nvar _pinchGesture = __webpack_require__(/*! ./pinchGesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/pinchGesture.js\");\nvar _rotationGesture = __webpack_require__(/*! ./rotationGesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/rotationGesture.js\");\nvar _tapGesture = __webpack_require__(/*! ./tapGesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/tapGesture.js\");\nvar _nativeGesture = __webpack_require__(/*! ./nativeGesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/nativeGesture.js\");\nvar _manualGesture = __webpack_require__(/*! ./manualGesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/manualGesture.js\");\nconst GestureObjects = {\n    Tap: ()=>{\n        return new _tapGesture.TapGesture();\n    },\n    Pan: ()=>{\n        return new _panGesture.PanGesture();\n    },\n    Pinch: ()=>{\n        return new _pinchGesture.PinchGesture();\n    },\n    Rotation: ()=>{\n        return new _rotationGesture.RotationGesture();\n    },\n    Fling: ()=>{\n        return new _flingGesture.FlingGesture();\n    },\n    LongPress: ()=>{\n        return new _longPressGesture.LongPressGesture();\n    },\n    ForceTouch: ()=>{\n        return new _forceTouchGesture.ForceTouchGesture();\n    },\n    Native: ()=>{\n        return new _nativeGesture.NativeGesture();\n    },\n    Manual: ()=>{\n        return new _manualGesture.ManualGesture();\n    },\n    /**\n   * Builds a composed gesture consisting of gestures provided as parameters.\n   * The first one that becomes active cancels the rest of gestures.\n   */ Race: (...gestures)=>{\n        return new _gestureComposition.ComposedGesture(...gestures);\n    },\n    /**\n   * Builds a composed gesture that allows all base gestures to run simultaneously.\n   */ Simultaneous (...gestures) {\n        return new _gestureComposition.SimultaneousGesture(...gestures);\n    },\n    /**\n   * Builds a composed gesture where only one of the provided gestures can become active.\n   * Priority is decided through the order of gestures: the first one has higher priority\n   * than the second one, second one has higher priority than the third one, and so on.\n   * For example, to make a gesture that recognizes both single and double tap you need\n   * to call Exclusive(doubleTap, singleTap).\n   */ Exclusive (...gestures) {\n        return new _gestureComposition.ExclusiveGesture(...gestures);\n    }\n};\nexports.GestureObjects = GestureObjects; //# sourceMappingURL=gestureObjects.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvZ2VzdHVyZU9iamVjdHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELHNCQUFzQixHQUFHLEtBQUs7QUFFOUIsSUFBSUcsZ0JBQWdCQyxtQkFBT0EsQ0FBQyxrSEFBZ0I7QUFFNUMsSUFBSUMscUJBQXFCRCxtQkFBT0EsQ0FBQyw0SEFBcUI7QUFFdEQsSUFBSUUsc0JBQXNCRixtQkFBT0EsQ0FBQyw4SEFBc0I7QUFFeEQsSUFBSUcsb0JBQW9CSCxtQkFBT0EsQ0FBQywwSEFBb0I7QUFFcEQsSUFBSUksY0FBY0osbUJBQU9BLENBQUMsOEdBQWM7QUFFeEMsSUFBSUssZ0JBQWdCTCxtQkFBT0EsQ0FBQyxrSEFBZ0I7QUFFNUMsSUFBSU0sbUJBQW1CTixtQkFBT0EsQ0FBQyx3SEFBbUI7QUFFbEQsSUFBSU8sY0FBY1AsbUJBQU9BLENBQUMsOEdBQWM7QUFFeEMsSUFBSVEsaUJBQWlCUixtQkFBT0EsQ0FBQyxvSEFBaUI7QUFFOUMsSUFBSVMsaUJBQWlCVCxtQkFBT0EsQ0FBQyxvSEFBaUI7QUFFOUMsTUFBTUYsaUJBQWlCO0lBQ3JCWSxLQUFLO1FBQ0gsT0FBTyxJQUFJSCxZQUFZSSxVQUFVO0lBQ25DO0lBQ0FDLEtBQUs7UUFDSCxPQUFPLElBQUlSLFlBQVlTLFVBQVU7SUFDbkM7SUFDQUMsT0FBTztRQUNMLE9BQU8sSUFBSVQsY0FBY1UsWUFBWTtJQUN2QztJQUNBQyxVQUFVO1FBQ1IsT0FBTyxJQUFJVixpQkFBaUJXLGVBQWU7SUFDN0M7SUFDQUMsT0FBTztRQUNMLE9BQU8sSUFBSW5CLGNBQWNvQixZQUFZO0lBQ3ZDO0lBQ0FDLFdBQVc7UUFDVCxPQUFPLElBQUlqQixrQkFBa0JrQixnQkFBZ0I7SUFDL0M7SUFDQUMsWUFBWTtRQUNWLE9BQU8sSUFBSXJCLG1CQUFtQnNCLGlCQUFpQjtJQUNqRDtJQUNBQyxRQUFRO1FBQ04sT0FBTyxJQUFJaEIsZUFBZWlCLGFBQWE7SUFDekM7SUFDQUMsUUFBUTtRQUNOLE9BQU8sSUFBSWpCLGVBQWVrQixhQUFhO0lBQ3pDO0lBRUE7OztHQUdDLEdBQ0RDLE1BQU0sQ0FBQyxHQUFHQztRQUNSLE9BQU8sSUFBSTNCLG9CQUFvQjRCLGVBQWUsSUFBSUQ7SUFDcEQ7SUFFQTs7R0FFQyxHQUNERSxjQUFhLEdBQUdGLFFBQVE7UUFDdEIsT0FBTyxJQUFJM0Isb0JBQW9COEIsbUJBQW1CLElBQUlIO0lBQ3hEO0lBRUE7Ozs7OztHQU1DLEdBQ0RJLFdBQVUsR0FBR0osUUFBUTtRQUNuQixPQUFPLElBQUkzQixvQkFBb0JnQyxnQkFBZ0IsSUFBSUw7SUFDckQ7QUFFRjtBQUNBakMsc0JBQXNCLEdBQUdFLGdCQUN6QiwwQ0FBMEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2hhbmRsZXJzL2dlc3R1cmVzL2dlc3R1cmVPYmplY3RzLmpzPzc3MmEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkdlc3R1cmVPYmplY3RzID0gdm9pZCAwO1xuXG52YXIgX2ZsaW5nR2VzdHVyZSA9IHJlcXVpcmUoXCIuL2ZsaW5nR2VzdHVyZVwiKTtcblxudmFyIF9mb3JjZVRvdWNoR2VzdHVyZSA9IHJlcXVpcmUoXCIuL2ZvcmNlVG91Y2hHZXN0dXJlXCIpO1xuXG52YXIgX2dlc3R1cmVDb21wb3NpdGlvbiA9IHJlcXVpcmUoXCIuL2dlc3R1cmVDb21wb3NpdGlvblwiKTtcblxudmFyIF9sb25nUHJlc3NHZXN0dXJlID0gcmVxdWlyZShcIi4vbG9uZ1ByZXNzR2VzdHVyZVwiKTtcblxudmFyIF9wYW5HZXN0dXJlID0gcmVxdWlyZShcIi4vcGFuR2VzdHVyZVwiKTtcblxudmFyIF9waW5jaEdlc3R1cmUgPSByZXF1aXJlKFwiLi9waW5jaEdlc3R1cmVcIik7XG5cbnZhciBfcm90YXRpb25HZXN0dXJlID0gcmVxdWlyZShcIi4vcm90YXRpb25HZXN0dXJlXCIpO1xuXG52YXIgX3RhcEdlc3R1cmUgPSByZXF1aXJlKFwiLi90YXBHZXN0dXJlXCIpO1xuXG52YXIgX25hdGl2ZUdlc3R1cmUgPSByZXF1aXJlKFwiLi9uYXRpdmVHZXN0dXJlXCIpO1xuXG52YXIgX21hbnVhbEdlc3R1cmUgPSByZXF1aXJlKFwiLi9tYW51YWxHZXN0dXJlXCIpO1xuXG5jb25zdCBHZXN0dXJlT2JqZWN0cyA9IHtcbiAgVGFwOiAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBfdGFwR2VzdHVyZS5UYXBHZXN0dXJlKCk7XG4gIH0sXG4gIFBhbjogKCkgPT4ge1xuICAgIHJldHVybiBuZXcgX3Bhbkdlc3R1cmUuUGFuR2VzdHVyZSgpO1xuICB9LFxuICBQaW5jaDogKCkgPT4ge1xuICAgIHJldHVybiBuZXcgX3BpbmNoR2VzdHVyZS5QaW5jaEdlc3R1cmUoKTtcbiAgfSxcbiAgUm90YXRpb246ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IF9yb3RhdGlvbkdlc3R1cmUuUm90YXRpb25HZXN0dXJlKCk7XG4gIH0sXG4gIEZsaW5nOiAoKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBfZmxpbmdHZXN0dXJlLkZsaW5nR2VzdHVyZSgpO1xuICB9LFxuICBMb25nUHJlc3M6ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IF9sb25nUHJlc3NHZXN0dXJlLkxvbmdQcmVzc0dlc3R1cmUoKTtcbiAgfSxcbiAgRm9yY2VUb3VjaDogKCkgPT4ge1xuICAgIHJldHVybiBuZXcgX2ZvcmNlVG91Y2hHZXN0dXJlLkZvcmNlVG91Y2hHZXN0dXJlKCk7XG4gIH0sXG4gIE5hdGl2ZTogKCkgPT4ge1xuICAgIHJldHVybiBuZXcgX25hdGl2ZUdlc3R1cmUuTmF0aXZlR2VzdHVyZSgpO1xuICB9LFxuICBNYW51YWw6ICgpID0+IHtcbiAgICByZXR1cm4gbmV3IF9tYW51YWxHZXN0dXJlLk1hbnVhbEdlc3R1cmUoKTtcbiAgfSxcblxuICAvKipcbiAgICogQnVpbGRzIGEgY29tcG9zZWQgZ2VzdHVyZSBjb25zaXN0aW5nIG9mIGdlc3R1cmVzIHByb3ZpZGVkIGFzIHBhcmFtZXRlcnMuXG4gICAqIFRoZSBmaXJzdCBvbmUgdGhhdCBiZWNvbWVzIGFjdGl2ZSBjYW5jZWxzIHRoZSByZXN0IG9mIGdlc3R1cmVzLlxuICAgKi9cbiAgUmFjZTogKC4uLmdlc3R1cmVzKSA9PiB7XG4gICAgcmV0dXJuIG5ldyBfZ2VzdHVyZUNvbXBvc2l0aW9uLkNvbXBvc2VkR2VzdHVyZSguLi5nZXN0dXJlcyk7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEJ1aWxkcyBhIGNvbXBvc2VkIGdlc3R1cmUgdGhhdCBhbGxvd3MgYWxsIGJhc2UgZ2VzdHVyZXMgdG8gcnVuIHNpbXVsdGFuZW91c2x5LlxuICAgKi9cbiAgU2ltdWx0YW5lb3VzKC4uLmdlc3R1cmVzKSB7XG4gICAgcmV0dXJuIG5ldyBfZ2VzdHVyZUNvbXBvc2l0aW9uLlNpbXVsdGFuZW91c0dlc3R1cmUoLi4uZ2VzdHVyZXMpO1xuICB9LFxuXG4gIC8qKlxuICAgKiBCdWlsZHMgYSBjb21wb3NlZCBnZXN0dXJlIHdoZXJlIG9ubHkgb25lIG9mIHRoZSBwcm92aWRlZCBnZXN0dXJlcyBjYW4gYmVjb21lIGFjdGl2ZS5cbiAgICogUHJpb3JpdHkgaXMgZGVjaWRlZCB0aHJvdWdoIHRoZSBvcmRlciBvZiBnZXN0dXJlczogdGhlIGZpcnN0IG9uZSBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAqIHRoYW4gdGhlIHNlY29uZCBvbmUsIHNlY29uZCBvbmUgaGFzIGhpZ2hlciBwcmlvcml0eSB0aGFuIHRoZSB0aGlyZCBvbmUsIGFuZCBzbyBvbi5cbiAgICogRm9yIGV4YW1wbGUsIHRvIG1ha2UgYSBnZXN0dXJlIHRoYXQgcmVjb2duaXplcyBib3RoIHNpbmdsZSBhbmQgZG91YmxlIHRhcCB5b3UgbmVlZFxuICAgKiB0byBjYWxsIEV4Y2x1c2l2ZShkb3VibGVUYXAsIHNpbmdsZVRhcCkuXG4gICAqL1xuICBFeGNsdXNpdmUoLi4uZ2VzdHVyZXMpIHtcbiAgICByZXR1cm4gbmV3IF9nZXN0dXJlQ29tcG9zaXRpb24uRXhjbHVzaXZlR2VzdHVyZSguLi5nZXN0dXJlcyk7XG4gIH1cblxufTtcbmV4cG9ydHMuR2VzdHVyZU9iamVjdHMgPSBHZXN0dXJlT2JqZWN0cztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWdlc3R1cmVPYmplY3RzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkdlc3R1cmVPYmplY3RzIiwiX2ZsaW5nR2VzdHVyZSIsInJlcXVpcmUiLCJfZm9yY2VUb3VjaEdlc3R1cmUiLCJfZ2VzdHVyZUNvbXBvc2l0aW9uIiwiX2xvbmdQcmVzc0dlc3R1cmUiLCJfcGFuR2VzdHVyZSIsIl9waW5jaEdlc3R1cmUiLCJfcm90YXRpb25HZXN0dXJlIiwiX3RhcEdlc3R1cmUiLCJfbmF0aXZlR2VzdHVyZSIsIl9tYW51YWxHZXN0dXJlIiwiVGFwIiwiVGFwR2VzdHVyZSIsIlBhbiIsIlBhbkdlc3R1cmUiLCJQaW5jaCIsIlBpbmNoR2VzdHVyZSIsIlJvdGF0aW9uIiwiUm90YXRpb25HZXN0dXJlIiwiRmxpbmciLCJGbGluZ0dlc3R1cmUiLCJMb25nUHJlc3MiLCJMb25nUHJlc3NHZXN0dXJlIiwiRm9yY2VUb3VjaCIsIkZvcmNlVG91Y2hHZXN0dXJlIiwiTmF0aXZlIiwiTmF0aXZlR2VzdHVyZSIsIk1hbnVhbCIsIk1hbnVhbEdlc3R1cmUiLCJSYWNlIiwiZ2VzdHVyZXMiLCJDb21wb3NlZEdlc3R1cmUiLCJTaW11bHRhbmVvdXMiLCJTaW11bHRhbmVvdXNHZXN0dXJlIiwiRXhjbHVzaXZlIiwiRXhjbHVzaXZlR2VzdHVyZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureObjects.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureStateManager.web.js":
/*!*************************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureStateManager.web.js ***!
  \*************************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GestureStateManager = void 0;\nvar _NodeManager = _interopRequireDefault(__webpack_require__(/*! ../../web/tools/NodeManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/NodeManager.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst GestureStateManager = {\n    create (handlerTag) {\n        return {\n            begin: ()=>{\n                _NodeManager.default.getHandler(handlerTag).begin();\n            },\n            activate: ()=>{\n                _NodeManager.default.getHandler(handlerTag).activate();\n            },\n            fail: ()=>{\n                _NodeManager.default.getHandler(handlerTag).fail();\n            },\n            end: ()=>{\n                _NodeManager.default.getHandler(handlerTag).end();\n            }\n        };\n    }\n};\nexports.GestureStateManager = GestureStateManager; //# sourceMappingURL=gestureStateManager.web.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvZ2VzdHVyZVN0YXRlTWFuYWdlci53ZWIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELDJCQUEyQixHQUFHLEtBQUs7QUFFbkMsSUFBSUcsZUFBZUMsdUJBQXVCQyxtQkFBT0EsQ0FBQyxzSEFBNkI7QUFFL0UsU0FBU0QsdUJBQXVCRSxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSUMsVUFBVSxHQUFHRCxNQUFNO1FBQUVFLFNBQVNGO0lBQUk7QUFBRztBQUU5RixNQUFNSixzQkFBc0I7SUFDMUJPLFFBQU9DLFVBQVU7UUFDZixPQUFPO1lBQ0xDLE9BQU87Z0JBQ0xSLGFBQWFLLE9BQU8sQ0FBQ0ksVUFBVSxDQUFDRixZQUFZQyxLQUFLO1lBQ25EO1lBQ0FFLFVBQVU7Z0JBQ1JWLGFBQWFLLE9BQU8sQ0FBQ0ksVUFBVSxDQUFDRixZQUFZRyxRQUFRO1lBQ3REO1lBQ0FDLE1BQU07Z0JBQ0pYLGFBQWFLLE9BQU8sQ0FBQ0ksVUFBVSxDQUFDRixZQUFZSSxJQUFJO1lBQ2xEO1lBQ0FDLEtBQUs7Z0JBQ0haLGFBQWFLLE9BQU8sQ0FBQ0ksVUFBVSxDQUFDRixZQUFZSyxHQUFHO1lBQ2pEO1FBQ0Y7SUFDRjtBQUVGO0FBQ0FmLDJCQUEyQixHQUFHRSxxQkFDOUIsbURBQW1EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZml0X3BsdXNfcGx1cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy9oYW5kbGVycy9nZXN0dXJlcy9nZXN0dXJlU3RhdGVNYW5hZ2VyLndlYi5qcz8zMjNhIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5HZXN0dXJlU3RhdGVNYW5hZ2VyID0gdm9pZCAwO1xuXG52YXIgX05vZGVNYW5hZ2VyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi4vLi4vd2ViL3Rvb2xzL05vZGVNYW5hZ2VyXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgR2VzdHVyZVN0YXRlTWFuYWdlciA9IHtcbiAgY3JlYXRlKGhhbmRsZXJUYWcpIHtcbiAgICByZXR1cm4ge1xuICAgICAgYmVnaW46ICgpID0+IHtcbiAgICAgICAgX05vZGVNYW5hZ2VyLmRlZmF1bHQuZ2V0SGFuZGxlcihoYW5kbGVyVGFnKS5iZWdpbigpO1xuICAgICAgfSxcbiAgICAgIGFjdGl2YXRlOiAoKSA9PiB7XG4gICAgICAgIF9Ob2RlTWFuYWdlci5kZWZhdWx0LmdldEhhbmRsZXIoaGFuZGxlclRhZykuYWN0aXZhdGUoKTtcbiAgICAgIH0sXG4gICAgICBmYWlsOiAoKSA9PiB7XG4gICAgICAgIF9Ob2RlTWFuYWdlci5kZWZhdWx0LmdldEhhbmRsZXIoaGFuZGxlclRhZykuZmFpbCgpO1xuICAgICAgfSxcbiAgICAgIGVuZDogKCkgPT4ge1xuICAgICAgICBfTm9kZU1hbmFnZXIuZGVmYXVsdC5nZXRIYW5kbGVyKGhhbmRsZXJUYWcpLmVuZCgpO1xuICAgICAgfVxuICAgIH07XG4gIH1cblxufTtcbmV4cG9ydHMuR2VzdHVyZVN0YXRlTWFuYWdlciA9IEdlc3R1cmVTdGF0ZU1hbmFnZXI7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1nZXN0dXJlU3RhdGVNYW5hZ2VyLndlYi5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJHZXN0dXJlU3RhdGVNYW5hZ2VyIiwiX05vZGVNYW5hZ2VyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsImNyZWF0ZSIsImhhbmRsZXJUYWciLCJiZWdpbiIsImdldEhhbmRsZXIiLCJhY3RpdmF0ZSIsImZhaWwiLCJlbmQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureStateManager.web.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/longPressGesture.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/longPressGesture.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.LongPressGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass LongPressGesture extends _gesture.BaseGesture {\n    constructor(){\n        super();\n        _defineProperty(this, \"config\", {});\n        this.handlerName = \"LongPressGestureHandler\";\n        this.shouldCancelWhenOutside(true);\n    }\n    minDuration(duration) {\n        this.config.minDurationMs = duration;\n        return this;\n    }\n    maxDistance(distance) {\n        this.config.maxDist = distance;\n        return this;\n    }\n}\nexports.LongPressGesture = LongPressGesture; //# sourceMappingURL=longPressGesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvbG9uZ1ByZXNzR2VzdHVyZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsd0JBQXdCLEdBQUcsS0FBSztBQUVoQyxJQUFJRyxXQUFXQyxtQkFBT0EsQ0FBQyx3R0FBVztBQUVsQyxTQUFTQyxnQkFBZ0JDLEdBQUcsRUFBRUMsR0FBRyxFQUFFTixLQUFLO0lBQUksSUFBSU0sT0FBT0QsS0FBSztRQUFFUixPQUFPQyxjQUFjLENBQUNPLEtBQUtDLEtBQUs7WUFBRU4sT0FBT0E7WUFBT08sWUFBWTtZQUFNQyxjQUFjO1lBQU1DLFVBQVU7UUFBSztJQUFJLE9BQU87UUFBRUosR0FBRyxDQUFDQyxJQUFJLEdBQUdOO0lBQU87SUFBRSxPQUFPSztBQUFLO0FBRWhOLE1BQU1KLHlCQUF5QkMsU0FBU1EsV0FBVztJQUNqREMsYUFBYztRQUNaLEtBQUs7UUFFTFAsZ0JBQWdCLElBQUksRUFBRSxVQUFVLENBQUM7UUFFakMsSUFBSSxDQUFDUSxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDQyx1QkFBdUIsQ0FBQztJQUMvQjtJQUVBQyxZQUFZQyxRQUFRLEVBQUU7UUFDcEIsSUFBSSxDQUFDQyxNQUFNLENBQUNDLGFBQWEsR0FBR0Y7UUFDNUIsT0FBTyxJQUFJO0lBQ2I7SUFFQUcsWUFBWUMsUUFBUSxFQUFFO1FBQ3BCLElBQUksQ0FBQ0gsTUFBTSxDQUFDSSxPQUFPLEdBQUdEO1FBQ3RCLE9BQU8sSUFBSTtJQUNiO0FBRUY7QUFFQXBCLHdCQUF3QixHQUFHRSxrQkFDM0IsNENBQTRDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZml0X3BsdXNfcGx1cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy9oYW5kbGVycy9nZXN0dXJlcy9sb25nUHJlc3NHZXN0dXJlLmpzP2UwZDEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLkxvbmdQcmVzc0dlc3R1cmUgPSB2b2lkIDA7XG5cbnZhciBfZ2VzdHVyZSA9IHJlcXVpcmUoXCIuL2dlc3R1cmVcIik7XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHsgaWYgKGtleSBpbiBvYmopIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7IHZhbHVlOiB2YWx1ZSwgZW51bWVyYWJsZTogdHJ1ZSwgY29uZmlndXJhYmxlOiB0cnVlLCB3cml0YWJsZTogdHJ1ZSB9KTsgfSBlbHNlIHsgb2JqW2tleV0gPSB2YWx1ZTsgfSByZXR1cm4gb2JqOyB9XG5cbmNsYXNzIExvbmdQcmVzc0dlc3R1cmUgZXh0ZW5kcyBfZ2VzdHVyZS5CYXNlR2VzdHVyZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG5cbiAgICBfZGVmaW5lUHJvcGVydHkodGhpcywgXCJjb25maWdcIiwge30pO1xuXG4gICAgdGhpcy5oYW5kbGVyTmFtZSA9ICdMb25nUHJlc3NHZXN0dXJlSGFuZGxlcic7XG4gICAgdGhpcy5zaG91bGRDYW5jZWxXaGVuT3V0c2lkZSh0cnVlKTtcbiAgfVxuXG4gIG1pbkR1cmF0aW9uKGR1cmF0aW9uKSB7XG4gICAgdGhpcy5jb25maWcubWluRHVyYXRpb25NcyA9IGR1cmF0aW9uO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbWF4RGlzdGFuY2UoZGlzdGFuY2UpIHtcbiAgICB0aGlzLmNvbmZpZy5tYXhEaXN0ID0gZGlzdGFuY2U7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxufVxuXG5leHBvcnRzLkxvbmdQcmVzc0dlc3R1cmUgPSBMb25nUHJlc3NHZXN0dXJlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bG9uZ1ByZXNzR2VzdHVyZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJMb25nUHJlc3NHZXN0dXJlIiwiX2dlc3R1cmUiLCJyZXF1aXJlIiwiX2RlZmluZVByb3BlcnR5Iiwib2JqIiwia2V5IiwiZW51bWVyYWJsZSIsImNvbmZpZ3VyYWJsZSIsIndyaXRhYmxlIiwiQmFzZUdlc3R1cmUiLCJjb25zdHJ1Y3RvciIsImhhbmRsZXJOYW1lIiwic2hvdWxkQ2FuY2VsV2hlbk91dHNpZGUiLCJtaW5EdXJhdGlvbiIsImR1cmF0aW9uIiwiY29uZmlnIiwibWluRHVyYXRpb25NcyIsIm1heERpc3RhbmNlIiwiZGlzdGFuY2UiLCJtYXhEaXN0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/longPressGesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/manualGesture.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/manualGesture.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.ManualGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction changeEventCalculator(current, _previous) {\n    \"worklet\";\n    return current;\n}\nclass ManualGesture extends _gesture.ContinousBaseGesture {\n    constructor(){\n        super();\n        this.handlerName = \"ManualGestureHandler\";\n    }\n    onChange(callback) {\n        // @ts-ignore TS being overprotective, Record<string, never> is Record\n        this.handlers.changeEventCalculator = changeEventCalculator;\n        return super.onChange(callback);\n    }\n}\nexports.ManualGesture = ManualGesture; //# sourceMappingURL=manualGesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvbWFudWFsR2VzdHVyZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQscUJBQXFCLEdBQUcsS0FBSztBQUU3QixJQUFJRyxXQUFXQyxtQkFBT0EsQ0FBQyx3R0FBVztBQUVsQyxTQUFTQyxzQkFBc0JDLE9BQU8sRUFBRUMsU0FBUztJQUMvQztJQUVBLE9BQU9EO0FBQ1Q7QUFFQSxNQUFNSixzQkFBc0JDLFNBQVNLLG9CQUFvQjtJQUN2REMsYUFBYztRQUNaLEtBQUs7UUFDTCxJQUFJLENBQUNDLFdBQVcsR0FBRztJQUNyQjtJQUVBQyxTQUFTQyxRQUFRLEVBQUU7UUFDakIsc0VBQXNFO1FBQ3RFLElBQUksQ0FBQ0MsUUFBUSxDQUFDUixxQkFBcUIsR0FBR0E7UUFDdEMsT0FBTyxLQUFLLENBQUNNLFNBQVNDO0lBQ3hCO0FBRUY7QUFFQVoscUJBQXFCLEdBQUdFLGVBQ3hCLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpdF9wbHVzX3BsdXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvbWFudWFsR2VzdHVyZS5qcz8wOWI0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5NYW51YWxHZXN0dXJlID0gdm9pZCAwO1xuXG52YXIgX2dlc3R1cmUgPSByZXF1aXJlKFwiLi9nZXN0dXJlXCIpO1xuXG5mdW5jdGlvbiBjaGFuZ2VFdmVudENhbGN1bGF0b3IoY3VycmVudCwgX3ByZXZpb3VzKSB7XG4gICd3b3JrbGV0JztcblxuICByZXR1cm4gY3VycmVudDtcbn1cblxuY2xhc3MgTWFudWFsR2VzdHVyZSBleHRlbmRzIF9nZXN0dXJlLkNvbnRpbm91c0Jhc2VHZXN0dXJlIHtcbiAgY29uc3RydWN0b3IoKSB7XG4gICAgc3VwZXIoKTtcbiAgICB0aGlzLmhhbmRsZXJOYW1lID0gJ01hbnVhbEdlc3R1cmVIYW5kbGVyJztcbiAgfVxuXG4gIG9uQ2hhbmdlKGNhbGxiYWNrKSB7XG4gICAgLy8gQHRzLWlnbm9yZSBUUyBiZWluZyBvdmVycHJvdGVjdGl2ZSwgUmVjb3JkPHN0cmluZywgbmV2ZXI+IGlzIFJlY29yZFxuICAgIHRoaXMuaGFuZGxlcnMuY2hhbmdlRXZlbnRDYWxjdWxhdG9yID0gY2hhbmdlRXZlbnRDYWxjdWxhdG9yO1xuICAgIHJldHVybiBzdXBlci5vbkNoYW5nZShjYWxsYmFjayk7XG4gIH1cblxufVxuXG5leHBvcnRzLk1hbnVhbEdlc3R1cmUgPSBNYW51YWxHZXN0dXJlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bWFudWFsR2VzdHVyZS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJNYW51YWxHZXN0dXJlIiwiX2dlc3R1cmUiLCJyZXF1aXJlIiwiY2hhbmdlRXZlbnRDYWxjdWxhdG9yIiwiY3VycmVudCIsIl9wcmV2aW91cyIsIkNvbnRpbm91c0Jhc2VHZXN0dXJlIiwiY29uc3RydWN0b3IiLCJoYW5kbGVyTmFtZSIsIm9uQ2hhbmdlIiwiY2FsbGJhY2siLCJoYW5kbGVycyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/manualGesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/nativeGesture.js":
/*!***************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/nativeGesture.js ***!
  \***************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.NativeGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass NativeGesture extends _gesture.BaseGesture {\n    constructor(){\n        super();\n        _defineProperty(this, \"config\", {});\n        this.handlerName = \"NativeViewGestureHandler\";\n    }\n    shouldActivateOnStart(value) {\n        this.config.shouldActivateOnStart = value;\n        return this;\n    }\n    disallowInterruption(value) {\n        this.config.disallowInterruption = value;\n        return this;\n    }\n}\nexports.NativeGesture = NativeGesture; //# sourceMappingURL=nativeGesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvbmF0aXZlR2VzdHVyZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQscUJBQXFCLEdBQUcsS0FBSztBQUU3QixJQUFJRyxXQUFXQyxtQkFBT0EsQ0FBQyx3R0FBVztBQUVsQyxTQUFTQyxnQkFBZ0JDLEdBQUcsRUFBRUMsR0FBRyxFQUFFTixLQUFLO0lBQUksSUFBSU0sT0FBT0QsS0FBSztRQUFFUixPQUFPQyxjQUFjLENBQUNPLEtBQUtDLEtBQUs7WUFBRU4sT0FBT0E7WUFBT08sWUFBWTtZQUFNQyxjQUFjO1lBQU1DLFVBQVU7UUFBSztJQUFJLE9BQU87UUFBRUosR0FBRyxDQUFDQyxJQUFJLEdBQUdOO0lBQU87SUFBRSxPQUFPSztBQUFLO0FBRWhOLE1BQU1KLHNCQUFzQkMsU0FBU1EsV0FBVztJQUM5Q0MsYUFBYztRQUNaLEtBQUs7UUFFTFAsZ0JBQWdCLElBQUksRUFBRSxVQUFVLENBQUM7UUFFakMsSUFBSSxDQUFDUSxXQUFXLEdBQUc7SUFDckI7SUFFQUMsc0JBQXNCYixLQUFLLEVBQUU7UUFDM0IsSUFBSSxDQUFDYyxNQUFNLENBQUNELHFCQUFxQixHQUFHYjtRQUNwQyxPQUFPLElBQUk7SUFDYjtJQUVBZSxxQkFBcUJmLEtBQUssRUFBRTtRQUMxQixJQUFJLENBQUNjLE1BQU0sQ0FBQ0Msb0JBQW9CLEdBQUdmO1FBQ25DLE9BQU8sSUFBSTtJQUNiO0FBRUY7QUFFQUQscUJBQXFCLEdBQUdFLGVBQ3hCLHlDQUF5QyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpdF9wbHVzX3BsdXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvbmF0aXZlR2VzdHVyZS5qcz9lMzQwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5OYXRpdmVHZXN0dXJlID0gdm9pZCAwO1xuXG52YXIgX2dlc3R1cmUgPSByZXF1aXJlKFwiLi9nZXN0dXJlXCIpO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5jbGFzcyBOYXRpdmVHZXN0dXJlIGV4dGVuZHMgX2dlc3R1cmUuQmFzZUdlc3R1cmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiY29uZmlnXCIsIHt9KTtcblxuICAgIHRoaXMuaGFuZGxlck5hbWUgPSAnTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyJztcbiAgfVxuXG4gIHNob3VsZEFjdGl2YXRlT25TdGFydCh2YWx1ZSkge1xuICAgIHRoaXMuY29uZmlnLnNob3VsZEFjdGl2YXRlT25TdGFydCA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgZGlzYWxsb3dJbnRlcnJ1cHRpb24odmFsdWUpIHtcbiAgICB0aGlzLmNvbmZpZy5kaXNhbGxvd0ludGVycnVwdGlvbiA9IHZhbHVlO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbn1cblxuZXhwb3J0cy5OYXRpdmVHZXN0dXJlID0gTmF0aXZlR2VzdHVyZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPW5hdGl2ZUdlc3R1cmUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiTmF0aXZlR2VzdHVyZSIsIl9nZXN0dXJlIiwicmVxdWlyZSIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIkJhc2VHZXN0dXJlIiwiY29uc3RydWN0b3IiLCJoYW5kbGVyTmFtZSIsInNob3VsZEFjdGl2YXRlT25TdGFydCIsImNvbmZpZyIsImRpc2FsbG93SW50ZXJydXB0aW9uIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/nativeGesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/panGesture.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/panGesture.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PanGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nfunction changeEventCalculator(current, previous) {\n    \"worklet\";\n    let changePayload;\n    if (previous === undefined) {\n        changePayload = {\n            changeX: current.translationX,\n            changeY: current.translationY\n        };\n    } else {\n        changePayload = {\n            changeX: current.translationX - previous.translationX,\n            changeY: current.translationY - previous.translationY\n        };\n    }\n    return {\n        ...current,\n        ...changePayload\n    };\n}\nclass PanGesture extends _gesture.ContinousBaseGesture {\n    constructor(){\n        super();\n        _defineProperty(this, \"config\", {});\n        this.handlerName = \"PanGestureHandler\";\n    }\n    activeOffsetY(offset) {\n        if (Array.isArray(offset)) {\n            this.config.activeOffsetYStart = offset[0];\n            this.config.activeOffsetYEnd = offset[1];\n        } else if (offset < 0) {\n            this.config.activeOffsetYStart = offset;\n        } else {\n            this.config.activeOffsetYEnd = offset;\n        }\n        return this;\n    }\n    activeOffsetX(offset) {\n        if (Array.isArray(offset)) {\n            this.config.activeOffsetXStart = offset[0];\n            this.config.activeOffsetXEnd = offset[1];\n        } else if (offset < 0) {\n            this.config.activeOffsetXStart = offset;\n        } else {\n            this.config.activeOffsetXEnd = offset;\n        }\n        return this;\n    }\n    failOffsetY(offset) {\n        if (Array.isArray(offset)) {\n            this.config.failOffsetYStart = offset[0];\n            this.config.failOffsetYEnd = offset[1];\n        } else if (offset < 0) {\n            this.config.failOffsetYStart = offset;\n        } else {\n            this.config.failOffsetYEnd = offset;\n        }\n        return this;\n    }\n    failOffsetX(offset) {\n        if (Array.isArray(offset)) {\n            this.config.failOffsetXStart = offset[0];\n            this.config.failOffsetXEnd = offset[1];\n        } else if (offset < 0) {\n            this.config.failOffsetXStart = offset;\n        } else {\n            this.config.failOffsetXEnd = offset;\n        }\n        return this;\n    }\n    minPointers(minPointers) {\n        this.config.minPointers = minPointers;\n        return this;\n    }\n    maxPointers(maxPointers) {\n        this.config.maxPointers = maxPointers;\n        return this;\n    }\n    minDistance(distance) {\n        this.config.minDist = distance;\n        return this;\n    }\n    minVelocity(velocity) {\n        this.config.minVelocity = velocity;\n        return this;\n    }\n    minVelocityX(velocity) {\n        this.config.minVelocityX = velocity;\n        return this;\n    }\n    minVelocityY(velocity) {\n        this.config.minVelocityY = velocity;\n        return this;\n    }\n    averageTouches(value) {\n        this.config.avgTouches = value;\n        return this;\n    }\n    enableTrackpadTwoFingerGesture(value) {\n        this.config.enableTrackpadTwoFingerGesture = value;\n        return this;\n    }\n    activateAfterLongPress(duration) {\n        this.config.activateAfterLongPress = duration;\n        return this;\n    }\n    onChange(callback) {\n        // @ts-ignore TS being overprotective, PanGestureHandlerEventPayload is Record\n        this.handlers.changeEventCalculator = changeEventCalculator;\n        return super.onChange(callback);\n    }\n}\nexports.PanGesture = PanGesture; //# sourceMappingURL=panGesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/panGesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/pinchGesture.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/pinchGesture.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PinchGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction changeEventCalculator(current, previous) {\n    \"worklet\";\n    let changePayload;\n    if (previous === undefined) {\n        changePayload = {\n            scaleChange: current.scale\n        };\n    } else {\n        changePayload = {\n            scaleChange: current.scale / previous.scale\n        };\n    }\n    return {\n        ...current,\n        ...changePayload\n    };\n}\nclass PinchGesture extends _gesture.ContinousBaseGesture {\n    constructor(){\n        super();\n        this.handlerName = \"PinchGestureHandler\";\n    }\n    onChange(callback) {\n        // @ts-ignore TS being overprotective, PinchGestureHandlerEventPayload is Record\n        this.handlers.changeEventCalculator = changeEventCalculator;\n        return super.onChange(callback);\n    }\n}\nexports.PinchGesture = PinchGesture; //# sourceMappingURL=pinchGesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvcGluY2hHZXN0dXJlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxvQkFBb0IsR0FBRyxLQUFLO0FBRTVCLElBQUlHLFdBQVdDLG1CQUFPQSxDQUFDLHdHQUFXO0FBRWxDLFNBQVNDLHNCQUFzQkMsT0FBTyxFQUFFQyxRQUFRO0lBQzlDO0lBRUEsSUFBSUM7SUFFSixJQUFJRCxhQUFhRSxXQUFXO1FBQzFCRCxnQkFBZ0I7WUFDZEUsYUFBYUosUUFBUUssS0FBSztRQUM1QjtJQUNGLE9BQU87UUFDTEgsZ0JBQWdCO1lBQ2RFLGFBQWFKLFFBQVFLLEtBQUssR0FBR0osU0FBU0ksS0FBSztRQUM3QztJQUNGO0lBRUEsT0FBTztRQUFFLEdBQUdMLE9BQU87UUFDakIsR0FBR0UsYUFBYTtJQUNsQjtBQUNGO0FBRUEsTUFBTU4scUJBQXFCQyxTQUFTUyxvQkFBb0I7SUFDdERDLGFBQWM7UUFDWixLQUFLO1FBQ0wsSUFBSSxDQUFDQyxXQUFXLEdBQUc7SUFDckI7SUFFQUMsU0FBU0MsUUFBUSxFQUFFO1FBQ2pCLGdGQUFnRjtRQUNoRixJQUFJLENBQUNDLFFBQVEsQ0FBQ1oscUJBQXFCLEdBQUdBO1FBQ3RDLE9BQU8sS0FBSyxDQUFDVSxTQUFTQztJQUN4QjtBQUVGO0FBRUFoQixvQkFBb0IsR0FBR0UsY0FDdkIsd0NBQXdDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZml0X3BsdXNfcGx1cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy9oYW5kbGVycy9nZXN0dXJlcy9waW5jaEdlc3R1cmUuanM/YjMxNCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuUGluY2hHZXN0dXJlID0gdm9pZCAwO1xuXG52YXIgX2dlc3R1cmUgPSByZXF1aXJlKFwiLi9nZXN0dXJlXCIpO1xuXG5mdW5jdGlvbiBjaGFuZ2VFdmVudENhbGN1bGF0b3IoY3VycmVudCwgcHJldmlvdXMpIHtcbiAgJ3dvcmtsZXQnO1xuXG4gIGxldCBjaGFuZ2VQYXlsb2FkO1xuXG4gIGlmIChwcmV2aW91cyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgY2hhbmdlUGF5bG9hZCA9IHtcbiAgICAgIHNjYWxlQ2hhbmdlOiBjdXJyZW50LnNjYWxlXG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICBjaGFuZ2VQYXlsb2FkID0ge1xuICAgICAgc2NhbGVDaGFuZ2U6IGN1cnJlbnQuc2NhbGUgLyBwcmV2aW91cy5zY2FsZVxuICAgIH07XG4gIH1cblxuICByZXR1cm4geyAuLi5jdXJyZW50LFxuICAgIC4uLmNoYW5nZVBheWxvYWRcbiAgfTtcbn1cblxuY2xhc3MgUGluY2hHZXN0dXJlIGV4dGVuZHMgX2dlc3R1cmUuQ29udGlub3VzQmFzZUdlc3R1cmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMuaGFuZGxlck5hbWUgPSAnUGluY2hHZXN0dXJlSGFuZGxlcic7XG4gIH1cblxuICBvbkNoYW5nZShjYWxsYmFjaykge1xuICAgIC8vIEB0cy1pZ25vcmUgVFMgYmVpbmcgb3ZlcnByb3RlY3RpdmUsIFBpbmNoR2VzdHVyZUhhbmRsZXJFdmVudFBheWxvYWQgaXMgUmVjb3JkXG4gICAgdGhpcy5oYW5kbGVycy5jaGFuZ2VFdmVudENhbGN1bGF0b3IgPSBjaGFuZ2VFdmVudENhbGN1bGF0b3I7XG4gICAgcmV0dXJuIHN1cGVyLm9uQ2hhbmdlKGNhbGxiYWNrKTtcbiAgfVxuXG59XG5cbmV4cG9ydHMuUGluY2hHZXN0dXJlID0gUGluY2hHZXN0dXJlO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cGluY2hHZXN0dXJlLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlBpbmNoR2VzdHVyZSIsIl9nZXN0dXJlIiwicmVxdWlyZSIsImNoYW5nZUV2ZW50Q2FsY3VsYXRvciIsImN1cnJlbnQiLCJwcmV2aW91cyIsImNoYW5nZVBheWxvYWQiLCJ1bmRlZmluZWQiLCJzY2FsZUNoYW5nZSIsInNjYWxlIiwiQ29udGlub3VzQmFzZUdlc3R1cmUiLCJjb25zdHJ1Y3RvciIsImhhbmRsZXJOYW1lIiwib25DaGFuZ2UiLCJjYWxsYmFjayIsImhhbmRsZXJzIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/pinchGesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/reanimatedWrapper.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/reanimatedWrapper.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Reanimated = void 0;\nvar _utils = __webpack_require__(/*! ../../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/utils.js\");\nlet Reanimated;\nexports.Reanimated = Reanimated;\ntry {\n    exports.Reanimated = Reanimated = __webpack_require__(/*! react-native-reanimated */ \"./node_modules/react-native-reanimated/lib/index.js\");\n    if (!Reanimated.useSharedValue) {\n        // @ts-ignore Make sure the loaded module is actually Reanimated, if it's not\n        // reset the module to undefined so we can fallback to the default implementation\n        exports.Reanimated = Reanimated = undefined;\n        throw new Error(\"react-native-reanimated is not found\");\n    }\n    if (!Reanimated.setGestureState) {\n        Reanimated.setGestureState = ()=>{\n            \"worklet\";\n            console.warn((0, _utils.tagMessage)(\"Please use newer version of react-native-reanimated in order to control state of the gestures.\"));\n        };\n    } // When 'react-native-reanimated' is not available we want to\n// quietly continue\n// eslint-disable-next-line no-empty\n} catch (e) {} //# sourceMappingURL=reanimatedWrapper.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvcmVhbmltYXRlZFdyYXBwZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFrQixHQUFHLEtBQUs7QUFFMUIsSUFBSUcsU0FBU0MsbUJBQU9BLENBQUMsc0ZBQWE7QUFFbEMsSUFBSUY7QUFDSkYsa0JBQWtCLEdBQUdFO0FBRXJCLElBQUk7SUFDRkYsa0JBQWtCLEdBQUdFLGFBQWFFLG1CQUFPQSxDQUFDO0lBRTFDLElBQUksQ0FBQ0YsV0FBV0csY0FBYyxFQUFFO1FBQzlCLDZFQUE2RTtRQUM3RSxpRkFBaUY7UUFDakZMLGtCQUFrQixHQUFHRSxhQUFhSTtRQUNsQyxNQUFNLElBQUlDLE1BQU07SUFDbEI7SUFFQSxJQUFJLENBQUNMLFdBQVdNLGVBQWUsRUFBRTtRQUMvQk4sV0FBV00sZUFBZSxHQUFHO1lBQzNCO1lBRUFDLFFBQVFDLElBQUksQ0FBQyxDQUFDLEdBQUdQLE9BQU9RLFVBQVUsRUFBRTtRQUN0QztJQUNGLEVBQUUsNkRBQTZEO0FBQy9ELG1CQUFtQjtBQUNuQixvQ0FBb0M7QUFFdEMsRUFBRSxPQUFPQyxHQUFHLENBQUMsRUFDYiw2Q0FBNkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2hhbmRsZXJzL2dlc3R1cmVzL3JlYW5pbWF0ZWRXcmFwcGVyLmpzPzA5Y2UiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLlJlYW5pbWF0ZWQgPSB2b2lkIDA7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vLi4vdXRpbHNcIik7XG5cbmxldCBSZWFuaW1hdGVkO1xuZXhwb3J0cy5SZWFuaW1hdGVkID0gUmVhbmltYXRlZDtcblxudHJ5IHtcbiAgZXhwb3J0cy5SZWFuaW1hdGVkID0gUmVhbmltYXRlZCA9IHJlcXVpcmUoJ3JlYWN0LW5hdGl2ZS1yZWFuaW1hdGVkJyk7XG5cbiAgaWYgKCFSZWFuaW1hdGVkLnVzZVNoYXJlZFZhbHVlKSB7XG4gICAgLy8gQHRzLWlnbm9yZSBNYWtlIHN1cmUgdGhlIGxvYWRlZCBtb2R1bGUgaXMgYWN0dWFsbHkgUmVhbmltYXRlZCwgaWYgaXQncyBub3RcbiAgICAvLyByZXNldCB0aGUgbW9kdWxlIHRvIHVuZGVmaW5lZCBzbyB3ZSBjYW4gZmFsbGJhY2sgdG8gdGhlIGRlZmF1bHQgaW1wbGVtZW50YXRpb25cbiAgICBleHBvcnRzLlJlYW5pbWF0ZWQgPSBSZWFuaW1hdGVkID0gdW5kZWZpbmVkO1xuICAgIHRocm93IG5ldyBFcnJvcigncmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQgaXMgbm90IGZvdW5kJyk7XG4gIH1cblxuICBpZiAoIVJlYW5pbWF0ZWQuc2V0R2VzdHVyZVN0YXRlKSB7XG4gICAgUmVhbmltYXRlZC5zZXRHZXN0dXJlU3RhdGUgPSAoKSA9PiB7XG4gICAgICAnd29ya2xldCc7XG5cbiAgICAgIGNvbnNvbGUud2FybigoMCwgX3V0aWxzLnRhZ01lc3NhZ2UpKCdQbGVhc2UgdXNlIG5ld2VyIHZlcnNpb24gb2YgcmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQgaW4gb3JkZXIgdG8gY29udHJvbCBzdGF0ZSBvZiB0aGUgZ2VzdHVyZXMuJykpO1xuICAgIH07XG4gIH0gLy8gV2hlbiAncmVhY3QtbmF0aXZlLXJlYW5pbWF0ZWQnIGlzIG5vdCBhdmFpbGFibGUgd2Ugd2FudCB0b1xuICAvLyBxdWlldGx5IGNvbnRpbnVlXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1lbXB0eVxuXG59IGNhdGNoIChlKSB7fVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cmVhbmltYXRlZFdyYXBwZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUmVhbmltYXRlZCIsIl91dGlscyIsInJlcXVpcmUiLCJ1c2VTaGFyZWRWYWx1ZSIsInVuZGVmaW5lZCIsIkVycm9yIiwic2V0R2VzdHVyZVN0YXRlIiwiY29uc29sZSIsIndhcm4iLCJ0YWdNZXNzYWdlIiwiZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/reanimatedWrapper.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/rotationGesture.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/rotationGesture.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.RotationGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction changeEventCalculator(current, previous) {\n    \"worklet\";\n    let changePayload;\n    if (previous === undefined) {\n        changePayload = {\n            rotationChange: current.rotation\n        };\n    } else {\n        changePayload = {\n            rotationChange: current.rotation - previous.rotation\n        };\n    }\n    return {\n        ...current,\n        ...changePayload\n    };\n}\nclass RotationGesture extends _gesture.ContinousBaseGesture {\n    constructor(){\n        super();\n        this.handlerName = \"RotationGestureHandler\";\n    }\n    onChange(callback) {\n        // @ts-ignore TS being overprotective, RotationGestureHandlerEventPayload is Record\n        this.handlers.changeEventCalculator = changeEventCalculator;\n        return super.onChange(callback);\n    }\n}\nexports.RotationGesture = RotationGesture; //# sourceMappingURL=rotationGesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvcm90YXRpb25HZXN0dXJlLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCx1QkFBdUIsR0FBRyxLQUFLO0FBRS9CLElBQUlHLFdBQVdDLG1CQUFPQSxDQUFDLHdHQUFXO0FBRWxDLFNBQVNDLHNCQUFzQkMsT0FBTyxFQUFFQyxRQUFRO0lBQzlDO0lBRUEsSUFBSUM7SUFFSixJQUFJRCxhQUFhRSxXQUFXO1FBQzFCRCxnQkFBZ0I7WUFDZEUsZ0JBQWdCSixRQUFRSyxRQUFRO1FBQ2xDO0lBQ0YsT0FBTztRQUNMSCxnQkFBZ0I7WUFDZEUsZ0JBQWdCSixRQUFRSyxRQUFRLEdBQUdKLFNBQVNJLFFBQVE7UUFDdEQ7SUFDRjtJQUVBLE9BQU87UUFBRSxHQUFHTCxPQUFPO1FBQ2pCLEdBQUdFLGFBQWE7SUFDbEI7QUFDRjtBQUVBLE1BQU1OLHdCQUF3QkMsU0FBU1Msb0JBQW9CO0lBQ3pEQyxhQUFjO1FBQ1osS0FBSztRQUNMLElBQUksQ0FBQ0MsV0FBVyxHQUFHO0lBQ3JCO0lBRUFDLFNBQVNDLFFBQVEsRUFBRTtRQUNqQixtRkFBbUY7UUFDbkYsSUFBSSxDQUFDQyxRQUFRLENBQUNaLHFCQUFxQixHQUFHQTtRQUN0QyxPQUFPLEtBQUssQ0FBQ1UsU0FBU0M7SUFDeEI7QUFFRjtBQUVBaEIsdUJBQXVCLEdBQUdFLGlCQUMxQiwyQ0FBMkMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2hhbmRsZXJzL2dlc3R1cmVzL3JvdGF0aW9uR2VzdHVyZS5qcz9lZWEyIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Sb3RhdGlvbkdlc3R1cmUgPSB2b2lkIDA7XG5cbnZhciBfZ2VzdHVyZSA9IHJlcXVpcmUoXCIuL2dlc3R1cmVcIik7XG5cbmZ1bmN0aW9uIGNoYW5nZUV2ZW50Q2FsY3VsYXRvcihjdXJyZW50LCBwcmV2aW91cykge1xuICAnd29ya2xldCc7XG5cbiAgbGV0IGNoYW5nZVBheWxvYWQ7XG5cbiAgaWYgKHByZXZpb3VzID09PSB1bmRlZmluZWQpIHtcbiAgICBjaGFuZ2VQYXlsb2FkID0ge1xuICAgICAgcm90YXRpb25DaGFuZ2U6IGN1cnJlbnQucm90YXRpb25cbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIGNoYW5nZVBheWxvYWQgPSB7XG4gICAgICByb3RhdGlvbkNoYW5nZTogY3VycmVudC5yb3RhdGlvbiAtIHByZXZpb3VzLnJvdGF0aW9uXG4gICAgfTtcbiAgfVxuXG4gIHJldHVybiB7IC4uLmN1cnJlbnQsXG4gICAgLi4uY2hhbmdlUGF5bG9hZFxuICB9O1xufVxuXG5jbGFzcyBSb3RhdGlvbkdlc3R1cmUgZXh0ZW5kcyBfZ2VzdHVyZS5Db250aW5vdXNCYXNlR2VzdHVyZSB7XG4gIGNvbnN0cnVjdG9yKCkge1xuICAgIHN1cGVyKCk7XG4gICAgdGhpcy5oYW5kbGVyTmFtZSA9ICdSb3RhdGlvbkdlc3R1cmVIYW5kbGVyJztcbiAgfVxuXG4gIG9uQ2hhbmdlKGNhbGxiYWNrKSB7XG4gICAgLy8gQHRzLWlnbm9yZSBUUyBiZWluZyBvdmVycHJvdGVjdGl2ZSwgUm90YXRpb25HZXN0dXJlSGFuZGxlckV2ZW50UGF5bG9hZCBpcyBSZWNvcmRcbiAgICB0aGlzLmhhbmRsZXJzLmNoYW5nZUV2ZW50Q2FsY3VsYXRvciA9IGNoYW5nZUV2ZW50Q2FsY3VsYXRvcjtcbiAgICByZXR1cm4gc3VwZXIub25DaGFuZ2UoY2FsbGJhY2spO1xuICB9XG5cbn1cblxuZXhwb3J0cy5Sb3RhdGlvbkdlc3R1cmUgPSBSb3RhdGlvbkdlc3R1cmU7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1yb3RhdGlvbkdlc3R1cmUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiUm90YXRpb25HZXN0dXJlIiwiX2dlc3R1cmUiLCJyZXF1aXJlIiwiY2hhbmdlRXZlbnRDYWxjdWxhdG9yIiwiY3VycmVudCIsInByZXZpb3VzIiwiY2hhbmdlUGF5bG9hZCIsInVuZGVmaW5lZCIsInJvdGF0aW9uQ2hhbmdlIiwicm90YXRpb24iLCJDb250aW5vdXNCYXNlR2VzdHVyZSIsImNvbnN0cnVjdG9yIiwiaGFuZGxlck5hbWUiLCJvbkNoYW5nZSIsImNhbGxiYWNrIiwiaGFuZGxlcnMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/rotationGesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/tapGesture.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/tapGesture.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.TapGesture = void 0;\nvar _gesture = __webpack_require__(/*! ./gesture */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gesture.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass TapGesture extends _gesture.BaseGesture {\n    constructor(){\n        super();\n        _defineProperty(this, \"config\", {});\n        this.handlerName = \"TapGestureHandler\";\n        this.shouldCancelWhenOutside(true);\n    }\n    minPointers(minPointers) {\n        this.config.minPointers = minPointers;\n        return this;\n    }\n    numberOfTaps(count) {\n        this.config.numberOfTaps = count;\n        return this;\n    }\n    maxDistance(maxDist) {\n        this.config.maxDist = maxDist;\n        return this;\n    }\n    maxDuration(duration) {\n        this.config.maxDurationMs = duration;\n        return this;\n    }\n    maxDelay(delay) {\n        this.config.maxDelayMs = delay;\n        return this;\n    }\n    maxDeltaX(delta) {\n        this.config.maxDeltaX = delta;\n        return this;\n    }\n    maxDeltaY(delta) {\n        this.config.maxDeltaY = delta;\n        return this;\n    }\n}\nexports.TapGesture = TapGesture; //# sourceMappingURL=tapGesture.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvdGFwR2VzdHVyZS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUcsS0FBSztBQUUxQixJQUFJRyxXQUFXQyxtQkFBT0EsQ0FBQyx3R0FBVztBQUVsQyxTQUFTQyxnQkFBZ0JDLEdBQUcsRUFBRUMsR0FBRyxFQUFFTixLQUFLO0lBQUksSUFBSU0sT0FBT0QsS0FBSztRQUFFUixPQUFPQyxjQUFjLENBQUNPLEtBQUtDLEtBQUs7WUFBRU4sT0FBT0E7WUFBT08sWUFBWTtZQUFNQyxjQUFjO1lBQU1DLFVBQVU7UUFBSztJQUFJLE9BQU87UUFBRUosR0FBRyxDQUFDQyxJQUFJLEdBQUdOO0lBQU87SUFBRSxPQUFPSztBQUFLO0FBRWhOLE1BQU1KLG1CQUFtQkMsU0FBU1EsV0FBVztJQUMzQ0MsYUFBYztRQUNaLEtBQUs7UUFFTFAsZ0JBQWdCLElBQUksRUFBRSxVQUFVLENBQUM7UUFFakMsSUFBSSxDQUFDUSxXQUFXLEdBQUc7UUFDbkIsSUFBSSxDQUFDQyx1QkFBdUIsQ0FBQztJQUMvQjtJQUVBQyxZQUFZQSxXQUFXLEVBQUU7UUFDdkIsSUFBSSxDQUFDQyxNQUFNLENBQUNELFdBQVcsR0FBR0E7UUFDMUIsT0FBTyxJQUFJO0lBQ2I7SUFFQUUsYUFBYUMsS0FBSyxFQUFFO1FBQ2xCLElBQUksQ0FBQ0YsTUFBTSxDQUFDQyxZQUFZLEdBQUdDO1FBQzNCLE9BQU8sSUFBSTtJQUNiO0lBRUFDLFlBQVlDLE9BQU8sRUFBRTtRQUNuQixJQUFJLENBQUNKLE1BQU0sQ0FBQ0ksT0FBTyxHQUFHQTtRQUN0QixPQUFPLElBQUk7SUFDYjtJQUVBQyxZQUFZQyxRQUFRLEVBQUU7UUFDcEIsSUFBSSxDQUFDTixNQUFNLENBQUNPLGFBQWEsR0FBR0Q7UUFDNUIsT0FBTyxJQUFJO0lBQ2I7SUFFQUUsU0FBU0MsS0FBSyxFQUFFO1FBQ2QsSUFBSSxDQUFDVCxNQUFNLENBQUNVLFVBQVUsR0FBR0Q7UUFDekIsT0FBTyxJQUFJO0lBQ2I7SUFFQUUsVUFBVUMsS0FBSyxFQUFFO1FBQ2YsSUFBSSxDQUFDWixNQUFNLENBQUNXLFNBQVMsR0FBR0M7UUFDeEIsT0FBTyxJQUFJO0lBQ2I7SUFFQUMsVUFBVUQsS0FBSyxFQUFFO1FBQ2YsSUFBSSxDQUFDWixNQUFNLENBQUNhLFNBQVMsR0FBR0Q7UUFDeEIsT0FBTyxJQUFJO0lBQ2I7QUFFRjtBQUVBNUIsa0JBQWtCLEdBQUdFLFlBQ3JCLHNDQUFzQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpdF9wbHVzX3BsdXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvZ2VzdHVyZXMvdGFwR2VzdHVyZS5qcz80OTMzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5UYXBHZXN0dXJlID0gdm9pZCAwO1xuXG52YXIgX2dlc3R1cmUgPSByZXF1aXJlKFwiLi9nZXN0dXJlXCIpO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG5jbGFzcyBUYXBHZXN0dXJlIGV4dGVuZHMgX2dlc3R1cmUuQmFzZUdlc3R1cmUge1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgX2RlZmluZVByb3BlcnR5KHRoaXMsIFwiY29uZmlnXCIsIHt9KTtcblxuICAgIHRoaXMuaGFuZGxlck5hbWUgPSAnVGFwR2VzdHVyZUhhbmRsZXInO1xuICAgIHRoaXMuc2hvdWxkQ2FuY2VsV2hlbk91dHNpZGUodHJ1ZSk7XG4gIH1cblxuICBtaW5Qb2ludGVycyhtaW5Qb2ludGVycykge1xuICAgIHRoaXMuY29uZmlnLm1pblBvaW50ZXJzID0gbWluUG9pbnRlcnM7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBudW1iZXJPZlRhcHMoY291bnQpIHtcbiAgICB0aGlzLmNvbmZpZy5udW1iZXJPZlRhcHMgPSBjb3VudDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIG1heERpc3RhbmNlKG1heERpc3QpIHtcbiAgICB0aGlzLmNvbmZpZy5tYXhEaXN0ID0gbWF4RGlzdDtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIG1heER1cmF0aW9uKGR1cmF0aW9uKSB7XG4gICAgdGhpcy5jb25maWcubWF4RHVyYXRpb25NcyA9IGR1cmF0aW9uO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgbWF4RGVsYXkoZGVsYXkpIHtcbiAgICB0aGlzLmNvbmZpZy5tYXhEZWxheU1zID0gZGVsYXk7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBtYXhEZWx0YVgoZGVsdGEpIHtcbiAgICB0aGlzLmNvbmZpZy5tYXhEZWx0YVggPSBkZWx0YTtcbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIG1heERlbHRhWShkZWx0YSkge1xuICAgIHRoaXMuY29uZmlnLm1heERlbHRhWSA9IGRlbHRhO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbn1cblxuZXhwb3J0cy5UYXBHZXN0dXJlID0gVGFwR2VzdHVyZTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXRhcEdlc3R1cmUuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiVGFwR2VzdHVyZSIsIl9nZXN0dXJlIiwicmVxdWlyZSIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIkJhc2VHZXN0dXJlIiwiY29uc3RydWN0b3IiLCJoYW5kbGVyTmFtZSIsInNob3VsZENhbmNlbFdoZW5PdXRzaWRlIiwibWluUG9pbnRlcnMiLCJjb25maWciLCJudW1iZXJPZlRhcHMiLCJjb3VudCIsIm1heERpc3RhbmNlIiwibWF4RGlzdCIsIm1heER1cmF0aW9uIiwiZHVyYXRpb24iLCJtYXhEdXJhdGlvbk1zIiwibWF4RGVsYXkiLCJkZWxheSIsIm1heERlbGF5TXMiLCJtYXhEZWx0YVgiLCJkZWx0YSIsIm1heERlbHRhWSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/tapGesture.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/handlers/handlersRegistry.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/handlers/handlersRegistry.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getNextHandlerTag = getNextHandlerTag;\nexports.registerHandler = registerHandler;\nexports.registerOldGestureHandler = registerOldGestureHandler;\nexports.unregisterHandler = unregisterHandler;\nexports.findHandler = findHandler;\nexports.findOldGestureHandler = findOldGestureHandler;\nexports.findHandlerByTestID = findHandlerByTestID;\nexports.handlerIDToTag = void 0;\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/utils.js\");\nconst handlerIDToTag = {};\nexports.handlerIDToTag = handlerIDToTag;\nconst gestures = new Map();\nconst oldHandlers = new Map();\nconst testIDs = new Map();\nlet handlerTag = 1;\nfunction getNextHandlerTag() {\n    return handlerTag++;\n}\nfunction registerHandler(handlerTag, handler, testID) {\n    gestures.set(handlerTag, handler);\n    if ((0, _utils.isJestEnv)() && testID) {\n        testIDs.set(testID, handlerTag);\n    }\n}\nfunction registerOldGestureHandler(handlerTag, handler) {\n    oldHandlers.set(handlerTag, handler);\n}\nfunction unregisterHandler(handlerTag, testID) {\n    gestures.delete(handlerTag);\n    if ((0, _utils.isJestEnv)() && testID) {\n        testIDs.delete(testID);\n    }\n}\nfunction findHandler(handlerTag) {\n    return gestures.get(handlerTag);\n}\nfunction findOldGestureHandler(handlerTag) {\n    return oldHandlers.get(handlerTag);\n}\nfunction findHandlerByTestID(testID) {\n    const handlerTag = testIDs.get(testID);\n    if (handlerTag !== undefined) {\n        var _findHandler;\n        return (_findHandler = findHandler(handlerTag)) !== null && _findHandler !== void 0 ? _findHandler : null;\n    }\n    return null;\n} //# sourceMappingURL=handlersRegistry.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaGFuZGxlcnMvaGFuZGxlcnNSZWdpc3RyeS5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQseUJBQXlCLEdBQUdFO0FBQzVCRix1QkFBdUIsR0FBR0c7QUFDMUJILGlDQUFpQyxHQUFHSTtBQUNwQ0oseUJBQXlCLEdBQUdLO0FBQzVCTCxtQkFBbUIsR0FBR007QUFDdEJOLDZCQUE2QixHQUFHTztBQUNoQ1AsMkJBQTJCLEdBQUdRO0FBQzlCUixzQkFBc0IsR0FBRyxLQUFLO0FBRTlCLElBQUlVLFNBQVNDLG1CQUFPQSxDQUFDLG1GQUFVO0FBRS9CLE1BQU1GLGlCQUFpQixDQUFDO0FBQ3hCVCxzQkFBc0IsR0FBR1M7QUFDekIsTUFBTUcsV0FBVyxJQUFJQztBQUNyQixNQUFNQyxjQUFjLElBQUlEO0FBQ3hCLE1BQU1FLFVBQVUsSUFBSUY7QUFDcEIsSUFBSUcsYUFBYTtBQUVqQixTQUFTZDtJQUNQLE9BQU9jO0FBQ1Q7QUFFQSxTQUFTYixnQkFBZ0JhLFVBQVUsRUFBRUMsT0FBTyxFQUFFQyxNQUFNO0lBQ2xETixTQUFTTyxHQUFHLENBQUNILFlBQVlDO0lBRXpCLElBQUksQ0FBQyxHQUFHUCxPQUFPVSxTQUFTLE9BQU9GLFFBQVE7UUFDckNILFFBQVFJLEdBQUcsQ0FBQ0QsUUFBUUY7SUFDdEI7QUFDRjtBQUVBLFNBQVNaLDBCQUEwQlksVUFBVSxFQUFFQyxPQUFPO0lBQ3BESCxZQUFZSyxHQUFHLENBQUNILFlBQVlDO0FBQzlCO0FBRUEsU0FBU1osa0JBQWtCVyxVQUFVLEVBQUVFLE1BQU07SUFDM0NOLFNBQVNTLE1BQU0sQ0FBQ0w7SUFFaEIsSUFBSSxDQUFDLEdBQUdOLE9BQU9VLFNBQVMsT0FBT0YsUUFBUTtRQUNyQ0gsUUFBUU0sTUFBTSxDQUFDSDtJQUNqQjtBQUNGO0FBRUEsU0FBU1osWUFBWVUsVUFBVTtJQUM3QixPQUFPSixTQUFTVSxHQUFHLENBQUNOO0FBQ3RCO0FBRUEsU0FBU1Qsc0JBQXNCUyxVQUFVO0lBQ3ZDLE9BQU9GLFlBQVlRLEdBQUcsQ0FBQ047QUFDekI7QUFFQSxTQUFTUixvQkFBb0JVLE1BQU07SUFDakMsTUFBTUYsYUFBYUQsUUFBUU8sR0FBRyxDQUFDSjtJQUUvQixJQUFJRixlQUFlTyxXQUFXO1FBQzVCLElBQUlDO1FBRUosT0FBTyxDQUFDQSxlQUFlbEIsWUFBWVUsV0FBVSxNQUFPLFFBQVFRLGlCQUFpQixLQUFLLElBQUlBLGVBQWU7SUFDdkc7SUFFQSxPQUFPO0FBQ1QsRUFDQSw0Q0FBNEMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL2hhbmRsZXJzL2hhbmRsZXJzUmVnaXN0cnkuanM/ODhmMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZ2V0TmV4dEhhbmRsZXJUYWcgPSBnZXROZXh0SGFuZGxlclRhZztcbmV4cG9ydHMucmVnaXN0ZXJIYW5kbGVyID0gcmVnaXN0ZXJIYW5kbGVyO1xuZXhwb3J0cy5yZWdpc3Rlck9sZEdlc3R1cmVIYW5kbGVyID0gcmVnaXN0ZXJPbGRHZXN0dXJlSGFuZGxlcjtcbmV4cG9ydHMudW5yZWdpc3RlckhhbmRsZXIgPSB1bnJlZ2lzdGVySGFuZGxlcjtcbmV4cG9ydHMuZmluZEhhbmRsZXIgPSBmaW5kSGFuZGxlcjtcbmV4cG9ydHMuZmluZE9sZEdlc3R1cmVIYW5kbGVyID0gZmluZE9sZEdlc3R1cmVIYW5kbGVyO1xuZXhwb3J0cy5maW5kSGFuZGxlckJ5VGVzdElEID0gZmluZEhhbmRsZXJCeVRlc3RJRDtcbmV4cG9ydHMuaGFuZGxlcklEVG9UYWcgPSB2b2lkIDA7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi4vdXRpbHNcIik7XG5cbmNvbnN0IGhhbmRsZXJJRFRvVGFnID0ge307XG5leHBvcnRzLmhhbmRsZXJJRFRvVGFnID0gaGFuZGxlcklEVG9UYWc7XG5jb25zdCBnZXN0dXJlcyA9IG5ldyBNYXAoKTtcbmNvbnN0IG9sZEhhbmRsZXJzID0gbmV3IE1hcCgpO1xuY29uc3QgdGVzdElEcyA9IG5ldyBNYXAoKTtcbmxldCBoYW5kbGVyVGFnID0gMTtcblxuZnVuY3Rpb24gZ2V0TmV4dEhhbmRsZXJUYWcoKSB7XG4gIHJldHVybiBoYW5kbGVyVGFnKys7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVySGFuZGxlcihoYW5kbGVyVGFnLCBoYW5kbGVyLCB0ZXN0SUQpIHtcbiAgZ2VzdHVyZXMuc2V0KGhhbmRsZXJUYWcsIGhhbmRsZXIpO1xuXG4gIGlmICgoMCwgX3V0aWxzLmlzSmVzdEVudikoKSAmJiB0ZXN0SUQpIHtcbiAgICB0ZXN0SURzLnNldCh0ZXN0SUQsIGhhbmRsZXJUYWcpO1xuICB9XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyT2xkR2VzdHVyZUhhbmRsZXIoaGFuZGxlclRhZywgaGFuZGxlcikge1xuICBvbGRIYW5kbGVycy5zZXQoaGFuZGxlclRhZywgaGFuZGxlcik7XG59XG5cbmZ1bmN0aW9uIHVucmVnaXN0ZXJIYW5kbGVyKGhhbmRsZXJUYWcsIHRlc3RJRCkge1xuICBnZXN0dXJlcy5kZWxldGUoaGFuZGxlclRhZyk7XG5cbiAgaWYgKCgwLCBfdXRpbHMuaXNKZXN0RW52KSgpICYmIHRlc3RJRCkge1xuICAgIHRlc3RJRHMuZGVsZXRlKHRlc3RJRCk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZmluZEhhbmRsZXIoaGFuZGxlclRhZykge1xuICByZXR1cm4gZ2VzdHVyZXMuZ2V0KGhhbmRsZXJUYWcpO1xufVxuXG5mdW5jdGlvbiBmaW5kT2xkR2VzdHVyZUhhbmRsZXIoaGFuZGxlclRhZykge1xuICByZXR1cm4gb2xkSGFuZGxlcnMuZ2V0KGhhbmRsZXJUYWcpO1xufVxuXG5mdW5jdGlvbiBmaW5kSGFuZGxlckJ5VGVzdElEKHRlc3RJRCkge1xuICBjb25zdCBoYW5kbGVyVGFnID0gdGVzdElEcy5nZXQodGVzdElEKTtcblxuICBpZiAoaGFuZGxlclRhZyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgdmFyIF9maW5kSGFuZGxlcjtcblxuICAgIHJldHVybiAoX2ZpbmRIYW5kbGVyID0gZmluZEhhbmRsZXIoaGFuZGxlclRhZykpICE9PSBudWxsICYmIF9maW5kSGFuZGxlciAhPT0gdm9pZCAwID8gX2ZpbmRIYW5kbGVyIDogbnVsbDtcbiAgfVxuXG4gIHJldHVybiBudWxsO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aGFuZGxlcnNSZWdpc3RyeS5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJnZXROZXh0SGFuZGxlclRhZyIsInJlZ2lzdGVySGFuZGxlciIsInJlZ2lzdGVyT2xkR2VzdHVyZUhhbmRsZXIiLCJ1bnJlZ2lzdGVySGFuZGxlciIsImZpbmRIYW5kbGVyIiwiZmluZE9sZEdlc3R1cmVIYW5kbGVyIiwiZmluZEhhbmRsZXJCeVRlc3RJRCIsImhhbmRsZXJJRFRvVGFnIiwiX3V0aWxzIiwicmVxdWlyZSIsImdlc3R1cmVzIiwiTWFwIiwib2xkSGFuZGxlcnMiLCJ0ZXN0SURzIiwiaGFuZGxlclRhZyIsImhhbmRsZXIiLCJ0ZXN0SUQiLCJzZXQiLCJpc0plc3RFbnYiLCJkZWxldGUiLCJnZXQiLCJ1bmRlZmluZWQiLCJfZmluZEhhbmRsZXIiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/handlers/handlersRegistry.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/index.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/index.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nObject.defineProperty(exports, \"Directions\", ({\n    enumerable: true,\n    get: function() {\n        return _Directions.Directions;\n    }\n}));\nObject.defineProperty(exports, \"State\", ({\n    enumerable: true,\n    get: function() {\n        return _State.State;\n    }\n}));\nObject.defineProperty(exports, \"gestureHandlerRootHOC\", ({\n    enumerable: true,\n    get: function() {\n        return _gestureHandlerRootHOC.default;\n    }\n}));\nObject.defineProperty(exports, \"GestureHandlerRootView\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureHandlerRootView.default;\n    }\n}));\nObject.defineProperty(exports, \"TapGestureHandler\", ({\n    enumerable: true,\n    get: function() {\n        return _TapGestureHandler.TapGestureHandler;\n    }\n}));\nObject.defineProperty(exports, \"ForceTouchGestureHandler\", ({\n    enumerable: true,\n    get: function() {\n        return _ForceTouchGestureHandler.ForceTouchGestureHandler;\n    }\n}));\nObject.defineProperty(exports, \"LongPressGestureHandler\", ({\n    enumerable: true,\n    get: function() {\n        return _LongPressGestureHandler.LongPressGestureHandler;\n    }\n}));\nObject.defineProperty(exports, \"PanGestureHandler\", ({\n    enumerable: true,\n    get: function() {\n        return _PanGestureHandler.PanGestureHandler;\n    }\n}));\nObject.defineProperty(exports, \"PinchGestureHandler\", ({\n    enumerable: true,\n    get: function() {\n        return _PinchGestureHandler.PinchGestureHandler;\n    }\n}));\nObject.defineProperty(exports, \"RotationGestureHandler\", ({\n    enumerable: true,\n    get: function() {\n        return _RotationGestureHandler.RotationGestureHandler;\n    }\n}));\nObject.defineProperty(exports, \"FlingGestureHandler\", ({\n    enumerable: true,\n    get: function() {\n        return _FlingGestureHandler.FlingGestureHandler;\n    }\n}));\nObject.defineProperty(exports, \"createNativeWrapper\", ({\n    enumerable: true,\n    get: function() {\n        return _createNativeWrapper.default;\n    }\n}));\nObject.defineProperty(exports, \"GestureDetector\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureDetector.GestureDetector;\n    }\n}));\nObject.defineProperty(exports, \"Gesture\", ({\n    enumerable: true,\n    get: function() {\n        return _gestureObjects.GestureObjects;\n    }\n}));\nObject.defineProperty(exports, \"NativeViewGestureHandler\", ({\n    enumerable: true,\n    get: function() {\n        return _NativeViewGestureHandler.NativeViewGestureHandler;\n    }\n}));\nObject.defineProperty(exports, \"RawButton\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureButtons.RawButton;\n    }\n}));\nObject.defineProperty(exports, \"BaseButton\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureButtons.BaseButton;\n    }\n}));\nObject.defineProperty(exports, \"RectButton\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureButtons.RectButton;\n    }\n}));\nObject.defineProperty(exports, \"BorderlessButton\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureButtons.BorderlessButton;\n    }\n}));\nObject.defineProperty(exports, \"TouchableHighlight\", ({\n    enumerable: true,\n    get: function() {\n        return _touchables.TouchableHighlight;\n    }\n}));\nObject.defineProperty(exports, \"TouchableNativeFeedback\", ({\n    enumerable: true,\n    get: function() {\n        return _touchables.TouchableNativeFeedback;\n    }\n}));\nObject.defineProperty(exports, \"TouchableOpacity\", ({\n    enumerable: true,\n    get: function() {\n        return _touchables.TouchableOpacity;\n    }\n}));\nObject.defineProperty(exports, \"TouchableWithoutFeedback\", ({\n    enumerable: true,\n    get: function() {\n        return _touchables.TouchableWithoutFeedback;\n    }\n}));\nObject.defineProperty(exports, \"ScrollView\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureComponents.ScrollView;\n    }\n}));\nObject.defineProperty(exports, \"Switch\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureComponents.Switch;\n    }\n}));\nObject.defineProperty(exports, \"TextInput\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureComponents.TextInput;\n    }\n}));\nObject.defineProperty(exports, \"DrawerLayoutAndroid\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureComponents.DrawerLayoutAndroid;\n    }\n}));\nObject.defineProperty(exports, \"FlatList\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureComponents.FlatList;\n    }\n}));\nObject.defineProperty(exports, \"RefreshControl\", ({\n    enumerable: true,\n    get: function() {\n        return _GestureComponents.RefreshControl;\n    }\n}));\nObject.defineProperty(exports, \"Swipeable\", ({\n    enumerable: true,\n    get: function() {\n        return _Swipeable.default;\n    }\n}));\nObject.defineProperty(exports, \"DrawerLayout\", ({\n    enumerable: true,\n    get: function() {\n        return _DrawerLayout.default;\n    }\n}));\nObject.defineProperty(exports, \"enableExperimentalWebImplementation\", ({\n    enumerable: true,\n    get: function() {\n        return _EnableExperimentalWebImplementation.enableExperimentalWebImplementation;\n    }\n}));\nvar _init = __webpack_require__(/*! ./init */ \"./node_modules/react-native-gesture-handler/lib/commonjs/init.js\");\nvar _Directions = __webpack_require__(/*! ./Directions */ \"./node_modules/react-native-gesture-handler/lib/commonjs/Directions.js\");\nvar _State = __webpack_require__(/*! ./State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _gestureHandlerRootHOC = _interopRequireDefault(__webpack_require__(/*! ./gestureHandlerRootHOC */ \"./node_modules/react-native-gesture-handler/lib/commonjs/gestureHandlerRootHOC.js\"));\nvar _GestureHandlerRootView = _interopRequireDefault(__webpack_require__(/*! ./GestureHandlerRootView */ \"./node_modules/react-native-gesture-handler/lib/commonjs/GestureHandlerRootView.web.js\"));\nvar _TapGestureHandler = __webpack_require__(/*! ./handlers/TapGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/TapGestureHandler.js\");\nvar _ForceTouchGestureHandler = __webpack_require__(/*! ./handlers/ForceTouchGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/ForceTouchGestureHandler.js\");\nvar _LongPressGestureHandler = __webpack_require__(/*! ./handlers/LongPressGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/LongPressGestureHandler.js\");\nvar _PanGestureHandler = __webpack_require__(/*! ./handlers/PanGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PanGestureHandler.js\");\nvar _PinchGestureHandler = __webpack_require__(/*! ./handlers/PinchGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/PinchGestureHandler.js\");\nvar _RotationGestureHandler = __webpack_require__(/*! ./handlers/RotationGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/RotationGestureHandler.js\");\nvar _FlingGestureHandler = __webpack_require__(/*! ./handlers/FlingGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/FlingGestureHandler.js\");\nvar _createNativeWrapper = _interopRequireDefault(__webpack_require__(/*! ./handlers/createNativeWrapper */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/createNativeWrapper.js\"));\nvar _GestureDetector = __webpack_require__(/*! ./handlers/gestures/GestureDetector */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/GestureDetector.js\");\nvar _gestureObjects = __webpack_require__(/*! ./handlers/gestures/gestureObjects */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/gestureObjects.js\");\nvar _NativeViewGestureHandler = __webpack_require__(/*! ./handlers/NativeViewGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/NativeViewGestureHandler.js\");\nvar _GestureButtons = __webpack_require__(/*! ./components/GestureButtons */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureButtons.js\");\nvar _touchables = __webpack_require__(/*! ./components/touchables */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/touchables/index.js\");\nvar _GestureComponents = __webpack_require__(/*! ./components/GestureComponents */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/GestureComponents.web.js\");\nvar _Swipeable = _interopRequireDefault(__webpack_require__(/*! ./components/Swipeable */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/Swipeable.js\"));\nvar _DrawerLayout = _interopRequireDefault(__webpack_require__(/*! ./components/DrawerLayout */ \"./node_modules/react-native-gesture-handler/lib/commonjs/components/DrawerLayout.js\"));\nvar _EnableExperimentalWebImplementation = __webpack_require__(/*! ./EnableExperimentalWebImplementation */ \"./node_modules/react-native-gesture-handler/lib/commonjs/EnableExperimentalWebImplementation.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n(0, _init.initialize)(); //# sourceMappingURL=index.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/index.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/init.js":
/*!************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/init.js ***!
  \************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.initialize = initialize;\nexports.maybeInitializeFabric = maybeInitializeFabric;\nvar _eventReceiver = __webpack_require__(/*! ./handlers/gestures/eventReceiver */ \"./node_modules/react-native-gesture-handler/lib/commonjs/handlers/gestures/eventReceiver.js\");\nvar _RNGestureHandlerModule = _interopRequireDefault(__webpack_require__(/*! ./RNGestureHandlerModule */ \"./node_modules/react-native-gesture-handler/lib/commonjs/RNGestureHandlerModule.web.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nlet fabricInitialized = false;\nfunction initialize() {\n    (0, _eventReceiver.startListening)();\n} // since isFabric() may give wrong results before the first render, we call this\n// method during render of GestureHandlerRootView\nfunction maybeInitializeFabric() {\n    if ((0, _utils.isFabric)() && !fabricInitialized) {\n        _RNGestureHandlerModule.default.install();\n        fabricInitialized = true;\n    }\n} //# sourceMappingURL=init.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaW5pdC5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUdFO0FBQ3JCRiw2QkFBNkIsR0FBR0c7QUFFaEMsSUFBSUMsaUJBQWlCQyxtQkFBT0EsQ0FBQyxzSUFBbUM7QUFFaEUsSUFBSUMsMEJBQTBCQyx1QkFBdUJGLG1CQUFPQSxDQUFDLHdIQUEwQjtBQUV2RixJQUFJRyxTQUFTSCxtQkFBT0EsQ0FBQyxrRkFBUztBQUU5QixTQUFTRSx1QkFBdUJFLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUUsU0FBU0Y7SUFBSTtBQUFHO0FBRTlGLElBQUlHLG9CQUFvQjtBQUV4QixTQUFTVjtJQUNOLElBQUdFLGVBQWVTLGNBQWM7QUFDbkMsRUFBRSxnRkFBZ0Y7QUFDbEYsaURBQWlEO0FBR2pELFNBQVNWO0lBQ1AsSUFBSSxDQUFDLEdBQUdLLE9BQU9NLFFBQVEsT0FBTyxDQUFDRixtQkFBbUI7UUFDaEROLHdCQUF3QkssT0FBTyxDQUFDSSxPQUFPO1FBRXZDSCxvQkFBb0I7SUFDdEI7QUFDRixFQUNBLGdDQUFnQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpdF9wbHVzX3BsdXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvaW5pdC5qcz9hM2IzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pbml0aWFsaXplID0gaW5pdGlhbGl6ZTtcbmV4cG9ydHMubWF5YmVJbml0aWFsaXplRmFicmljID0gbWF5YmVJbml0aWFsaXplRmFicmljO1xuXG52YXIgX2V2ZW50UmVjZWl2ZXIgPSByZXF1aXJlKFwiLi9oYW5kbGVycy9nZXN0dXJlcy9ldmVudFJlY2VpdmVyXCIpO1xuXG52YXIgX1JOR2VzdHVyZUhhbmRsZXJNb2R1bGUgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1JOR2VzdHVyZUhhbmRsZXJNb2R1bGVcIikpO1xuXG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmxldCBmYWJyaWNJbml0aWFsaXplZCA9IGZhbHNlO1xuXG5mdW5jdGlvbiBpbml0aWFsaXplKCkge1xuICAoMCwgX2V2ZW50UmVjZWl2ZXIuc3RhcnRMaXN0ZW5pbmcpKCk7XG59IC8vIHNpbmNlIGlzRmFicmljKCkgbWF5IGdpdmUgd3JvbmcgcmVzdWx0cyBiZWZvcmUgdGhlIGZpcnN0IHJlbmRlciwgd2UgY2FsbCB0aGlzXG4vLyBtZXRob2QgZHVyaW5nIHJlbmRlciBvZiBHZXN0dXJlSGFuZGxlclJvb3RWaWV3XG5cblxuZnVuY3Rpb24gbWF5YmVJbml0aWFsaXplRmFicmljKCkge1xuICBpZiAoKDAsIF91dGlscy5pc0ZhYnJpYykoKSAmJiAhZmFicmljSW5pdGlhbGl6ZWQpIHtcbiAgICBfUk5HZXN0dXJlSGFuZGxlck1vZHVsZS5kZWZhdWx0Lmluc3RhbGwoKTtcblxuICAgIGZhYnJpY0luaXRpYWxpemVkID0gdHJ1ZTtcbiAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9aW5pdC5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJpbml0aWFsaXplIiwibWF5YmVJbml0aWFsaXplRmFicmljIiwiX2V2ZW50UmVjZWl2ZXIiLCJyZXF1aXJlIiwiX1JOR2VzdHVyZUhhbmRsZXJNb2R1bGUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX3V0aWxzIiwib2JqIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJmYWJyaWNJbml0aWFsaXplZCIsInN0YXJ0TGlzdGVuaW5nIiwiaXNGYWJyaWMiLCJpbnN0YWxsIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/init.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/utils.js":
/*!*************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/utils.js ***!
  \*************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.toArray = toArray;\nexports.withPrevAndCurrent = withPrevAndCurrent;\nexports.hasProperty = hasProperty;\nexports.isJestEnv = isJestEnv;\nexports.tagMessage = tagMessage;\nexports.isFabric = isFabric;\nexports.shouldUseCodegenNativeComponent = shouldUseCodegenNativeComponent;\nexports.isRemoteDebuggingEnabled = isRemoteDebuggingEnabled;\nexports.REACT_NATIVE_VERSION = void 0;\nvar _package = _interopRequireDefault(__webpack_require__(/*! react-native/package.json */ \"./node_modules/react-native/package.json\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst [majorStr, minorStr] = _package.default.version.split(\".\");\nconst REACT_NATIVE_VERSION = {\n    major: parseInt(majorStr, 10),\n    minor: parseInt(minorStr, 10)\n};\nexports.REACT_NATIVE_VERSION = REACT_NATIVE_VERSION;\nfunction toArray(object) {\n    if (!Array.isArray(object)) {\n        return [\n            object\n        ];\n    }\n    return object;\n}\nfunction withPrevAndCurrent(array, mapFn) {\n    const previousArr = [\n        null\n    ];\n    const currentArr = [\n        ...array\n    ];\n    const transformedArr = [];\n    currentArr.forEach((current, i)=>{\n        const previous = previousArr[i];\n        const transformed = mapFn(previous, current);\n        previousArr.push(transformed);\n        transformedArr.push(transformed);\n    });\n    return transformedArr;\n} // eslint-disable-next-line @typescript-eslint/ban-types\nfunction hasProperty(object, key) {\n    return Object.prototype.hasOwnProperty.call(object, key);\n}\nfunction isJestEnv() {\n    // @ts-ignore Do not use `@types/node` because it will prioritise Node types over RN types which breaks the types (ex. setTimeout) in React Native projects.\n    return hasProperty(global, \"process\") && !!process.env.JEST_WORKER_ID;\n}\nfunction tagMessage(msg) {\n    return `[react-native-gesture-handler] ${msg}`;\n} // helper method to check whether Fabric is enabled, however global.nativeFabricUIManager\n// may not be initialized before the first render\nfunction isFabric() {\n    var _global;\n    // @ts-expect-error nativeFabricUIManager is not yet included in the RN types\n    return !!((_global = global) !== null && _global !== void 0 && _global.nativeFabricUIManager);\n}\nfunction shouldUseCodegenNativeComponent() {\n    // use codegenNativeComponent starting with RN 0.68\n    return REACT_NATIVE_VERSION.minor >= 68 || REACT_NATIVE_VERSION.major > 0;\n}\nfunction isRemoteDebuggingEnabled() {\n    // react-native-reanimated checks if in remote debugging in the same way\n    // @ts-ignore global is available but node types are not included\n    return !global.nativeCallSyncHook || global.__REMOTEDEV__;\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvdXRpbHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGVBQWUsR0FBR0U7QUFDbEJGLDBCQUEwQixHQUFHRztBQUM3QkgsbUJBQW1CLEdBQUdJO0FBQ3RCSixpQkFBaUIsR0FBR0s7QUFDcEJMLGtCQUFrQixHQUFHTTtBQUNyQk4sZ0JBQWdCLEdBQUdPO0FBQ25CUCx1Q0FBdUMsR0FBR1E7QUFDMUNSLGdDQUFnQyxHQUFHUztBQUNuQ1QsNEJBQTRCLEdBQUcsS0FBSztBQUVwQyxJQUFJVyxXQUFXQyx1QkFBdUJDLG1CQUFPQSxDQUFDLDJFQUEyQjtBQUV6RSxTQUFTRCx1QkFBdUJFLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUUsU0FBU0Y7SUFBSTtBQUFHO0FBRTlGLE1BQU0sQ0FBQ0csVUFBVUMsU0FBUyxHQUFHUCxTQUFTSyxPQUFPLENBQUNHLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDO0FBRTVELE1BQU1WLHVCQUF1QjtJQUMzQlcsT0FBT0MsU0FBU0wsVUFBVTtJQUMxQk0sT0FBT0QsU0FBU0osVUFBVTtBQUM1QjtBQUNBbEIsNEJBQTRCLEdBQUdVO0FBRS9CLFNBQVNSLFFBQVFzQixNQUFNO0lBQ3JCLElBQUksQ0FBQ0MsTUFBTUMsT0FBTyxDQUFDRixTQUFTO1FBQzFCLE9BQU87WUFBQ0E7U0FBTztJQUNqQjtJQUVBLE9BQU9BO0FBQ1Q7QUFFQSxTQUFTckIsbUJBQW1Cd0IsS0FBSyxFQUFFQyxLQUFLO0lBQ3RDLE1BQU1DLGNBQWM7UUFBQztLQUFLO0lBQzFCLE1BQU1DLGFBQWE7V0FBSUg7S0FBTTtJQUM3QixNQUFNSSxpQkFBaUIsRUFBRTtJQUN6QkQsV0FBV0UsT0FBTyxDQUFDLENBQUNDLFNBQVNDO1FBQzNCLE1BQU1DLFdBQVdOLFdBQVcsQ0FBQ0ssRUFBRTtRQUMvQixNQUFNRSxjQUFjUixNQUFNTyxVQUFVRjtRQUNwQ0osWUFBWVEsSUFBSSxDQUFDRDtRQUNqQkwsZUFBZU0sSUFBSSxDQUFDRDtJQUN0QjtJQUNBLE9BQU9MO0FBQ1QsRUFBRSx3REFBd0Q7QUFHMUQsU0FBUzNCLFlBQVlvQixNQUFNLEVBQUVjLEdBQUc7SUFDOUIsT0FBT3hDLE9BQU95QyxTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDakIsUUFBUWM7QUFDdEQ7QUFFQSxTQUFTakM7SUFDUCw0SkFBNEo7SUFDNUosT0FBT0QsWUFBWXNDLFFBQVEsY0FBYyxDQUFDLENBQUNDLFFBQVFDLEdBQUcsQ0FBQ0MsY0FBYztBQUN2RTtBQUVBLFNBQVN2QyxXQUFXd0MsR0FBRztJQUNyQixPQUFPLENBQUMsK0JBQStCLEVBQUVBLElBQUksQ0FBQztBQUNoRCxFQUFFLHlGQUF5RjtBQUMzRixpREFBaUQ7QUFHakQsU0FBU3ZDO0lBQ1AsSUFBSXdDO0lBRUosNkVBQTZFO0lBQzdFLE9BQU8sQ0FBQyxDQUFFLEVBQUNBLFVBQVVMLE1BQUssTUFBTyxRQUFRSyxZQUFZLEtBQUssS0FBS0EsUUFBUUMscUJBQXFCO0FBQzlGO0FBRUEsU0FBU3hDO0lBQ1AsbURBQW1EO0lBQ25ELE9BQU9FLHFCQUFxQmEsS0FBSyxJQUFJLE1BQU1iLHFCQUFxQlcsS0FBSyxHQUFHO0FBQzFFO0FBRUEsU0FBU1o7SUFDUCx3RUFBd0U7SUFDeEUsaUVBQWlFO0lBQ2pFLE9BQU8sQ0FBQ2lDLE9BQU9PLGtCQUFrQixJQUFJUCxPQUFPUSxhQUFhO0FBQzNELEVBQ0EsaUNBQWlDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZml0X3BsdXNfcGx1cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy91dGlscy5qcz9lYWRiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy50b0FycmF5ID0gdG9BcnJheTtcbmV4cG9ydHMud2l0aFByZXZBbmRDdXJyZW50ID0gd2l0aFByZXZBbmRDdXJyZW50O1xuZXhwb3J0cy5oYXNQcm9wZXJ0eSA9IGhhc1Byb3BlcnR5O1xuZXhwb3J0cy5pc0plc3RFbnYgPSBpc0plc3RFbnY7XG5leHBvcnRzLnRhZ01lc3NhZ2UgPSB0YWdNZXNzYWdlO1xuZXhwb3J0cy5pc0ZhYnJpYyA9IGlzRmFicmljO1xuZXhwb3J0cy5zaG91bGRVc2VDb2RlZ2VuTmF0aXZlQ29tcG9uZW50ID0gc2hvdWxkVXNlQ29kZWdlbk5hdGl2ZUNvbXBvbmVudDtcbmV4cG9ydHMuaXNSZW1vdGVEZWJ1Z2dpbmdFbmFibGVkID0gaXNSZW1vdGVEZWJ1Z2dpbmdFbmFibGVkO1xuZXhwb3J0cy5SRUFDVF9OQVRJVkVfVkVSU0lPTiA9IHZvaWQgMDtcblxudmFyIF9wYWNrYWdlID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicmVhY3QtbmF0aXZlL3BhY2thZ2UuanNvblwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbmNvbnN0IFttYWpvclN0ciwgbWlub3JTdHJdID0gX3BhY2thZ2UuZGVmYXVsdC52ZXJzaW9uLnNwbGl0KCcuJyk7XG5cbmNvbnN0IFJFQUNUX05BVElWRV9WRVJTSU9OID0ge1xuICBtYWpvcjogcGFyc2VJbnQobWFqb3JTdHIsIDEwKSxcbiAgbWlub3I6IHBhcnNlSW50KG1pbm9yU3RyLCAxMClcbn07XG5leHBvcnRzLlJFQUNUX05BVElWRV9WRVJTSU9OID0gUkVBQ1RfTkFUSVZFX1ZFUlNJT047XG5cbmZ1bmN0aW9uIHRvQXJyYXkob2JqZWN0KSB7XG4gIGlmICghQXJyYXkuaXNBcnJheShvYmplY3QpKSB7XG4gICAgcmV0dXJuIFtvYmplY3RdO1xuICB9XG5cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZnVuY3Rpb24gd2l0aFByZXZBbmRDdXJyZW50KGFycmF5LCBtYXBGbikge1xuICBjb25zdCBwcmV2aW91c0FyciA9IFtudWxsXTtcbiAgY29uc3QgY3VycmVudEFyciA9IFsuLi5hcnJheV07XG4gIGNvbnN0IHRyYW5zZm9ybWVkQXJyID0gW107XG4gIGN1cnJlbnRBcnIuZm9yRWFjaCgoY3VycmVudCwgaSkgPT4ge1xuICAgIGNvbnN0IHByZXZpb3VzID0gcHJldmlvdXNBcnJbaV07XG4gICAgY29uc3QgdHJhbnNmb3JtZWQgPSBtYXBGbihwcmV2aW91cywgY3VycmVudCk7XG4gICAgcHJldmlvdXNBcnIucHVzaCh0cmFuc2Zvcm1lZCk7XG4gICAgdHJhbnNmb3JtZWRBcnIucHVzaCh0cmFuc2Zvcm1lZCk7XG4gIH0pO1xuICByZXR1cm4gdHJhbnNmb3JtZWRBcnI7XG59IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXR5cGVzXG5cblxuZnVuY3Rpb24gaGFzUHJvcGVydHkob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSk7XG59XG5cbmZ1bmN0aW9uIGlzSmVzdEVudigpIHtcbiAgLy8gQHRzLWlnbm9yZSBEbyBub3QgdXNlIGBAdHlwZXMvbm9kZWAgYmVjYXVzZSBpdCB3aWxsIHByaW9yaXRpc2UgTm9kZSB0eXBlcyBvdmVyIFJOIHR5cGVzIHdoaWNoIGJyZWFrcyB0aGUgdHlwZXMgKGV4LiBzZXRUaW1lb3V0KSBpbiBSZWFjdCBOYXRpdmUgcHJvamVjdHMuXG4gIHJldHVybiBoYXNQcm9wZXJ0eShnbG9iYWwsICdwcm9jZXNzJykgJiYgISFwcm9jZXNzLmVudi5KRVNUX1dPUktFUl9JRDtcbn1cblxuZnVuY3Rpb24gdGFnTWVzc2FnZShtc2cpIHtcbiAgcmV0dXJuIGBbcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlcl0gJHttc2d9YDtcbn0gLy8gaGVscGVyIG1ldGhvZCB0byBjaGVjayB3aGV0aGVyIEZhYnJpYyBpcyBlbmFibGVkLCBob3dldmVyIGdsb2JhbC5uYXRpdmVGYWJyaWNVSU1hbmFnZXJcbi8vIG1heSBub3QgYmUgaW5pdGlhbGl6ZWQgYmVmb3JlIHRoZSBmaXJzdCByZW5kZXJcblxuXG5mdW5jdGlvbiBpc0ZhYnJpYygpIHtcbiAgdmFyIF9nbG9iYWw7XG5cbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBuYXRpdmVGYWJyaWNVSU1hbmFnZXIgaXMgbm90IHlldCBpbmNsdWRlZCBpbiB0aGUgUk4gdHlwZXNcbiAgcmV0dXJuICEhKChfZ2xvYmFsID0gZ2xvYmFsKSAhPT0gbnVsbCAmJiBfZ2xvYmFsICE9PSB2b2lkIDAgJiYgX2dsb2JhbC5uYXRpdmVGYWJyaWNVSU1hbmFnZXIpO1xufVxuXG5mdW5jdGlvbiBzaG91bGRVc2VDb2RlZ2VuTmF0aXZlQ29tcG9uZW50KCkge1xuICAvLyB1c2UgY29kZWdlbk5hdGl2ZUNvbXBvbmVudCBzdGFydGluZyB3aXRoIFJOIDAuNjhcbiAgcmV0dXJuIFJFQUNUX05BVElWRV9WRVJTSU9OLm1pbm9yID49IDY4IHx8IFJFQUNUX05BVElWRV9WRVJTSU9OLm1ham9yID4gMDtcbn1cblxuZnVuY3Rpb24gaXNSZW1vdGVEZWJ1Z2dpbmdFbmFibGVkKCkge1xuICAvLyByZWFjdC1uYXRpdmUtcmVhbmltYXRlZCBjaGVja3MgaWYgaW4gcmVtb3RlIGRlYnVnZ2luZyBpbiB0aGUgc2FtZSB3YXlcbiAgLy8gQHRzLWlnbm9yZSBnbG9iYWwgaXMgYXZhaWxhYmxlIGJ1dCBub2RlIHR5cGVzIGFyZSBub3QgaW5jbHVkZWRcbiAgcmV0dXJuICFnbG9iYWwubmF0aXZlQ2FsbFN5bmNIb29rIHx8IGdsb2JhbC5fX1JFTU9URURFVl9fO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwidG9BcnJheSIsIndpdGhQcmV2QW5kQ3VycmVudCIsImhhc1Byb3BlcnR5IiwiaXNKZXN0RW52IiwidGFnTWVzc2FnZSIsImlzRmFicmljIiwic2hvdWxkVXNlQ29kZWdlbk5hdGl2ZUNvbXBvbmVudCIsImlzUmVtb3RlRGVidWdnaW5nRW5hYmxlZCIsIlJFQUNUX05BVElWRV9WRVJTSU9OIiwiX3BhY2thZ2UiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwibWFqb3JTdHIiLCJtaW5vclN0ciIsInZlcnNpb24iLCJzcGxpdCIsIm1ham9yIiwicGFyc2VJbnQiLCJtaW5vciIsIm9iamVjdCIsIkFycmF5IiwiaXNBcnJheSIsImFycmF5IiwibWFwRm4iLCJwcmV2aW91c0FyciIsImN1cnJlbnRBcnIiLCJ0cmFuc2Zvcm1lZEFyciIsImZvckVhY2giLCJjdXJyZW50IiwiaSIsInByZXZpb3VzIiwidHJhbnNmb3JtZWQiLCJwdXNoIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZ2xvYmFsIiwicHJvY2VzcyIsImVudiIsIkpFU1RfV09SS0VSX0lEIiwibXNnIiwiX2dsb2JhbCIsIm5hdGl2ZUZhYnJpY1VJTWFuYWdlciIsIm5hdGl2ZUNhbGxTeW5jSG9vayIsIl9fUkVNT1RFREVWX18iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/utils.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/constants.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/constants.js ***!
  \*********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.Direction = exports.DEFAULT_TOUCH_SLOP = void 0;\nconst DEFAULT_TOUCH_SLOP = 15;\nexports.DEFAULT_TOUCH_SLOP = DEFAULT_TOUCH_SLOP;\nconst Direction = {\n    RIGHT: 1,\n    LEFT: 2,\n    UP: 4,\n    DOWN: 8\n};\nexports.Direction = Direction; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViL2NvbnN0YW50cy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsaUJBQWlCLEdBQUdBLDBCQUEwQixHQUFHLEtBQUs7QUFDdEQsTUFBTUcscUJBQXFCO0FBQzNCSCwwQkFBMEIsR0FBR0c7QUFDN0IsTUFBTUQsWUFBWTtJQUNoQkUsT0FBTztJQUNQQyxNQUFNO0lBQ05DLElBQUk7SUFDSkMsTUFBTTtBQUNSO0FBQ0FQLGlCQUFpQixHQUFHRSxXQUNwQixxQ0FBcUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL3dlYi9jb25zdGFudHMuanM/YWE4MyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuRGlyZWN0aW9uID0gZXhwb3J0cy5ERUZBVUxUX1RPVUNIX1NMT1AgPSB2b2lkIDA7XG5jb25zdCBERUZBVUxUX1RPVUNIX1NMT1AgPSAxNTtcbmV4cG9ydHMuREVGQVVMVF9UT1VDSF9TTE9QID0gREVGQVVMVF9UT1VDSF9TTE9QO1xuY29uc3QgRGlyZWN0aW9uID0ge1xuICBSSUdIVDogMSxcbiAgTEVGVDogMixcbiAgVVA6IDQsXG4gIERPV046IDhcbn07XG5leHBvcnRzLkRpcmVjdGlvbiA9IERpcmVjdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJEaXJlY3Rpb24iLCJERUZBVUxUX1RPVUNIX1NMT1AiLCJSSUdIVCIsIkxFRlQiLCJVUCIsIkRPV04iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/constants.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/detectors/RotationGestureDetector.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/detectors/RotationGestureDetector.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _interfaces = __webpack_require__(/*! ../interfaces */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass RotationGestureDetector {\n    constructor(callbacks){\n        _defineProperty(this, \"onRotationBegin\", void 0);\n        _defineProperty(this, \"onRotation\", void 0);\n        _defineProperty(this, \"onRotationEnd\", void 0);\n        _defineProperty(this, \"currentTime\", 0);\n        _defineProperty(this, \"previousTime\", 0);\n        _defineProperty(this, \"previousAngle\", 0);\n        _defineProperty(this, \"rotation\", 0);\n        _defineProperty(this, \"anchorX\", 0);\n        _defineProperty(this, \"anchorY\", 0);\n        _defineProperty(this, \"isInProgress\", false);\n        _defineProperty(this, \"keyPointers\", [\n            NaN,\n            NaN\n        ]);\n        this.onRotationBegin = callbacks.onRotationBegin;\n        this.onRotation = callbacks.onRotation;\n        this.onRotationEnd = callbacks.onRotationEnd;\n    }\n    updateCurrent(event, tracker) {\n        this.previousTime = this.currentTime;\n        this.currentTime = event.time;\n        const [firstPointerID, secondPointerID] = this.keyPointers;\n        const firstPointerX = tracker.getLastX(firstPointerID);\n        const firstPointerY = tracker.getLastY(firstPointerID);\n        const secondPointerX = tracker.getLastX(secondPointerID);\n        const secondPointerY = tracker.getLastY(secondPointerID);\n        const vectorX = secondPointerX - firstPointerX;\n        const vectorY = secondPointerY - firstPointerY;\n        this.anchorX = (firstPointerX + secondPointerX) / 2;\n        this.anchorY = (firstPointerY + secondPointerY) / 2; //Angle diff should be positive when rotating in clockwise direction\n        const angle = -Math.atan2(vectorY, vectorX);\n        this.rotation = Number.isNaN(this.previousAngle) ? 0 : this.previousAngle - angle;\n        this.previousAngle = angle;\n        if (this.rotation > Math.PI) {\n            this.rotation -= Math.PI;\n        } else if (this.rotation < -Math.PI) {\n            this.rotation += Math.PI;\n        }\n        if (this.rotation > Math.PI / 2) {\n            this.rotation -= Math.PI;\n        } else if (this.rotation < -Math.PI / 2) {\n            this.rotation += Math.PI;\n        }\n    }\n    finish() {\n        if (!this.isInProgress) {\n            return;\n        }\n        this.isInProgress = false;\n        this.keyPointers = [\n            NaN,\n            NaN\n        ];\n        this.onRotationEnd(this);\n    }\n    setKeyPointers(tracker) {\n        if (this.keyPointers[0] && this.keyPointers[1]) {\n            return;\n        }\n        const pointerIDs = tracker.getData().keys();\n        this.keyPointers[0] = pointerIDs.next().value;\n        this.keyPointers[1] = pointerIDs.next().value;\n    }\n    onTouchEvent(event, tracker) {\n        switch(event.eventType){\n            case _interfaces.EventTypes.DOWN:\n                this.isInProgress = false;\n                break;\n            case _interfaces.EventTypes.ADDITIONAL_POINTER_DOWN:\n                if (this.isInProgress) {\n                    break;\n                }\n                this.isInProgress = true;\n                this.previousTime = event.time;\n                this.previousAngle = NaN;\n                this.setKeyPointers(tracker);\n                this.updateCurrent(event, tracker);\n                this.onRotationBegin(this);\n                break;\n            case _interfaces.EventTypes.MOVE:\n                if (!this.isInProgress) {\n                    break;\n                }\n                this.updateCurrent(event, tracker);\n                this.onRotation(this);\n                break;\n            case _interfaces.EventTypes.ADDITIONAL_POINTER_UP:\n                if (!this.isInProgress) {\n                    break;\n                }\n                if (this.keyPointers.indexOf(event.pointerId) >= 0) {\n                    this.finish();\n                }\n                break;\n            case _interfaces.EventTypes.UP:\n                if (this.isInProgress) {\n                    this.finish();\n                }\n                break;\n        }\n        return true;\n    }\n    getTimeDelta() {\n        return this.currentTime + this.previousTime;\n    }\n    getAnchorX() {\n        return this.anchorX;\n    }\n    getAnchorY() {\n        return this.anchorY;\n    }\n    getRotation() {\n        return this.rotation;\n    }\n    reset() {\n        this.keyPointers = [\n            NaN,\n            NaN\n        ];\n        this.isInProgress = false;\n    }\n}\nexports[\"default\"] = RotationGestureDetector; //# sourceMappingURL=RotationGestureDetector.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/detectors/RotationGestureDetector.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/detectors/ScaleGestureDetector.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/detectors/ScaleGestureDetector.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _constants = __webpack_require__(/*! ../constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/constants.js\");\nvar _interfaces = __webpack_require__(/*! ../interfaces */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js\");\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass ScaleGestureDetector {\n    constructor(callbacks){\n        _defineProperty(this, \"onScaleBegin\", void 0);\n        _defineProperty(this, \"onScale\", void 0);\n        _defineProperty(this, \"onScaleEnd\", void 0);\n        _defineProperty(this, \"focusX\", void 0);\n        _defineProperty(this, \"focusY\", void 0);\n        _defineProperty(this, \"currentSpan\", void 0);\n        _defineProperty(this, \"prevSpan\", void 0);\n        _defineProperty(this, \"initialSpan\", void 0);\n        _defineProperty(this, \"currentTime\", void 0);\n        _defineProperty(this, \"prevTime\", void 0);\n        _defineProperty(this, \"inProgress\", false);\n        _defineProperty(this, \"spanSlop\", void 0);\n        _defineProperty(this, \"minSpan\", void 0);\n        this.onScaleBegin = callbacks.onScaleBegin;\n        this.onScale = callbacks.onScale;\n        this.onScaleEnd = callbacks.onScaleEnd;\n        this.spanSlop = _constants.DEFAULT_TOUCH_SLOP * 2;\n        this.minSpan = 0;\n    }\n    onTouchEvent(event, tracker) {\n        this.currentTime = event.time;\n        const action = event.eventType;\n        const numOfPointers = tracker.getTrackedPointersCount();\n        const streamComplete = action === _interfaces.EventTypes.UP || action === _interfaces.EventTypes.ADDITIONAL_POINTER_UP || action === _interfaces.EventTypes.CANCEL;\n        if (action === _interfaces.EventTypes.DOWN || streamComplete) {\n            if (this.inProgress) {\n                this.onScaleEnd(this);\n                this.inProgress = false;\n                this.initialSpan = 0;\n            }\n            if (streamComplete) {\n                return true;\n            }\n        }\n        const configChanged = action === _interfaces.EventTypes.DOWN || action === _interfaces.EventTypes.ADDITIONAL_POINTER_UP || action === _interfaces.EventTypes.ADDITIONAL_POINTER_DOWN;\n        const pointerUp = action === _interfaces.EventTypes.ADDITIONAL_POINTER_UP;\n        const ignoredPointer = pointerUp ? event.pointerId : undefined; //Determine focal point\n        const div = pointerUp ? numOfPointers - 1 : numOfPointers;\n        const sumX = tracker.getSumX(ignoredPointer);\n        const sumY = tracker.getSumY(ignoredPointer);\n        const focusX = sumX / div;\n        const focusY = sumY / div; //Determine average deviation from focal point\n        let devSumX = 0;\n        let devSumY = 0;\n        tracker.getData().forEach((value, key)=>{\n            if (key === ignoredPointer) {\n                return;\n            }\n            devSumX += Math.abs(value.lastX - focusX);\n            devSumY += Math.abs(value.lastY - focusY);\n        });\n        const devX = devSumX / div;\n        const devY = devSumY / div;\n        const spanX = devX * 2;\n        const spanY = devY * 2;\n        const span = Math.hypot(spanX, spanY); //Begin/end events\n        const wasInProgress = this.inProgress;\n        this.focusX = focusX;\n        this.focusY = focusY;\n        if (this.inProgress && (span < this.minSpan || configChanged)) {\n            this.onScaleEnd(this);\n            this.inProgress = false;\n            this.initialSpan = span;\n        }\n        if (configChanged) {\n            this.initialSpan = this.prevSpan = this.currentSpan = span;\n        }\n        if (!this.inProgress && span >= this.minSpan && (wasInProgress || Math.abs(span - this.initialSpan) > this.spanSlop)) {\n            this.prevSpan = this.currentSpan = span;\n            this.prevTime = this.currentTime;\n            this.inProgress = this.onScaleBegin(this);\n        } //Handle motion\n        if (action !== _interfaces.EventTypes.MOVE) {\n            return true;\n        }\n        this.currentSpan = span;\n        if (this.inProgress && !this.onScale(this)) {\n            return true;\n        }\n        this.prevSpan = this.currentSpan;\n        this.prevTime = this.currentTime;\n        return true;\n    }\n    getCurrentSpan() {\n        return this.currentSpan;\n    }\n    getFocusX() {\n        return this.focusX;\n    }\n    getFocusY() {\n        return this.focusY;\n    }\n    getTimeDelta() {\n        return this.currentTime - this.prevTime;\n    }\n    getScaleFactor(numOfPointers) {\n        if (numOfPointers < 2) {\n            return 1;\n        }\n        return this.prevSpan > 0 ? this.currentSpan / this.prevSpan : 1;\n    }\n}\nexports[\"default\"] = ScaleGestureDetector; //# sourceMappingURL=ScaleGestureDetector.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/detectors/ScaleGestureDetector.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/FlingGestureHandler.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/FlingGestureHandler.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _constants = __webpack_require__(/*! ../constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/constants.js\");\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst DEFAULT_MAX_DURATION_MS = 800;\nconst DEFAULT_MIN_ACCEPTABLE_DELTA = 160;\nconst DEFAULT_DIRECTION = _constants.Direction.RIGHT;\nconst DEFAULT_NUMBER_OF_TOUCHES_REQUIRED = 1;\nclass FlingGestureHandler extends _GestureHandler.default {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"numberOfPointersRequired\", DEFAULT_NUMBER_OF_TOUCHES_REQUIRED);\n        _defineProperty(this, \"direction\", DEFAULT_DIRECTION);\n        _defineProperty(this, \"maxDurationMs\", DEFAULT_MAX_DURATION_MS);\n        _defineProperty(this, \"minAcceptableDelta\", DEFAULT_MIN_ACCEPTABLE_DELTA);\n        _defineProperty(this, \"delayTimeout\", void 0);\n        _defineProperty(this, \"startX\", 0);\n        _defineProperty(this, \"startY\", 0);\n        _defineProperty(this, \"maxNumberOfPointersSimultaneously\", 0);\n        _defineProperty(this, \"keyPointer\", NaN);\n    }\n    init(ref, propsRef) {\n        super.init(ref, propsRef);\n    }\n    updateGestureConfig({ enabled = true, ...props }) {\n        super.updateGestureConfig({\n            enabled: enabled,\n            ...props\n        });\n        if (this.config.direction) {\n            this.direction = this.config.direction;\n        }\n        if (this.config.numberOfPointers) {\n            this.numberOfPointersRequired = this.config.numberOfPointers;\n        }\n    }\n    transformNativeEvent() {\n        const rect = this.view.getBoundingClientRect();\n        return {\n            x: this.tracker.getLastAvgX() - rect.left,\n            y: this.tracker.getLastAvgY() - rect.top,\n            absoluteX: this.tracker.getLastAvgX(),\n            absoluteY: this.tracker.getLastAvgY()\n        };\n    }\n    startFling() {\n        this.startX = this.tracker.getLastX(this.keyPointer);\n        this.startY = this.tracker.getLastY(this.keyPointer);\n        this.begin();\n        this.maxNumberOfPointersSimultaneously = 1;\n        this.delayTimeout = setTimeout(()=>this.fail(), this.maxDurationMs);\n    }\n    tryEndFling() {\n        if (this.maxNumberOfPointersSimultaneously === this.numberOfPointersRequired && (this.direction & _constants.Direction.RIGHT && this.tracker.getLastX(this.keyPointer) - this.startX > this.minAcceptableDelta || this.direction & _constants.Direction.LEFT && this.startX - this.tracker.getLastX(this.keyPointer) > this.minAcceptableDelta || this.direction & _constants.Direction.UP && this.startY - this.tracker.getLastY(this.keyPointer) > this.minAcceptableDelta || this.direction & _constants.Direction.DOWN && this.tracker.getLastY(this.keyPointer) - this.startY > this.minAcceptableDelta)) {\n            clearTimeout(this.delayTimeout);\n            this.activate();\n            return true;\n        }\n        return false;\n    }\n    endFling() {\n        if (!this.tryEndFling()) {\n            this.fail();\n        }\n    }\n    onPointerDown(event) {\n        this.tracker.addToTracker(event);\n        this.keyPointer = event.pointerId;\n        super.onPointerDown(event);\n        this.newPointerAction();\n    }\n    onPointerAdd(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerAdd(event);\n        this.newPointerAction();\n    }\n    newPointerAction() {\n        if (this.currentState === _State.State.UNDETERMINED) {\n            this.startFling();\n        }\n        if (this.currentState !== _State.State.BEGAN) {\n            return;\n        }\n        this.tryEndFling();\n        if (this.tracker.getTrackedPointersCount() > this.maxNumberOfPointersSimultaneously) {\n            this.maxNumberOfPointersSimultaneously = this.tracker.getTrackedPointersCount();\n        }\n    }\n    onPointerMove(event) {\n        this.tracker.track(event);\n        if (this.currentState !== _State.State.BEGAN) {\n            return;\n        }\n        this.tryEndFling();\n        super.onPointerMove(event);\n    }\n    onPointerUp(event) {\n        super.onPointerUp(event);\n        this.onUp(event);\n        this.keyPointer = NaN;\n    }\n    onPointerRemove(event) {\n        super.onPointerRemove(event);\n        this.onUp(event);\n    }\n    onUp(event) {\n        this.tracker.removeFromTracker(event.pointerId);\n        if (this.currentState !== _State.State.BEGAN) {\n            return;\n        }\n        this.endFling();\n    }\n    onPointerCancel(event) {\n        super.onPointerCancel(event);\n        this.reset();\n    }\n    activate(force) {\n        super.activate(force);\n        this.end();\n    }\n    resetConfig() {\n        super.resetConfig();\n        this.numberOfPointersRequired = DEFAULT_NUMBER_OF_TOUCHES_REQUIRED;\n        this.direction = DEFAULT_DIRECTION;\n    }\n}\nexports[\"default\"] = FlingGestureHandler; //# sourceMappingURL=FlingGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/FlingGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _interfaces = __webpack_require__(/*! ../interfaces */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js\");\nvar _GestureHandlerOrchestrator = _interopRequireDefault(__webpack_require__(/*! ../tools/GestureHandlerOrchestrator */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/GestureHandlerOrchestrator.js\"));\nvar _InteractionManager = _interopRequireDefault(__webpack_require__(/*! ../tools/InteractionManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/InteractionManager.js\"));\nvar _PointerEventManager = _interopRequireDefault(__webpack_require__(/*! ../tools/PointerEventManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/PointerEventManager.js\"));\nvar _PointerTracker = _interopRequireDefault(__webpack_require__(/*! ../tools/PointerTracker */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/PointerTracker.js\"));\nvar _TouchEventManager = _interopRequireDefault(__webpack_require__(/*! ../tools/TouchEventManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/TouchEventManager.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass GestureHandler {\n    // Orchestrator properties\n    constructor(){\n        _defineProperty(this, \"lastSentState\", null);\n        _defineProperty(this, \"currentState\", _State.State.UNDETERMINED);\n        _defineProperty(this, \"shouldCancellWhenOutside\", false);\n        _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n        _defineProperty(this, \"enabled\", false);\n        _defineProperty(this, \"ref\", void 0);\n        _defineProperty(this, \"propsRef\", void 0);\n        _defineProperty(this, \"handlerTag\", void 0);\n        _defineProperty(this, \"config\", {\n            enabled: false\n        });\n        _defineProperty(this, \"view\", void 0);\n        _defineProperty(this, \"eventManagers\", []);\n        _defineProperty(this, \"tracker\", new _PointerTracker.default());\n        _defineProperty(this, \"activationIndex\", 0);\n        _defineProperty(this, \"awaiting\", false);\n        _defineProperty(this, \"active\", false);\n        _defineProperty(this, \"shouldResetProgress\", false);\n        _defineProperty(this, \"pointerType\", _interfaces.PointerType.NONE);\n        _defineProperty(this, \"sendEvent\", (newState, oldState)=>{\n            const { onGestureHandlerEvent, onGestureHandlerStateChange } = this.propsRef.current;\n            const resultEvent = this.transformEventData(newState, oldState); // In the new API oldState field has to be undefined, unless we send event state changed\n            // Here the order is flipped to avoid workarounds such as making backup of the state and setting it to undefined first, then changing it back\n            // Flipping order with setting oldState to undefined solves issue, when events were being sent twice instead of once\n            // However, this may cause trouble in the future (but for now we don't know that)\n            if (this.lastSentState !== newState) {\n                this.lastSentState = newState;\n                invokeNullableMethod(onGestureHandlerStateChange, resultEvent);\n            }\n            if (this.currentState === _State.State.ACTIVE) {\n                resultEvent.nativeEvent.oldState = undefined;\n                invokeNullableMethod(onGestureHandlerEvent, resultEvent);\n            }\n        });\n        this.hasCustomActivationCriteria = false;\n    }\n    // Initializing handler\n    //\n    init(ref, propsRef) {\n        this.propsRef = propsRef;\n        this.ref = ref;\n        this.currentState = _State.State.UNDETERMINED;\n        this.setView();\n        this.addEventManager(new _PointerEventManager.default(this.view));\n        this.addEventManager(new _TouchEventManager.default(this.view));\n    }\n    setView() {\n        if (!this.ref) {\n            throw new Error(`Cannot find HTML Element for handler ${this.handlerTag}`);\n        }\n        this.view = (0, _reactNative.findNodeHandle)(this.ref);\n        this.view.style[\"touchAction\"] = \"none\"; //@ts-ignore This one disables default events on Safari\n        this.view.style[\"WebkitTouchCallout\"] = \"none\";\n        if (!this.config.userSelect) {\n            this.view.style[\"webkitUserSelect\"] = \"none\";\n            this.view.style[\"userSelect\"] = \"none\";\n        } else {\n            this.view.style[\"webkitUserSelect\"] = this.config.userSelect;\n            this.view.style[\"userSelect\"] = this.config.userSelect;\n        }\n    }\n    addEventManager(manager) {\n        manager.setOnPointerDown(this.onPointerDown.bind(this));\n        manager.setOnPointerAdd(this.onPointerAdd.bind(this));\n        manager.setOnPointerUp(this.onPointerUp.bind(this));\n        manager.setOnPointerRemove(this.onPointerRemove.bind(this));\n        manager.setOnPointerMove(this.onPointerMove.bind(this));\n        manager.setOnPointerEnter(this.onPointerEnter.bind(this));\n        manager.setOnPointerOut(this.onPointerOut.bind(this));\n        manager.setOnPointerCancel(this.onPointerCancel.bind(this));\n        manager.setOnPointerOutOfBounds(this.onPointerOutOfBounds.bind(this));\n        manager.setListeners();\n        this.eventManagers.push(manager);\n    }\n    // Resetting handler\n    //\n    onCancel() {}\n    onReset() {}\n    resetProgress() {}\n    reset() {\n        this.tracker.resetTracker();\n        this.onReset();\n        this.resetProgress();\n        this.eventManagers.forEach((manager)=>manager.resetManager());\n        this.currentState = _State.State.UNDETERMINED;\n    }\n    // State logic\n    //\n    moveToState(newState, sendIfDisabled) {\n        if (this.currentState === newState) {\n            return;\n        }\n        const oldState = this.currentState;\n        this.currentState = newState;\n        if (this.tracker.getTrackedPointersCount() > 0 && this.config.needsPointerData && this.isFinished()) {\n            this.cancelTouches();\n        }\n        _GestureHandlerOrchestrator.default.getInstance().onHandlerStateChange(this, newState, oldState, sendIfDisabled);\n        this.onStateChange(newState, oldState);\n    }\n    onStateChange(_newState, _oldState) {}\n    begin() {\n        if (!this.checkHitSlop()) {\n            return;\n        }\n        if (this.currentState === _State.State.UNDETERMINED) {\n            this.moveToState(_State.State.BEGAN);\n        }\n    }\n    /**\n   * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send fail event\n   */ fail(sendIfDisabled) {\n        if (this.currentState === _State.State.ACTIVE || this.currentState === _State.State.BEGAN) {\n            this.moveToState(_State.State.FAILED, sendIfDisabled);\n            this.view.style.cursor = \"auto\";\n        }\n        this.resetProgress();\n    }\n    /**\n   * @param {boolean} sendIfDisabled - Used when handler becomes disabled. With this flag orchestrator will be forced to send cancel event\n   */ cancel(sendIfDisabled) {\n        if (this.currentState === _State.State.ACTIVE || this.currentState === _State.State.UNDETERMINED || this.currentState === _State.State.BEGAN) {\n            this.onCancel();\n            this.moveToState(_State.State.CANCELLED, sendIfDisabled);\n            this.view.style.cursor = \"auto\";\n        }\n    }\n    activate(_force = false) {\n        if (this.currentState === _State.State.UNDETERMINED || this.currentState === _State.State.BEGAN) {\n            this.moveToState(_State.State.ACTIVE);\n            this.view.style.cursor = \"grab\";\n        }\n    }\n    end() {\n        if (this.currentState === _State.State.BEGAN || this.currentState === _State.State.ACTIVE) {\n            this.moveToState(_State.State.END);\n            this.view.style.cursor = \"auto\";\n        }\n        this.resetProgress();\n    }\n    // Methods for orchestrator\n    //\n    isAwaiting() {\n        return this.awaiting;\n    }\n    setAwaiting(value) {\n        this.awaiting = value;\n    }\n    isActive() {\n        return this.active;\n    }\n    setActive(value) {\n        this.active = value;\n    }\n    getShouldResetProgress() {\n        return this.shouldResetProgress;\n    }\n    setShouldResetProgress(value) {\n        this.shouldResetProgress = value;\n    }\n    getActivationIndex() {\n        return this.activationIndex;\n    }\n    setActivationIndex(value) {\n        this.activationIndex = value;\n    }\n    shouldWaitForHandlerFailure(handler) {\n        if (handler === this) {\n            return false;\n        }\n        return _InteractionManager.default.getInstance().shouldWaitForHandlerFailure(this, handler);\n    }\n    shouldRequireToWaitForFailure(handler) {\n        if (handler === this) {\n            return false;\n        }\n        return _InteractionManager.default.getInstance().shouldRequireHandlerToWaitForFailure(this, handler);\n    }\n    shouldRecognizeSimultaneously(handler) {\n        if (handler === this) {\n            return true;\n        }\n        return _InteractionManager.default.getInstance().shouldRecognizeSimultaneously(this, handler);\n    }\n    shouldBeCancelledByOther(handler) {\n        if (handler === this) {\n            return false;\n        }\n        return _InteractionManager.default.getInstance().shouldHandlerBeCancelledBy(this, handler);\n    }\n    // Event actions\n    //\n    onPointerDown(event) {\n        _GestureHandlerOrchestrator.default.getInstance().recordHandlerIfNotPresent(this);\n        this.pointerType = event.pointerType;\n        if (this.pointerType === _interfaces.PointerType.TOUCH) {\n            _GestureHandlerOrchestrator.default.getInstance().cancelMouseAndPenGestures(this);\n        }\n        if (this.config.needsPointerData) {\n            this.sendTouchEvent(event);\n        }\n    }\n    onPointerAdd(event) {\n        if (this.config.needsPointerData) {\n            this.sendTouchEvent(event);\n        }\n    }\n    onPointerUp(event) {\n        if (this.config.needsPointerData) {\n            this.sendTouchEvent(event);\n        }\n    }\n    onPointerRemove(event) {\n        if (this.config.needsPointerData) {\n            this.sendTouchEvent(event);\n        }\n    }\n    onPointerMove(event) {\n        this.tryToSendMoveEvent(false);\n        if (this.config.needsPointerData) {\n            this.sendTouchEvent(event);\n        }\n    }\n    onPointerOut(event) {\n        if (this.shouldCancellWhenOutside) {\n            switch(this.currentState){\n                case _State.State.ACTIVE:\n                    this.cancel();\n                    break;\n                case _State.State.BEGAN:\n                    this.fail();\n                    break;\n            }\n            return;\n        }\n        if (this.config.needsPointerData) {\n            this.sendTouchEvent(event);\n        }\n    }\n    onPointerEnter(event) {\n        if (this.config.needsPointerData) {\n            this.sendTouchEvent(event);\n        }\n    }\n    onPointerCancel(event) {\n        if (this.config.needsPointerData) {\n            this.sendTouchEvent(event);\n        }\n    }\n    onPointerOutOfBounds(event) {\n        this.tryToSendMoveEvent(true);\n        if (this.config.needsPointerData) {\n            this.sendTouchEvent(event);\n        }\n    }\n    tryToSendMoveEvent(out) {\n        if (this.enabled && this.active && (!out || out && !this.shouldCancellWhenOutside)) {\n            this.sendEvent(this.currentState, this.currentState);\n        }\n    }\n    sendTouchEvent(event) {\n        if (!this.enabled) {\n            return;\n        }\n        const { onGestureHandlerEvent } = this.propsRef.current;\n        const touchEvent = this.transformTouchEvent(event);\n        if (touchEvent) {\n            invokeNullableMethod(onGestureHandlerEvent, touchEvent);\n        }\n    }\n    // Events Sending\n    //\n    transformEventData(newState, oldState) {\n        return {\n            nativeEvent: {\n                numberOfPointers: this.tracker.getTrackedPointersCount(),\n                state: newState,\n                pointerInside: (0, _utils.isPointerInBounds)(this.view, {\n                    x: this.tracker.getLastAvgX(),\n                    y: this.tracker.getLastAvgY()\n                }),\n                ...this.transformNativeEvent(),\n                handlerTag: this.handlerTag,\n                target: this.ref,\n                oldState: newState !== oldState ? oldState : undefined\n            },\n            timeStamp: Date.now()\n        };\n    }\n    transformTouchEvent(event) {\n        var _event$touchEventType;\n        const rect = this.view.getBoundingClientRect();\n        const all = [];\n        const changed = [];\n        const trackerData = this.tracker.getData(); // This if handles edge case where all pointers have been cancelled\n        // When pointercancel is triggered, reset method is called. This means that tracker will be reset after first pointer being cancelled\n        // The problem is, that handler will receive another pointercancel event from the rest of the pointers\n        // To avoid crashing, we don't send event if tracker tracks no pointers, i.e. has been reset\n        if (trackerData.size === 0 || !trackerData.has(event.pointerId)) {\n            return;\n        }\n        trackerData.forEach((element, key)=>{\n            const id = this.tracker.getMappedTouchEventId(key);\n            all.push({\n                id: id,\n                x: element.lastX - rect.left,\n                y: element.lastY - rect.top,\n                absoluteX: element.lastX,\n                absoluteY: element.lastY\n            });\n        }); // Each pointer sends its own event, so we want changed touches to contain only the pointer that has changed.\n        // However, if the event is cancel, we want to cancel all pointers to avoid crashes\n        if (event.eventType !== _interfaces.EventTypes.CANCEL) {\n            changed.push({\n                id: this.tracker.getMappedTouchEventId(event.pointerId),\n                x: event.x - rect.left,\n                y: event.y - rect.top,\n                absoluteX: event.x,\n                absoluteY: event.y\n            });\n        } else {\n            trackerData.forEach((element, key)=>{\n                const id = this.tracker.getMappedTouchEventId(key);\n                changed.push({\n                    id: id,\n                    x: element.lastX - rect.left,\n                    y: element.lastY - rect.top,\n                    absoluteX: element.lastX,\n                    absoluteY: element.lastY\n                });\n            });\n        }\n        let eventType = _interfaces.TouchEventType.UNDETERMINED;\n        switch(event.eventType){\n            case _interfaces.EventTypes.DOWN:\n            case _interfaces.EventTypes.ADDITIONAL_POINTER_DOWN:\n                eventType = _interfaces.TouchEventType.DOWN;\n                break;\n            case _interfaces.EventTypes.UP:\n            case _interfaces.EventTypes.ADDITIONAL_POINTER_UP:\n                eventType = _interfaces.TouchEventType.UP;\n                break;\n            case _interfaces.EventTypes.MOVE:\n                eventType = _interfaces.TouchEventType.MOVE;\n                break;\n            case _interfaces.EventTypes.CANCEL:\n                eventType = _interfaces.TouchEventType.CANCELLED;\n                break;\n        } // Here, when we receive up event, we want to decrease number of touches\n        // That's because we want handler to send information that there's one pointer less\n        // However, we still want this pointer to be present in allTouches array, so that its data can be accessed\n        let numberOfTouches = all.length;\n        if (event.eventType === _interfaces.EventTypes.UP || event.eventType === _interfaces.EventTypes.ADDITIONAL_POINTER_UP) {\n            --numberOfTouches;\n        }\n        return {\n            nativeEvent: {\n                handlerTag: this.handlerTag,\n                state: this.currentState,\n                eventType: (_event$touchEventType = event.touchEventType) !== null && _event$touchEventType !== void 0 ? _event$touchEventType : eventType,\n                changedTouches: changed,\n                allTouches: all,\n                numberOfTouches: numberOfTouches\n            },\n            timeStamp: Date.now()\n        };\n    }\n    cancelTouches() {\n        const rect = this.view.getBoundingClientRect();\n        const all = [];\n        const changed = [];\n        const trackerData = this.tracker.getData();\n        if (trackerData.size === 0) {\n            return;\n        }\n        trackerData.forEach((element, key)=>{\n            const id = this.tracker.getMappedTouchEventId(key);\n            all.push({\n                id: id,\n                x: element.lastX - rect.left,\n                y: element.lastY - rect.top,\n                absoluteX: element.lastX,\n                absoluteY: element.lastY\n            });\n            changed.push({\n                id: id,\n                x: element.lastX - rect.left,\n                y: element.lastY - rect.top,\n                absoluteX: element.lastX,\n                absoluteY: element.lastY\n            });\n        });\n        const cancelEvent = {\n            nativeEvent: {\n                handlerTag: this.handlerTag,\n                state: this.currentState,\n                eventType: _interfaces.TouchEventType.CANCELLED,\n                changedTouches: changed,\n                allTouches: all,\n                numberOfTouches: all.length\n            },\n            timeStamp: Date.now()\n        };\n        const { onGestureHandlerEvent } = this.propsRef.current;\n        invokeNullableMethod(onGestureHandlerEvent, cancelEvent);\n    }\n    transformNativeEvent() {\n        return {};\n    }\n    // Handling config\n    //\n    updateGestureConfig({ enabled = true, ...props }) {\n        this.config = {\n            enabled: enabled,\n            ...props\n        };\n        this.enabled = enabled;\n        if (this.config.shouldCancelWhenOutside !== undefined) {\n            this.setShouldCancelWhenOutside(this.config.shouldCancelWhenOutside);\n        }\n        this.validateHitSlops();\n        if (this.enabled) {\n            return;\n        }\n        switch(this.currentState){\n            case _State.State.ACTIVE:\n                this.fail(true);\n                break;\n            case _State.State.UNDETERMINED:\n                _GestureHandlerOrchestrator.default.getInstance().removeHandlerFromOrchestrator(this);\n                break;\n            default:\n                this.cancel(true);\n                break;\n        }\n    }\n    checkCustomActivationCriteria(criterias) {\n        for(const key in this.config){\n            if (criterias.indexOf(key) >= 0) {\n                this.hasCustomActivationCriteria = true;\n            }\n        }\n    }\n    validateHitSlops() {\n        if (!this.config.hitSlop) {\n            return;\n        }\n        if (this.config.hitSlop.left !== undefined && this.config.hitSlop.right !== undefined && this.config.hitSlop.width !== undefined) {\n            throw new Error(\"HitSlop Error: Cannot define left, right and width at the same time\");\n        }\n        if (this.config.hitSlop.width !== undefined && this.config.hitSlop.left === undefined && this.config.hitSlop.right === undefined) {\n            throw new Error(\"HitSlop Error: When width is defined, either left or right has to be defined\");\n        }\n        if (this.config.hitSlop.height !== undefined && this.config.hitSlop.top !== undefined && this.config.hitSlop.bottom !== undefined) {\n            throw new Error(\"HitSlop Error: Cannot define top, bottom and height at the same time\");\n        }\n        if (this.config.hitSlop.height !== undefined && this.config.hitSlop.top === undefined && this.config.hitSlop.bottom === undefined) {\n            throw new Error(\"HitSlop Error: When height is defined, either top or bottom has to be defined\");\n        }\n    }\n    checkHitSlop() {\n        if (!this.config.hitSlop) {\n            return true;\n        }\n        const width = this.view.getBoundingClientRect().width;\n        const height = this.view.getBoundingClientRect().height;\n        let left = 0;\n        let top = 0;\n        let right = width;\n        let bottom = height;\n        if (this.config.hitSlop.horizontal !== undefined) {\n            left -= this.config.hitSlop.horizontal;\n            right += this.config.hitSlop.horizontal;\n        }\n        if (this.config.hitSlop.vertical !== undefined) {\n            top -= this.config.hitSlop.vertical;\n            bottom += this.config.hitSlop.vertical;\n        }\n        if (this.config.hitSlop.left !== undefined) {\n            left = -this.config.hitSlop.left;\n        }\n        if (this.config.hitSlop.right !== undefined) {\n            right = width + this.config.hitSlop.right;\n        }\n        if (this.config.hitSlop.top !== undefined) {\n            top = -this.config.hitSlop.top;\n        }\n        if (this.config.hitSlop.bottom !== undefined) {\n            bottom = width + this.config.hitSlop.bottom;\n        }\n        if (this.config.hitSlop.width !== undefined) {\n            if (this.config.hitSlop.left !== undefined) {\n                right = left + this.config.hitSlop.width;\n            } else if (this.config.hitSlop.right !== undefined) {\n                left = right - this.config.hitSlop.width;\n            }\n        }\n        if (this.config.hitSlop.height !== undefined) {\n            if (this.config.hitSlop.top !== undefined) {\n                bottom = top + this.config.hitSlop.height;\n            } else if (this.config.hitSlop.bottom !== undefined) {\n                top = bottom - this.config.hitSlop.height;\n            }\n        }\n        const rect = this.view.getBoundingClientRect();\n        const offsetX = this.tracker.getLastX() - rect.left;\n        const offsetY = this.tracker.getLastY() - rect.top;\n        if (offsetX >= left && offsetX <= right && offsetY >= top && offsetY <= bottom) {\n            return true;\n        }\n        return false;\n    }\n    isPointerInBounds({ x, y }) {\n        const rect = this.view.getBoundingClientRect();\n        return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n    }\n    resetConfig() {}\n    // Getters and setters\n    //\n    getTag() {\n        return this.handlerTag;\n    }\n    setTag(tag) {\n        this.handlerTag = tag;\n    }\n    getConfig() {\n        return this.config;\n    }\n    getShouldEnableGestureOnSetup() {\n        throw new Error(\"Must override GestureHandler.shouldEnableGestureOnSetup\");\n    }\n    getView() {\n        return this.view;\n    }\n    getEventManagers() {\n        return this.eventManagers;\n    }\n    getTracker() {\n        return this.tracker;\n    }\n    getTrackedPointersID() {\n        return this.tracker.getTrackedPointersID();\n    }\n    getState() {\n        return this.currentState;\n    }\n    isEnabled() {\n        return this.enabled;\n    }\n    isFinished() {\n        return this.currentState === _State.State.END || this.currentState === _State.State.FAILED || this.currentState === _State.State.CANCELLED;\n    }\n    setShouldCancelWhenOutside(shouldCancel) {\n        this.shouldCancellWhenOutside = shouldCancel;\n    }\n    getShouldCancelWhenOutside() {\n        return this.shouldCancellWhenOutside;\n    }\n    getPointerType() {\n        return this.pointerType;\n    }\n}\nexports[\"default\"] = GestureHandler;\nfunction invokeNullableMethod(method, event) {\n    if (!method) {\n        return;\n    }\n    if (typeof method === \"function\") {\n        method(event);\n        return;\n    }\n    if (\"__getHandler\" in method && typeof method.__getHandler === \"function\") {\n        const handler = method.__getHandler();\n        invokeNullableMethod(handler, event);\n        return;\n    }\n    if (!(\"__nodeConfig\" in method)) {\n        return;\n    }\n    const { argMapping } = method.__nodeConfig;\n    if (!Array.isArray(argMapping)) {\n        return;\n    }\n    for (const [index, [key, value]] of argMapping.entries()){\n        if (!(key in event.nativeEvent)) {\n            continue;\n        } // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        const nativeValue = event.nativeEvent[key]; // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n        if (value !== null && value !== void 0 && value.setValue) {\n            //Reanimated API\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n            value.setValue(nativeValue);\n        } else {\n            //RN Animated API\n            method.__nodeConfig.argMapping[index] = [\n                key,\n                nativeValue\n            ];\n        }\n    }\n    return;\n} //# sourceMappingURL=GestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/LongPressGestureHandler.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/LongPressGestureHandler.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst DEFAULT_MIN_DURATION_MS = 500;\nconst DEFAULT_MAX_DIST_DP = 10;\nconst SCALING_FACTOR = 10;\nclass LongPressGestureHandler extends _GestureHandler.default {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"minDurationMs\", DEFAULT_MIN_DURATION_MS);\n        _defineProperty(this, \"defaultMaxDistSq\", DEFAULT_MAX_DIST_DP * SCALING_FACTOR);\n        _defineProperty(this, \"maxDistSq\", this.defaultMaxDistSq);\n        _defineProperty(this, \"startX\", 0);\n        _defineProperty(this, \"startY\", 0);\n        _defineProperty(this, \"startTime\", 0);\n        _defineProperty(this, \"previousTime\", 0);\n        _defineProperty(this, \"activationTimeout\", void 0);\n    }\n    init(ref, propsRef) {\n        super.init(ref, propsRef);\n        this.view.oncontextmenu = ()=>false;\n    }\n    transformNativeEvent() {\n        const rect = this.view.getBoundingClientRect();\n        return {\n            x: this.tracker.getLastAvgX() - rect.left,\n            y: this.tracker.getLastAvgY() - rect.top,\n            absoluteX: this.tracker.getLastAvgX(),\n            absoluteY: this.tracker.getLastAvgY(),\n            duration: Date.now() - this.startTime\n        };\n    }\n    updateGestureConfig({ enabled = true, ...props }) {\n        super.updateGestureConfig({\n            enabled: enabled,\n            ...props\n        });\n        if (this.config.minDurationMs !== undefined) {\n            this.minDurationMs = this.config.minDurationMs;\n        }\n        if (this.config.maxDist !== undefined) {\n            this.maxDistSq = this.config.maxDist * this.config.maxDist;\n        }\n    }\n    resetConfig() {\n        super.resetConfig();\n        this.minDurationMs = DEFAULT_MIN_DURATION_MS;\n        this.maxDistSq = this.defaultMaxDistSq;\n    }\n    onStateChange(_newState, _oldState) {\n        clearTimeout(this.activationTimeout);\n    }\n    onPointerDown(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerDown(event);\n        this.tryBegin(event);\n        this.tryActivate();\n        this.checkDistanceFail(event);\n    }\n    onPointerMove(event) {\n        super.onPointerMove(event);\n        this.tracker.track(event);\n        this.checkDistanceFail(event);\n    }\n    onPointerUp(event) {\n        super.onPointerUp(event);\n        this.tracker.removeFromTracker(event.pointerId);\n        if (this.currentState === _State.State.ACTIVE) {\n            this.end();\n        } else {\n            this.fail();\n        }\n    }\n    tryBegin(event) {\n        if (this.currentState !== _State.State.UNDETERMINED) {\n            return;\n        }\n        this.previousTime = Date.now();\n        this.startTime = this.previousTime;\n        this.begin();\n        this.startX = event.x;\n        this.startY = event.y;\n    }\n    tryActivate() {\n        if (this.minDurationMs > 0) {\n            this.activationTimeout = setTimeout(()=>{\n                this.activate();\n            }, this.minDurationMs);\n        } else if (this.minDurationMs === 0) {\n            this.activate();\n        }\n    }\n    checkDistanceFail(event) {\n        const dx = event.x - this.startX;\n        const dy = event.y - this.startY;\n        const distSq = dx * dx + dy * dy;\n        if (distSq <= this.maxDistSq) {\n            return;\n        }\n        if (this.currentState === _State.State.ACTIVE) {\n            this.cancel();\n        } else {\n            this.fail();\n        }\n    }\n}\nexports[\"default\"] = LongPressGestureHandler; //# sourceMappingURL=LongPressGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/LongPressGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/ManualGestureHandler.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/ManualGestureHandler.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nclass ManualGestureHandler extends _GestureHandler.default {\n    init(ref, propsRef) {\n        super.init(ref, propsRef);\n    }\n    updateGestureConfig({ enabled = true, ...props }) {\n        super.updateGestureConfig({\n            enabled: enabled,\n            ...props\n        });\n    }\n    onPointerDown(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerDown(event);\n        this.begin();\n    }\n    onPointerAdd(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerAdd(event);\n    }\n    onPointerMove(event) {\n        this.tracker.track(event);\n        super.onPointerMove(event);\n    }\n    onPointerOutOfBounds(event) {\n        this.tracker.track(event);\n        super.onPointerOutOfBounds(event);\n    }\n    onPointerUp(event) {\n        super.onPointerUp(event);\n        this.tracker.removeFromTracker(event.pointerId);\n    }\n    onPointerRemove(event) {\n        super.onPointerRemove(event);\n        this.tracker.removeFromTracker(event.pointerId);\n    }\n    onPointerCancel(event) {\n        super.onPointerCancel(event);\n        this.reset();\n    }\n}\nexports[\"default\"] = ManualGestureHandler; //# sourceMappingURL=ManualGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViL2hhbmRsZXJzL01hbnVhbEdlc3R1cmVIYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFFdkIsSUFBSUcsa0JBQWtCQyx1QkFBdUJDLG1CQUFPQSxDQUFDLGlIQUFrQjtBQUV2RSxTQUFTRCx1QkFBdUJFLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUosU0FBU0k7SUFBSTtBQUFHO0FBRTlGLE1BQU1FLDZCQUE2QkwsZ0JBQWdCRCxPQUFPO0lBQ3hETyxLQUFLQyxHQUFHLEVBQUVDLFFBQVEsRUFBRTtRQUNsQixLQUFLLENBQUNGLEtBQUtDLEtBQUtDO0lBQ2xCO0lBRUFDLG9CQUFvQixFQUNsQkMsVUFBVSxJQUFJLEVBQ2QsR0FBR0MsT0FDSixFQUFFO1FBQ0QsS0FBSyxDQUFDRixvQkFBb0I7WUFDeEJDLFNBQVNBO1lBQ1QsR0FBR0MsS0FBSztRQUNWO0lBQ0Y7SUFFQUMsY0FBY0MsS0FBSyxFQUFFO1FBQ25CLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxZQUFZLENBQUNGO1FBQzFCLEtBQUssQ0FBQ0QsY0FBY0M7UUFDcEIsSUFBSSxDQUFDRyxLQUFLO0lBQ1o7SUFFQUMsYUFBYUosS0FBSyxFQUFFO1FBQ2xCLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxZQUFZLENBQUNGO1FBQzFCLEtBQUssQ0FBQ0ksYUFBYUo7SUFDckI7SUFFQUssY0FBY0wsS0FBSyxFQUFFO1FBQ25CLElBQUksQ0FBQ0MsT0FBTyxDQUFDSyxLQUFLLENBQUNOO1FBQ25CLEtBQUssQ0FBQ0ssY0FBY0w7SUFDdEI7SUFFQU8scUJBQXFCUCxLQUFLLEVBQUU7UUFDMUIsSUFBSSxDQUFDQyxPQUFPLENBQUNLLEtBQUssQ0FBQ047UUFDbkIsS0FBSyxDQUFDTyxxQkFBcUJQO0lBQzdCO0lBRUFRLFlBQVlSLEtBQUssRUFBRTtRQUNqQixLQUFLLENBQUNRLFlBQVlSO1FBQ2xCLElBQUksQ0FBQ0MsT0FBTyxDQUFDUSxpQkFBaUIsQ0FBQ1QsTUFBTVUsU0FBUztJQUNoRDtJQUVBQyxnQkFBZ0JYLEtBQUssRUFBRTtRQUNyQixLQUFLLENBQUNXLGdCQUFnQlg7UUFDdEIsSUFBSSxDQUFDQyxPQUFPLENBQUNRLGlCQUFpQixDQUFDVCxNQUFNVSxTQUFTO0lBQ2hEO0lBRUFFLGdCQUFnQlosS0FBSyxFQUFFO1FBQ3JCLEtBQUssQ0FBQ1ksZ0JBQWdCWjtRQUN0QixJQUFJLENBQUNhLEtBQUs7SUFDWjtBQUVGO0FBRUE3QixrQkFBZSxHQUFHUSxzQkFDbEIsZ0RBQWdEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZml0X3BsdXNfcGx1cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy93ZWIvaGFuZGxlcnMvTWFudWFsR2VzdHVyZUhhbmRsZXIuanM/NDVjNyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9HZXN0dXJlSGFuZGxlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vR2VzdHVyZUhhbmRsZXJcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jbGFzcyBNYW51YWxHZXN0dXJlSGFuZGxlciBleHRlbmRzIF9HZXN0dXJlSGFuZGxlci5kZWZhdWx0IHtcbiAgaW5pdChyZWYsIHByb3BzUmVmKSB7XG4gICAgc3VwZXIuaW5pdChyZWYsIHByb3BzUmVmKTtcbiAgfVxuXG4gIHVwZGF0ZUdlc3R1cmVDb25maWcoe1xuICAgIGVuYWJsZWQgPSB0cnVlLFxuICAgIC4uLnByb3BzXG4gIH0pIHtcbiAgICBzdXBlci51cGRhdGVHZXN0dXJlQ29uZmlnKHtcbiAgICAgIGVuYWJsZWQ6IGVuYWJsZWQsXG4gICAgICAuLi5wcm9wc1xuICAgIH0pO1xuICB9XG5cbiAgb25Qb2ludGVyRG93bihldmVudCkge1xuICAgIHRoaXMudHJhY2tlci5hZGRUb1RyYWNrZXIoZXZlbnQpO1xuICAgIHN1cGVyLm9uUG9pbnRlckRvd24oZXZlbnQpO1xuICAgIHRoaXMuYmVnaW4oKTtcbiAgfVxuXG4gIG9uUG9pbnRlckFkZChldmVudCkge1xuICAgIHRoaXMudHJhY2tlci5hZGRUb1RyYWNrZXIoZXZlbnQpO1xuICAgIHN1cGVyLm9uUG9pbnRlckFkZChldmVudCk7XG4gIH1cblxuICBvblBvaW50ZXJNb3ZlKGV2ZW50KSB7XG4gICAgdGhpcy50cmFja2VyLnRyYWNrKGV2ZW50KTtcbiAgICBzdXBlci5vblBvaW50ZXJNb3ZlKGV2ZW50KTtcbiAgfVxuXG4gIG9uUG9pbnRlck91dE9mQm91bmRzKGV2ZW50KSB7XG4gICAgdGhpcy50cmFja2VyLnRyYWNrKGV2ZW50KTtcbiAgICBzdXBlci5vblBvaW50ZXJPdXRPZkJvdW5kcyhldmVudCk7XG4gIH1cblxuICBvblBvaW50ZXJVcChldmVudCkge1xuICAgIHN1cGVyLm9uUG9pbnRlclVwKGV2ZW50KTtcbiAgICB0aGlzLnRyYWNrZXIucmVtb3ZlRnJvbVRyYWNrZXIoZXZlbnQucG9pbnRlcklkKTtcbiAgfVxuXG4gIG9uUG9pbnRlclJlbW92ZShldmVudCkge1xuICAgIHN1cGVyLm9uUG9pbnRlclJlbW92ZShldmVudCk7XG4gICAgdGhpcy50cmFja2VyLnJlbW92ZUZyb21UcmFja2VyKGV2ZW50LnBvaW50ZXJJZCk7XG4gIH1cblxuICBvblBvaW50ZXJDYW5jZWwoZXZlbnQpIHtcbiAgICBzdXBlci5vblBvaW50ZXJDYW5jZWwoZXZlbnQpO1xuICAgIHRoaXMucmVzZXQoKTtcbiAgfVxuXG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE1hbnVhbEdlc3R1cmVIYW5kbGVyO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TWFudWFsR2VzdHVyZUhhbmRsZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9HZXN0dXJlSGFuZGxlciIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwib2JqIiwiX19lc01vZHVsZSIsIk1hbnVhbEdlc3R1cmVIYW5kbGVyIiwiaW5pdCIsInJlZiIsInByb3BzUmVmIiwidXBkYXRlR2VzdHVyZUNvbmZpZyIsImVuYWJsZWQiLCJwcm9wcyIsIm9uUG9pbnRlckRvd24iLCJldmVudCIsInRyYWNrZXIiLCJhZGRUb1RyYWNrZXIiLCJiZWdpbiIsIm9uUG9pbnRlckFkZCIsIm9uUG9pbnRlck1vdmUiLCJ0cmFjayIsIm9uUG9pbnRlck91dE9mQm91bmRzIiwib25Qb2ludGVyVXAiLCJyZW1vdmVGcm9tVHJhY2tlciIsInBvaW50ZXJJZCIsIm9uUG9pbnRlclJlbW92ZSIsIm9uUG9pbnRlckNhbmNlbCIsInJlc2V0Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/ManualGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/NativeViewGestureHandler.js":
/*!*********************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/NativeViewGestureHandler.js ***!
  \*********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _constants = __webpack_require__(/*! ../constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/constants.js\");\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass NativeViewGestureHandler extends _GestureHandler.default {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"buttonRole\", void 0);\n        _defineProperty(this, \"shouldActivateOnStart\", false);\n        _defineProperty(this, \"disallowInterruption\", false);\n        _defineProperty(this, \"startX\", 0);\n        _defineProperty(this, \"startY\", 0);\n        _defineProperty(this, \"minDistSq\", _constants.DEFAULT_TOUCH_SLOP * _constants.DEFAULT_TOUCH_SLOP);\n    }\n    init(ref, propsRef) {\n        super.init(ref, propsRef);\n        this.setShouldCancelWhenOutside(true);\n        this.view.style[\"touchAction\"] = \"auto\"; //@ts-ignore Turns on defualt touch behavior on Safari\n        this.view.style[\"WebkitTouchCallout\"] = \"auto\";\n        if (this.view.hasAttribute(\"role\")) {\n            this.buttonRole = true;\n        } else {\n            this.buttonRole = false;\n        }\n    }\n    updateGestureConfig({ enabled = true, ...props }) {\n        super.updateGestureConfig({\n            enabled: enabled,\n            ...props\n        });\n        if (this.config.shouldActivateOnStart !== undefined) {\n            this.shouldActivateOnStart = this.config.shouldActivateOnStart;\n        }\n        if (this.config.disallowInterruption !== undefined) {\n            this.disallowInterruption = this.config.disallowInterruption;\n        }\n    }\n    resetConfig() {\n        super.resetConfig();\n    }\n    onPointerDown(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerDown(event);\n        this.newPointerAction();\n    }\n    onPointerAdd(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerAdd(event);\n        this.newPointerAction();\n    }\n    newPointerAction() {\n        this.startX = this.tracker.getLastAvgX();\n        this.startY = this.tracker.getLastAvgY();\n        if (this.currentState !== _State.State.UNDETERMINED) {\n            return;\n        }\n        this.begin();\n        if (this.buttonRole) {\n            this.activate();\n        }\n    }\n    onPointerMove(event) {\n        this.tracker.track(event);\n        const dx = this.startX - this.tracker.getLastAvgX();\n        const dy = this.startY - this.tracker.getLastAvgY();\n        const distSq = dx * dx + dy * dy;\n        if (!this.buttonRole && distSq >= this.minDistSq && this.currentState === _State.State.BEGAN) {\n            this.activate();\n        }\n    }\n    onPointerOut() {\n        this.cancel();\n    }\n    onPointerUp(event) {\n        super.onPointerUp(event);\n        this.onUp(event);\n    }\n    onPointerRemove(event) {\n        super.onPointerRemove(event);\n        this.onUp(event);\n    }\n    onUp(event) {\n        this.tracker.removeFromTracker(event.pointerId);\n        if (this.tracker.getTrackedPointersCount() === 0) {\n            if (this.currentState === _State.State.ACTIVE) {\n                this.end();\n            } else {\n                this.fail();\n            }\n        }\n    }\n    onPointerCancel(event) {\n        super.onPointerCancel(event);\n        this.cancel();\n        this.reset();\n    }\n    shouldRecognizeSimultaneously(handler) {\n        if (super.shouldRecognizeSimultaneously(handler)) {\n            return true;\n        }\n        if (handler instanceof NativeViewGestureHandler && handler.getState() === _State.State.ACTIVE && handler.disallowsInterruption()) {\n            return false;\n        }\n        const canBeInterrupted = !this.disallowInterruption;\n        if (this.currentState === _State.State.ACTIVE && handler.getState() === _State.State.ACTIVE && canBeInterrupted) {\n            return false;\n        }\n        return this.currentState === _State.State.ACTIVE && canBeInterrupted && handler.getTag() > 0;\n    }\n    shouldBeCancelledByOther(_handler) {\n        return !this.disallowInterruption;\n    }\n    disallowsInterruption() {\n        return this.disallowInterruption;\n    }\n}\nexports[\"default\"] = NativeViewGestureHandler; //# sourceMappingURL=NativeViewGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/NativeViewGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/PanGestureHandler.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/PanGestureHandler.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _constants = __webpack_require__(/*! ../constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/constants.js\");\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst DEFAULT_MIN_POINTERS = 1;\nconst DEFAULT_MAX_POINTERS = 10;\nconst DEFAULT_MIN_DIST_SQ = _constants.DEFAULT_TOUCH_SLOP * _constants.DEFAULT_TOUCH_SLOP;\nclass PanGestureHandler extends _GestureHandler.default {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"customActivationProperties\", [\n            \"activeOffsetXStart\",\n            \"activeOffsetXEnd\",\n            \"failOffsetXStart\",\n            \"failOffsetXEnd\",\n            \"activeOffsetYStart\",\n            \"activeOffsetYEnd\",\n            \"failOffsetYStart\",\n            \"failOffsetYEnd\",\n            \"minVelocityX\",\n            \"minVelocityY\"\n        ]);\n        _defineProperty(this, \"velocityX\", 0);\n        _defineProperty(this, \"velocityY\", 0);\n        _defineProperty(this, \"minDistSq\", DEFAULT_MIN_DIST_SQ);\n        _defineProperty(this, \"activeOffsetXStart\", -Number.MAX_SAFE_INTEGER);\n        _defineProperty(this, \"activeOffsetXEnd\", Number.MIN_SAFE_INTEGER);\n        _defineProperty(this, \"failOffsetXStart\", Number.MIN_SAFE_INTEGER);\n        _defineProperty(this, \"failOffsetXEnd\", Number.MAX_SAFE_INTEGER);\n        _defineProperty(this, \"activeOffsetYStart\", Number.MAX_SAFE_INTEGER);\n        _defineProperty(this, \"activeOffsetYEnd\", Number.MIN_SAFE_INTEGER);\n        _defineProperty(this, \"failOffsetYStart\", Number.MIN_SAFE_INTEGER);\n        _defineProperty(this, \"failOffsetYEnd\", Number.MAX_SAFE_INTEGER);\n        _defineProperty(this, \"minVelocityX\", Number.MAX_SAFE_INTEGER);\n        _defineProperty(this, \"minVelocityY\", Number.MAX_SAFE_INTEGER);\n        _defineProperty(this, \"minVelocitySq\", Number.MAX_SAFE_INTEGER);\n        _defineProperty(this, \"minPointers\", DEFAULT_MIN_POINTERS);\n        _defineProperty(this, \"maxPointers\", DEFAULT_MAX_POINTERS);\n        _defineProperty(this, \"startX\", 0);\n        _defineProperty(this, \"startY\", 0);\n        _defineProperty(this, \"offsetX\", 0);\n        _defineProperty(this, \"offsetY\", 0);\n        _defineProperty(this, \"lastX\", 0);\n        _defineProperty(this, \"lastY\", 0);\n        _defineProperty(this, \"activateAfterLongPress\", 0);\n        _defineProperty(this, \"activationTimeout\", 0);\n    }\n    init(ref, propsRef) {\n        super.init(ref, propsRef);\n    }\n    updateGestureConfig({ enabled = true, ...props }) {\n        this.resetConfig();\n        super.updateGestureConfig({\n            enabled: enabled,\n            ...props\n        });\n        this.checkCustomActivationCriteria(this.customActivationProperties);\n        if (this.config.minDist !== undefined) {\n            this.minDistSq = this.config.minDist * this.config.minDist;\n        } else if (this.hasCustomActivationCriteria) {\n            this.minDistSq = Number.MAX_SAFE_INTEGER;\n        }\n        if (this.config.minPointers !== undefined) {\n            this.minPointers = this.config.minPointers;\n        }\n        if (this.config.maxPointers !== undefined) {\n            this.maxPointers = this.config.maxPointers;\n        }\n        if (this.config.minVelocity !== undefined) {\n            this.minVelocityX = this.config.minVelocity;\n            this.minVelocityY = this.config.minVelocity;\n        }\n        if (this.config.minVelocityX !== undefined) {\n            this.minVelocityX = this.config.minVelocityX;\n        }\n        if (this.config.minVelocityY !== undefined) {\n            this.minVelocityY = this.config.minVelocityY;\n        }\n        if (this.config.activateAfterLongPress !== undefined) {\n            this.activateAfterLongPress = this.config.activateAfterLongPress;\n        }\n        if (this.config.activeOffsetXStart !== undefined) {\n            this.activeOffsetXStart = this.config.activeOffsetXStart;\n            if (this.config.activeOffsetXEnd === undefined) {\n                this.activeOffsetXEnd = Number.MAX_SAFE_INTEGER;\n            }\n        }\n        if (this.config.activeOffsetXEnd !== undefined) {\n            this.activeOffsetXEnd = this.config.activeOffsetXEnd;\n            if (this.config.activeOffsetXStart === undefined) {\n                this.activeOffsetXStart = Number.MIN_SAFE_INTEGER;\n            }\n        }\n        if (this.config.failOffsetXStart !== undefined) {\n            this.failOffsetXStart = this.config.failOffsetXStart;\n            if (this.config.failOffsetXEnd === undefined) {\n                this.failOffsetXEnd = Number.MAX_SAFE_INTEGER;\n            }\n        }\n        if (this.config.failOffsetXEnd !== undefined) {\n            this.failOffsetXEnd = this.config.failOffsetXEnd;\n            if (this.config.failOffsetXStart === undefined) {\n                this.failOffsetXStart = Number.MIN_SAFE_INTEGER;\n            }\n        }\n        if (this.config.activeOffsetYStart !== undefined) {\n            this.activeOffsetYStart = this.config.activeOffsetYStart;\n            if (this.config.activeOffsetYEnd === undefined) {\n                this.activeOffsetYEnd = Number.MAX_SAFE_INTEGER;\n            }\n        }\n        if (this.config.activeOffsetYEnd !== undefined) {\n            this.activeOffsetYEnd = this.config.activeOffsetYEnd;\n            if (this.config.activeOffsetYStart === undefined) {\n                this.activeOffsetYStart = Number.MIN_SAFE_INTEGER;\n            }\n        }\n        if (this.config.failOffsetYStart !== undefined) {\n            this.failOffsetYStart = this.config.failOffsetYStart;\n            if (this.config.failOffsetYEnd === undefined) {\n                this.failOffsetYEnd = Number.MAX_SAFE_INTEGER;\n            }\n        }\n        if (this.config.failOffsetYEnd !== undefined) {\n            this.failOffsetYEnd = this.config.failOffsetYEnd;\n            if (this.config.failOffsetYStart === undefined) {\n                this.failOffsetYStart = Number.MIN_SAFE_INTEGER;\n            }\n        }\n    }\n    resetConfig() {\n        super.resetConfig();\n        this.activeOffsetXStart = -Number.MAX_SAFE_INTEGER;\n        this.activeOffsetXEnd = Number.MIN_SAFE_INTEGER;\n        this.failOffsetXStart = Number.MIN_SAFE_INTEGER;\n        this.failOffsetXEnd = Number.MAX_SAFE_INTEGER;\n        this.activeOffsetYStart = Number.MAX_SAFE_INTEGER;\n        this.activeOffsetYEnd = Number.MIN_SAFE_INTEGER;\n        this.failOffsetYStart = Number.MIN_SAFE_INTEGER;\n        this.failOffsetYEnd = Number.MAX_SAFE_INTEGER;\n        this.minVelocityX = Number.MAX_SAFE_INTEGER;\n        this.minVelocityY = Number.MAX_SAFE_INTEGER;\n        this.minVelocitySq = Number.MAX_SAFE_INTEGER;\n        this.minDistSq = DEFAULT_MIN_DIST_SQ;\n        this.minPointers = DEFAULT_MIN_POINTERS;\n        this.maxPointers = DEFAULT_MAX_POINTERS;\n        this.activateAfterLongPress = 0;\n    }\n    transformNativeEvent() {\n        const rect = this.view.getBoundingClientRect();\n        const ratio = _reactNative.PixelRatio.get();\n        const translationX = this.getTranslationX();\n        const translationY = this.getTranslationY();\n        return {\n            translationX: isNaN(translationX) ? 0 : translationX,\n            translationY: isNaN(translationY) ? 0 : translationY,\n            absoluteX: this.tracker.getLastAvgX(),\n            absoluteY: this.tracker.getLastAvgY(),\n            velocityX: this.velocityX * ratio * 10,\n            velocityY: this.velocityY * ratio * 10,\n            x: this.tracker.getLastAvgX() - rect.left,\n            y: this.tracker.getLastAvgY() - rect.top\n        };\n    }\n    getTranslationX() {\n        return this.lastX - this.startX + this.offsetX;\n    }\n    getTranslationY() {\n        return this.lastY - this.startY + this.offsetY;\n    }\n    clearActivationTimeout() {\n        clearTimeout(this.activationTimeout);\n    }\n    onPointerDown(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerDown(event);\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.tryBegin(event);\n        this.checkBegan();\n    }\n    onPointerAdd(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerAdd(event);\n        this.tryBegin(event);\n        this.offsetX += this.lastX - this.startX;\n        this.offsetY += this.lastY - this.startY;\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.startX = this.lastX;\n        this.startY = this.lastY;\n        if (this.tracker.getTrackedPointersCount() > this.maxPointers) {\n            if (this.currentState === _State.State.ACTIVE) {\n                this.cancel();\n            } else {\n                this.fail();\n            }\n        } else {\n            this.checkBegan();\n        }\n    }\n    onPointerUp(event) {\n        super.onPointerUp(event);\n        if (this.currentState === _State.State.ACTIVE) {\n            this.lastX = this.tracker.getLastAvgX();\n            this.lastY = this.tracker.getLastAvgY();\n        }\n        this.tracker.removeFromTracker(event.pointerId);\n        if (this.currentState === _State.State.ACTIVE) {\n            this.end();\n        } else {\n            this.resetProgress();\n            this.fail();\n        }\n    }\n    onPointerRemove(event) {\n        super.onPointerRemove(event);\n        this.tracker.removeFromTracker(event.pointerId);\n        this.offsetX += this.lastX - this.startX;\n        this.offsetY += this.lastY - this.startY;\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.startX = this.lastX;\n        this.startY = this.lastY;\n        if (!(this.currentState === _State.State.ACTIVE && this.tracker.getTrackedPointersCount() < this.minPointers)) {\n            this.checkBegan();\n        }\n    }\n    onPointerMove(event) {\n        this.tracker.track(event);\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.velocityX = this.tracker.getVelocityX(event.pointerId);\n        this.velocityY = this.tracker.getVelocityY(event.pointerId);\n        this.checkBegan();\n        super.onPointerMove(event);\n    }\n    onPointerCancel(event) {\n        super.onPointerCancel(event);\n        this.reset();\n    }\n    onPointerOutOfBounds(event) {\n        if (this.getShouldCancelWhenOutside()) {\n            return;\n        }\n        this.tracker.track(event);\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.velocityX = this.tracker.getVelocityX(event.pointerId);\n        this.velocityY = this.tracker.getVelocityY(event.pointerId);\n        this.checkBegan();\n        if (this.currentState === _State.State.ACTIVE) {\n            super.onPointerOutOfBounds(event);\n        }\n    }\n    shouldActivate() {\n        const dx = this.getTranslationX();\n        if (this.activeOffsetXStart !== Number.MAX_SAFE_INTEGER && dx < this.activeOffsetXStart) {\n            return true;\n        }\n        if (this.activeOffsetXEnd !== Number.MIN_SAFE_INTEGER && dx > this.activeOffsetXEnd) {\n            return true;\n        }\n        const dy = this.getTranslationY();\n        if (this.activeOffsetYStart !== Number.MAX_SAFE_INTEGER && dy < this.activeOffsetYStart) {\n            return true;\n        }\n        if (this.activeOffsetYEnd !== Number.MIN_SAFE_INTEGER && dy > this.activeOffsetYEnd) {\n            return true;\n        }\n        const distanceSq = dx * dx + dy * dy;\n        if (this.minDistSq !== Number.MAX_SAFE_INTEGER && distanceSq >= this.minDistSq) {\n            return true;\n        }\n        const vx = this.velocityX;\n        if (this.minVelocityX !== Number.MAX_SAFE_INTEGER && (this.minVelocityX < 0 && vx <= this.minVelocityX || this.minVelocityX >= 0 && this.minVelocityX <= vx)) {\n            return true;\n        }\n        const vy = this.velocityY;\n        if (this.minVelocityY !== Number.MAX_SAFE_INTEGER && (this.minVelocityY < 0 && vy <= this.minVelocityY || this.minVelocityY >= 0 && this.minVelocityY <= vy)) {\n            return true;\n        }\n        const velocitySq = vx * vx + vy * vy;\n        return this.minVelocitySq !== Number.MAX_SAFE_INTEGER && velocitySq >= this.minVelocitySq;\n    }\n    shouldFail() {\n        const dx = this.getTranslationX();\n        const dy = this.getTranslationY();\n        const distanceSq = dx * dx + dy * dy;\n        if (this.activateAfterLongPress > 0 && distanceSq > DEFAULT_MIN_DIST_SQ) {\n            this.clearActivationTimeout();\n            return true;\n        }\n        if (this.failOffsetXStart !== Number.MIN_SAFE_INTEGER && dx < this.failOffsetXStart) {\n            return true;\n        }\n        if (this.failOffsetXEnd !== Number.MAX_SAFE_INTEGER && dx > this.failOffsetXEnd) {\n            return true;\n        }\n        if (this.failOffsetYStart !== Number.MIN_SAFE_INTEGER && dy < this.failOffsetYStart) {\n            return true;\n        }\n        return this.failOffsetYEnd !== Number.MAX_SAFE_INTEGER && dy > this.failOffsetYEnd;\n    }\n    tryBegin(event) {\n        if (this.currentState === _State.State.UNDETERMINED && this.tracker.getTrackedPointersCount() >= this.minPointers) {\n            this.resetProgress();\n            this.offsetX = 0;\n            this.offsetY = 0;\n            this.velocityX = 0;\n            this.velocityY = 0;\n            this.begin();\n            if (this.activateAfterLongPress > 0) {\n                this.activationTimeout = setTimeout(()=>{\n                    this.activate();\n                }, this.activateAfterLongPress);\n            }\n        } else {\n            this.velocityX = this.tracker.getVelocityX(event.pointerId);\n            this.velocityY = this.tracker.getVelocityY(event.pointerId);\n        }\n    }\n    checkBegan() {\n        if (this.currentState === _State.State.BEGAN) {\n            if (this.shouldFail()) {\n                this.fail();\n            } else if (this.shouldActivate()) {\n                this.activate();\n            }\n        }\n    }\n    activate(force = false) {\n        if (this.currentState !== _State.State.ACTIVE) {\n            this.resetProgress();\n        }\n        super.activate(force);\n    }\n    onCancel() {\n        this.clearActivationTimeout();\n    }\n    onReset() {\n        this.clearActivationTimeout();\n    }\n    resetProgress() {\n        if (this.currentState === _State.State.ACTIVE) {\n            return;\n        }\n        this.startX = this.lastX;\n        this.startY = this.lastY;\n    }\n}\nexports[\"default\"] = PanGestureHandler; //# sourceMappingURL=PanGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/PanGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/PinchGestureHandler.js":
/*!****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/PinchGestureHandler.js ***!
  \****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _constants = __webpack_require__(/*! ../constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/constants.js\");\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js\"));\nvar _ScaleGestureDetector = _interopRequireDefault(__webpack_require__(/*! ../detectors/ScaleGestureDetector */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/detectors/ScaleGestureDetector.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass PinchGestureHandler extends _GestureHandler.default {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"scale\", 1);\n        _defineProperty(this, \"velocity\", 0);\n        _defineProperty(this, \"startingSpan\", 0);\n        _defineProperty(this, \"spanSlop\", _constants.DEFAULT_TOUCH_SLOP);\n        _defineProperty(this, \"scaleDetectorListener\", {\n            onScaleBegin: (detector)=>{\n                this.startingSpan = detector.getCurrentSpan();\n                return true;\n            },\n            onScale: (detector)=>{\n                const prevScaleFactor = this.scale;\n                this.scale *= detector.getScaleFactor(this.tracker.getTrackedPointersCount());\n                const delta = detector.getTimeDelta();\n                if (delta > 0) {\n                    this.velocity = (this.scale - prevScaleFactor) / delta;\n                }\n                if (Math.abs(this.startingSpan - detector.getCurrentSpan()) >= this.spanSlop && this.currentState === _State.State.BEGAN) {\n                    this.activate();\n                }\n                return true;\n            },\n            onScaleEnd: (_detector)=>{}\n        });\n        _defineProperty(this, \"scaleGestureDetector\", new _ScaleGestureDetector.default(this.scaleDetectorListener));\n    }\n    init(ref, propsRef) {\n        super.init(ref, propsRef);\n        this.setShouldCancelWhenOutside(false);\n    }\n    updateGestureConfig({ enabled = true, ...props }) {\n        super.updateGestureConfig({\n            enabled: enabled,\n            ...props\n        });\n    }\n    transformNativeEvent() {\n        return {\n            focalX: this.scaleGestureDetector.getFocusX(),\n            focalY: this.scaleGestureDetector.getFocusY(),\n            velocity: this.velocity,\n            scale: this.scale\n        };\n    }\n    onPointerDown(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerDown(event);\n    }\n    onPointerAdd(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerAdd(event);\n        this.tryBegin();\n        this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n    }\n    onPointerUp(event) {\n        super.onPointerUp(event);\n        this.tracker.removeFromTracker(event.pointerId);\n        if (this.currentState !== _State.State.ACTIVE) {\n            return;\n        }\n        this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n        if (this.currentState === _State.State.ACTIVE) {\n            this.end();\n        } else {\n            this.fail();\n        }\n    }\n    onPointerRemove(event) {\n        super.onPointerRemove(event);\n        this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n        this.tracker.removeFromTracker(event.pointerId);\n        if (this.currentState === _State.State.ACTIVE && this.tracker.getTrackedPointersCount() < 2) {\n            this.end();\n        }\n    }\n    onPointerMove(event) {\n        if (this.tracker.getTrackedPointersCount() < 2) {\n            return;\n        }\n        this.tracker.track(event);\n        this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n        super.onPointerMove(event);\n    }\n    onPointerOutOfBounds(event) {\n        if (this.tracker.getTrackedPointersCount() < 2) {\n            return;\n        }\n        this.tracker.track(event);\n        this.scaleGestureDetector.onTouchEvent(event, this.tracker);\n        super.onPointerOutOfBounds(event);\n    }\n    onPointerCancel(event) {\n        super.onPointerCancel(event);\n        this.reset();\n    }\n    tryBegin() {\n        if (this.currentState !== _State.State.UNDETERMINED) {\n            return;\n        }\n        this.resetProgress();\n        this.begin();\n    }\n    activate(force) {\n        if (this.currentState !== _State.State.ACTIVE) {\n            this.resetProgress();\n        }\n        super.activate(force);\n    }\n    onReset() {\n        this.resetProgress();\n    }\n    resetProgress() {\n        if (this.currentState === _State.State.ACTIVE) {\n            return;\n        }\n        this.velocity = 0;\n        this.scale = 1;\n    }\n}\nexports[\"default\"] = PinchGestureHandler; //# sourceMappingURL=PinchGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/PinchGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/RotationGestureHandler.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/RotationGestureHandler.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js\"));\nvar _RotationGestureDetector = _interopRequireDefault(__webpack_require__(/*! ../detectors/RotationGestureDetector */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/detectors/RotationGestureDetector.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst ROTATION_RECOGNITION_THRESHOLD = Math.PI / 36;\nclass RotationGestureHandler extends _GestureHandler.default {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"rotation\", 0);\n        _defineProperty(this, \"velocity\", 0);\n        _defineProperty(this, \"cachedAnchorX\", 0);\n        _defineProperty(this, \"cachedAnchorY\", 0);\n        _defineProperty(this, \"rotationGestureListener\", {\n            onRotationBegin: (_detector)=>true,\n            onRotation: (detector)=>{\n                const previousRotation = this.rotation;\n                this.rotation += detector.getRotation();\n                const delta = detector.getTimeDelta();\n                if (delta > 0) {\n                    this.velocity = (this.rotation - previousRotation) / delta;\n                }\n                if (Math.abs(this.rotation) >= ROTATION_RECOGNITION_THRESHOLD && this.currentState === _State.State.BEGAN) {\n                    this.activate();\n                }\n                return true;\n            },\n            onRotationEnd: (_detector)=>{\n                this.end();\n            }\n        });\n        _defineProperty(this, \"rotationGestureDetector\", new _RotationGestureDetector.default(this.rotationGestureListener));\n    }\n    init(ref, propsRef) {\n        super.init(ref, propsRef);\n        this.setShouldCancelWhenOutside(false);\n    }\n    updateGestureConfig({ enabled = true, ...props }) {\n        super.updateGestureConfig({\n            enabled: enabled,\n            ...props\n        });\n    }\n    transformNativeEvent() {\n        return {\n            rotation: this.rotation ? this.rotation : 0,\n            anchorX: this.getAnchorX(),\n            anchorY: this.getAnchorY(),\n            velocity: this.velocity ? this.velocity : 0\n        };\n    }\n    getAnchorX() {\n        const anchorX = this.rotationGestureDetector.getAnchorX();\n        return anchorX ? anchorX : this.cachedAnchorX;\n    }\n    getAnchorY() {\n        const anchorY = this.rotationGestureDetector.getAnchorY();\n        return anchorY ? anchorY : this.cachedAnchorY;\n    }\n    onPointerDown(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerDown(event);\n    }\n    onPointerAdd(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerAdd(event);\n        this.tryBegin();\n        this.rotationGestureDetector.onTouchEvent(event, this.tracker);\n    }\n    onPointerMove(event) {\n        if (this.tracker.getTrackedPointersCount() < 2) {\n            return;\n        }\n        if (this.getAnchorX()) {\n            this.cachedAnchorX = this.getAnchorX();\n        }\n        if (this.getAnchorY()) {\n            this.cachedAnchorY = this.getAnchorY();\n        }\n        this.tracker.track(event);\n        this.rotationGestureDetector.onTouchEvent(event, this.tracker);\n        super.onPointerMove(event);\n    }\n    onPointerOutOfBounds(event) {\n        if (this.tracker.getTrackedPointersCount() < 2) {\n            return;\n        }\n        if (this.getAnchorX()) {\n            this.cachedAnchorX = this.getAnchorX();\n        }\n        if (this.getAnchorY()) {\n            this.cachedAnchorY = this.getAnchorY();\n        }\n        this.tracker.track(event);\n        this.rotationGestureDetector.onTouchEvent(event, this.tracker);\n        super.onPointerOutOfBounds(event);\n    }\n    onPointerUp(event) {\n        super.onPointerUp(event);\n        this.tracker.removeFromTracker(event.pointerId);\n        this.rotationGestureDetector.onTouchEvent(event, this.tracker);\n        if (this.currentState !== _State.State.ACTIVE) {\n            return;\n        }\n        if (this.currentState === _State.State.ACTIVE) {\n            this.end();\n        } else {\n            this.fail();\n        }\n    }\n    onPointerRemove(event) {\n        super.onPointerRemove(event);\n        this.rotationGestureDetector.onTouchEvent(event, this.tracker);\n        this.tracker.removeFromTracker(event.pointerId);\n    }\n    onPointerCancel(event) {\n        super.onPointerCancel(event);\n        this.end();\n        this.reset();\n    }\n    tryBegin() {\n        if (this.currentState !== _State.State.UNDETERMINED) {\n            return;\n        }\n        this.begin();\n    }\n    activate(_force) {\n        super.activate();\n    }\n    onReset() {\n        if (this.currentState === _State.State.ACTIVE) {\n            return;\n        }\n        this.rotation = 0;\n        this.velocity = 0;\n        this.rotationGestureDetector.reset();\n    }\n}\nexports[\"default\"] = RotationGestureHandler; //# sourceMappingURL=RotationGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/RotationGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/TapGestureHandler.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/TapGestureHandler.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _interfaces = __webpack_require__(/*! ../interfaces */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js\");\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/GestureHandler.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nconst DEFAULT_MAX_DURATION_MS = 500;\nconst DEFAULT_MAX_DELAY_MS = 500;\nconst DEFAULT_NUMBER_OF_TAPS = 1;\nconst DEFAULT_MIN_NUMBER_OF_POINTERS = 1;\nclass TapGestureHandler extends _GestureHandler.default {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"maxDeltaX\", Number.MIN_SAFE_INTEGER);\n        _defineProperty(this, \"maxDeltaY\", Number.MIN_SAFE_INTEGER);\n        _defineProperty(this, \"maxDistSq\", Number.MIN_SAFE_INTEGER);\n        _defineProperty(this, \"maxDurationMs\", DEFAULT_MAX_DURATION_MS);\n        _defineProperty(this, \"maxDelayMs\", DEFAULT_MAX_DELAY_MS);\n        _defineProperty(this, \"numberOfTaps\", DEFAULT_NUMBER_OF_TAPS);\n        _defineProperty(this, \"minNumberOfPointers\", DEFAULT_MIN_NUMBER_OF_POINTERS);\n        _defineProperty(this, \"currentMaxNumberOfPointers\", 1);\n        _defineProperty(this, \"startX\", 0);\n        _defineProperty(this, \"startY\", 0);\n        _defineProperty(this, \"offsetX\", 0);\n        _defineProperty(this, \"offsetY\", 0);\n        _defineProperty(this, \"lastX\", 0);\n        _defineProperty(this, \"lastY\", 0);\n        _defineProperty(this, \"waitTimeout\", void 0);\n        _defineProperty(this, \"delayTimeout\", void 0);\n        _defineProperty(this, \"tapsSoFar\", 0);\n    }\n    init(ref, propsRef) {\n        super.init(ref, propsRef);\n    }\n    updateGestureConfig({ enabled = true, ...props }) {\n        super.updateGestureConfig({\n            enabled: enabled,\n            ...props\n        });\n        if (this.config.numberOfTaps !== undefined) {\n            this.numberOfTaps = this.config.numberOfTaps;\n        }\n        if (this.config.maxDurationMs !== undefined) {\n            this.maxDurationMs = this.config.maxDurationMs;\n        }\n        if (this.config.maxDelayMs !== undefined) {\n            this.maxDelayMs = this.config.maxDelayMs;\n        }\n        if (this.config.maxDeltaX !== undefined) {\n            this.maxDeltaX = this.config.maxDeltaX;\n        }\n        if (this.config.maxDeltaY !== undefined) {\n            this.maxDeltaY = this.config.maxDeltaY;\n        }\n        if (this.config.maxDist !== undefined) {\n            this.maxDistSq = this.config.maxDist * this.config.maxDist;\n        }\n        if (this.config.minPointers !== undefined) {\n            this.minNumberOfPointers = this.config.minPointers;\n        }\n    }\n    resetConfig() {\n        super.resetConfig();\n        this.maxDeltaX = Number.MIN_SAFE_INTEGER;\n        this.maxDeltaY = Number.MIN_SAFE_INTEGER;\n        this.maxDistSq = Number.MIN_SAFE_INTEGER;\n        this.maxDurationMs = DEFAULT_MAX_DURATION_MS;\n        this.maxDelayMs = DEFAULT_MAX_DELAY_MS;\n        this.numberOfTaps = DEFAULT_NUMBER_OF_TAPS;\n        this.minNumberOfPointers = DEFAULT_MIN_NUMBER_OF_POINTERS;\n    }\n    transformNativeEvent() {\n        const rect = this.view.getBoundingClientRect();\n        return {\n            x: this.tracker.getLastAvgX() - rect.left,\n            y: this.tracker.getLastAvgY() - rect.top,\n            absoluteX: this.tracker.getLastAvgX(),\n            absoluteY: this.tracker.getLastAvgY()\n        };\n    }\n    clearTimeouts() {\n        clearTimeout(this.waitTimeout);\n        clearTimeout(this.delayTimeout);\n    }\n    startTap() {\n        this.clearTimeouts();\n        this.waitTimeout = setTimeout(()=>this.fail(), this.maxDurationMs);\n    }\n    endTap() {\n        this.clearTimeouts();\n        if (++this.tapsSoFar === this.numberOfTaps && this.currentMaxNumberOfPointers >= this.minNumberOfPointers) {\n            this.activate();\n        } else {\n            this.delayTimeout = setTimeout(()=>this.fail(), this.maxDelayMs);\n        }\n    }\n    onPointerDown(event) {\n        this.tracker.addToTracker(event);\n        super.onPointerDown(event);\n        this.trySettingPosition(event);\n        this.startX = event.x;\n        this.startY = event.y;\n        this.lastX = event.x;\n        this.lastY = event.y;\n        this.updateState(event);\n    }\n    onPointerAdd(event) {\n        super.onPointerAdd(event);\n        this.tracker.addToTracker(event);\n        this.trySettingPosition(event);\n        this.offsetX += this.lastX - this.startX;\n        this.offsetY += this.lastY - this.startY;\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.startX = this.tracker.getLastAvgX();\n        this.startY = this.tracker.getLastAvgY();\n        this.updateState(event);\n    }\n    onPointerUp(event) {\n        super.onPointerUp(event);\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.tracker.removeFromTracker(event.pointerId);\n        this.updateState(event);\n    }\n    onPointerRemove(event) {\n        super.onPointerRemove(event);\n        this.tracker.removeFromTracker(event.pointerId);\n        this.offsetX += this.lastX - this.startX;\n        this.offsetY += this.lastY = this.startY;\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.startX = this.lastX;\n        this.startY = this.lastY;\n        this.updateState(event);\n    }\n    onPointerMove(event) {\n        this.trySettingPosition(event);\n        this.tracker.track(event);\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.updateState(event);\n        super.onPointerMove(event);\n    }\n    onPointerOutOfBounds(event) {\n        this.trySettingPosition(event);\n        this.tracker.track(event);\n        this.lastX = this.tracker.getLastAvgX();\n        this.lastY = this.tracker.getLastAvgY();\n        this.updateState(event);\n        super.onPointerOutOfBounds(event);\n    }\n    onPointerCancel(event) {\n        super.onPointerCancel(event);\n        this.tracker.resetTracker();\n        this.fail();\n    }\n    updateState(event) {\n        if (this.currentMaxNumberOfPointers < this.tracker.getTrackedPointersCount()) {\n            this.currentMaxNumberOfPointers = this.tracker.getTrackedPointersCount();\n        }\n        if (this.shouldFail()) {\n            this.fail();\n            return;\n        }\n        switch(this.currentState){\n            case _State.State.UNDETERMINED:\n                if (event.eventType === _interfaces.EventTypes.DOWN) {\n                    this.begin();\n                }\n                this.startTap();\n                break;\n            case _State.State.BEGAN:\n                if (event.eventType === _interfaces.EventTypes.UP) {\n                    this.endTap();\n                }\n                if (event.eventType === _interfaces.EventTypes.DOWN) {\n                    this.startTap();\n                }\n                break;\n            default:\n                break;\n        }\n    }\n    trySettingPosition(event) {\n        if (this.currentState !== _State.State.UNDETERMINED) {\n            return;\n        }\n        this.offsetX = 0;\n        this.offsetY = 0;\n        this.startX = event.x;\n        this.startY = event.y;\n    }\n    shouldFail() {\n        const dx = this.lastX - this.startX + this.offsetX;\n        if (this.maxDeltaX !== Number.MIN_SAFE_INTEGER && Math.abs(dx) > this.maxDeltaX) {\n            return true;\n        }\n        const dy = this.lastY - this.startY + this.offsetY;\n        if (this.maxDeltaY !== Number.MIN_SAFE_INTEGER && Math.abs(dy) > this.maxDeltaY) {\n            return true;\n        }\n        const distSq = dy * dy + dx * dx;\n        return this.maxDistSq !== Number.MIN_SAFE_INTEGER && distSq > this.maxDistSq;\n    }\n    activate() {\n        super.activate();\n        this.end();\n    }\n    onCancel() {\n        this.resetProgress();\n        this.clearTimeouts();\n    }\n    resetProgress() {\n        this.clearTimeouts();\n        this.tapsSoFar = 0;\n        this.currentMaxNumberOfPointers = 0;\n    }\n}\nexports[\"default\"] = TapGestureHandler; //# sourceMappingURL=TapGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/handlers/TapGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.PointerType = exports.TouchEventType = exports.EventTypes = exports.MouseButtons = void 0;\nlet MouseButtons;\nexports.MouseButtons = MouseButtons;\n(function(MouseButtons) {\n    MouseButtons[MouseButtons[\"NONE\"] = 0] = \"NONE\";\n    MouseButtons[MouseButtons[\"LEFT\"] = 1] = \"LEFT\";\n    MouseButtons[MouseButtons[\"RIGHT\"] = 2] = \"RIGHT\";\n    MouseButtons[MouseButtons[\"LEFT_RIGHT\"] = 3] = \"LEFT_RIGHT\";\n    MouseButtons[MouseButtons[\"SCROLL\"] = 4] = \"SCROLL\";\n    MouseButtons[MouseButtons[\"SCROLL_LEFT\"] = 5] = \"SCROLL_LEFT\";\n    MouseButtons[MouseButtons[\"SCROLL_RIGHT\"] = 6] = \"SCROLL_RIGHT\";\n    MouseButtons[MouseButtons[\"SCROLL_LEFT_RIGHT\"] = 7] = \"SCROLL_LEFT_RIGHT\";\n})(MouseButtons || (exports.MouseButtons = MouseButtons = {}));\nlet EventTypes;\nexports.EventTypes = EventTypes;\n(function(EventTypes) {\n    EventTypes[EventTypes[\"DOWN\"] = 0] = \"DOWN\";\n    EventTypes[EventTypes[\"ADDITIONAL_POINTER_DOWN\"] = 1] = \"ADDITIONAL_POINTER_DOWN\";\n    EventTypes[EventTypes[\"UP\"] = 2] = \"UP\";\n    EventTypes[EventTypes[\"ADDITIONAL_POINTER_UP\"] = 3] = \"ADDITIONAL_POINTER_UP\";\n    EventTypes[EventTypes[\"MOVE\"] = 4] = \"MOVE\";\n    EventTypes[EventTypes[\"ENTER\"] = 5] = \"ENTER\";\n    EventTypes[EventTypes[\"OUT\"] = 6] = \"OUT\";\n    EventTypes[EventTypes[\"CANCEL\"] = 7] = \"CANCEL\";\n})(EventTypes || (exports.EventTypes = EventTypes = {}));\nlet TouchEventType;\nexports.TouchEventType = TouchEventType;\n(function(TouchEventType) {\n    TouchEventType[TouchEventType[\"UNDETERMINED\"] = 0] = \"UNDETERMINED\";\n    TouchEventType[TouchEventType[\"DOWN\"] = 1] = \"DOWN\";\n    TouchEventType[TouchEventType[\"MOVE\"] = 2] = \"MOVE\";\n    TouchEventType[TouchEventType[\"UP\"] = 3] = \"UP\";\n    TouchEventType[TouchEventType[\"CANCELLED\"] = 4] = \"CANCELLED\";\n})(TouchEventType || (exports.TouchEventType = TouchEventType = {}));\nlet PointerType;\nexports.PointerType = PointerType;\n(function(PointerType) {\n    PointerType[\"NONE\"] = \"none\";\n    PointerType[\"MOUSE\"] = \"mouse\";\n    PointerType[\"TOUCH\"] = \"touch\";\n    PointerType[\"PEN\"] = \"pen\";\n})(PointerType || (exports.PointerType = PointerType = {})); //# sourceMappingURL=interfaces.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViL2ludGVyZmFjZXMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELG1CQUFtQixHQUFHQSxzQkFBc0IsR0FBR0Esa0JBQWtCLEdBQUdBLG9CQUFvQixHQUFHLEtBQUs7QUFDaEcsSUFBSUs7QUFDSkwsb0JBQW9CLEdBQUdLO0FBRXRCLFVBQVVBLFlBQVk7SUFDckJBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDekNBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDekNBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFFBQVEsR0FBRyxFQUFFLEdBQUc7SUFDMUNBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGFBQWEsR0FBRyxFQUFFLEdBQUc7SUFDL0NBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLFNBQVMsR0FBRyxFQUFFLEdBQUc7SUFDM0NBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGNBQWMsR0FBRyxFQUFFLEdBQUc7SUFDaERBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLGVBQWUsR0FBRyxFQUFFLEdBQUc7SUFDakRBLFlBQVksQ0FBQ0EsWUFBWSxDQUFDLG9CQUFvQixHQUFHLEVBQUUsR0FBRztBQUN4RCxHQUFHQSxnQkFBaUJMLENBQUFBLG9CQUFvQixHQUFHSyxlQUFlLENBQUM7QUFFM0QsSUFBSUQ7QUFDSkosa0JBQWtCLEdBQUdJO0FBRXBCLFVBQVVBLFVBQVU7SUFDbkJBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDckNBLFVBQVUsQ0FBQ0EsVUFBVSxDQUFDLDBCQUEwQixHQUFHLEVBQUUsR0FBRztJQUN4REEsVUFBVSxDQUFDQSxVQUFVLENBQUMsS0FBSyxHQUFHLEVBQUUsR0FBRztJQUNuQ0EsVUFBVSxDQUFDQSxVQUFVLENBQUMsd0JBQXdCLEdBQUcsRUFBRSxHQUFHO0lBQ3REQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxPQUFPLEdBQUcsRUFBRSxHQUFHO0lBQ3JDQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxRQUFRLEdBQUcsRUFBRSxHQUFHO0lBQ3RDQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxNQUFNLEdBQUcsRUFBRSxHQUFHO0lBQ3BDQSxVQUFVLENBQUNBLFVBQVUsQ0FBQyxTQUFTLEdBQUcsRUFBRSxHQUFHO0FBQ3pDLEdBQUdBLGNBQWVKLENBQUFBLGtCQUFrQixHQUFHSSxhQUFhLENBQUM7QUFFckQsSUFBSUQ7QUFDSkgsc0JBQXNCLEdBQUdHO0FBRXhCLFVBQVVBLGNBQWM7SUFDdkJBLGNBQWMsQ0FBQ0EsY0FBYyxDQUFDLGVBQWUsR0FBRyxFQUFFLEdBQUc7SUFDckRBLGNBQWMsQ0FBQ0EsY0FBYyxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDN0NBLGNBQWMsQ0FBQ0EsY0FBYyxDQUFDLE9BQU8sR0FBRyxFQUFFLEdBQUc7SUFDN0NBLGNBQWMsQ0FBQ0EsY0FBYyxDQUFDLEtBQUssR0FBRyxFQUFFLEdBQUc7SUFDM0NBLGNBQWMsQ0FBQ0EsY0FBYyxDQUFDLFlBQVksR0FBRyxFQUFFLEdBQUc7QUFDcEQsR0FBR0Esa0JBQW1CSCxDQUFBQSxzQkFBc0IsR0FBR0csaUJBQWlCLENBQUM7QUFFakUsSUFBSUQ7QUFDSkYsbUJBQW1CLEdBQUdFO0FBRXJCLFVBQVVBLFdBQVc7SUFDcEJBLFdBQVcsQ0FBQyxPQUFPLEdBQUc7SUFDdEJBLFdBQVcsQ0FBQyxRQUFRLEdBQUc7SUFDdkJBLFdBQVcsQ0FBQyxRQUFRLEdBQUc7SUFDdkJBLFdBQVcsQ0FBQyxNQUFNLEdBQUc7QUFDdkIsR0FBR0EsZUFBZ0JGLENBQUFBLG1CQUFtQixHQUFHRSxjQUFjLENBQUMsS0FDeEQsc0NBQXNDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZml0X3BsdXNfcGx1cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy93ZWIvaW50ZXJmYWNlcy5qcz80MWE4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5Qb2ludGVyVHlwZSA9IGV4cG9ydHMuVG91Y2hFdmVudFR5cGUgPSBleHBvcnRzLkV2ZW50VHlwZXMgPSBleHBvcnRzLk1vdXNlQnV0dG9ucyA9IHZvaWQgMDtcbmxldCBNb3VzZUJ1dHRvbnM7XG5leHBvcnRzLk1vdXNlQnV0dG9ucyA9IE1vdXNlQnV0dG9ucztcblxuKGZ1bmN0aW9uIChNb3VzZUJ1dHRvbnMpIHtcbiAgTW91c2VCdXR0b25zW01vdXNlQnV0dG9uc1tcIk5PTkVcIl0gPSAwXSA9IFwiTk9ORVwiO1xuICBNb3VzZUJ1dHRvbnNbTW91c2VCdXR0b25zW1wiTEVGVFwiXSA9IDFdID0gXCJMRUZUXCI7XG4gIE1vdXNlQnV0dG9uc1tNb3VzZUJ1dHRvbnNbXCJSSUdIVFwiXSA9IDJdID0gXCJSSUdIVFwiO1xuICBNb3VzZUJ1dHRvbnNbTW91c2VCdXR0b25zW1wiTEVGVF9SSUdIVFwiXSA9IDNdID0gXCJMRUZUX1JJR0hUXCI7XG4gIE1vdXNlQnV0dG9uc1tNb3VzZUJ1dHRvbnNbXCJTQ1JPTExcIl0gPSA0XSA9IFwiU0NST0xMXCI7XG4gIE1vdXNlQnV0dG9uc1tNb3VzZUJ1dHRvbnNbXCJTQ1JPTExfTEVGVFwiXSA9IDVdID0gXCJTQ1JPTExfTEVGVFwiO1xuICBNb3VzZUJ1dHRvbnNbTW91c2VCdXR0b25zW1wiU0NST0xMX1JJR0hUXCJdID0gNl0gPSBcIlNDUk9MTF9SSUdIVFwiO1xuICBNb3VzZUJ1dHRvbnNbTW91c2VCdXR0b25zW1wiU0NST0xMX0xFRlRfUklHSFRcIl0gPSA3XSA9IFwiU0NST0xMX0xFRlRfUklHSFRcIjtcbn0pKE1vdXNlQnV0dG9ucyB8fCAoZXhwb3J0cy5Nb3VzZUJ1dHRvbnMgPSBNb3VzZUJ1dHRvbnMgPSB7fSkpO1xuXG5sZXQgRXZlbnRUeXBlcztcbmV4cG9ydHMuRXZlbnRUeXBlcyA9IEV2ZW50VHlwZXM7XG5cbihmdW5jdGlvbiAoRXZlbnRUeXBlcykge1xuICBFdmVudFR5cGVzW0V2ZW50VHlwZXNbXCJET1dOXCJdID0gMF0gPSBcIkRPV05cIjtcbiAgRXZlbnRUeXBlc1tFdmVudFR5cGVzW1wiQURESVRJT05BTF9QT0lOVEVSX0RPV05cIl0gPSAxXSA9IFwiQURESVRJT05BTF9QT0lOVEVSX0RPV05cIjtcbiAgRXZlbnRUeXBlc1tFdmVudFR5cGVzW1wiVVBcIl0gPSAyXSA9IFwiVVBcIjtcbiAgRXZlbnRUeXBlc1tFdmVudFR5cGVzW1wiQURESVRJT05BTF9QT0lOVEVSX1VQXCJdID0gM10gPSBcIkFERElUSU9OQUxfUE9JTlRFUl9VUFwiO1xuICBFdmVudFR5cGVzW0V2ZW50VHlwZXNbXCJNT1ZFXCJdID0gNF0gPSBcIk1PVkVcIjtcbiAgRXZlbnRUeXBlc1tFdmVudFR5cGVzW1wiRU5URVJcIl0gPSA1XSA9IFwiRU5URVJcIjtcbiAgRXZlbnRUeXBlc1tFdmVudFR5cGVzW1wiT1VUXCJdID0gNl0gPSBcIk9VVFwiO1xuICBFdmVudFR5cGVzW0V2ZW50VHlwZXNbXCJDQU5DRUxcIl0gPSA3XSA9IFwiQ0FOQ0VMXCI7XG59KShFdmVudFR5cGVzIHx8IChleHBvcnRzLkV2ZW50VHlwZXMgPSBFdmVudFR5cGVzID0ge30pKTtcblxubGV0IFRvdWNoRXZlbnRUeXBlO1xuZXhwb3J0cy5Ub3VjaEV2ZW50VHlwZSA9IFRvdWNoRXZlbnRUeXBlO1xuXG4oZnVuY3Rpb24gKFRvdWNoRXZlbnRUeXBlKSB7XG4gIFRvdWNoRXZlbnRUeXBlW1RvdWNoRXZlbnRUeXBlW1wiVU5ERVRFUk1JTkVEXCJdID0gMF0gPSBcIlVOREVURVJNSU5FRFwiO1xuICBUb3VjaEV2ZW50VHlwZVtUb3VjaEV2ZW50VHlwZVtcIkRPV05cIl0gPSAxXSA9IFwiRE9XTlwiO1xuICBUb3VjaEV2ZW50VHlwZVtUb3VjaEV2ZW50VHlwZVtcIk1PVkVcIl0gPSAyXSA9IFwiTU9WRVwiO1xuICBUb3VjaEV2ZW50VHlwZVtUb3VjaEV2ZW50VHlwZVtcIlVQXCJdID0gM10gPSBcIlVQXCI7XG4gIFRvdWNoRXZlbnRUeXBlW1RvdWNoRXZlbnRUeXBlW1wiQ0FOQ0VMTEVEXCJdID0gNF0gPSBcIkNBTkNFTExFRFwiO1xufSkoVG91Y2hFdmVudFR5cGUgfHwgKGV4cG9ydHMuVG91Y2hFdmVudFR5cGUgPSBUb3VjaEV2ZW50VHlwZSA9IHt9KSk7XG5cbmxldCBQb2ludGVyVHlwZTtcbmV4cG9ydHMuUG9pbnRlclR5cGUgPSBQb2ludGVyVHlwZTtcblxuKGZ1bmN0aW9uIChQb2ludGVyVHlwZSkge1xuICBQb2ludGVyVHlwZVtcIk5PTkVcIl0gPSBcIm5vbmVcIjtcbiAgUG9pbnRlclR5cGVbXCJNT1VTRVwiXSA9IFwibW91c2VcIjtcbiAgUG9pbnRlclR5cGVbXCJUT1VDSFwiXSA9IFwidG91Y2hcIjtcbiAgUG9pbnRlclR5cGVbXCJQRU5cIl0gPSBcInBlblwiO1xufSkoUG9pbnRlclR5cGUgfHwgKGV4cG9ydHMuUG9pbnRlclR5cGUgPSBQb2ludGVyVHlwZSA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbnRlcmZhY2VzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIlBvaW50ZXJUeXBlIiwiVG91Y2hFdmVudFR5cGUiLCJFdmVudFR5cGVzIiwiTW91c2VCdXR0b25zIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/EventManager.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/EventManager.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n/* eslint-disable @typescript-eslint/no-empty-function */ class EventManager {\n    constructor(view){\n        _defineProperty(this, \"view\", void 0);\n        _defineProperty(this, \"pointersInBounds\", []);\n        _defineProperty(this, \"activePointersCounter\", void 0);\n        this.view = view;\n        this.activePointersCounter = 0;\n    }\n    onPointerDown(_event) {}\n    onPointerAdd(_event) {}\n    onPointerUp(_event) {}\n    onPointerRemove(_event) {}\n    onPointerMove(_event) {}\n    onPointerOut(_event) {}\n    onPointerEnter(_event) {}\n    onPointerCancel(_event) {\n    // Because we want all pointers to be cancelled by that event, we are doing it manually by reseting handler and changing activePointersCounter to 0\n    // Events that correspond to removing the pointer (pointerup, touchend) have condition, that they don't perform any action when activePointersCounter\n    // is equal to 0. This prevents counter from going to negative values, when pointers are removed from view after one of them has been cancelled\n    }\n    onPointerOutOfBounds(_event) {}\n    setOnPointerDown(callback) {\n        this.onPointerDown = callback;\n    }\n    setOnPointerAdd(callback) {\n        this.onPointerAdd = callback;\n    }\n    setOnPointerUp(callback) {\n        this.onPointerUp = callback;\n    }\n    setOnPointerRemove(callback) {\n        this.onPointerRemove = callback;\n    }\n    setOnPointerMove(callback) {\n        this.onPointerMove = callback;\n    }\n    setOnPointerOut(callback) {\n        this.onPointerOut = callback;\n    }\n    setOnPointerEnter(callback) {\n        this.onPointerEnter = callback;\n    }\n    setOnPointerCancel(callback) {\n        this.onPointerCancel = callback;\n    }\n    setOnPointerOutOfBounds(callback) {\n        this.onPointerOutOfBounds = callback;\n    }\n    markAsInBounds(pointerId) {\n        if (this.pointersInBounds.indexOf(pointerId) >= 0) {\n            return;\n        }\n        this.pointersInBounds.push(pointerId);\n    }\n    markAsOutOfBounds(pointerId) {\n        const index = this.pointersInBounds.indexOf(pointerId);\n        if (index < 0) {\n            return;\n        }\n        this.pointersInBounds.splice(index, 1);\n    }\n    resetManager() {\n        // Reseting activePointersCounter is necessary to make gestures such as pinch work properly\n        // There are gestures that end when there is still one active pointer (like pinch/rotation)\n        // When these gestures end, they are reset, but they still receive events from pointer that is active\n        // This causes trouble, since only onPointerDown registers gesture in orchestrator, and while gestures receive\n        // Events from active pointer after they finished, next pointerdown event will be registered as additional pointer, not the first one\n        // This casues trouble like gestures getting stuck in END state, even though they should have gone to UNDETERMINED\n        this.activePointersCounter = 0;\n        this.pointersInBounds = [];\n    }\n}\nexports[\"default\"] = EventManager; //# sourceMappingURL=EventManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/EventManager.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/GestureHandlerOrchestrator.js":
/*!********************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/GestureHandlerOrchestrator.js ***!
  \********************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _State = __webpack_require__(/*! ../../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _interfaces = __webpack_require__(/*! ../interfaces */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js\");\nvar _PointerTracker = _interopRequireDefault(__webpack_require__(/*! ./PointerTracker */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/PointerTracker.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass GestureHandlerOrchestrator {\n    // Private beacuse of Singleton\n    // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n    constructor(){\n        _defineProperty(this, \"gestureHandlers\", []);\n        _defineProperty(this, \"awaitingHandlers\", []);\n        _defineProperty(this, \"handlersToCancel\", []);\n        _defineProperty(this, \"handlingChangeSemaphore\", 0);\n        _defineProperty(this, \"activationIndex\", 0);\n    }\n    scheduleFinishedHandlersCleanup() {\n        if (this.handlingChangeSemaphore === 0) {\n            this.cleanupFinishedHandlers();\n        }\n    }\n    cleanHandler(handler) {\n        handler.reset();\n        handler.setActive(false);\n        handler.setAwaiting(false);\n        handler.setActivationIndex(Number.MAX_VALUE);\n    }\n    removeHandlerFromOrchestrator(handler) {\n        this.gestureHandlers.splice(this.gestureHandlers.indexOf(handler), 1);\n        this.awaitingHandlers.splice(this.awaitingHandlers.indexOf(handler), 1);\n        this.handlersToCancel.splice(this.handlersToCancel.indexOf(handler), 1);\n    }\n    cleanupFinishedHandlers() {\n        for(let i = this.gestureHandlers.length - 1; i >= 0; --i){\n            const handler = this.gestureHandlers[i];\n            if (!handler) {\n                continue;\n            }\n            if (this.isFinished(handler.getState()) && !handler.isAwaiting()) {\n                this.gestureHandlers.splice(i, 1);\n                this.cleanHandler(handler);\n            }\n        }\n    }\n    hasOtherHandlerToWaitFor(handler) {\n        let hasToWait = false;\n        this.gestureHandlers.forEach((otherHandler)=>{\n            if (otherHandler && !this.isFinished(otherHandler.getState()) && this.shouldHandlerWaitForOther(handler, otherHandler)) {\n                hasToWait = true;\n                return;\n            }\n        });\n        return hasToWait;\n    }\n    tryActivate(handler) {\n        if (this.hasOtherHandlerToWaitFor(handler)) {\n            this.addAwaitingHandler(handler);\n        } else if (handler.getState() !== _State.State.CANCELLED && handler.getState() !== _State.State.FAILED) {\n            if (this.shouldActivate(handler)) {\n                this.makeActive(handler);\n            } else {\n                switch(handler.getState()){\n                    case _State.State.ACTIVE:\n                        handler.fail();\n                        break;\n                    case _State.State.BEGAN:\n                        handler.cancel();\n                }\n            }\n        }\n    }\n    shouldActivate(handler) {\n        for (const otherHandler of this.gestureHandlers){\n            if (this.shouldHandlerBeCancelledBy(handler, otherHandler)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    cleanupAwaitingHandlers(handler) {\n        for(let i = 0; i < this.awaitingHandlers.length; ++i){\n            if (!this.awaitingHandlers[i].isAwaiting() && this.shouldHandlerWaitForOther(this.awaitingHandlers[i], handler)) {\n                this.cleanHandler(this.awaitingHandlers[i]);\n                this.awaitingHandlers.splice(i, 1);\n            }\n        }\n    }\n    onHandlerStateChange(handler, newState, oldState, sendIfDisabled) {\n        if (!handler.isEnabled() && !sendIfDisabled) {\n            return;\n        }\n        this.handlingChangeSemaphore += 1;\n        if (this.isFinished(newState)) {\n            this.awaitingHandlers.forEach((otherHandler)=>{\n                if (this.shouldHandlerWaitForOther(otherHandler, handler)) {\n                    if (newState === _State.State.END) {\n                        otherHandler === null || otherHandler === void 0 ? void 0 : otherHandler.cancel();\n                        if (otherHandler.getState() === _State.State.END) {\n                            // Handle edge case, where discrete gestures end immediately after activation thus\n                            // their state is set to END and when the gesture they are waiting for activates they\n                            // should be cancelled, however `cancel` was never sent as gestures were already in the END state.\n                            // Send synthetic BEGAN -> CANCELLED to properly handle JS logic\n                            otherHandler.sendEvent(_State.State.CANCELLED, _State.State.BEGAN);\n                        }\n                        otherHandler === null || otherHandler === void 0 ? void 0 : otherHandler.setAwaiting(false);\n                    } else {\n                        this.tryActivate(otherHandler);\n                    }\n                }\n            });\n        }\n        if (newState === _State.State.ACTIVE) {\n            this.tryActivate(handler);\n        } else if (oldState === _State.State.ACTIVE || oldState === _State.State.END) {\n            if (handler.isActive()) {\n                handler.sendEvent(newState, oldState);\n            } else if (oldState === _State.State.ACTIVE && (newState === _State.State.CANCELLED || newState === _State.State.FAILED)) {\n                handler.sendEvent(newState, _State.State.BEGAN);\n            }\n        } else if (oldState !== _State.State.UNDETERMINED || newState !== _State.State.CANCELLED) {\n            handler.sendEvent(newState, oldState);\n        }\n        this.handlingChangeSemaphore -= 1;\n        this.scheduleFinishedHandlersCleanup();\n        if (this.awaitingHandlers.indexOf(handler) < 0) {\n            this.cleanupAwaitingHandlers(handler);\n        }\n    }\n    makeActive(handler) {\n        const currentState = handler.getState();\n        handler.setActive(true);\n        handler.setShouldResetProgress(true);\n        handler.setActivationIndex(this.activationIndex++);\n        this.gestureHandlers.forEach((otherHandler)=>{\n            // Order of arguments is correct - we check whether current handler should cancel existing handlers\n            if (this.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n                this.handlersToCancel.push(otherHandler);\n            }\n        });\n        for(let i = this.handlersToCancel.length - 1; i >= 0; --i){\n            var _this$handlersToCance;\n            (_this$handlersToCance = this.handlersToCancel[i]) === null || _this$handlersToCance === void 0 ? void 0 : _this$handlersToCance.cancel();\n        }\n        this.awaitingHandlers.forEach((otherHandler)=>{\n            if (this.shouldHandlerBeCancelledBy(otherHandler, handler)) {\n                otherHandler === null || otherHandler === void 0 ? void 0 : otherHandler.cancel();\n                otherHandler === null || otherHandler === void 0 ? void 0 : otherHandler.setAwaiting(true);\n            }\n        });\n        handler.sendEvent(_State.State.ACTIVE, _State.State.BEGAN);\n        if (currentState !== _State.State.ACTIVE) {\n            handler.sendEvent(_State.State.END, _State.State.ACTIVE);\n            if (currentState !== _State.State.END) {\n                handler.sendEvent(_State.State.UNDETERMINED, _State.State.END);\n            }\n        }\n        if (handler.isAwaiting()) {\n            handler.setAwaiting(false);\n            for(let i = 0; i < this.awaitingHandlers.length; ++i){\n                if (this.awaitingHandlers[i] === handler) {\n                    this.awaitingHandlers.splice(i, 1);\n                }\n            }\n        }\n        this.handlersToCancel = [];\n    }\n    addAwaitingHandler(handler) {\n        let alreadyExists = false;\n        this.awaitingHandlers.forEach((otherHandler)=>{\n            if (otherHandler === handler) {\n                alreadyExists = true;\n                return;\n            }\n        });\n        if (alreadyExists) {\n            return;\n        }\n        this.awaitingHandlers.push(handler);\n        handler.setAwaiting(true);\n        handler.setActivationIndex(this.activationIndex++);\n    }\n    recordHandlerIfNotPresent(handler) {\n        let alreadyExists = false;\n        this.gestureHandlers.forEach((otherHandler)=>{\n            if (otherHandler === handler) {\n                alreadyExists = true;\n                return;\n            }\n        });\n        if (alreadyExists) {\n            return;\n        }\n        this.gestureHandlers.push(handler);\n        handler.setActive(false);\n        handler.setAwaiting(false);\n        handler.setActivationIndex(Number.MAX_SAFE_INTEGER);\n    }\n    shouldHandlerWaitForOther(handler, otherHandler) {\n        return handler !== otherHandler && (handler.shouldWaitForHandlerFailure(otherHandler) || otherHandler.shouldRequireToWaitForFailure(handler));\n    }\n    canRunSimultaneously(gh1, gh2) {\n        return gh1 === gh2 || gh1.shouldRecognizeSimultaneously(gh2) || gh2.shouldRecognizeSimultaneously(gh1);\n    }\n    shouldHandlerBeCancelledBy(handler, otherHandler) {\n        if (this.canRunSimultaneously(handler, otherHandler)) {\n            return false;\n        }\n        if (handler !== otherHandler && (handler.isAwaiting() || handler.getState() === _State.State.ACTIVE)) {\n            // For now it always returns false\n            return handler.shouldBeCancelledByOther(otherHandler);\n        }\n        const handlerPointers = handler.getTrackedPointersID();\n        const otherPointers = otherHandler.getTrackedPointersID();\n        if (!_PointerTracker.default.shareCommonPointers(handlerPointers, otherPointers) && handler.getView() !== otherHandler.getView()) {\n            return this.checkOverlap(handler, otherHandler);\n        }\n        return true;\n    }\n    checkOverlap(handler, otherHandler) {\n        // If handlers don't have common pointers, default return value is false.\n        // However, if at least on pointer overlaps with both handlers, we return true\n        // This solves issue in overlapping parents example\n        // TODO: Find better way to handle that issue, for example by activation order and handler cancelling\n        const handlerPointers = handler.getTrackedPointersID();\n        const otherPointers = otherHandler.getTrackedPointersID();\n        let overlap = false;\n        handlerPointers.forEach((pointer)=>{\n            const handlerX = handler.getTracker().getLastX(pointer);\n            const handlerY = handler.getTracker().getLastY(pointer);\n            if ((0, _utils.isPointerInBounds)(handler.getView(), {\n                x: handlerX,\n                y: handlerY\n            }) && (0, _utils.isPointerInBounds)(otherHandler.getView(), {\n                x: handlerX,\n                y: handlerY\n            })) {\n                overlap = true;\n            }\n        });\n        otherPointers.forEach((pointer)=>{\n            const otherX = otherHandler.getTracker().getLastX(pointer);\n            const otherY = otherHandler.getTracker().getLastY(pointer);\n            if ((0, _utils.isPointerInBounds)(handler.getView(), {\n                x: otherX,\n                y: otherY\n            }) && (0, _utils.isPointerInBounds)(otherHandler.getView(), {\n                x: otherX,\n                y: otherY\n            })) {\n                overlap = true;\n            }\n        });\n        return overlap;\n    }\n    isFinished(state) {\n        return state === _State.State.END || state === _State.State.FAILED || state === _State.State.CANCELLED;\n    }\n    // If handler is using mouse or pen as a pointer and any handler receives touch event,\n    // mouse/pen event dissappears - it doesn't send onPointerCancel nor onPointerUp (and others)\n    // This became a problem because handler was left at active state without any signal to end or fail\n    // To handle this, when new touch event is received, we loop through active handlers and check which type of\n    // pointer they're using. If there are any handler with mouse/pen as a pointer, we cancel them\n    cancelMouseAndPenGestures(currentHandler) {\n        this.gestureHandlers.forEach((handler)=>{\n            if (handler.getPointerType() !== _interfaces.PointerType.MOUSE && handler.getPointerType() !== _interfaces.PointerType.PEN) {\n                return;\n            }\n            if (handler !== currentHandler) {\n                handler.cancel();\n            } else {\n                // Handler that received touch event should have its pointer tracker reset\n                // This allows handler to smoothly change from mouse/pen to touch\n                // The drawback is, that when we try to use mouse/pen one more time, it doesn't send onPointerDown at the first time\n                // so it is required to click two times to get handler to work\n                //\n                // However, handler will receive manually created onPointerEnter that is triggered in EventManager in onPointerMove method.\n                // There may be possibility to use that fact to make handler respond properly to first mouse click\n                handler.getTracker().resetTracker();\n            }\n        });\n    }\n    static getInstance() {\n        if (!GestureHandlerOrchestrator.instance) {\n            GestureHandlerOrchestrator.instance = new GestureHandlerOrchestrator();\n        }\n        return GestureHandlerOrchestrator.instance;\n    }\n}\nexports[\"default\"] = GestureHandlerOrchestrator;\n_defineProperty(GestureHandlerOrchestrator, \"instance\", void 0); //# sourceMappingURL=GestureHandlerOrchestrator.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/GestureHandlerOrchestrator.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/InteractionManager.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/InteractionManager.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass InteractionManager {\n    // Private becaues of singleton\n    // eslint-disable-next-line no-useless-constructor, @typescript-eslint/no-empty-function\n    constructor(){\n        _defineProperty(this, \"waitForRelations\", new Map());\n        _defineProperty(this, \"simultaneousRelations\", new Map());\n    }\n    configureInteractions(handler, config) {\n        this.dropRelationsForHandlerWithTag(handler.getTag());\n        if (config.waitFor) {\n            const waitFor = [];\n            config.waitFor.forEach((otherHandler)=>{\n                // New API reference\n                if (typeof otherHandler === \"number\") {\n                    waitFor.push(otherHandler);\n                } else {\n                    // Old API reference\n                    waitFor.push(otherHandler.handlerTag);\n                }\n            });\n            this.waitForRelations.set(handler.getTag(), waitFor);\n        }\n        if (config.simultaneousHandlers) {\n            const simultaneousHandlers = [];\n            config.simultaneousHandlers.forEach((otherHandler)=>{\n                if (typeof otherHandler === \"number\") {\n                    simultaneousHandlers.push(otherHandler);\n                } else {\n                    simultaneousHandlers.push(otherHandler.handlerTag);\n                }\n            });\n            this.simultaneousRelations.set(handler.getTag(), simultaneousHandlers);\n        }\n    }\n    shouldWaitForHandlerFailure(handler, otherHandler) {\n        const waitFor = this.waitForRelations.get(handler.getTag());\n        if (!waitFor) {\n            return false;\n        }\n        let shouldWait = false;\n        waitFor.forEach((tag)=>{\n            if (tag === otherHandler.getTag()) {\n                shouldWait = true;\n                return; //Returns from callback\n            }\n        });\n        return shouldWait;\n    }\n    shouldRecognizeSimultaneously(handler, otherHandler) {\n        const simultaneousHandlers = this.simultaneousRelations.get(handler.getTag());\n        if (!simultaneousHandlers) {\n            return false;\n        }\n        let shouldRecognizeSimultaneously = false;\n        simultaneousHandlers.forEach((tag)=>{\n            if (tag === otherHandler.getTag()) {\n                shouldRecognizeSimultaneously = true;\n                return;\n            }\n        });\n        return shouldRecognizeSimultaneously;\n    }\n    shouldRequireHandlerToWaitForFailure(_handler, _otherHandler) {\n        //TODO: Implement logic\n        return false;\n    }\n    shouldHandlerBeCancelledBy(_handler, _otherHandler) {\n        //TODO: Implement logic\n        return false;\n    }\n    dropRelationsForHandlerWithTag(handlerTag) {\n        this.waitForRelations.delete(handlerTag);\n        this.simultaneousRelations.delete(handlerTag);\n    }\n    reset() {\n        this.waitForRelations.clear();\n        this.simultaneousRelations.clear();\n    }\n    static getInstance() {\n        if (!this.instance) {\n            this.instance = new InteractionManager();\n        }\n        return this.instance;\n    }\n}\nexports[\"default\"] = InteractionManager;\n_defineProperty(InteractionManager, \"instance\", void 0); //# sourceMappingURL=InteractionManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/InteractionManager.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/NodeManager.js":
/*!*****************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/NodeManager.js ***!
  \*****************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nclass NodeManager {\n    static getHandler(tag) {\n        if (tag in this.gestures) {\n            return this.gestures[tag];\n        }\n        throw new Error(`No handler for tag ${tag}`);\n    }\n    static createGestureHandler(handlerTag, handler) {\n        if (handlerTag in this.gestures) {\n            throw new Error(`Handler with tag ${handlerTag} already exists`);\n        }\n        this.gestures[handlerTag] = handler;\n        this.gestures[handlerTag].setTag(handlerTag);\n    }\n    static dropGestureHandler(handlerTag) {\n        if (!(handlerTag in this.gestures)) {\n            return;\n        } // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n        delete this.gestures[handlerTag];\n    }\n    static getNodes() {\n        return {\n            ...this.gestures\n        };\n    }\n}\nexports[\"default\"] = NodeManager;\n_defineProperty(NodeManager, \"gestures\", {}); //# sourceMappingURL=NodeManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViL3Rvb2xzL05vZGVNYW5hZ2VyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFFdkIsU0FBU0csZ0JBQWdCQyxHQUFHLEVBQUVDLEdBQUcsRUFBRUosS0FBSztJQUFJLElBQUlJLE9BQU9ELEtBQUs7UUFBRU4sT0FBT0MsY0FBYyxDQUFDSyxLQUFLQyxLQUFLO1lBQUVKLE9BQU9BO1lBQU9LLFlBQVk7WUFBTUMsY0FBYztZQUFNQyxVQUFVO1FBQUs7SUFBSSxPQUFPO1FBQUVKLEdBQUcsQ0FBQ0MsSUFBSSxHQUFHSjtJQUFPO0lBQUUsT0FBT0c7QUFBSztBQUVoTixrRUFBa0U7QUFDbEUsTUFBTUs7SUFDSixPQUFPQyxXQUFXQyxHQUFHLEVBQUU7UUFDckIsSUFBSUEsT0FBTyxJQUFJLENBQUNDLFFBQVEsRUFBRTtZQUN4QixPQUFPLElBQUksQ0FBQ0EsUUFBUSxDQUFDRCxJQUFJO1FBQzNCO1FBRUEsTUFBTSxJQUFJRSxNQUFNLENBQUMsbUJBQW1CLEVBQUVGLElBQUksQ0FBQztJQUM3QztJQUVBLE9BQU9HLHFCQUFxQkMsVUFBVSxFQUFFQyxPQUFPLEVBQUU7UUFDL0MsSUFBSUQsY0FBYyxJQUFJLENBQUNILFFBQVEsRUFBRTtZQUMvQixNQUFNLElBQUlDLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRUUsV0FBVyxlQUFlLENBQUM7UUFDakU7UUFFQSxJQUFJLENBQUNILFFBQVEsQ0FBQ0csV0FBVyxHQUFHQztRQUM1QixJQUFJLENBQUNKLFFBQVEsQ0FBQ0csV0FBVyxDQUFDRSxNQUFNLENBQUNGO0lBQ25DO0lBRUEsT0FBT0csbUJBQW1CSCxVQUFVLEVBQUU7UUFDcEMsSUFBSSxDQUFFQSxDQUFBQSxjQUFjLElBQUksQ0FBQ0gsUUFBUSxHQUFHO1lBQ2xDO1FBQ0YsRUFBRSxnRUFBZ0U7UUFHbEUsT0FBTyxJQUFJLENBQUNBLFFBQVEsQ0FBQ0csV0FBVztJQUNsQztJQUVBLE9BQU9JLFdBQVc7UUFDaEIsT0FBTztZQUFFLEdBQUcsSUFBSSxDQUFDUCxRQUFRO1FBQ3pCO0lBQ0Y7QUFFRjtBQUVBWixrQkFBZSxHQUFHUztBQUVsQk4sZ0JBQWdCTSxhQUFhLFlBQVksQ0FBQyxJQUMxQyx1Q0FBdUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL3dlYi90b29scy9Ob2RlTWFuYWdlci5qcz8wYmFkIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4dHJhbmVvdXMtY2xhc3NcbmNsYXNzIE5vZGVNYW5hZ2VyIHtcbiAgc3RhdGljIGdldEhhbmRsZXIodGFnKSB7XG4gICAgaWYgKHRhZyBpbiB0aGlzLmdlc3R1cmVzKSB7XG4gICAgICByZXR1cm4gdGhpcy5nZXN0dXJlc1t0YWddO1xuICAgIH1cblxuICAgIHRocm93IG5ldyBFcnJvcihgTm8gaGFuZGxlciBmb3IgdGFnICR7dGFnfWApO1xuICB9XG5cbiAgc3RhdGljIGNyZWF0ZUdlc3R1cmVIYW5kbGVyKGhhbmRsZXJUYWcsIGhhbmRsZXIpIHtcbiAgICBpZiAoaGFuZGxlclRhZyBpbiB0aGlzLmdlc3R1cmVzKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoYEhhbmRsZXIgd2l0aCB0YWcgJHtoYW5kbGVyVGFnfSBhbHJlYWR5IGV4aXN0c2ApO1xuICAgIH1cblxuICAgIHRoaXMuZ2VzdHVyZXNbaGFuZGxlclRhZ10gPSBoYW5kbGVyO1xuICAgIHRoaXMuZ2VzdHVyZXNbaGFuZGxlclRhZ10uc2V0VGFnKGhhbmRsZXJUYWcpO1xuICB9XG5cbiAgc3RhdGljIGRyb3BHZXN0dXJlSGFuZGxlcihoYW5kbGVyVGFnKSB7XG4gICAgaWYgKCEoaGFuZGxlclRhZyBpbiB0aGlzLmdlc3R1cmVzKSkge1xuICAgICAgcmV0dXJuO1xuICAgIH0gLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1keW5hbWljLWRlbGV0ZVxuXG5cbiAgICBkZWxldGUgdGhpcy5nZXN0dXJlc1toYW5kbGVyVGFnXTtcbiAgfVxuXG4gIHN0YXRpYyBnZXROb2RlcygpIHtcbiAgICByZXR1cm4geyAuLi50aGlzLmdlc3R1cmVzXG4gICAgfTtcbiAgfVxuXG59XG5cbmV4cG9ydHMuZGVmYXVsdCA9IE5vZGVNYW5hZ2VyO1xuXG5fZGVmaW5lUHJvcGVydHkoTm9kZU1hbmFnZXIsIFwiZ2VzdHVyZXNcIiwge30pO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Tm9kZU1hbmFnZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9kZWZpbmVQcm9wZXJ0eSIsIm9iaiIsImtleSIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk5vZGVNYW5hZ2VyIiwiZ2V0SGFuZGxlciIsInRhZyIsImdlc3R1cmVzIiwiRXJyb3IiLCJjcmVhdGVHZXN0dXJlSGFuZGxlciIsImhhbmRsZXJUYWciLCJoYW5kbGVyIiwic2V0VGFnIiwiZHJvcEdlc3R1cmVIYW5kbGVyIiwiZ2V0Tm9kZXMiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/NodeManager.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/PointerEventManager.js":
/*!*************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/PointerEventManager.js ***!
  \*************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _interfaces = __webpack_require__(/*! ../interfaces */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js\");\nvar _EventManager = _interopRequireDefault(__webpack_require__(/*! ./EventManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/EventManager.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nclass PointerEventManager extends _EventManager.default {\n    setListeners() {\n        this.view.addEventListener(\"pointerdown\", (event)=>{\n            if (event.pointerType === _interfaces.PointerType.TOUCH) {\n                return;\n            }\n            if (!(0, _utils.isPointerInBounds)(this.view, {\n                x: event.clientX,\n                y: event.clientY\n            })) {\n                return;\n            }\n            const adaptedEvent = this.mapEvent(event, _interfaces.EventTypes.DOWN);\n            const target = event.target;\n            target.setPointerCapture(adaptedEvent.pointerId);\n            this.markAsInBounds(adaptedEvent.pointerId);\n            if (++this.activePointersCounter > 1) {\n                adaptedEvent.eventType = _interfaces.EventTypes.ADDITIONAL_POINTER_DOWN;\n                this.onPointerAdd(adaptedEvent);\n            } else {\n                this.onPointerDown(adaptedEvent);\n            }\n        });\n        this.view.addEventListener(\"pointerup\", (event)=>{\n            if (event.pointerType === _interfaces.PointerType.TOUCH) {\n                return;\n            } // When we call reset on gesture handlers, it also resets their event managers\n            // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n            // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n            // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n            if (this.activePointersCounter === 0) {\n                return;\n            }\n            const adaptedEvent = this.mapEvent(event, _interfaces.EventTypes.UP);\n            const target = event.target;\n            target.releasePointerCapture(adaptedEvent.pointerId);\n            this.markAsOutOfBounds(adaptedEvent.pointerId);\n            if (--this.activePointersCounter > 0) {\n                adaptedEvent.eventType = _interfaces.EventTypes.ADDITIONAL_POINTER_UP;\n                this.onPointerRemove(adaptedEvent);\n            } else {\n                this.onPointerUp(adaptedEvent);\n            }\n        });\n        this.view.addEventListener(\"pointermove\", (event)=>{\n            if (event.pointerType === _interfaces.PointerType.TOUCH) {\n                return;\n            }\n            if (event.pointerType === _interfaces.PointerType.MOUSE && event.buttons !== _interfaces.MouseButtons.LEFT) {\n                return;\n            }\n            const adaptedEvent = this.mapEvent(event, _interfaces.EventTypes.MOVE);\n            const inBounds = (0, _utils.isPointerInBounds)(this.view, {\n                x: adaptedEvent.x,\n                y: adaptedEvent.y\n            });\n            const pointerIndex = this.pointersInBounds.indexOf(adaptedEvent.pointerId);\n            if (inBounds) {\n                if (pointerIndex < 0) {\n                    adaptedEvent.eventType = _interfaces.EventTypes.ENTER;\n                    this.onPointerEnter(adaptedEvent);\n                    this.markAsInBounds(adaptedEvent.pointerId);\n                } else {\n                    this.onPointerMove(adaptedEvent);\n                }\n            } else {\n                if (pointerIndex >= 0) {\n                    adaptedEvent.eventType = _interfaces.EventTypes.OUT;\n                    this.onPointerOut(adaptedEvent);\n                    this.markAsOutOfBounds(adaptedEvent.pointerId);\n                } else {\n                    this.onPointerOutOfBounds(adaptedEvent);\n                }\n            }\n        });\n        this.view.addEventListener(\"pointercancel\", (event)=>{\n            if (event.pointerType === _interfaces.PointerType.TOUCH) {\n                return;\n            }\n            const adaptedEvent = this.mapEvent(event, _interfaces.EventTypes.CANCEL);\n            this.onPointerCancel(adaptedEvent);\n            this.markAsOutOfBounds(adaptedEvent.pointerId);\n            this.activePointersCounter = 0;\n        });\n    }\n    mapEvent(event, eventType) {\n        return {\n            x: event.clientX,\n            y: event.clientY,\n            offsetX: event.offsetX,\n            offsetY: event.offsetY,\n            pointerId: event.pointerId,\n            eventType: eventType,\n            pointerType: event.pointerType,\n            buttons: event.buttons,\n            time: event.timeStamp\n        };\n    }\n}\nexports[\"default\"] = PointerEventManager; //# sourceMappingURL=PointerEventManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/PointerEventManager.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/PointerTracker.js":
/*!********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/PointerTracker.js ***!
  \********************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n// Used to scale velocity so that it is similar to velocity in Android/iOS\nconst VELOCITY_FACTOR = 0.2;\nconst MAX_POINTERS = 20;\nclass PointerTracker {\n    constructor(){\n        _defineProperty(this, \"trackedPointers\", new Map());\n        _defineProperty(this, \"touchEventsIds\", new Map());\n        _defineProperty(this, \"lastMovedPointerId\", void 0);\n        _defineProperty(this, \"cachedAverages\", {\n            x: 0,\n            y: 0\n        });\n        this.lastMovedPointerId = NaN;\n        for(let i = 0; i < MAX_POINTERS; ++i){\n            this.touchEventsIds.set(i, NaN);\n        }\n    }\n    addToTracker(event) {\n        if (this.trackedPointers.has(event.pointerId)) {\n            return;\n        }\n        this.lastMovedPointerId = event.pointerId;\n        const newElement = {\n            lastX: event.x,\n            lastY: event.y,\n            timeStamp: event.time,\n            velocityX: 0,\n            velocityY: 0\n        };\n        this.trackedPointers.set(event.pointerId, newElement);\n        this.mapTouchEventId(event.pointerId);\n        this.cachedAverages = {\n            x: this.getLastAvgX(),\n            y: this.getLastAvgY()\n        };\n    }\n    removeFromTracker(pointerId) {\n        this.trackedPointers.delete(pointerId);\n        this.removeMappedTouchId(pointerId);\n    }\n    track(event) {\n        const element = this.trackedPointers.get(event.pointerId);\n        if (!element) {\n            return;\n        }\n        this.lastMovedPointerId = event.pointerId;\n        const dx = event.x - element.lastX;\n        const dy = event.y - element.lastY;\n        const dt = event.time - element.timeStamp;\n        element.velocityX = dx / dt * 1000 * VELOCITY_FACTOR;\n        element.velocityY = dy / dt * 1000 * VELOCITY_FACTOR;\n        element.lastX = event.x;\n        element.lastY = event.y;\n        this.trackedPointers.set(event.pointerId, element);\n        const avgX = this.getLastAvgX();\n        const avgY = this.getLastAvgY();\n        this.cachedAverages = {\n            x: avgX,\n            y: avgY\n        };\n    }\n    mapTouchEventId(id) {\n        for (const [mappedId, touchId] of this.touchEventsIds){\n            if (isNaN(touchId)) {\n                this.touchEventsIds.set(mappedId, id);\n                break;\n            }\n        }\n    }\n    removeMappedTouchId(id) {\n        const mappedId = this.getMappedTouchEventId(id);\n        if (!isNaN(mappedId)) {\n            this.touchEventsIds.set(mappedId, NaN);\n        }\n    }\n    getMappedTouchEventId(touchEventId) {\n        for (const [key, value] of this.touchEventsIds.entries()){\n            if (value === touchEventId) {\n                return key;\n            }\n        }\n        return NaN;\n    }\n    getVelocityX(pointerId) {\n        var _this$trackedPointers;\n        return (_this$trackedPointers = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers === void 0 ? void 0 : _this$trackedPointers.velocityX;\n    }\n    getVelocityY(pointerId) {\n        var _this$trackedPointers2;\n        return (_this$trackedPointers2 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers2 === void 0 ? void 0 : _this$trackedPointers2.velocityY;\n    }\n    /**\n   * Returns X coordinate of last moved pointer\n   */ getLastX(pointerId) {\n        if (pointerId !== undefined) {\n            var _this$trackedPointers3;\n            return (_this$trackedPointers3 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers3 === void 0 ? void 0 : _this$trackedPointers3.lastX;\n        } else {\n            var _this$trackedPointers4;\n            return (_this$trackedPointers4 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers4 === void 0 ? void 0 : _this$trackedPointers4.lastX;\n        }\n    }\n    /**\n   * Returns Y coordinate of last moved pointer\n   */ getLastY(pointerId) {\n        if (pointerId !== undefined) {\n            var _this$trackedPointers5;\n            return (_this$trackedPointers5 = this.trackedPointers.get(pointerId)) === null || _this$trackedPointers5 === void 0 ? void 0 : _this$trackedPointers5.lastY;\n        } else {\n            var _this$trackedPointers6;\n            return (_this$trackedPointers6 = this.trackedPointers.get(this.lastMovedPointerId)) === null || _this$trackedPointers6 === void 0 ? void 0 : _this$trackedPointers6.lastY;\n        }\n    }\n    // This may happen when pointers have already been removed from tracker (i.e. pointerup event).\n    // In situation when NaN would be sent as a response, we return cached value.\n    // That prevents handlers from crashing\n    getLastAvgX() {\n        const avgX = this.getSumX() / this.trackedPointers.size;\n        return isNaN(avgX) ? this.cachedAverages.x : avgX;\n    }\n    getLastAvgY() {\n        const avgY = this.getSumY() / this.trackedPointers.size;\n        return isNaN(avgY) ? this.cachedAverages.y : avgY;\n    }\n    getSumX(ignoredPointer) {\n        let sumX = 0;\n        this.trackedPointers.forEach((value, key)=>{\n            if (key !== ignoredPointer) {\n                sumX += value.lastX;\n            }\n        });\n        return sumX;\n    }\n    getSumY(ignoredPointer) {\n        let sumY = 0;\n        this.trackedPointers.forEach((value, key)=>{\n            if (key !== ignoredPointer) {\n                sumY += value.lastY;\n            }\n        });\n        return sumY;\n    }\n    getTrackedPointersCount() {\n        return this.trackedPointers.size;\n    }\n    getTrackedPointersID() {\n        const keys = [];\n        this.trackedPointers.forEach((_value, key)=>{\n            keys.push(key);\n        });\n        return keys;\n    }\n    getData() {\n        return this.trackedPointers;\n    }\n    resetTracker() {\n        this.trackedPointers.clear();\n        this.lastMovedPointerId = NaN;\n        for(let i = 0; i < MAX_POINTERS; ++i){\n            this.touchEventsIds.set(i, NaN);\n        }\n    }\n    static shareCommonPointers(stPointers, ndPointers) {\n        return stPointers.some((pointerId)=>ndPointers.includes(pointerId));\n    }\n}\nexports[\"default\"] = PointerTracker; //# sourceMappingURL=PointerTracker.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/PointerTracker.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/TouchEventManager.js":
/*!***********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/TouchEventManager.js ***!
  \***********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _interfaces = __webpack_require__(/*! ../interfaces */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/interfaces.js\");\nvar _EventManager = _interopRequireDefault(__webpack_require__(/*! ./EventManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/EventManager.js\"));\nvar _utils = __webpack_require__(/*! ../utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nclass TouchEventManager extends _EventManager.default {\n    setListeners() {\n        this.view.addEventListener(\"touchstart\", (event)=>{\n            for(let i = 0; i < event.changedTouches.length; ++i){\n                const adaptedEvent = this.mapEvent(event, _interfaces.EventTypes.DOWN, i, _interfaces.TouchEventType.DOWN); // Here we skip stylus, because in case of anything different than touch we want to handle it by using PointerEvents\n                // If we leave stylus to send touch events, handlers will receive every action twice\n                if (!(0, _utils.isPointerInBounds)(this.view, {\n                    x: adaptedEvent.x,\n                    y: adaptedEvent.y\n                }) || //@ts-ignore touchType field does exist\n                event.changedTouches[i].touchType === \"stylus\") {\n                    continue;\n                }\n                this.markAsInBounds(adaptedEvent.pointerId);\n                if (++this.activePointersCounter > 1) {\n                    adaptedEvent.eventType = _interfaces.EventTypes.ADDITIONAL_POINTER_DOWN;\n                    this.onPointerAdd(adaptedEvent);\n                } else {\n                    this.onPointerDown(adaptedEvent);\n                }\n            }\n        });\n        this.view.addEventListener(\"touchmove\", (event)=>{\n            for(let i = 0; i < event.changedTouches.length; ++i){\n                const adaptedEvent = this.mapEvent(event, _interfaces.EventTypes.MOVE, i, _interfaces.TouchEventType.MOVE); //@ts-ignore touchType field does exist\n                if (event.changedTouches[i].touchType === \"stylus\") {\n                    continue;\n                }\n                const inBounds = (0, _utils.isPointerInBounds)(this.view, {\n                    x: adaptedEvent.x,\n                    y: adaptedEvent.y\n                });\n                const pointerIndex = this.pointersInBounds.indexOf(adaptedEvent.pointerId);\n                if (inBounds) {\n                    if (pointerIndex < 0) {\n                        adaptedEvent.eventType = _interfaces.EventTypes.ENTER;\n                        this.onPointerEnter(adaptedEvent);\n                        this.markAsInBounds(adaptedEvent.pointerId);\n                    } else {\n                        this.onPointerMove(adaptedEvent);\n                    }\n                } else {\n                    if (pointerIndex >= 0) {\n                        adaptedEvent.eventType = _interfaces.EventTypes.OUT;\n                        this.onPointerOut(adaptedEvent);\n                        this.markAsOutOfBounds(adaptedEvent.pointerId);\n                    } else {\n                        this.onPointerOutOfBounds(adaptedEvent);\n                    }\n                }\n            }\n        });\n        this.view.addEventListener(\"touchend\", (event)=>{\n            for(let i = 0; i < event.changedTouches.length; ++i){\n                // When we call reset on gesture handlers, it also resets their event managers\n                // In some handlers (like RotationGestureHandler) reset is called before all pointers leave view\n                // This means, that activePointersCounter will be set to 0, while there are still remaining pointers on view\n                // Removing them will end in activePointersCounter going below 0, therefore handlers won't behave properly\n                if (this.activePointersCounter === 0) {\n                    break;\n                } //@ts-ignore touchType field does exist\n                if (event.changedTouches[i].touchType === \"stylus\") {\n                    continue;\n                }\n                const adaptedEvent = this.mapEvent(event, _interfaces.EventTypes.UP, i, _interfaces.TouchEventType.UP);\n                this.markAsOutOfBounds(adaptedEvent.pointerId);\n                if (--this.activePointersCounter > 0) {\n                    adaptedEvent.eventType = _interfaces.EventTypes.ADDITIONAL_POINTER_UP;\n                    this.onPointerRemove(adaptedEvent);\n                } else {\n                    this.onPointerUp(adaptedEvent);\n                }\n            }\n        });\n        this.view.addEventListener(\"touchcancel\", (event)=>{\n            for(let i = 0; i < event.changedTouches.length; ++i){\n                const adaptedEvent = this.mapEvent(event, _interfaces.EventTypes.CANCEL, i, _interfaces.TouchEventType.CANCELLED); //@ts-ignore touchType field does exist\n                if (event.changedTouches[i].touchType === \"stylus\") {\n                    continue;\n                }\n                this.onPointerCancel(adaptedEvent);\n                this.markAsOutOfBounds(adaptedEvent.pointerId);\n                this.activePointersCounter = 0;\n            }\n        });\n    }\n    mapEvent(event, eventType, index, touchEventType) {\n        const rect = this.view.getBoundingClientRect();\n        const clientX = event.changedTouches[index].clientX;\n        const clientY = event.changedTouches[index].clientY;\n        return {\n            x: clientX,\n            y: clientY,\n            offsetX: clientX - rect.left,\n            offsetY: clientY - rect.top,\n            pointerId: event.changedTouches[index].identifier,\n            eventType: eventType,\n            pointerType: _interfaces.PointerType.TOUCH,\n            buttons: _interfaces.MouseButtons.NONE,\n            time: event.timeStamp,\n            allTouches: event.touches,\n            changedTouches: event.changedTouches,\n            touchEventType: touchEventType\n        };\n    }\n}\nexports[\"default\"] = TouchEventManager; //# sourceMappingURL=TouchEventManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/tools/TouchEventManager.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web/utils.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web/utils.js ***!
  \*****************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.isPointerInBounds = isPointerInBounds;\nfunction isPointerInBounds(view, { x, y }) {\n    const rect = view.getBoundingClientRect();\n    return x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViL3V0aWxzLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCx5QkFBeUIsR0FBR0U7QUFFNUIsU0FBU0Esa0JBQWtCQyxJQUFJLEVBQUUsRUFDL0JDLENBQUMsRUFDREMsQ0FBQyxFQUNGO0lBQ0MsTUFBTUMsT0FBT0gsS0FBS0kscUJBQXFCO0lBQ3ZDLE9BQU9ILEtBQUtFLEtBQUtFLElBQUksSUFBSUosS0FBS0UsS0FBS0csS0FBSyxJQUFJSixLQUFLQyxLQUFLSSxHQUFHLElBQUlMLEtBQUtDLEtBQUtLLE1BQU07QUFDL0UsRUFDQSxpQ0FBaUMiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL3dlYi91dGlscy5qcz8xYWY4Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5pc1BvaW50ZXJJbkJvdW5kcyA9IGlzUG9pbnRlckluQm91bmRzO1xuXG5mdW5jdGlvbiBpc1BvaW50ZXJJbkJvdW5kcyh2aWV3LCB7XG4gIHgsXG4gIHlcbn0pIHtcbiAgY29uc3QgcmVjdCA9IHZpZXcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIHJldHVybiB4ID49IHJlY3QubGVmdCAmJiB4IDw9IHJlY3QucmlnaHQgJiYgeSA+PSByZWN0LnRvcCAmJiB5IDw9IHJlY3QuYm90dG9tO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbHMuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiaXNQb2ludGVySW5Cb3VuZHMiLCJ2aWV3IiwieCIsInkiLCJyZWN0IiwiZ2V0Qm91bmRpbmdDbGllbnRSZWN0IiwibGVmdCIsInJpZ2h0IiwidG9wIiwiYm90dG9tIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web/utils.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DiscreteGestureHandler.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DiscreteGestureHandler.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/GestureHandler.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n/* eslint-disable eslint-comments/no-unlimited-disable */ /* eslint-disable */ class DiscreteGestureHandler extends _GestureHandler.default {\n    get isDiscrete() {\n        return true;\n    }\n    get shouldEnableGestureOnSetup() {\n        return true;\n    }\n    shouldFailUnderCustomCriteria({ x, y, deltaX, deltaY }, { maxDeltaX, maxDeltaY, maxDistSq, shouldCancelWhenOutside }) {\n        if (shouldCancelWhenOutside) {\n            if (!this.isPointInView({\n                x,\n                y\n            })) {\n                return true;\n            }\n        }\n        return (0, _utils.TEST_MAX_IF_NOT_NAN)(Math.abs(deltaX), maxDeltaX) || (0, _utils.TEST_MAX_IF_NOT_NAN)(Math.abs(deltaY), maxDeltaY) || (0, _utils.TEST_MAX_IF_NOT_NAN)(Math.abs(deltaY * deltaY + deltaX * deltaX), maxDistSq);\n    }\n    transformNativeEvent({ center: { x, y } }) {\n        // @ts-ignore FIXME(TS)\n        const rect = this.view.getBoundingClientRect();\n        return {\n            absoluteX: x,\n            absoluteY: y,\n            x: x - rect.left,\n            y: y - rect.top\n        };\n    }\n    isGestureEnabledForEvent({ minPointers, maxPointers, maxDeltaX, maxDeltaY, maxDistSq, shouldCancelWhenOutside }, _recognizer, { maxPointers: pointerLength, center, deltaX, deltaY }) {\n        const validPointerCount = pointerLength >= minPointers && pointerLength <= maxPointers;\n        if (this.shouldFailUnderCustomCriteria({\n            ...center,\n            deltaX,\n            deltaY\n        }, {\n            maxDeltaX,\n            maxDeltaY,\n            maxDistSq,\n            shouldCancelWhenOutside\n        }) || // A user probably won't land a multi-pointer tap on the first tick (so we cannot just cancel each time)\n        // but if the gesture is running and the user adds or subtracts another pointer then it should fail.\n        !validPointerCount && this.isGestureRunning) {\n            return {\n                failed: true\n            };\n        }\n        return {\n            success: validPointerCount\n        };\n    }\n}\nvar _default = DiscreteGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=DiscreteGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9EaXNjcmV0ZUdlc3R1cmVIYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFFdkIsSUFBSUcsa0JBQWtCQyx1QkFBdUJDLG1CQUFPQSxDQUFDLCtHQUFrQjtBQUV2RSxJQUFJQyxTQUFTRCxtQkFBT0EsQ0FBQyw2RkFBUztBQUU5QixTQUFTRCx1QkFBdUJHLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUwsU0FBU0s7SUFBSTtBQUFHO0FBRTlGLHVEQUF1RCxHQUV2RCxrQkFBa0IsR0FDbEIsTUFBTUUsK0JBQStCTixnQkFBZ0JELE9BQU87SUFDMUQsSUFBSVEsYUFBYTtRQUNmLE9BQU87SUFDVDtJQUVBLElBQUlDLDZCQUE2QjtRQUMvQixPQUFPO0lBQ1Q7SUFFQUMsOEJBQThCLEVBQzVCQyxDQUFDLEVBQ0RDLENBQUMsRUFDREMsTUFBTSxFQUNOQyxNQUFNLEVBQ1AsRUFBRSxFQUNEQyxTQUFTLEVBQ1RDLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyx1QkFBdUIsRUFDeEIsRUFBRTtRQUNELElBQUlBLHlCQUF5QjtZQUMzQixJQUFJLENBQUMsSUFBSSxDQUFDQyxhQUFhLENBQUM7Z0JBQ3RCUjtnQkFDQUM7WUFDRixJQUFJO2dCQUNGLE9BQU87WUFDVDtRQUNGO1FBRUEsT0FBTyxDQUFDLEdBQUdSLE9BQU9nQixtQkFBbUIsRUFBRUMsS0FBS0MsR0FBRyxDQUFDVCxTQUFTRSxjQUFjLENBQUMsR0FBR1gsT0FBT2dCLG1CQUFtQixFQUFFQyxLQUFLQyxHQUFHLENBQUNSLFNBQVNFLGNBQWMsQ0FBQyxHQUFHWixPQUFPZ0IsbUJBQW1CLEVBQUVDLEtBQUtDLEdBQUcsQ0FBQ1IsU0FBU0EsU0FBU0QsU0FBU0EsU0FBU0k7SUFDdE47SUFFQU0scUJBQXFCLEVBQ25CQyxRQUFRLEVBQ05iLENBQUMsRUFDREMsQ0FBQyxFQUNGLEVBQ0YsRUFBRTtRQUNELHVCQUF1QjtRQUN2QixNQUFNYSxPQUFPLElBQUksQ0FBQ0MsSUFBSSxDQUFDQyxxQkFBcUI7UUFDNUMsT0FBTztZQUNMQyxXQUFXakI7WUFDWGtCLFdBQVdqQjtZQUNYRCxHQUFHQSxJQUFJYyxLQUFLSyxJQUFJO1lBQ2hCbEIsR0FBR0EsSUFBSWEsS0FBS00sR0FBRztRQUNqQjtJQUNGO0lBRUFDLHlCQUF5QixFQUN2QkMsV0FBVyxFQUNYQyxXQUFXLEVBQ1huQixTQUFTLEVBQ1RDLFNBQVMsRUFDVEMsU0FBUyxFQUNUQyx1QkFBdUIsRUFDeEIsRUFBRWlCLFdBQVcsRUFBRSxFQUNkRCxhQUFhRSxhQUFhLEVBQzFCWixNQUFNLEVBQ05YLE1BQU0sRUFDTkMsTUFBTSxFQUNQLEVBQUU7UUFDRCxNQUFNdUIsb0JBQW9CRCxpQkFBaUJILGVBQWVHLGlCQUFpQkY7UUFFM0UsSUFBSSxJQUFJLENBQUN4Qiw2QkFBNkIsQ0FBQztZQUFFLEdBQUdjLE1BQU07WUFDaERYO1lBQ0FDO1FBQ0YsR0FBRztZQUNEQztZQUNBQztZQUNBQztZQUNBQztRQUNGLE1BQU0sd0dBQXdHO1FBQzlHLG9HQUFvRztRQUNwRyxDQUFDbUIscUJBQXFCLElBQUksQ0FBQ0MsZ0JBQWdCLEVBQUU7WUFDM0MsT0FBTztnQkFDTEMsUUFBUTtZQUNWO1FBQ0Y7UUFFQSxPQUFPO1lBQ0xDLFNBQVNIO1FBQ1g7SUFDRjtBQUVGO0FBRUEsSUFBSUksV0FBV2xDO0FBQ2ZULGtCQUFlLEdBQUcyQyxVQUNsQixrREFBa0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL3dlYl9oYW1tZXIvRGlzY3JldGVHZXN0dXJlSGFuZGxlci5qcz80M2ZjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX0dlc3R1cmVIYW5kbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9HZXN0dXJlSGFuZGxlclwiKSk7XG5cbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyogZXNsaW50LWRpc2FibGUgZXNsaW50LWNvbW1lbnRzL25vLXVubGltaXRlZC1kaXNhYmxlICovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jbGFzcyBEaXNjcmV0ZUdlc3R1cmVIYW5kbGVyIGV4dGVuZHMgX0dlc3R1cmVIYW5kbGVyLmRlZmF1bHQge1xuICBnZXQgaXNEaXNjcmV0ZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIGdldCBzaG91bGRFbmFibGVHZXN0dXJlT25TZXR1cCgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIHNob3VsZEZhaWxVbmRlckN1c3RvbUNyaXRlcmlhKHtcbiAgICB4LFxuICAgIHksXG4gICAgZGVsdGFYLFxuICAgIGRlbHRhWVxuICB9LCB7XG4gICAgbWF4RGVsdGFYLFxuICAgIG1heERlbHRhWSxcbiAgICBtYXhEaXN0U3EsXG4gICAgc2hvdWxkQ2FuY2VsV2hlbk91dHNpZGVcbiAgfSkge1xuICAgIGlmIChzaG91bGRDYW5jZWxXaGVuT3V0c2lkZSkge1xuICAgICAgaWYgKCF0aGlzLmlzUG9pbnRJblZpZXcoe1xuICAgICAgICB4LFxuICAgICAgICB5XG4gICAgICB9KSkge1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gKDAsIF91dGlscy5URVNUX01BWF9JRl9OT1RfTkFOKShNYXRoLmFicyhkZWx0YVgpLCBtYXhEZWx0YVgpIHx8ICgwLCBfdXRpbHMuVEVTVF9NQVhfSUZfTk9UX05BTikoTWF0aC5hYnMoZGVsdGFZKSwgbWF4RGVsdGFZKSB8fCAoMCwgX3V0aWxzLlRFU1RfTUFYX0lGX05PVF9OQU4pKE1hdGguYWJzKGRlbHRhWSAqIGRlbHRhWSArIGRlbHRhWCAqIGRlbHRhWCksIG1heERpc3RTcSk7XG4gIH1cblxuICB0cmFuc2Zvcm1OYXRpdmVFdmVudCh7XG4gICAgY2VudGVyOiB7XG4gICAgICB4LFxuICAgICAgeVxuICAgIH1cbiAgfSkge1xuICAgIC8vIEB0cy1pZ25vcmUgRklYTUUoVFMpXG4gICAgY29uc3QgcmVjdCA9IHRoaXMudmlldy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICByZXR1cm4ge1xuICAgICAgYWJzb2x1dGVYOiB4LFxuICAgICAgYWJzb2x1dGVZOiB5LFxuICAgICAgeDogeCAtIHJlY3QubGVmdCxcbiAgICAgIHk6IHkgLSByZWN0LnRvcFxuICAgIH07XG4gIH1cblxuICBpc0dlc3R1cmVFbmFibGVkRm9yRXZlbnQoe1xuICAgIG1pblBvaW50ZXJzLFxuICAgIG1heFBvaW50ZXJzLFxuICAgIG1heERlbHRhWCxcbiAgICBtYXhEZWx0YVksXG4gICAgbWF4RGlzdFNxLFxuICAgIHNob3VsZENhbmNlbFdoZW5PdXRzaWRlXG4gIH0sIF9yZWNvZ25pemVyLCB7XG4gICAgbWF4UG9pbnRlcnM6IHBvaW50ZXJMZW5ndGgsXG4gICAgY2VudGVyLFxuICAgIGRlbHRhWCxcbiAgICBkZWx0YVlcbiAgfSkge1xuICAgIGNvbnN0IHZhbGlkUG9pbnRlckNvdW50ID0gcG9pbnRlckxlbmd0aCA+PSBtaW5Qb2ludGVycyAmJiBwb2ludGVyTGVuZ3RoIDw9IG1heFBvaW50ZXJzO1xuXG4gICAgaWYgKHRoaXMuc2hvdWxkRmFpbFVuZGVyQ3VzdG9tQ3JpdGVyaWEoeyAuLi5jZW50ZXIsXG4gICAgICBkZWx0YVgsXG4gICAgICBkZWx0YVlcbiAgICB9LCB7XG4gICAgICBtYXhEZWx0YVgsXG4gICAgICBtYXhEZWx0YVksXG4gICAgICBtYXhEaXN0U3EsXG4gICAgICBzaG91bGRDYW5jZWxXaGVuT3V0c2lkZVxuICAgIH0pIHx8IC8vIEEgdXNlciBwcm9iYWJseSB3b24ndCBsYW5kIGEgbXVsdGktcG9pbnRlciB0YXAgb24gdGhlIGZpcnN0IHRpY2sgKHNvIHdlIGNhbm5vdCBqdXN0IGNhbmNlbCBlYWNoIHRpbWUpXG4gICAgLy8gYnV0IGlmIHRoZSBnZXN0dXJlIGlzIHJ1bm5pbmcgYW5kIHRoZSB1c2VyIGFkZHMgb3Igc3VidHJhY3RzIGFub3RoZXIgcG9pbnRlciB0aGVuIGl0IHNob3VsZCBmYWlsLlxuICAgICF2YWxpZFBvaW50ZXJDb3VudCAmJiB0aGlzLmlzR2VzdHVyZVJ1bm5pbmcpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZhaWxlZDogdHJ1ZVxuICAgICAgfTtcbiAgICB9XG5cbiAgICByZXR1cm4ge1xuICAgICAgc3VjY2VzczogdmFsaWRQb2ludGVyQ291bnRcbiAgICB9O1xuICB9XG5cbn1cblxudmFyIF9kZWZhdWx0ID0gRGlzY3JldGVHZXN0dXJlSGFuZGxlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RGlzY3JldGVHZXN0dXJlSGFuZGxlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX0dlc3R1cmVIYW5kbGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfdXRpbHMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiRGlzY3JldGVHZXN0dXJlSGFuZGxlciIsImlzRGlzY3JldGUiLCJzaG91bGRFbmFibGVHZXN0dXJlT25TZXR1cCIsInNob3VsZEZhaWxVbmRlckN1c3RvbUNyaXRlcmlhIiwieCIsInkiLCJkZWx0YVgiLCJkZWx0YVkiLCJtYXhEZWx0YVgiLCJtYXhEZWx0YVkiLCJtYXhEaXN0U3EiLCJzaG91bGRDYW5jZWxXaGVuT3V0c2lkZSIsImlzUG9pbnRJblZpZXciLCJURVNUX01BWF9JRl9OT1RfTkFOIiwiTWF0aCIsImFicyIsInRyYW5zZm9ybU5hdGl2ZUV2ZW50IiwiY2VudGVyIiwicmVjdCIsInZpZXciLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJhYnNvbHV0ZVgiLCJhYnNvbHV0ZVkiLCJsZWZ0IiwidG9wIiwiaXNHZXN0dXJlRW5hYmxlZEZvckV2ZW50IiwibWluUG9pbnRlcnMiLCJtYXhQb2ludGVycyIsIl9yZWNvZ25pemVyIiwicG9pbnRlckxlbmd0aCIsInZhbGlkUG9pbnRlckNvdW50IiwiaXNHZXN0dXJlUnVubmluZyIsImZhaWxlZCIsInN1Y2Nlc3MiLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DiscreteGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DraggingGestureHandler.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DraggingGestureHandler.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/GestureHandler.js\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n/* eslint-disable eslint-comments/no-unlimited-disable */ /* eslint-disable */ class DraggingGestureHandler extends _GestureHandler.default {\n    get shouldEnableGestureOnSetup() {\n        return true;\n    }\n    transformNativeEvent({ deltaX, deltaY, velocityX, velocityY, center: { x, y } }) {\n        // @ts-ignore FIXME(TS)\n        const rect = this.view.getBoundingClientRect();\n        const ratio = _reactNative.PixelRatio.get();\n        return {\n            translationX: deltaX - (this.__initialX || 0),\n            translationY: deltaY - (this.__initialY || 0),\n            absoluteX: x,\n            absoluteY: y,\n            velocityX: velocityX * ratio,\n            velocityY: velocityY * ratio,\n            x: x - rect.left,\n            y: y - rect.top\n        };\n    }\n}\nvar _default = DraggingGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=DraggingGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9EcmFnZ2luZ0dlc3R1cmVIYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFFdkIsSUFBSUcsa0JBQWtCQyx1QkFBdUJDLG1CQUFPQSxDQUFDLCtHQUFrQjtBQUV2RSxJQUFJQyxlQUFlRCxtQkFBT0EsQ0FBQyx1RUFBYztBQUV6QyxTQUFTRCx1QkFBdUJHLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUwsU0FBU0s7SUFBSTtBQUFHO0FBRTlGLHVEQUF1RCxHQUV2RCxrQkFBa0IsR0FDbEIsTUFBTUUsK0JBQStCTixnQkFBZ0JELE9BQU87SUFDMUQsSUFBSVEsNkJBQTZCO1FBQy9CLE9BQU87SUFDVDtJQUVBQyxxQkFBcUIsRUFDbkJDLE1BQU0sRUFDTkMsTUFBTSxFQUNOQyxTQUFTLEVBQ1RDLFNBQVMsRUFDVEMsUUFBUSxFQUNOQyxDQUFDLEVBQ0RDLENBQUMsRUFDRixFQUNGLEVBQUU7UUFDRCx1QkFBdUI7UUFDdkIsTUFBTUMsT0FBTyxJQUFJLENBQUNDLElBQUksQ0FBQ0MscUJBQXFCO1FBRTVDLE1BQU1DLFFBQVFoQixhQUFhaUIsVUFBVSxDQUFDQyxHQUFHO1FBRXpDLE9BQU87WUFDTEMsY0FBY2IsU0FBVSxLQUFJLENBQUNjLFVBQVUsSUFBSTtZQUMzQ0MsY0FBY2QsU0FBVSxLQUFJLENBQUNlLFVBQVUsSUFBSTtZQUMzQ0MsV0FBV1o7WUFDWGEsV0FBV1o7WUFDWEosV0FBV0EsWUFBWVE7WUFDdkJQLFdBQVdBLFlBQVlPO1lBQ3ZCTCxHQUFHQSxJQUFJRSxLQUFLWSxJQUFJO1lBQ2hCYixHQUFHQSxJQUFJQyxLQUFLYSxHQUFHO1FBQ2pCO0lBQ0Y7QUFFRjtBQUVBLElBQUlDLFdBQVd4QjtBQUNmVCxrQkFBZSxHQUFHaUMsVUFDbEIsa0RBQWtEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZml0X3BsdXNfcGx1cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy93ZWJfaGFtbWVyL0RyYWdnaW5nR2VzdHVyZUhhbmRsZXIuanM/YWZhMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9HZXN0dXJlSGFuZGxlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vR2VzdHVyZUhhbmRsZXJcIikpO1xuXG52YXIgX3JlYWN0TmF0aXZlID0gcmVxdWlyZShcInJlYWN0LW5hdGl2ZVwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuLyogZXNsaW50LWRpc2FibGUgZXNsaW50LWNvbW1lbnRzL25vLXVubGltaXRlZC1kaXNhYmxlICovXG5cbi8qIGVzbGludC1kaXNhYmxlICovXG5jbGFzcyBEcmFnZ2luZ0dlc3R1cmVIYW5kbGVyIGV4dGVuZHMgX0dlc3R1cmVIYW5kbGVyLmRlZmF1bHQge1xuICBnZXQgc2hvdWxkRW5hYmxlR2VzdHVyZU9uU2V0dXAoKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cblxuICB0cmFuc2Zvcm1OYXRpdmVFdmVudCh7XG4gICAgZGVsdGFYLFxuICAgIGRlbHRhWSxcbiAgICB2ZWxvY2l0eVgsXG4gICAgdmVsb2NpdHlZLFxuICAgIGNlbnRlcjoge1xuICAgICAgeCxcbiAgICAgIHlcbiAgICB9XG4gIH0pIHtcbiAgICAvLyBAdHMtaWdub3JlIEZJWE1FKFRTKVxuICAgIGNvbnN0IHJlY3QgPSB0aGlzLnZpZXcuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG5cbiAgICBjb25zdCByYXRpbyA9IF9yZWFjdE5hdGl2ZS5QaXhlbFJhdGlvLmdldCgpO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHRyYW5zbGF0aW9uWDogZGVsdGFYIC0gKHRoaXMuX19pbml0aWFsWCB8fCAwKSxcbiAgICAgIHRyYW5zbGF0aW9uWTogZGVsdGFZIC0gKHRoaXMuX19pbml0aWFsWSB8fCAwKSxcbiAgICAgIGFic29sdXRlWDogeCxcbiAgICAgIGFic29sdXRlWTogeSxcbiAgICAgIHZlbG9jaXR5WDogdmVsb2NpdHlYICogcmF0aW8sXG4gICAgICB2ZWxvY2l0eVk6IHZlbG9jaXR5WSAqIHJhdGlvLFxuICAgICAgeDogeCAtIHJlY3QubGVmdCxcbiAgICAgIHk6IHkgLSByZWN0LnRvcFxuICAgIH07XG4gIH1cblxufVxuXG52YXIgX2RlZmF1bHQgPSBEcmFnZ2luZ0dlc3R1cmVIYW5kbGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1EcmFnZ2luZ0dlc3R1cmVIYW5kbGVyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfR2VzdHVyZUhhbmRsZXIiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9yZWFjdE5hdGl2ZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJEcmFnZ2luZ0dlc3R1cmVIYW5kbGVyIiwic2hvdWxkRW5hYmxlR2VzdHVyZU9uU2V0dXAiLCJ0cmFuc2Zvcm1OYXRpdmVFdmVudCIsImRlbHRhWCIsImRlbHRhWSIsInZlbG9jaXR5WCIsInZlbG9jaXR5WSIsImNlbnRlciIsIngiLCJ5IiwicmVjdCIsInZpZXciLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJyYXRpbyIsIlBpeGVsUmF0aW8iLCJnZXQiLCJ0cmFuc2xhdGlvblgiLCJfX2luaXRpYWxYIiwidHJhbnNsYXRpb25ZIiwiX19pbml0aWFsWSIsImFic29sdXRlWCIsImFic29sdXRlWSIsImxlZnQiLCJ0b3AiLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DraggingGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/Errors.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/Errors.js ***!
  \*************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.GesturePropError = void 0;\nclass GesturePropError extends Error {\n    constructor(name, value, expectedType){\n        super(`Invalid property \\`${name}: ${value}\\` expected \\`${expectedType}\\``);\n    }\n}\nexports.GesturePropError = GesturePropError; //# sourceMappingURL=Errors.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9FcnJvcnMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELHdCQUF3QixHQUFHLEtBQUs7QUFFaEMsTUFBTUUseUJBQXlCQztJQUM3QkMsWUFBWUMsSUFBSSxFQUFFSixLQUFLLEVBQUVLLFlBQVksQ0FBRTtRQUNyQyxLQUFLLENBQUMsQ0FBQyxtQkFBbUIsRUFBRUQsS0FBSyxFQUFFLEVBQUVKLE1BQU0sY0FBYyxFQUFFSyxhQUFhLEVBQUUsQ0FBQztJQUM3RTtBQUVGO0FBRUFOLHdCQUF3QixHQUFHRSxrQkFDM0Isa0NBQWtDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZml0X3BsdXNfcGx1cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy93ZWJfaGFtbWVyL0Vycm9ycy5qcz85YTViIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5HZXN0dXJlUHJvcEVycm9yID0gdm9pZCAwO1xuXG5jbGFzcyBHZXN0dXJlUHJvcEVycm9yIGV4dGVuZHMgRXJyb3Ige1xuICBjb25zdHJ1Y3RvcihuYW1lLCB2YWx1ZSwgZXhwZWN0ZWRUeXBlKSB7XG4gICAgc3VwZXIoYEludmFsaWQgcHJvcGVydHkgXFxgJHtuYW1lfTogJHt2YWx1ZX1cXGAgZXhwZWN0ZWQgXFxgJHtleHBlY3RlZFR5cGV9XFxgYCk7XG4gIH1cblxufVxuXG5leHBvcnRzLkdlc3R1cmVQcm9wRXJyb3IgPSBHZXN0dXJlUHJvcEVycm9yO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9RXJyb3JzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkdlc3R1cmVQcm9wRXJyb3IiLCJFcnJvciIsImNvbnN0cnVjdG9yIiwibmFtZSIsImV4cGVjdGVkVHlwZSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/Errors.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/FlingGestureHandler.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/FlingGestureHandler.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _hammerjs = _interopRequireDefault(__webpack_require__(/*! @egjs/hammerjs */ \"@egjs/hammerjs\"));\nvar _constants = __webpack_require__(/*! ./constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/constants.js\");\nvar _Errors = __webpack_require__(/*! ./Errors */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/Errors.js\");\nvar _DraggingGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./DraggingGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DraggingGestureHandler.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n/* eslint-disable eslint-comments/no-unlimited-disable */ /* eslint-disable */ class FlingGestureHandler extends _DraggingGestureHandler.default {\n    get name() {\n        return \"swipe\";\n    }\n    get NativeGestureClass() {\n        return _hammerjs.default.Swipe;\n    }\n    onGestureActivated(event) {\n        this.sendEvent({\n            ...event,\n            eventType: _hammerjs.default.INPUT_MOVE,\n            isFinal: false,\n            isFirst: true\n        });\n        this.isGestureRunning = false;\n        this.hasGestureFailed = false;\n        this.sendEvent({\n            ...event,\n            eventType: _hammerjs.default.INPUT_END,\n            isFinal: true\n        });\n    }\n    onRawEvent(ev) {\n        super.onRawEvent(ev);\n        if (this.hasGestureFailed) {\n            return;\n        } // Hammer doesn't send a `cancel` event for taps.\n        // Manually fail the event.\n        if (ev.isFinal) {\n            setTimeout(()=>{\n                if (this.isGestureRunning) {\n                    this.cancelEvent(ev);\n                }\n            });\n        } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n            // Tap Gesture start event\n            const gesture = this.hammer.get(this.name); // @ts-ignore FIXME(TS)\n            if (gesture.options.enable(gesture, ev)) {\n                this.onStart(ev);\n                this.sendEvent(ev);\n            }\n        }\n    }\n    getHammerConfig() {\n        return {\n            // @ts-ignore FIXME(TS)\n            pointers: this.config.numberOfPointers,\n            direction: this.getDirection()\n        };\n    }\n    getTargetDirections(direction) {\n        const directions = [];\n        if (direction & _constants.Direction.RIGHT) {\n            directions.push(_hammerjs.default.DIRECTION_RIGHT);\n        }\n        if (direction & _constants.Direction.LEFT) {\n            directions.push(_hammerjs.default.DIRECTION_LEFT);\n        }\n        if (direction & _constants.Direction.UP) {\n            directions.push(_hammerjs.default.DIRECTION_UP);\n        }\n        if (direction & _constants.Direction.DOWN) {\n            directions.push(_hammerjs.default.DIRECTION_DOWN);\n        } // const hammerDirection = directions.reduce((a, b) => a | b, 0);\n        return directions;\n    }\n    getDirection() {\n        // @ts-ignore FIXME(TS)\n        const { direction } = this.getConfig();\n        let directions = [];\n        if (direction & _constants.Direction.RIGHT) {\n            directions.push(_hammerjs.default.DIRECTION_HORIZONTAL);\n        }\n        if (direction & _constants.Direction.LEFT) {\n            directions.push(_hammerjs.default.DIRECTION_HORIZONTAL);\n        }\n        if (direction & _constants.Direction.UP) {\n            directions.push(_hammerjs.default.DIRECTION_VERTICAL);\n        }\n        if (direction & _constants.Direction.DOWN) {\n            directions.push(_hammerjs.default.DIRECTION_VERTICAL);\n        }\n        directions = [\n            ...new Set(directions)\n        ];\n        if (directions.length === 0) return _hammerjs.default.DIRECTION_NONE;\n        if (directions.length === 1) return directions[0];\n        return _hammerjs.default.DIRECTION_ALL;\n    }\n    isGestureEnabledForEvent({ numberOfPointers }, _recognizer, { maxPointers: pointerLength }) {\n        const validPointerCount = pointerLength === numberOfPointers;\n        if (!validPointerCount && this.isGestureRunning) {\n            return {\n                failed: true\n            };\n        }\n        return {\n            success: validPointerCount\n        };\n    }\n    updateGestureConfig({ numberOfPointers = 1, direction, ...props }) {\n        if ((0, _utils.isnan)(direction) || typeof direction !== \"number\") {\n            throw new _Errors.GesturePropError(\"direction\", direction, \"number\");\n        }\n        return super.updateGestureConfig({\n            numberOfPointers,\n            direction,\n            ...props\n        });\n    }\n}\nvar _default = FlingGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=FlingGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/FlingGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/GestureHandler.js":
/*!*********************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/GestureHandler.js ***!
  \*********************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _hammerjs = _interopRequireDefault(__webpack_require__(/*! @egjs/hammerjs */ \"@egjs/hammerjs\"));\nvar _reactNative = __webpack_require__(/*! react-native */ \"./node_modules/react-native-web/dist/cjs/index.js\");\nvar _State = __webpack_require__(/*! ../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _constants = __webpack_require__(/*! ./constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/constants.js\");\nvar NodeManager = _interopRequireWildcard(__webpack_require__(/*! ./NodeManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NodeManager.js\"));\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nlet gestureInstances = 0;\nclass GestureHandler {\n    get id() {\n        return `${this.name}${this.gestureInstance}`;\n    }\n    // here to use instanceof would cause import cycle\n    get isNative() {\n        return false;\n    }\n    get isDiscrete() {\n        return false;\n    }\n    get shouldEnableGestureOnSetup() {\n        throw new Error(\"Must override GestureHandler.shouldEnableGestureOnSetup\");\n    }\n    constructor(){\n        _defineProperty(this, \"handlerTag\", void 0);\n        _defineProperty(this, \"isGestureRunning\", false);\n        _defineProperty(this, \"view\", null);\n        _defineProperty(this, \"hasCustomActivationCriteria\", void 0);\n        _defineProperty(this, \"hasGestureFailed\", false);\n        _defineProperty(this, \"hammer\", null);\n        _defineProperty(this, \"initialRotation\", null);\n        _defineProperty(this, \"__initialX\", void 0);\n        _defineProperty(this, \"__initialY\", void 0);\n        _defineProperty(this, \"config\", {});\n        _defineProperty(this, \"previousState\", _State.State.UNDETERMINED);\n        _defineProperty(this, \"pendingGestures\", {});\n        _defineProperty(this, \"oldState\", _State.State.UNDETERMINED);\n        _defineProperty(this, \"lastSentState\", null);\n        _defineProperty(this, \"gestureInstance\", void 0);\n        _defineProperty(this, \"_stillWaiting\", void 0);\n        _defineProperty(this, \"propsRef\", void 0);\n        _defineProperty(this, \"ref\", void 0);\n        _defineProperty(this, \"clearSelfAsPending\", ()=>{\n            if (Array.isArray(this.config.waitFor)) {\n                for (const gesture of this.config.waitFor){\n                    gesture.removePendingGesture(this.id);\n                }\n            }\n        });\n        _defineProperty(this, \"destroy\", ()=>{\n            this.clearSelfAsPending();\n            if (this.hammer) {\n                this.hammer.stop(false);\n                this.hammer.destroy();\n            }\n            this.hammer = null;\n        });\n        _defineProperty(this, \"isPointInView\", ({ x, y })=>{\n            // @ts-ignore FIXME(TS)\n            const rect = this.view.getBoundingClientRect();\n            const pointerInside = x >= rect.left && x <= rect.right && y >= rect.top && y <= rect.bottom;\n            return pointerInside;\n        });\n        _defineProperty(this, \"sendEvent\", (nativeEvent)=>{\n            const { onGestureHandlerEvent, onGestureHandlerStateChange } = this.propsRef.current;\n            const event = this.transformEventData(nativeEvent);\n            invokeNullableMethod(onGestureHandlerEvent, event);\n            if (this.lastSentState !== event.nativeEvent.state) {\n                this.lastSentState = event.nativeEvent.state;\n                invokeNullableMethod(onGestureHandlerStateChange, event);\n            }\n        });\n        _defineProperty(this, \"sync\", ()=>{\n            const gesture = this.hammer.get(this.name);\n            if (!gesture) return;\n            const enable = (recognizer, inputData)=>{\n                if (!this.config.enabled) {\n                    this.isGestureRunning = false;\n                    this.hasGestureFailed = false;\n                    return false;\n                } // Prevent events before the system is ready.\n                if (!inputData || !recognizer.options || typeof inputData.maxPointers === \"undefined\") {\n                    return this.shouldEnableGestureOnSetup;\n                }\n                if (this.hasGestureFailed) {\n                    return false;\n                }\n                if (!this.isDiscrete) {\n                    if (this.isGestureRunning) {\n                        return true;\n                    } // The built-in hammer.js \"waitFor\" doesn't work across multiple views.\n                    // Only process if there are views to wait for.\n                    this._stillWaiting = this._getPendingGestures(); // This gesture should continue waiting.\n                    if (this._stillWaiting.length) {\n                        // Check to see if one of the gestures you're waiting for has started.\n                        // If it has then the gesture should fail.\n                        for (const gesture of this._stillWaiting){\n                            // When the target gesture has started, this gesture must force fail.\n                            if (!gesture.isDiscrete && gesture.isGestureRunning) {\n                                this.hasGestureFailed = true;\n                                this.isGestureRunning = false;\n                                return false;\n                            }\n                        } // This gesture shouldn't start until the others have finished.\n                        return false;\n                    }\n                } // Use default behaviour\n                if (!this.hasCustomActivationCriteria) {\n                    return true;\n                }\n                const deltaRotation = this.initialRotation == null ? 0 : inputData.rotation - this.initialRotation; // @ts-ignore FIXME(TS)\n                const { success, failed } = this.isGestureEnabledForEvent(this.getConfig(), recognizer, {\n                    ...inputData,\n                    deltaRotation\n                });\n                if (failed) {\n                    this.simulateCancelEvent(inputData);\n                    this.hasGestureFailed = true;\n                }\n                return success;\n            };\n            const params = this.getHammerConfig(); // @ts-ignore FIXME(TS)\n            gesture.set({\n                ...params,\n                enable\n            });\n        });\n        this.gestureInstance = gestureInstances++;\n        this.hasCustomActivationCriteria = false;\n    }\n    getConfig() {\n        return this.config;\n    }\n    onWaitingEnded(_gesture) {}\n    removePendingGesture(id) {\n        delete this.pendingGestures[id];\n    }\n    addPendingGesture(gesture) {\n        this.pendingGestures[gesture.id] = gesture;\n    }\n    isGestureEnabledForEvent(_config, _recognizer, _event) {\n        return {\n            success: true\n        };\n    }\n    get NativeGestureClass() {\n        throw new Error(\"Must override GestureHandler.NativeGestureClass\");\n    }\n    updateHasCustomActivationCriteria(_config) {\n        return true;\n    }\n    updateGestureConfig({ enabled = true, ...props }) {\n        this.clearSelfAsPending();\n        this.config = this.ensureConfig({\n            enabled,\n            ...props\n        });\n        this.hasCustomActivationCriteria = this.updateHasCustomActivationCriteria(this.config);\n        if (Array.isArray(this.config.waitFor)) {\n            for (const gesture of this.config.waitFor){\n                gesture.addPendingGesture(this);\n            }\n        }\n        if (this.hammer) {\n            this.sync();\n        }\n        return this.config;\n    }\n    getState(type) {\n        // @ts-ignore TODO(TS) check if this is needed\n        if (type == 0) {\n            return 0;\n        }\n        return _constants.EventMap[type];\n    }\n    transformEventData(event) {\n        const { eventType, maxPointers: numberOfPointers } = event; // const direction = DirectionMap[ev.direction];\n        const changedTouch = event.changedPointers[0];\n        const pointerInside = this.isPointInView({\n            x: changedTouch.clientX,\n            y: changedTouch.clientY\n        }); // TODO(TS) Remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50966 is merged.\n        const state = this.getState(eventType);\n        if (state !== this.previousState) {\n            this.oldState = this.previousState;\n            this.previousState = state;\n        }\n        return {\n            nativeEvent: {\n                numberOfPointers,\n                state,\n                pointerInside,\n                ...this.transformNativeEvent(event),\n                // onHandlerStateChange only\n                handlerTag: this.handlerTag,\n                target: this.ref,\n                // send oldState only when the state was changed, or is different than ACTIVE\n                // GestureDetector relies on the presence of `oldState` to differentiate between\n                // update events and state change events\n                oldState: state !== this.previousState || state != 4 ? this.oldState : undefined\n            },\n            timeStamp: Date.now()\n        };\n    }\n    transformNativeEvent(_event) {\n        return {};\n    }\n    cancelPendingGestures(event) {\n        for (const gesture of Object.values(this.pendingGestures)){\n            if (gesture && gesture.isGestureRunning) {\n                gesture.hasGestureFailed = true;\n                gesture.cancelEvent(event);\n            }\n        }\n    }\n    notifyPendingGestures() {\n        for (const gesture of Object.values(this.pendingGestures)){\n            if (gesture) {\n                gesture.onWaitingEnded(this);\n            }\n        }\n    }\n    onGestureEnded(event) {\n        this.isGestureRunning = false;\n        this.cancelPendingGestures(event);\n    }\n    forceInvalidate(event) {\n        if (this.isGestureRunning) {\n            this.hasGestureFailed = true;\n            this.cancelEvent(event);\n        }\n    }\n    cancelEvent(event) {\n        this.notifyPendingGestures();\n        this.sendEvent({\n            ...event,\n            eventType: _hammerjs.default.INPUT_CANCEL,\n            isFinal: true\n        });\n        this.onGestureEnded(event);\n    }\n    onRawEvent({ isFirst }) {\n        if (isFirst) {\n            this.hasGestureFailed = false;\n        }\n    }\n    shouldUseTouchEvents(config) {\n        var _config$simultaneousH, _config$simultaneousH2;\n        return (_config$simultaneousH = (_config$simultaneousH2 = config.simultaneousHandlers) === null || _config$simultaneousH2 === void 0 ? void 0 : _config$simultaneousH2.some((handler)=>handler.isNative)) !== null && _config$simultaneousH !== void 0 ? _config$simultaneousH : false;\n    }\n    setView(ref, propsRef) {\n        if (ref == null) {\n            this.destroy();\n            this.view = null;\n            return;\n        } // @ts-ignore window doesn't exist on global type as we don't want to use Node types\n        const SUPPORTS_TOUCH = \"ontouchstart\" in window;\n        this.propsRef = propsRef;\n        this.ref = ref;\n        this.view = (0, _reactNative.findNodeHandle)(ref); // When the browser starts handling the gesture (e.g. scrolling), it sends a pointercancel event and stops\n        // sending additional pointer events. This is not the case with touch events, so if the gesture is simultaneous\n        // with a NativeGestureHandler, we need to check if touch events are supported and use them if possible.\n        this.hammer = SUPPORTS_TOUCH && this.shouldUseTouchEvents(this.config) ? new _hammerjs.default.Manager(this.view, {\n            inputClass: _hammerjs.default.TouchInput\n        }) : new _hammerjs.default.Manager(this.view);\n        this.oldState = _State.State.UNDETERMINED;\n        this.previousState = _State.State.UNDETERMINED;\n        this.lastSentState = null;\n        const { NativeGestureClass } = this; // @ts-ignore TODO(TS)\n        const gesture = new NativeGestureClass(this.getHammerConfig());\n        this.hammer.add(gesture);\n        this.hammer.on(\"hammer.input\", (ev)=>{\n            if (!this.config.enabled) {\n                this.hasGestureFailed = false;\n                this.isGestureRunning = false;\n                return;\n            }\n            this.onRawEvent(ev); // TODO: Bacon: Check against something other than null\n            // The isFirst value is not called when the first rotation is calculated.\n            if (this.initialRotation === null && ev.rotation !== 0) {\n                this.initialRotation = ev.rotation;\n            }\n            if (ev.isFinal) {\n                // in favor of a willFail otherwise the last frame of the gesture will be captured.\n                setTimeout(()=>{\n                    this.initialRotation = null;\n                    this.hasGestureFailed = false;\n                });\n            }\n        });\n        this.setupEvents();\n        this.sync();\n    }\n    setupEvents() {\n        // TODO(TS) Hammer types aren't exactly that what we get in runtime\n        if (!this.isDiscrete) {\n            this.hammer.on(`${this.name}start`, (event)=>this.onStart(event));\n            this.hammer.on(`${this.name}end ${this.name}cancel`, (event)=>{\n                this.onGestureEnded(event);\n            });\n        }\n        this.hammer.on(this.name, (ev)=>this.onGestureActivated(ev)); // TODO(TS) remove cast after https://github.com/DefinitelyTyped/DefinitelyTyped/pull/50438 is merged\n    }\n    onStart({ deltaX, deltaY, rotation }) {\n        // Reset the state for the next gesture\n        this.oldState = _State.State.UNDETERMINED;\n        this.previousState = _State.State.UNDETERMINED;\n        this.lastSentState = null;\n        this.isGestureRunning = true;\n        this.__initialX = deltaX;\n        this.__initialY = deltaY;\n        this.initialRotation = rotation;\n    }\n    onGestureActivated(ev) {\n        this.sendEvent(ev);\n    }\n    onSuccess() {}\n    _getPendingGestures() {\n        if (Array.isArray(this.config.waitFor) && this.config.waitFor.length) {\n            // Get the list of gestures that this gesture is still waiting for.\n            // Use `=== false` in case a ref that isn't a gesture handler is used.\n            const stillWaiting = this.config.waitFor.filter(({ hasGestureFailed })=>hasGestureFailed === false);\n            return stillWaiting;\n        }\n        return [];\n    }\n    getHammerConfig() {\n        const pointers = this.config.minPointers === this.config.maxPointers ? this.config.minPointers : 0;\n        return {\n            pointers\n        };\n    }\n    simulateCancelEvent(_inputData) {}\n    ensureConfig(config) {\n        const props = {\n            ...config\n        }; // TODO(TS) We use ! to assert that if property is present then value is not empty (null, undefined)\n        if (\"minDist\" in config) {\n            props.minDist = config.minDist;\n            props.minDistSq = props.minDist * props.minDist;\n        }\n        if (\"minVelocity\" in config) {\n            props.minVelocity = config.minVelocity;\n            props.minVelocitySq = props.minVelocity * props.minVelocity;\n        }\n        if (\"maxDist\" in config) {\n            props.maxDist = config.maxDist;\n            props.maxDistSq = config.maxDist * config.maxDist;\n        }\n        if (\"waitFor\" in config) {\n            props.waitFor = asArray(config.waitFor).map(({ handlerTag })=>NodeManager.getHandler(handlerTag)).filter((v)=>v);\n        } else {\n            props.waitFor = null;\n        }\n        if (\"simultaneousHandlers\" in config) {\n            const shouldUseTouchEvents = this.shouldUseTouchEvents(this.config);\n            props.simultaneousHandlers = asArray(config.simultaneousHandlers).map((handler)=>{\n                if (typeof handler === \"number\") {\n                    return NodeManager.getHandler(handler);\n                } else {\n                    return NodeManager.getHandler(handler.handlerTag);\n                }\n            }).filter((v)=>v);\n            if (shouldUseTouchEvents !== this.shouldUseTouchEvents(props)) {\n                requestAnimationFrame(()=>{\n                    // if the undelying event API needs to be changed, we need to unmount and mount\n                    // the hammer instance again.\n                    this.destroy();\n                    this.setView(this.ref, this.propsRef);\n                });\n            }\n        } else {\n            props.simultaneousHandlers = null;\n        }\n        const configProps = [\n            \"minPointers\",\n            \"maxPointers\",\n            \"minDist\",\n            \"maxDist\",\n            \"maxDistSq\",\n            \"minVelocitySq\",\n            \"minDistSq\",\n            \"minVelocity\",\n            \"failOffsetXStart\",\n            \"failOffsetYStart\",\n            \"failOffsetXEnd\",\n            \"failOffsetYEnd\",\n            \"activeOffsetXStart\",\n            \"activeOffsetXEnd\",\n            \"activeOffsetYStart\",\n            \"activeOffsetYEnd\"\n        ];\n        configProps.forEach((prop)=>{\n            if (typeof props[prop] === \"undefined\") {\n                props[prop] = Number.NaN;\n            }\n        });\n        return props; // TODO(TS) how to convince TS that props are filled?\n    }\n} // TODO(TS) investigate this method\n// Used for sending data to a callback or AnimatedEvent\nfunction invokeNullableMethod(method, event) {\n    if (method) {\n        if (typeof method === \"function\") {\n            method(event);\n        } else {\n            // For use with reanimated's AnimatedEvent\n            if (\"__getHandler\" in method && typeof method.__getHandler === \"function\") {\n                const handler = method.__getHandler();\n                invokeNullableMethod(handler, event);\n            } else {\n                if (\"__nodeConfig\" in method) {\n                    const { argMapping } = method.__nodeConfig;\n                    if (Array.isArray(argMapping)) {\n                        for (const [index, [key, value]] of argMapping.entries()){\n                            if (key in event.nativeEvent) {\n                                // @ts-ignore fix method type\n                                const nativeValue = event.nativeEvent[key];\n                                if (value && value.setValue) {\n                                    // Reanimated API\n                                    value.setValue(nativeValue);\n                                } else {\n                                    // RN Animated API\n                                    method.__nodeConfig.argMapping[index] = [\n                                        key,\n                                        nativeValue\n                                    ];\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }\n}\nfunction asArray(value) {\n    // TODO(TS) use config.waitFor type\n    return value == null ? [] : Array.isArray(value) ? value : [\n        value\n    ];\n}\nvar _default = GestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=GestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/GestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/IndiscreteGestureHandler.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/IndiscreteGestureHandler.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _GestureHandler = _interopRequireDefault(__webpack_require__(/*! ./GestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/GestureHandler.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n/**\n * The base class for **Rotation** and **Pinch** gesture handlers.\n */ class IndiscreteGestureHandler extends _GestureHandler.default {\n    get shouldEnableGestureOnSetup() {\n        return false;\n    }\n    updateGestureConfig({ minPointers = 2, maxPointers = 2, ...props }) {\n        return super.updateGestureConfig({\n            minPointers,\n            maxPointers,\n            ...props\n        });\n    }\n    isGestureEnabledForEvent({ minPointers, maxPointers }, _recognizer, { maxPointers: pointerLength }) {\n        if (pointerLength > maxPointers) {\n            return {\n                failed: true\n            };\n        }\n        const validPointerCount = pointerLength >= minPointers;\n        return {\n            success: validPointerCount\n        };\n    }\n}\nvar _default = IndiscreteGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=IndiscreteGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9JbmRpc2NyZXRlR2VzdHVyZUhhbmRsZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFlLEdBQUcsS0FBSztBQUV2QixJQUFJRyxrQkFBa0JDLHVCQUF1QkMsbUJBQU9BLENBQUMsK0dBQWtCO0FBRXZFLFNBQVNELHVCQUF1QkUsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlDLFVBQVUsR0FBR0QsTUFBTTtRQUFFSixTQUFTSTtJQUFJO0FBQUc7QUFFOUY7O0NBRUMsR0FDRCxNQUFNRSxpQ0FBaUNMLGdCQUFnQkQsT0FBTztJQUM1RCxJQUFJTyw2QkFBNkI7UUFDL0IsT0FBTztJQUNUO0lBRUFDLG9CQUFvQixFQUNsQkMsY0FBYyxDQUFDLEVBQ2ZDLGNBQWMsQ0FBQyxFQUNmLEdBQUdDLE9BQ0osRUFBRTtRQUNELE9BQU8sS0FBSyxDQUFDSCxvQkFBb0I7WUFDL0JDO1lBQ0FDO1lBQ0EsR0FBR0MsS0FBSztRQUNWO0lBQ0Y7SUFFQUMseUJBQXlCLEVBQ3ZCSCxXQUFXLEVBQ1hDLFdBQVcsRUFDWixFQUFFRyxXQUFXLEVBQUUsRUFDZEgsYUFBYUksYUFBYSxFQUMzQixFQUFFO1FBQ0QsSUFBSUEsZ0JBQWdCSixhQUFhO1lBQy9CLE9BQU87Z0JBQ0xLLFFBQVE7WUFDVjtRQUNGO1FBRUEsTUFBTUMsb0JBQW9CRixpQkFBaUJMO1FBQzNDLE9BQU87WUFDTFEsU0FBU0Q7UUFDWDtJQUNGO0FBRUY7QUFFQSxJQUFJRSxXQUFXWjtBQUNmUixrQkFBZSxHQUFHb0IsVUFDbEIsb0RBQW9EIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZml0X3BsdXNfcGx1cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy93ZWJfaGFtbWVyL0luZGlzY3JldGVHZXN0dXJlSGFuZGxlci5qcz8xNzU2Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX0dlc3R1cmVIYW5kbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9HZXN0dXJlSGFuZGxlclwiKSk7XG5cbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5cbi8qKlxuICogVGhlIGJhc2UgY2xhc3MgZm9yICoqUm90YXRpb24qKiBhbmQgKipQaW5jaCoqIGdlc3R1cmUgaGFuZGxlcnMuXG4gKi9cbmNsYXNzIEluZGlzY3JldGVHZXN0dXJlSGFuZGxlciBleHRlbmRzIF9HZXN0dXJlSGFuZGxlci5kZWZhdWx0IHtcbiAgZ2V0IHNob3VsZEVuYWJsZUdlc3R1cmVPblNldHVwKCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHVwZGF0ZUdlc3R1cmVDb25maWcoe1xuICAgIG1pblBvaW50ZXJzID0gMixcbiAgICBtYXhQb2ludGVycyA9IDIsXG4gICAgLi4ucHJvcHNcbiAgfSkge1xuICAgIHJldHVybiBzdXBlci51cGRhdGVHZXN0dXJlQ29uZmlnKHtcbiAgICAgIG1pblBvaW50ZXJzLFxuICAgICAgbWF4UG9pbnRlcnMsXG4gICAgICAuLi5wcm9wc1xuICAgIH0pO1xuICB9XG5cbiAgaXNHZXN0dXJlRW5hYmxlZEZvckV2ZW50KHtcbiAgICBtaW5Qb2ludGVycyxcbiAgICBtYXhQb2ludGVyc1xuICB9LCBfcmVjb2duaXplciwge1xuICAgIG1heFBvaW50ZXJzOiBwb2ludGVyTGVuZ3RoXG4gIH0pIHtcbiAgICBpZiAocG9pbnRlckxlbmd0aCA+IG1heFBvaW50ZXJzKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmYWlsZWQ6IHRydWVcbiAgICAgIH07XG4gICAgfVxuXG4gICAgY29uc3QgdmFsaWRQb2ludGVyQ291bnQgPSBwb2ludGVyTGVuZ3RoID49IG1pblBvaW50ZXJzO1xuICAgIHJldHVybiB7XG4gICAgICBzdWNjZXNzOiB2YWxpZFBvaW50ZXJDb3VudFxuICAgIH07XG4gIH1cblxufVxuXG52YXIgX2RlZmF1bHQgPSBJbmRpc2NyZXRlR2VzdHVyZUhhbmRsZXI7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPUluZGlzY3JldGVHZXN0dXJlSGFuZGxlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX0dlc3R1cmVIYW5kbGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiSW5kaXNjcmV0ZUdlc3R1cmVIYW5kbGVyIiwic2hvdWxkRW5hYmxlR2VzdHVyZU9uU2V0dXAiLCJ1cGRhdGVHZXN0dXJlQ29uZmlnIiwibWluUG9pbnRlcnMiLCJtYXhQb2ludGVycyIsInByb3BzIiwiaXNHZXN0dXJlRW5hYmxlZEZvckV2ZW50IiwiX3JlY29nbml6ZXIiLCJwb2ludGVyTGVuZ3RoIiwiZmFpbGVkIiwidmFsaWRQb2ludGVyQ291bnQiLCJzdWNjZXNzIiwiX2RlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/IndiscreteGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/LongPressGestureHandler.js":
/*!******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/LongPressGestureHandler.js ***!
  \******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _hammerjs = _interopRequireDefault(__webpack_require__(/*! @egjs/hammerjs */ \"@egjs/hammerjs\"));\nvar _State = __webpack_require__(/*! ../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _PressGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./PressGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PressGestureHandler.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\n/* eslint-disable eslint-comments/no-unlimited-disable */ /* eslint-disable */ class LongPressGestureHandler extends _PressGestureHandler.default {\n    get minDurationMs() {\n        // @ts-ignore FIXNE(TS)\n        return (0, _utils.isnan)(this.config.minDurationMs) ? 251 : this.config.minDurationMs;\n    }\n    get maxDist() {\n        // @ts-ignore FIXNE(TS)\n        return (0, _utils.isnan)(this.config.maxDist) ? 9 : this.config.maxDist;\n    }\n    updateHasCustomActivationCriteria({ maxDistSq }) {\n        return !(0, _utils.isValidNumber)(maxDistSq);\n    }\n    getConfig() {\n        if (!this.hasCustomActivationCriteria) {\n            // Default config\n            // If no params have been defined then this config should emulate the native gesture as closely as possible.\n            return {\n                shouldCancelWhenOutside: true,\n                maxDistSq: 10\n            };\n        }\n        return this.config;\n    }\n    getHammerConfig() {\n        return {\n            ...super.getHammerConfig(),\n            // threshold: this.maxDist,\n            time: this.minDurationMs\n        };\n    }\n    getState(type) {\n        return ({\n            [_hammerjs.default.INPUT_START]: _State.State.ACTIVE,\n            [_hammerjs.default.INPUT_MOVE]: _State.State.ACTIVE,\n            [_hammerjs.default.INPUT_END]: _State.State.END,\n            [_hammerjs.default.INPUT_CANCEL]: _State.State.FAILED\n        })[type];\n    }\n}\nvar _default = LongPressGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=LongPressGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9Mb25nUHJlc3NHZXN0dXJlSGFuZGxlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWUsR0FBRyxLQUFLO0FBRXZCLElBQUlHLFlBQVlDLHVCQUF1QkMsbUJBQU9BLENBQUMsc0NBQWdCO0FBRS9ELElBQUlDLFNBQVNELG1CQUFPQSxDQUFDLG1GQUFVO0FBRS9CLElBQUlFLHVCQUF1QkgsdUJBQXVCQyxtQkFBT0EsQ0FBQyx5SEFBdUI7QUFFakYsSUFBSUcsU0FBU0gsbUJBQU9BLENBQUMsNkZBQVM7QUFFOUIsU0FBU0QsdUJBQXVCSyxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSUMsVUFBVSxHQUFHRCxNQUFNO1FBQUVQLFNBQVNPO0lBQUk7QUFBRztBQUU5Rix1REFBdUQsR0FFdkQsa0JBQWtCLEdBQ2xCLE1BQU1FLGdDQUFnQ0oscUJBQXFCTCxPQUFPO0lBQ2hFLElBQUlVLGdCQUFnQjtRQUNsQix1QkFBdUI7UUFDdkIsT0FBTyxDQUFDLEdBQUdKLE9BQU9LLEtBQUssRUFBRSxJQUFJLENBQUNDLE1BQU0sQ0FBQ0YsYUFBYSxJQUFJLE1BQU0sSUFBSSxDQUFDRSxNQUFNLENBQUNGLGFBQWE7SUFDdkY7SUFFQSxJQUFJRyxVQUFVO1FBQ1osdUJBQXVCO1FBQ3ZCLE9BQU8sQ0FBQyxHQUFHUCxPQUFPSyxLQUFLLEVBQUUsSUFBSSxDQUFDQyxNQUFNLENBQUNDLE9BQU8sSUFBSSxJQUFJLElBQUksQ0FBQ0QsTUFBTSxDQUFDQyxPQUFPO0lBQ3pFO0lBRUFDLGtDQUFrQyxFQUNoQ0MsU0FBUyxFQUNWLEVBQUU7UUFDRCxPQUFPLENBQUMsQ0FBQyxHQUFHVCxPQUFPVSxhQUFhLEVBQUVEO0lBQ3BDO0lBRUFFLFlBQVk7UUFDVixJQUFJLENBQUMsSUFBSSxDQUFDQywyQkFBMkIsRUFBRTtZQUNyQyxpQkFBaUI7WUFDakIsNEdBQTRHO1lBQzVHLE9BQU87Z0JBQ0xDLHlCQUF5QjtnQkFDekJKLFdBQVc7WUFDYjtRQUNGO1FBRUEsT0FBTyxJQUFJLENBQUNILE1BQU07SUFDcEI7SUFFQVEsa0JBQWtCO1FBQ2hCLE9BQU87WUFBRSxHQUFHLEtBQUssQ0FBQ0EsaUJBQWlCO1lBQ2pDLDJCQUEyQjtZQUMzQkMsTUFBTSxJQUFJLENBQUNYLGFBQWE7UUFDMUI7SUFDRjtJQUVBWSxTQUFTQyxJQUFJLEVBQUU7UUFDYixPQUFPO1lBQ0wsQ0FBQ3RCLFVBQVVELE9BQU8sQ0FBQ3dCLFdBQVcsQ0FBQyxFQUFFcEIsT0FBT3FCLEtBQUssQ0FBQ0MsTUFBTTtZQUNwRCxDQUFDekIsVUFBVUQsT0FBTyxDQUFDMkIsVUFBVSxDQUFDLEVBQUV2QixPQUFPcUIsS0FBSyxDQUFDQyxNQUFNO1lBQ25ELENBQUN6QixVQUFVRCxPQUFPLENBQUM0QixTQUFTLENBQUMsRUFBRXhCLE9BQU9xQixLQUFLLENBQUNJLEdBQUc7WUFDL0MsQ0FBQzVCLFVBQVVELE9BQU8sQ0FBQzhCLFlBQVksQ0FBQyxFQUFFMUIsT0FBT3FCLEtBQUssQ0FBQ00sTUFBTTtRQUN2RCxFQUFDLENBQUNSLEtBQUs7SUFDVDtBQUVGO0FBRUEsSUFBSVMsV0FBV3ZCO0FBQ2ZYLGtCQUFlLEdBQUdrQyxVQUNsQixtREFBbUQiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL3dlYl9oYW1tZXIvTG9uZ1ByZXNzR2VzdHVyZUhhbmRsZXIuanM/OGM5MCJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9oYW1tZXJqcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBlZ2pzL2hhbW1lcmpzXCIpKTtcblxudmFyIF9TdGF0ZSA9IHJlcXVpcmUoXCIuLi9TdGF0ZVwiKTtcblxudmFyIF9QcmVzc0dlc3R1cmVIYW5kbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9QcmVzc0dlc3R1cmVIYW5kbGVyXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG4vKiBlc2xpbnQtZGlzYWJsZSBlc2xpbnQtY29tbWVudHMvbm8tdW5saW1pdGVkLWRpc2FibGUgKi9cblxuLyogZXNsaW50LWRpc2FibGUgKi9cbmNsYXNzIExvbmdQcmVzc0dlc3R1cmVIYW5kbGVyIGV4dGVuZHMgX1ByZXNzR2VzdHVyZUhhbmRsZXIuZGVmYXVsdCB7XG4gIGdldCBtaW5EdXJhdGlvbk1zKCkge1xuICAgIC8vIEB0cy1pZ25vcmUgRklYTkUoVFMpXG4gICAgcmV0dXJuICgwLCBfdXRpbHMuaXNuYW4pKHRoaXMuY29uZmlnLm1pbkR1cmF0aW9uTXMpID8gMjUxIDogdGhpcy5jb25maWcubWluRHVyYXRpb25NcztcbiAgfVxuXG4gIGdldCBtYXhEaXN0KCkge1xuICAgIC8vIEB0cy1pZ25vcmUgRklYTkUoVFMpXG4gICAgcmV0dXJuICgwLCBfdXRpbHMuaXNuYW4pKHRoaXMuY29uZmlnLm1heERpc3QpID8gOSA6IHRoaXMuY29uZmlnLm1heERpc3Q7XG4gIH1cblxuICB1cGRhdGVIYXNDdXN0b21BY3RpdmF0aW9uQ3JpdGVyaWEoe1xuICAgIG1heERpc3RTcVxuICB9KSB7XG4gICAgcmV0dXJuICEoMCwgX3V0aWxzLmlzVmFsaWROdW1iZXIpKG1heERpc3RTcSk7XG4gIH1cblxuICBnZXRDb25maWcoKSB7XG4gICAgaWYgKCF0aGlzLmhhc0N1c3RvbUFjdGl2YXRpb25Dcml0ZXJpYSkge1xuICAgICAgLy8gRGVmYXVsdCBjb25maWdcbiAgICAgIC8vIElmIG5vIHBhcmFtcyBoYXZlIGJlZW4gZGVmaW5lZCB0aGVuIHRoaXMgY29uZmlnIHNob3VsZCBlbXVsYXRlIHRoZSBuYXRpdmUgZ2VzdHVyZSBhcyBjbG9zZWx5IGFzIHBvc3NpYmxlLlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2hvdWxkQ2FuY2VsV2hlbk91dHNpZGU6IHRydWUsXG4gICAgICAgIG1heERpc3RTcTogMTBcbiAgICAgIH07XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMuY29uZmlnO1xuICB9XG5cbiAgZ2V0SGFtbWVyQ29uZmlnKCkge1xuICAgIHJldHVybiB7IC4uLnN1cGVyLmdldEhhbW1lckNvbmZpZygpLFxuICAgICAgLy8gdGhyZXNob2xkOiB0aGlzLm1heERpc3QsXG4gICAgICB0aW1lOiB0aGlzLm1pbkR1cmF0aW9uTXNcbiAgICB9O1xuICB9XG5cbiAgZ2V0U3RhdGUodHlwZSkge1xuICAgIHJldHVybiB7XG4gICAgICBbX2hhbW1lcmpzLmRlZmF1bHQuSU5QVVRfU1RBUlRdOiBfU3RhdGUuU3RhdGUuQUNUSVZFLFxuICAgICAgW19oYW1tZXJqcy5kZWZhdWx0LklOUFVUX01PVkVdOiBfU3RhdGUuU3RhdGUuQUNUSVZFLFxuICAgICAgW19oYW1tZXJqcy5kZWZhdWx0LklOUFVUX0VORF06IF9TdGF0ZS5TdGF0ZS5FTkQsXG4gICAgICBbX2hhbW1lcmpzLmRlZmF1bHQuSU5QVVRfQ0FOQ0VMXTogX1N0YXRlLlN0YXRlLkZBSUxFRFxuICAgIH1bdHlwZV07XG4gIH1cblxufVxuXG52YXIgX2RlZmF1bHQgPSBMb25nUHJlc3NHZXN0dXJlSGFuZGxlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9TG9uZ1ByZXNzR2VzdHVyZUhhbmRsZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9oYW1tZXJqcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX1N0YXRlIiwiX1ByZXNzR2VzdHVyZUhhbmRsZXIiLCJfdXRpbHMiLCJvYmoiLCJfX2VzTW9kdWxlIiwiTG9uZ1ByZXNzR2VzdHVyZUhhbmRsZXIiLCJtaW5EdXJhdGlvbk1zIiwiaXNuYW4iLCJjb25maWciLCJtYXhEaXN0IiwidXBkYXRlSGFzQ3VzdG9tQWN0aXZhdGlvbkNyaXRlcmlhIiwibWF4RGlzdFNxIiwiaXNWYWxpZE51bWJlciIsImdldENvbmZpZyIsImhhc0N1c3RvbUFjdGl2YXRpb25Dcml0ZXJpYSIsInNob3VsZENhbmNlbFdoZW5PdXRzaWRlIiwiZ2V0SGFtbWVyQ29uZmlnIiwidGltZSIsImdldFN0YXRlIiwidHlwZSIsIklOUFVUX1NUQVJUIiwiU3RhdGUiLCJBQ1RJVkUiLCJJTlBVVF9NT1ZFIiwiSU5QVVRfRU5EIiwiRU5EIiwiSU5QVVRfQ0FOQ0VMIiwiRkFJTEVEIiwiX2RlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/LongPressGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NativeViewGestureHandler.js":
/*!*******************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NativeViewGestureHandler.js ***!
  \*******************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _DiscreteGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./DiscreteGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DiscreteGestureHandler.js\"));\nvar NodeManager = _interopRequireWildcard(__webpack_require__(/*! ./NodeManager */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NodeManager.js\"));\nvar _PressGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./PressGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PressGestureHandler.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js\");\nfunction _getRequireWildcardCache() {\n    if (typeof WeakMap !== \"function\") return null;\n    var cache = new WeakMap();\n    _getRequireWildcardCache = function() {\n        return cache;\n    };\n    return cache;\n}\nfunction _interopRequireWildcard(obj) {\n    if (obj && obj.__esModule) {\n        return obj;\n    }\n    if (obj === null || typeof obj !== \"object\" && typeof obj !== \"function\") {\n        return {\n            default: obj\n        };\n    }\n    var cache = _getRequireWildcardCache();\n    if (cache && cache.has(obj)) {\n        return cache.get(obj);\n    }\n    var newObj = {};\n    var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;\n    for(var key in obj){\n        if (Object.prototype.hasOwnProperty.call(obj, key)) {\n            var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;\n            if (desc && (desc.get || desc.set)) {\n                Object.defineProperty(newObj, key, desc);\n            } else {\n                newObj[key] = obj[key];\n            }\n        }\n    }\n    newObj.default = obj;\n    if (cache) {\n        cache.set(obj, newObj);\n    }\n    return newObj;\n}\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nclass NativeViewGestureHandler extends _PressGestureHandler.default {\n    get isNative() {\n        return true;\n    }\n    onRawEvent(ev) {\n        super.onRawEvent(ev);\n        if (!ev.isFinal) {\n            // if (this.ref instanceof ScrollView) {\n            if ((0, _utils.TEST_MIN_IF_NOT_NAN)((0, _utils.VEC_LEN_SQ)({\n                x: ev.deltaX,\n                y: ev.deltaY\n            }), 10)) {\n                // @ts-ignore FIXME(TS) config type\n                if (this.config.disallowInterruption) {\n                    const gestures = Object.values(NodeManager.getNodes()).filter((gesture)=>{\n                        const { handlerTag, view, isGestureRunning } = gesture;\n                        return handlerTag !== this.handlerTag && // Ensure the gesture needs to be cancelled\n                        isGestureRunning && // ScrollView can cancel discrete gestures like taps and presses\n                        gesture instanceof _DiscreteGestureHandler.default && // Ensure a view exists and is a child of the current view\n                        view && // @ts-ignore FIXME(TS) view type\n                        this.view.contains(view);\n                    }); // Cancel all of the gestures that passed the filter\n                    for (const gesture of gestures){\n                        // TODO: Bacon: Send some cached event.\n                        gesture.forceInvalidate(ev);\n                    }\n                }\n            }\n        }\n    }\n}\nvar _default = NativeViewGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=NativeViewGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9OYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXIuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELGtCQUFlLEdBQUcsS0FBSztBQUV2QixJQUFJRywwQkFBMEJDLHVCQUF1QkMsbUJBQU9BLENBQUMsK0hBQTBCO0FBRXZGLElBQUlDLGNBQWNDLHdCQUF3QkYsbUJBQU9BLENBQUMseUdBQWU7QUFFakUsSUFBSUcsdUJBQXVCSix1QkFBdUJDLG1CQUFPQSxDQUFDLHlIQUF1QjtBQUVqRixJQUFJSSxTQUFTSixtQkFBT0EsQ0FBQyw2RkFBUztBQUU5QixTQUFTSztJQUE2QixJQUFJLE9BQU9DLFlBQVksWUFBWSxPQUFPO0lBQU0sSUFBSUMsUUFBUSxJQUFJRDtJQUFXRCwyQkFBMkI7UUFBYyxPQUFPRTtJQUFPO0lBQUcsT0FBT0E7QUFBTztBQUV6TCxTQUFTTCx3QkFBd0JNLEdBQUc7SUFBSSxJQUFJQSxPQUFPQSxJQUFJQyxVQUFVLEVBQUU7UUFBRSxPQUFPRDtJQUFLO0lBQUUsSUFBSUEsUUFBUSxRQUFRLE9BQU9BLFFBQVEsWUFBWSxPQUFPQSxRQUFRLFlBQVk7UUFBRSxPQUFPO1lBQUVYLFNBQVNXO1FBQUk7SUFBRztJQUFFLElBQUlELFFBQVFGO0lBQTRCLElBQUlFLFNBQVNBLE1BQU1HLEdBQUcsQ0FBQ0YsTUFBTTtRQUFFLE9BQU9ELE1BQU1JLEdBQUcsQ0FBQ0g7SUFBTTtJQUFFLElBQUlJLFNBQVMsQ0FBQztJQUFHLElBQUlDLHdCQUF3QnBCLE9BQU9DLGNBQWMsSUFBSUQsT0FBT3FCLHdCQUF3QjtJQUFFLElBQUssSUFBSUMsT0FBT1AsSUFBSztRQUFFLElBQUlmLE9BQU91QixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDVixLQUFLTyxNQUFNO1lBQUUsSUFBSUksT0FBT04sd0JBQXdCcEIsT0FBT3FCLHdCQUF3QixDQUFDTixLQUFLTyxPQUFPO1lBQU0sSUFBSUksUUFBU0EsQ0FBQUEsS0FBS1IsR0FBRyxJQUFJUSxLQUFLQyxHQUFHLEdBQUc7Z0JBQUUzQixPQUFPQyxjQUFjLENBQUNrQixRQUFRRyxLQUFLSTtZQUFPLE9BQU87Z0JBQUVQLE1BQU0sQ0FBQ0csSUFBSSxHQUFHUCxHQUFHLENBQUNPLElBQUk7WUFBRTtRQUFFO0lBQUU7SUFBRUgsT0FBT2YsT0FBTyxHQUFHVztJQUFLLElBQUlELE9BQU87UUFBRUEsTUFBTWEsR0FBRyxDQUFDWixLQUFLSTtJQUFTO0lBQUUsT0FBT0E7QUFBUTtBQUV0dUIsU0FBU2IsdUJBQXVCUyxHQUFHO0lBQUksT0FBT0EsT0FBT0EsSUFBSUMsVUFBVSxHQUFHRCxNQUFNO1FBQUVYLFNBQVNXO0lBQUk7QUFBRztBQUU5RixNQUFNYSxpQ0FBaUNsQixxQkFBcUJOLE9BQU87SUFDakUsSUFBSXlCLFdBQVc7UUFDYixPQUFPO0lBQ1Q7SUFFQUMsV0FBV0MsRUFBRSxFQUFFO1FBQ2IsS0FBSyxDQUFDRCxXQUFXQztRQUVqQixJQUFJLENBQUNBLEdBQUdDLE9BQU8sRUFBRTtZQUNmLHdDQUF3QztZQUN4QyxJQUFJLENBQUMsR0FBR3JCLE9BQU9zQixtQkFBbUIsRUFBRSxDQUFDLEdBQUd0QixPQUFPdUIsVUFBVSxFQUFFO2dCQUN6REMsR0FBR0osR0FBR0ssTUFBTTtnQkFDWkMsR0FBR04sR0FBR08sTUFBTTtZQUNkLElBQUksS0FBSztnQkFDUCxtQ0FBbUM7Z0JBQ25DLElBQUksSUFBSSxDQUFDQyxNQUFNLENBQUNDLG9CQUFvQixFQUFFO29CQUNwQyxNQUFNQyxXQUFXekMsT0FBTzBDLE1BQU0sQ0FBQ2xDLFlBQVltQyxRQUFRLElBQUlDLE1BQU0sQ0FBQ0MsQ0FBQUE7d0JBQzVELE1BQU0sRUFDSkMsVUFBVSxFQUNWQyxJQUFJLEVBQ0pDLGdCQUFnQixFQUNqQixHQUFHSDt3QkFDSixPQUNFQyxlQUFlLElBQUksQ0FBQ0EsVUFBVSxJQUFJLDJDQUEyQzt3QkFDN0VFLG9CQUFvQixnRUFBZ0U7d0JBQ3BGSCxtQkFBbUJ4Qyx3QkFBd0JELE9BQU8sSUFBSSwwREFBMEQ7d0JBQ2hIMkMsUUFBUSxpQ0FBaUM7d0JBQ3pDLElBQUksQ0FBQ0EsSUFBSSxDQUFDRSxRQUFRLENBQUNGO29CQUV2QixJQUFJLG9EQUFvRDtvQkFFeEQsS0FBSyxNQUFNRixXQUFXSixTQUFVO3dCQUM5Qix1Q0FBdUM7d0JBQ3ZDSSxRQUFRSyxlQUFlLENBQUNuQjtvQkFDMUI7Z0JBQ0Y7WUFDRjtRQUNGO0lBQ0Y7QUFFRjtBQUVBLElBQUlvQixXQUFXdkI7QUFDZjFCLGtCQUFlLEdBQUdpRCxVQUNsQixvREFBb0QiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL3dlYl9oYW1tZXIvTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyLmpzPzAxMjgiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmRlZmF1bHQgPSB2b2lkIDA7XG5cbnZhciBfRGlzY3JldGVHZXN0dXJlSGFuZGxlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vRGlzY3JldGVHZXN0dXJlSGFuZGxlclwiKSk7XG5cbnZhciBOb2RlTWFuYWdlciA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCIuL05vZGVNYW5hZ2VyXCIpKTtcblxudmFyIF9QcmVzc0dlc3R1cmVIYW5kbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9QcmVzc0dlc3R1cmVIYW5kbGVyXCIpKTtcblxudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuXG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlID0gbmV3IFdlYWtNYXAoKTsgX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gY2FjaGU7IH07IHJldHVybiBjYWNoZTsgfVxuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmopIHsgaWYgKG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKCk7IGlmIChjYWNoZSAmJiBjYWNoZS5oYXMob2JqKSkgeyByZXR1cm4gY2FjaGUuZ2V0KG9iaik7IH0gdmFyIG5ld09iaiA9IHt9OyB2YXIgaGFzUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIGtleSBpbiBvYmopIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY2xhc3MgTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyIGV4dGVuZHMgX1ByZXNzR2VzdHVyZUhhbmRsZXIuZGVmYXVsdCB7XG4gIGdldCBpc05hdGl2ZSgpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuXG4gIG9uUmF3RXZlbnQoZXYpIHtcbiAgICBzdXBlci5vblJhd0V2ZW50KGV2KTtcblxuICAgIGlmICghZXYuaXNGaW5hbCkge1xuICAgICAgLy8gaWYgKHRoaXMucmVmIGluc3RhbmNlb2YgU2Nyb2xsVmlldykge1xuICAgICAgaWYgKCgwLCBfdXRpbHMuVEVTVF9NSU5fSUZfTk9UX05BTikoKDAsIF91dGlscy5WRUNfTEVOX1NRKSh7XG4gICAgICAgIHg6IGV2LmRlbHRhWCxcbiAgICAgICAgeTogZXYuZGVsdGFZXG4gICAgICB9KSwgMTApKSB7XG4gICAgICAgIC8vIEB0cy1pZ25vcmUgRklYTUUoVFMpIGNvbmZpZyB0eXBlXG4gICAgICAgIGlmICh0aGlzLmNvbmZpZy5kaXNhbGxvd0ludGVycnVwdGlvbikge1xuICAgICAgICAgIGNvbnN0IGdlc3R1cmVzID0gT2JqZWN0LnZhbHVlcyhOb2RlTWFuYWdlci5nZXROb2RlcygpKS5maWx0ZXIoZ2VzdHVyZSA9PiB7XG4gICAgICAgICAgICBjb25zdCB7XG4gICAgICAgICAgICAgIGhhbmRsZXJUYWcsXG4gICAgICAgICAgICAgIHZpZXcsXG4gICAgICAgICAgICAgIGlzR2VzdHVyZVJ1bm5pbmdcbiAgICAgICAgICAgIH0gPSBnZXN0dXJlO1xuICAgICAgICAgICAgcmV0dXJuICgvLyBDaGVjayBpZiB0aGlzIGdlc3R1cmUgaXNuJ3Qgc2VsZlxuICAgICAgICAgICAgICBoYW5kbGVyVGFnICE9PSB0aGlzLmhhbmRsZXJUYWcgJiYgLy8gRW5zdXJlIHRoZSBnZXN0dXJlIG5lZWRzIHRvIGJlIGNhbmNlbGxlZFxuICAgICAgICAgICAgICBpc0dlc3R1cmVSdW5uaW5nICYmIC8vIFNjcm9sbFZpZXcgY2FuIGNhbmNlbCBkaXNjcmV0ZSBnZXN0dXJlcyBsaWtlIHRhcHMgYW5kIHByZXNzZXNcbiAgICAgICAgICAgICAgZ2VzdHVyZSBpbnN0YW5jZW9mIF9EaXNjcmV0ZUdlc3R1cmVIYW5kbGVyLmRlZmF1bHQgJiYgLy8gRW5zdXJlIGEgdmlldyBleGlzdHMgYW5kIGlzIGEgY2hpbGQgb2YgdGhlIGN1cnJlbnQgdmlld1xuICAgICAgICAgICAgICB2aWV3ICYmIC8vIEB0cy1pZ25vcmUgRklYTUUoVFMpIHZpZXcgdHlwZVxuICAgICAgICAgICAgICB0aGlzLnZpZXcuY29udGFpbnModmlldylcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7IC8vIENhbmNlbCBhbGwgb2YgdGhlIGdlc3R1cmVzIHRoYXQgcGFzc2VkIHRoZSBmaWx0ZXJcblxuICAgICAgICAgIGZvciAoY29uc3QgZ2VzdHVyZSBvZiBnZXN0dXJlcykge1xuICAgICAgICAgICAgLy8gVE9ETzogQmFjb246IFNlbmQgc29tZSBjYWNoZWQgZXZlbnQuXG4gICAgICAgICAgICBnZXN0dXJlLmZvcmNlSW52YWxpZGF0ZShldik7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbn1cblxudmFyIF9kZWZhdWx0ID0gTmF0aXZlVmlld0dlc3R1cmVIYW5kbGVyO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1OYXRpdmVWaWV3R2VzdHVyZUhhbmRsZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9EaXNjcmV0ZUdlc3R1cmVIYW5kbGVyIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJOb2RlTWFuYWdlciIsIl9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkIiwiX1ByZXNzR2VzdHVyZUhhbmRsZXIiLCJfdXRpbHMiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJXZWFrTWFwIiwiY2FjaGUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIk5hdGl2ZVZpZXdHZXN0dXJlSGFuZGxlciIsImlzTmF0aXZlIiwib25SYXdFdmVudCIsImV2IiwiaXNGaW5hbCIsIlRFU1RfTUlOX0lGX05PVF9OQU4iLCJWRUNfTEVOX1NRIiwieCIsImRlbHRhWCIsInkiLCJkZWx0YVkiLCJjb25maWciLCJkaXNhbGxvd0ludGVycnVwdGlvbiIsImdlc3R1cmVzIiwidmFsdWVzIiwiZ2V0Tm9kZXMiLCJmaWx0ZXIiLCJnZXN0dXJlIiwiaGFuZGxlclRhZyIsInZpZXciLCJpc0dlc3R1cmVSdW5uaW5nIiwiY29udGFpbnMiLCJmb3JjZUludmFsaWRhdGUiLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NativeViewGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NodeManager.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NodeManager.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.getHandler = getHandler;\nexports.createGestureHandler = createGestureHandler;\nexports.dropGestureHandler = dropGestureHandler;\nexports.getNodes = getNodes;\nconst gestures = {};\nfunction getHandler(tag) {\n    if (tag in gestures) {\n        return gestures[tag];\n    }\n    throw new Error(`No handler for tag ${tag}`);\n}\nfunction createGestureHandler(handlerTag, handler) {\n    if (handlerTag in gestures) {\n        throw new Error(`Handler with tag ${handlerTag} already exists`);\n    }\n    gestures[handlerTag] = handler; // @ts-ignore no types for web handlers yet\n    gestures[handlerTag].handlerTag = handlerTag;\n}\nfunction dropGestureHandler(handlerTag) {\n    // Since React 18, there are cases where componentWillUnmount gets called twice in a row\n    // so skip this if the tag was already removed.\n    if (!(handlerTag in gestures)) {\n        return;\n    }\n    getHandler(handlerTag).destroy(); // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n    delete gestures[handlerTag];\n}\nfunction getNodes() {\n    return {\n        ...gestures\n    };\n} //# sourceMappingURL=NodeManager.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9Ob2RlTWFuYWdlci5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQsa0JBQWtCLEdBQUdFO0FBQ3JCRiw0QkFBNEIsR0FBR0c7QUFDL0JILDBCQUEwQixHQUFHSTtBQUM3QkosZ0JBQWdCLEdBQUdLO0FBQ25CLE1BQU1DLFdBQVcsQ0FBQztBQUVsQixTQUFTSixXQUFXSyxHQUFHO0lBQ3JCLElBQUlBLE9BQU9ELFVBQVU7UUFDbkIsT0FBT0EsUUFBUSxDQUFDQyxJQUFJO0lBQ3RCO0lBRUEsTUFBTSxJQUFJQyxNQUFNLENBQUMsbUJBQW1CLEVBQUVELElBQUksQ0FBQztBQUM3QztBQUVBLFNBQVNKLHFCQUFxQk0sVUFBVSxFQUFFQyxPQUFPO0lBQy9DLElBQUlELGNBQWNILFVBQVU7UUFDMUIsTUFBTSxJQUFJRSxNQUFNLENBQUMsaUJBQWlCLEVBQUVDLFdBQVcsZUFBZSxDQUFDO0lBQ2pFO0lBRUFILFFBQVEsQ0FBQ0csV0FBVyxHQUFHQyxTQUFTLDJDQUEyQztJQUUzRUosUUFBUSxDQUFDRyxXQUFXLENBQUNBLFVBQVUsR0FBR0E7QUFDcEM7QUFFQSxTQUFTTCxtQkFBbUJLLFVBQVU7SUFDcEMsd0ZBQXdGO0lBQ3hGLCtDQUErQztJQUMvQyxJQUFJLENBQUVBLENBQUFBLGNBQWNILFFBQU8sR0FBSTtRQUM3QjtJQUNGO0lBRUFKLFdBQVdPLFlBQVlFLE9BQU8sSUFBSSxnRUFBZ0U7SUFFbEcsT0FBT0wsUUFBUSxDQUFDRyxXQUFXO0FBQzdCO0FBRUEsU0FBU0o7SUFDUCxPQUFPO1FBQUUsR0FBR0MsUUFBUTtJQUNwQjtBQUNGLEVBQ0EsdUNBQXVDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZml0X3BsdXNfcGx1cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy93ZWJfaGFtbWVyL05vZGVNYW5hZ2VyLmpzPzJkMzEiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XG5cbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwge1xuICB2YWx1ZTogdHJ1ZVxufSk7XG5leHBvcnRzLmdldEhhbmRsZXIgPSBnZXRIYW5kbGVyO1xuZXhwb3J0cy5jcmVhdGVHZXN0dXJlSGFuZGxlciA9IGNyZWF0ZUdlc3R1cmVIYW5kbGVyO1xuZXhwb3J0cy5kcm9wR2VzdHVyZUhhbmRsZXIgPSBkcm9wR2VzdHVyZUhhbmRsZXI7XG5leHBvcnRzLmdldE5vZGVzID0gZ2V0Tm9kZXM7XG5jb25zdCBnZXN0dXJlcyA9IHt9O1xuXG5mdW5jdGlvbiBnZXRIYW5kbGVyKHRhZykge1xuICBpZiAodGFnIGluIGdlc3R1cmVzKSB7XG4gICAgcmV0dXJuIGdlc3R1cmVzW3RhZ107XG4gIH1cblxuICB0aHJvdyBuZXcgRXJyb3IoYE5vIGhhbmRsZXIgZm9yIHRhZyAke3RhZ31gKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlR2VzdHVyZUhhbmRsZXIoaGFuZGxlclRhZywgaGFuZGxlcikge1xuICBpZiAoaGFuZGxlclRhZyBpbiBnZXN0dXJlcykge1xuICAgIHRocm93IG5ldyBFcnJvcihgSGFuZGxlciB3aXRoIHRhZyAke2hhbmRsZXJUYWd9IGFscmVhZHkgZXhpc3RzYCk7XG4gIH1cblxuICBnZXN0dXJlc1toYW5kbGVyVGFnXSA9IGhhbmRsZXI7IC8vIEB0cy1pZ25vcmUgbm8gdHlwZXMgZm9yIHdlYiBoYW5kbGVycyB5ZXRcblxuICBnZXN0dXJlc1toYW5kbGVyVGFnXS5oYW5kbGVyVGFnID0gaGFuZGxlclRhZztcbn1cblxuZnVuY3Rpb24gZHJvcEdlc3R1cmVIYW5kbGVyKGhhbmRsZXJUYWcpIHtcbiAgLy8gU2luY2UgUmVhY3QgMTgsIHRoZXJlIGFyZSBjYXNlcyB3aGVyZSBjb21wb25lbnRXaWxsVW5tb3VudCBnZXRzIGNhbGxlZCB0d2ljZSBpbiBhIHJvd1xuICAvLyBzbyBza2lwIHRoaXMgaWYgdGhlIHRhZyB3YXMgYWxyZWFkeSByZW1vdmVkLlxuICBpZiAoIShoYW5kbGVyVGFnIGluIGdlc3R1cmVzKSkge1xuICAgIHJldHVybjtcbiAgfVxuXG4gIGdldEhhbmRsZXIoaGFuZGxlclRhZykuZGVzdHJveSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWR5bmFtaWMtZGVsZXRlXG5cbiAgZGVsZXRlIGdlc3R1cmVzW2hhbmRsZXJUYWddO1xufVxuXG5mdW5jdGlvbiBnZXROb2RlcygpIHtcbiAgcmV0dXJuIHsgLi4uZ2VzdHVyZXNcbiAgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPU5vZGVNYW5hZ2VyLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldEhhbmRsZXIiLCJjcmVhdGVHZXN0dXJlSGFuZGxlciIsImRyb3BHZXN0dXJlSGFuZGxlciIsImdldE5vZGVzIiwiZ2VzdHVyZXMiLCJ0YWciLCJFcnJvciIsImhhbmRsZXJUYWciLCJoYW5kbGVyIiwiZGVzdHJveSJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/NodeManager.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PanGestureHandler.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PanGestureHandler.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _hammerjs = _interopRequireDefault(__webpack_require__(/*! @egjs/hammerjs */ \"@egjs/hammerjs\"));\nvar _constants = __webpack_require__(/*! ./constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/constants.js\");\nvar _DraggingGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./DraggingGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DraggingGestureHandler.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js\");\nvar _State = __webpack_require__(/*! ../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nclass PanGestureHandler extends _DraggingGestureHandler.default {\n    get name() {\n        return \"pan\";\n    }\n    get NativeGestureClass() {\n        return _hammerjs.default.Pan;\n    }\n    getHammerConfig() {\n        return {\n            ...super.getHammerConfig(),\n            direction: this.getDirection()\n        };\n    }\n    getState(type) {\n        const nextState = super.getState(type); // Ensure that the first state sent is `BEGAN` and not `ACTIVE`\n        if (this.previousState === _State.State.UNDETERMINED && nextState === _State.State.ACTIVE) {\n            return _State.State.BEGAN;\n        }\n        return nextState;\n    }\n    getDirection() {\n        const config = this.getConfig();\n        const { activeOffsetXStart, activeOffsetXEnd, activeOffsetYStart, activeOffsetYEnd, minDist } = config;\n        let directions = [];\n        let horizontalDirections = [];\n        if (!(0, _utils.isnan)(minDist)) {\n            return _hammerjs.default.DIRECTION_ALL;\n        }\n        if (!(0, _utils.isnan)(activeOffsetXStart)) {\n            horizontalDirections.push(_hammerjs.default.DIRECTION_LEFT);\n        }\n        if (!(0, _utils.isnan)(activeOffsetXEnd)) {\n            horizontalDirections.push(_hammerjs.default.DIRECTION_RIGHT);\n        }\n        if (horizontalDirections.length === 2) {\n            horizontalDirections = [\n                _hammerjs.default.DIRECTION_HORIZONTAL\n            ];\n        }\n        directions = directions.concat(horizontalDirections);\n        let verticalDirections = [];\n        if (!(0, _utils.isnan)(activeOffsetYStart)) {\n            verticalDirections.push(_hammerjs.default.DIRECTION_UP);\n        }\n        if (!(0, _utils.isnan)(activeOffsetYEnd)) {\n            verticalDirections.push(_hammerjs.default.DIRECTION_DOWN);\n        }\n        if (verticalDirections.length === 2) {\n            verticalDirections = [\n                _hammerjs.default.DIRECTION_VERTICAL\n            ];\n        }\n        directions = directions.concat(verticalDirections);\n        if (!directions.length) {\n            return _hammerjs.default.DIRECTION_NONE;\n        }\n        if (directions[0] === _hammerjs.default.DIRECTION_HORIZONTAL && directions[1] === _hammerjs.default.DIRECTION_VERTICAL) {\n            return _hammerjs.default.DIRECTION_ALL;\n        }\n        if (horizontalDirections.length && verticalDirections.length) {\n            return _hammerjs.default.DIRECTION_ALL;\n        }\n        return directions[0];\n    }\n    getConfig() {\n        if (!this.hasCustomActivationCriteria) {\n            // Default config\n            // If no params have been defined then this config should emulate the native gesture as closely as possible.\n            return {\n                minDistSq: 10\n            };\n        }\n        return this.config;\n    }\n    shouldFailUnderCustomCriteria({ deltaX, deltaY }, criteria) {\n        return !(0, _utils.isnan)(criteria.failOffsetXStart) && deltaX < criteria.failOffsetXStart || !(0, _utils.isnan)(criteria.failOffsetXEnd) && deltaX > criteria.failOffsetXEnd || !(0, _utils.isnan)(criteria.failOffsetYStart) && deltaY < criteria.failOffsetYStart || !(0, _utils.isnan)(criteria.failOffsetYEnd) && deltaY > criteria.failOffsetYEnd;\n    }\n    shouldActivateUnderCustomCriteria({ deltaX, deltaY, velocity }, criteria) {\n        return !(0, _utils.isnan)(criteria.activeOffsetXStart) && deltaX < criteria.activeOffsetXStart || !(0, _utils.isnan)(criteria.activeOffsetXEnd) && deltaX > criteria.activeOffsetXEnd || !(0, _utils.isnan)(criteria.activeOffsetYStart) && deltaY < criteria.activeOffsetYStart || !(0, _utils.isnan)(criteria.activeOffsetYEnd) && deltaY > criteria.activeOffsetYEnd || (0, _utils.TEST_MIN_IF_NOT_NAN)((0, _utils.VEC_LEN_SQ)({\n            x: deltaX,\n            y: deltaY\n        }), criteria.minDistSq) || (0, _utils.TEST_MIN_IF_NOT_NAN)(velocity.x, criteria.minVelocityX) || (0, _utils.TEST_MIN_IF_NOT_NAN)(velocity.y, criteria.minVelocityY) || (0, _utils.TEST_MIN_IF_NOT_NAN)((0, _utils.VEC_LEN_SQ)(velocity), criteria.minVelocitySq);\n    }\n    shouldMultiFingerPanFail({ pointerLength, scale, deltaRotation }) {\n        if (pointerLength <= 1) {\n            return false;\n        } // Test if the pan had too much pinching or rotating.\n        const deltaScale = Math.abs(scale - 1);\n        const absDeltaRotation = Math.abs(deltaRotation);\n        if (deltaScale > _constants.MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD) {\n            // > If the threshold doesn't seem right.\n            // You can log the value which it failed at here:\n            return true;\n        }\n        if (absDeltaRotation > _constants.MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD) {\n            // > If the threshold doesn't seem right.\n            // You can log the value which it failed at here:\n            return true;\n        }\n        return false;\n    }\n    updateHasCustomActivationCriteria(criteria) {\n        return (0, _utils.isValidNumber)(criteria.minDistSq) || (0, _utils.isValidNumber)(criteria.minVelocityX) || (0, _utils.isValidNumber)(criteria.minVelocityY) || (0, _utils.isValidNumber)(criteria.minVelocitySq) || (0, _utils.isValidNumber)(criteria.activeOffsetXStart) || (0, _utils.isValidNumber)(criteria.activeOffsetXEnd) || (0, _utils.isValidNumber)(criteria.activeOffsetYStart) || (0, _utils.isValidNumber)(criteria.activeOffsetYEnd);\n    }\n    isGestureEnabledForEvent(props, _recognizer, inputData) {\n        if (this.shouldFailUnderCustomCriteria(inputData, props)) {\n            return {\n                failed: true\n            };\n        }\n        const velocity = {\n            x: inputData.velocityX,\n            y: inputData.velocityY\n        };\n        if (this.hasCustomActivationCriteria && this.shouldActivateUnderCustomCriteria({\n            deltaX: inputData.deltaX,\n            deltaY: inputData.deltaY,\n            velocity\n        }, props)) {\n            if (this.shouldMultiFingerPanFail({\n                pointerLength: inputData.maxPointers,\n                scale: inputData.scale,\n                deltaRotation: inputData.deltaRotation\n            })) {\n                return {\n                    failed: true\n                };\n            }\n            return {\n                success: true\n            };\n        }\n        return {\n            success: false\n        };\n    }\n}\nvar _default = PanGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=PanGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PanGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PinchGestureHandler.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PinchGestureHandler.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _hammerjs = _interopRequireDefault(__webpack_require__(/*! @egjs/hammerjs */ \"@egjs/hammerjs\"));\nvar _IndiscreteGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./IndiscreteGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/IndiscreteGestureHandler.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nclass PinchGestureHandler extends _IndiscreteGestureHandler.default {\n    get name() {\n        return \"pinch\";\n    }\n    get NativeGestureClass() {\n        return _hammerjs.default.Pinch;\n    }\n    transformNativeEvent({ scale, velocity, center }) {\n        return {\n            focalX: center.x,\n            focalY: center.y,\n            velocity,\n            scale\n        };\n    }\n}\nvar _default = PinchGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=PinchGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9QaW5jaEdlc3R1cmVIYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFFdkIsSUFBSUcsWUFBWUMsdUJBQXVCQyxtQkFBT0EsQ0FBQyxzQ0FBZ0I7QUFFL0QsSUFBSUMsNEJBQTRCRix1QkFBdUJDLG1CQUFPQSxDQUFDLG1JQUE0QjtBQUUzRixTQUFTRCx1QkFBdUJHLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRUwsU0FBU0s7SUFBSTtBQUFHO0FBRTlGLE1BQU1FLDRCQUE0QkgsMEJBQTBCSixPQUFPO0lBQ2pFLElBQUlRLE9BQU87UUFDVCxPQUFPO0lBQ1Q7SUFFQSxJQUFJQyxxQkFBcUI7UUFDdkIsT0FBT1IsVUFBVUQsT0FBTyxDQUFDVSxLQUFLO0lBQ2hDO0lBRUFDLHFCQUFxQixFQUNuQkMsS0FBSyxFQUNMQyxRQUFRLEVBQ1JDLE1BQU0sRUFDUCxFQUFFO1FBQ0QsT0FBTztZQUNMQyxRQUFRRCxPQUFPRSxDQUFDO1lBQ2hCQyxRQUFRSCxPQUFPSSxDQUFDO1lBQ2hCTDtZQUNBRDtRQUNGO0lBQ0Y7QUFFRjtBQUVBLElBQUlPLFdBQVdaO0FBQ2ZULGtCQUFlLEdBQUdxQixVQUNsQiwrQ0FBK0MiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9maXRfcGx1c19wbHVzLy4vbm9kZV9tb2R1bGVzL3JlYWN0LW5hdGl2ZS1nZXN0dXJlLWhhbmRsZXIvbGliL2NvbW1vbmpzL3dlYl9oYW1tZXIvUGluY2hHZXN0dXJlSGFuZGxlci5qcz8zODMwIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xuXG52YXIgX2hhbW1lcmpzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiQGVnanMvaGFtbWVyanNcIikpO1xuXG52YXIgX0luZGlzY3JldGVHZXN0dXJlSGFuZGxlciA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIi4vSW5kaXNjcmV0ZUdlc3R1cmVIYW5kbGVyXCIpKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY2xhc3MgUGluY2hHZXN0dXJlSGFuZGxlciBleHRlbmRzIF9JbmRpc2NyZXRlR2VzdHVyZUhhbmRsZXIuZGVmYXVsdCB7XG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiAncGluY2gnO1xuICB9XG5cbiAgZ2V0IE5hdGl2ZUdlc3R1cmVDbGFzcygpIHtcbiAgICByZXR1cm4gX2hhbW1lcmpzLmRlZmF1bHQuUGluY2g7XG4gIH1cblxuICB0cmFuc2Zvcm1OYXRpdmVFdmVudCh7XG4gICAgc2NhbGUsXG4gICAgdmVsb2NpdHksXG4gICAgY2VudGVyXG4gIH0pIHtcbiAgICByZXR1cm4ge1xuICAgICAgZm9jYWxYOiBjZW50ZXIueCxcbiAgICAgIGZvY2FsWTogY2VudGVyLnksXG4gICAgICB2ZWxvY2l0eSxcbiAgICAgIHNjYWxlXG4gICAgfTtcbiAgfVxuXG59XG5cbnZhciBfZGVmYXVsdCA9IFBpbmNoR2VzdHVyZUhhbmRsZXI7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPVBpbmNoR2VzdHVyZUhhbmRsZXIuanMubWFwIl0sIm5hbWVzIjpbIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZXhwb3J0cyIsInZhbHVlIiwiZGVmYXVsdCIsIl9oYW1tZXJqcyIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwiX0luZGlzY3JldGVHZXN0dXJlSGFuZGxlciIsIm9iaiIsIl9fZXNNb2R1bGUiLCJQaW5jaEdlc3R1cmVIYW5kbGVyIiwibmFtZSIsIk5hdGl2ZUdlc3R1cmVDbGFzcyIsIlBpbmNoIiwidHJhbnNmb3JtTmF0aXZlRXZlbnQiLCJzY2FsZSIsInZlbG9jaXR5IiwiY2VudGVyIiwiZm9jYWxYIiwieCIsImZvY2FsWSIsInkiLCJfZGVmYXVsdCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PinchGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PressGestureHandler.js":
/*!**************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PressGestureHandler.js ***!
  \**************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _hammerjs = _interopRequireDefault(__webpack_require__(/*! @egjs/hammerjs */ \"@egjs/hammerjs\"));\nvar _State = __webpack_require__(/*! ../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nvar _constants = __webpack_require__(/*! ./constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/constants.js\");\nvar _DiscreteGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./DiscreteGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DiscreteGestureHandler.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass PressGestureHandler extends _DiscreteGestureHandler.default {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"visualFeedbackTimer\", void 0);\n        _defineProperty(this, \"initialEvent\", null);\n        _defineProperty(this, \"shouldDelayTouches\", true);\n    }\n    get name() {\n        return \"press\";\n    }\n    get minDurationMs() {\n        // @ts-ignore FIXME(TS)\n        return (0, _utils.isnan)(this.config.minDurationMs) ? 5 : this.config.minDurationMs;\n    }\n    get maxDist() {\n        return (0, _utils.isnan)(this.config.maxDist) ? 9 : this.config.maxDist;\n    }\n    get NativeGestureClass() {\n        return _hammerjs.default.Press;\n    }\n    simulateCancelEvent(inputData) {\n        // Long press never starts so we can't rely on the running event boolean.\n        this.hasGestureFailed = true;\n        this.cancelEvent(inputData);\n    }\n    updateHasCustomActivationCriteria({ shouldCancelWhenOutside, maxDistSq }) {\n        return shouldCancelWhenOutside || !(0, _utils.isValidNumber)(maxDistSq);\n    }\n    getState(type) {\n        return ({\n            [_hammerjs.default.INPUT_START]: _State.State.BEGAN,\n            [_hammerjs.default.INPUT_MOVE]: _State.State.ACTIVE,\n            [_hammerjs.default.INPUT_END]: _State.State.END,\n            [_hammerjs.default.INPUT_CANCEL]: _State.State.CANCELLED\n        })[type];\n    }\n    getConfig() {\n        if (!this.hasCustomActivationCriteria) {\n            // Default config\n            // If no params have been defined then this config should emulate the native gesture as closely as possible.\n            return {\n                shouldCancelWhenOutside: true,\n                maxDistSq: 10\n            };\n        }\n        return this.config;\n    }\n    getHammerConfig() {\n        return {\n            ...super.getHammerConfig(),\n            // threshold: this.maxDist,\n            time: this.minDurationMs\n        };\n    }\n    onGestureActivated(ev) {\n        this.onGestureStart(ev);\n    }\n    shouldDelayTouchForEvent({ pointerType }) {\n        // Don't disable event for mouse input\n        return this.shouldDelayTouches && pointerType === \"touch\";\n    }\n    onGestureStart(ev) {\n        this.isGestureRunning = true;\n        clearTimeout(this.visualFeedbackTimer);\n        this.initialEvent = ev;\n        this.visualFeedbackTimer = (0, _utils.fireAfterInterval)(()=>{\n            this.sendGestureStartedEvent(this.initialEvent);\n            this.initialEvent = null;\n        }, this.shouldDelayTouchForEvent(ev) && _constants.CONTENT_TOUCHES_DELAY);\n    }\n    sendGestureStartedEvent(ev) {\n        clearTimeout(this.visualFeedbackTimer);\n        this.visualFeedbackTimer = null;\n        this.sendEvent({\n            ...ev,\n            eventType: _hammerjs.default.INPUT_MOVE,\n            isFirst: true\n        });\n    }\n    forceInvalidate(event) {\n        super.forceInvalidate(event);\n        clearTimeout(this.visualFeedbackTimer);\n        this.visualFeedbackTimer = null;\n        this.initialEvent = null;\n    }\n    onRawEvent(ev) {\n        super.onRawEvent(ev);\n        if (this.isGestureRunning) {\n            if (ev.isFinal) {\n                let timeout;\n                if (this.visualFeedbackTimer) {\n                    // Aesthetic timing for a quick tap.\n                    // We haven't activated the tap right away to emulate iOS `delaysContentTouches`\n                    // Now we must send the initial activation event and wait a set amount of time before firing the end event.\n                    timeout = _constants.CONTENT_TOUCHES_QUICK_TAP_END_DELAY;\n                    this.sendGestureStartedEvent(this.initialEvent);\n                    this.initialEvent = null;\n                }\n                (0, _utils.fireAfterInterval)(()=>{\n                    this.sendEvent({\n                        ...ev,\n                        eventType: _hammerjs.default.INPUT_END,\n                        isFinal: true\n                    }); // @ts-ignore -- this should explicitly support undefined\n                    this.onGestureEnded();\n                }, timeout);\n            } else {\n                this.sendEvent({\n                    ...ev,\n                    eventType: _hammerjs.default.INPUT_MOVE,\n                    isFinal: false\n                });\n            }\n        }\n    }\n    updateGestureConfig({ shouldActivateOnStart = false, disallowInterruption = false, shouldCancelWhenOutside = true, minDurationMs = Number.NaN, maxDist = Number.NaN, minPointers = 1, maxPointers = 1, ...props }) {\n        return super.updateGestureConfig({\n            shouldActivateOnStart,\n            disallowInterruption,\n            shouldCancelWhenOutside,\n            minDurationMs,\n            maxDist,\n            minPointers,\n            maxPointers,\n            ...props\n        });\n    }\n}\nvar _default = PressGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=PressGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/PressGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/RotationGestureHandler.js":
/*!*****************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/RotationGestureHandler.js ***!
  \*****************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _hammerjs = _interopRequireDefault(__webpack_require__(/*! @egjs/hammerjs */ \"@egjs/hammerjs\"));\nvar _constants = __webpack_require__(/*! ./constants */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/constants.js\");\nvar _IndiscreteGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./IndiscreteGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/IndiscreteGestureHandler.js\"));\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nclass RotationGestureHandler extends _IndiscreteGestureHandler.default {\n    get name() {\n        return \"rotate\";\n    }\n    get NativeGestureClass() {\n        return _hammerjs.default.Rotate;\n    }\n    transformNativeEvent({ rotation, velocity, center }) {\n        var _this$initialRotation;\n        return {\n            rotation: (rotation - ((_this$initialRotation = this.initialRotation) !== null && _this$initialRotation !== void 0 ? _this$initialRotation : 0)) * _constants.DEG_RAD,\n            anchorX: center.x,\n            anchorY: center.y,\n            velocity\n        };\n    }\n}\nvar _default = RotationGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=RotationGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9Sb3RhdGlvbkdlc3R1cmVIYW5kbGVyLmpzIiwibWFwcGluZ3MiOiJBQUFhO0FBRWJBLDhDQUE2QztJQUMzQ0csT0FBTztBQUNULENBQUMsRUFBQztBQUNGRCxrQkFBZSxHQUFHLEtBQUs7QUFFdkIsSUFBSUcsWUFBWUMsdUJBQXVCQyxtQkFBT0EsQ0FBQyxzQ0FBZ0I7QUFFL0QsSUFBSUMsYUFBYUQsbUJBQU9BLENBQUMscUdBQWE7QUFFdEMsSUFBSUUsNEJBQTRCSCx1QkFBdUJDLG1CQUFPQSxDQUFDLG1JQUE0QjtBQUUzRixTQUFTRCx1QkFBdUJJLEdBQUc7SUFBSSxPQUFPQSxPQUFPQSxJQUFJQyxVQUFVLEdBQUdELE1BQU07UUFBRU4sU0FBU007SUFBSTtBQUFHO0FBRTlGLE1BQU1FLCtCQUErQkgsMEJBQTBCTCxPQUFPO0lBQ3BFLElBQUlTLE9BQU87UUFDVCxPQUFPO0lBQ1Q7SUFFQSxJQUFJQyxxQkFBcUI7UUFDdkIsT0FBT1QsVUFBVUQsT0FBTyxDQUFDVyxNQUFNO0lBQ2pDO0lBRUFDLHFCQUFxQixFQUNuQkMsUUFBUSxFQUNSQyxRQUFRLEVBQ1JDLE1BQU0sRUFDUCxFQUFFO1FBQ0QsSUFBSUM7UUFFSixPQUFPO1lBQ0xILFVBQVUsQ0FBQ0EsV0FBWSxFQUFDRyx3QkFBd0IsSUFBSSxDQUFDQyxlQUFlLE1BQU0sUUFBUUQsMEJBQTBCLEtBQUssSUFBSUEsd0JBQXdCLEVBQUMsSUFBS1osV0FBV2MsT0FBTztZQUNyS0MsU0FBU0osT0FBT0ssQ0FBQztZQUNqQkMsU0FBU04sT0FBT08sQ0FBQztZQUNqQlI7UUFDRjtJQUNGO0FBRUY7QUFFQSxJQUFJUyxXQUFXZjtBQUNmVixrQkFBZSxHQUFHeUIsVUFDbEIsa0RBQWtEIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZml0X3BsdXNfcGx1cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy93ZWJfaGFtbWVyL1JvdGF0aW9uR2VzdHVyZUhhbmRsZXIuanM/NmEwMSJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcblxudmFyIF9oYW1tZXJqcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBlZ2pzL2hhbW1lcmpzXCIpKTtcblxudmFyIF9jb25zdGFudHMgPSByZXF1aXJlKFwiLi9jb25zdGFudHNcIik7XG5cbnZhciBfSW5kaXNjcmV0ZUdlc3R1cmVIYW5kbGVyID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9JbmRpc2NyZXRlR2VzdHVyZUhhbmRsZXJcIikpO1xuXG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuXG5jbGFzcyBSb3RhdGlvbkdlc3R1cmVIYW5kbGVyIGV4dGVuZHMgX0luZGlzY3JldGVHZXN0dXJlSGFuZGxlci5kZWZhdWx0IHtcbiAgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuICdyb3RhdGUnO1xuICB9XG5cbiAgZ2V0IE5hdGl2ZUdlc3R1cmVDbGFzcygpIHtcbiAgICByZXR1cm4gX2hhbW1lcmpzLmRlZmF1bHQuUm90YXRlO1xuICB9XG5cbiAgdHJhbnNmb3JtTmF0aXZlRXZlbnQoe1xuICAgIHJvdGF0aW9uLFxuICAgIHZlbG9jaXR5LFxuICAgIGNlbnRlclxuICB9KSB7XG4gICAgdmFyIF90aGlzJGluaXRpYWxSb3RhdGlvbjtcblxuICAgIHJldHVybiB7XG4gICAgICByb3RhdGlvbjogKHJvdGF0aW9uIC0gKChfdGhpcyRpbml0aWFsUm90YXRpb24gPSB0aGlzLmluaXRpYWxSb3RhdGlvbikgIT09IG51bGwgJiYgX3RoaXMkaW5pdGlhbFJvdGF0aW9uICE9PSB2b2lkIDAgPyBfdGhpcyRpbml0aWFsUm90YXRpb24gOiAwKSkgKiBfY29uc3RhbnRzLkRFR19SQUQsXG4gICAgICBhbmNob3JYOiBjZW50ZXIueCxcbiAgICAgIGFuY2hvclk6IGNlbnRlci55LFxuICAgICAgdmVsb2NpdHlcbiAgICB9O1xuICB9XG5cbn1cblxudmFyIF9kZWZhdWx0ID0gUm90YXRpb25HZXN0dXJlSGFuZGxlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Um90YXRpb25HZXN0dXJlSGFuZGxlci5qcy5tYXAiXSwibmFtZXMiOlsiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJleHBvcnRzIiwidmFsdWUiLCJkZWZhdWx0IiwiX2hhbW1lcmpzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfY29uc3RhbnRzIiwiX0luZGlzY3JldGVHZXN0dXJlSGFuZGxlciIsIm9iaiIsIl9fZXNNb2R1bGUiLCJSb3RhdGlvbkdlc3R1cmVIYW5kbGVyIiwibmFtZSIsIk5hdGl2ZUdlc3R1cmVDbGFzcyIsIlJvdGF0ZSIsInRyYW5zZm9ybU5hdGl2ZUV2ZW50Iiwicm90YXRpb24iLCJ2ZWxvY2l0eSIsImNlbnRlciIsIl90aGlzJGluaXRpYWxSb3RhdGlvbiIsImluaXRpYWxSb3RhdGlvbiIsIkRFR19SQUQiLCJhbmNob3JYIiwieCIsImFuY2hvclkiLCJ5IiwiX2RlZmF1bHQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/RotationGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/TapGestureHandler.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/TapGestureHandler.js ***!
  \************************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports[\"default\"] = void 0;\nvar _hammerjs = _interopRequireDefault(__webpack_require__(/*! @egjs/hammerjs */ \"@egjs/hammerjs\"));\nvar _DiscreteGestureHandler = _interopRequireDefault(__webpack_require__(/*! ./DiscreteGestureHandler */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/DiscreteGestureHandler.js\"));\nvar _utils = __webpack_require__(/*! ./utils */ \"./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nfunction _defineProperty(obj, key, value) {\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\nclass TapGestureHandler extends _DiscreteGestureHandler.default {\n    constructor(...args){\n        super(...args);\n        _defineProperty(this, \"_shouldFireEndEvent\", null);\n        _defineProperty(this, \"_timer\", void 0);\n        _defineProperty(this, \"_multiTapTimer\", void 0);\n        _defineProperty(this, \"onSuccessfulTap\", (ev)=>{\n            if (this._getPendingGestures().length) {\n                this._shouldFireEndEvent = ev;\n                return;\n            }\n            if (ev.eventType === _hammerjs.default.INPUT_END) {\n                this.sendEvent({\n                    ...ev,\n                    eventType: _hammerjs.default.INPUT_MOVE\n                });\n            } // When handler gets activated it will turn into State.END immediately.\n            this.sendEvent({\n                ...ev,\n                isFinal: true\n            });\n            this.onGestureEnded(ev);\n        });\n    }\n    // TODO unused?\n    get name() {\n        return \"tap\";\n    }\n    get NativeGestureClass() {\n        return _hammerjs.default.Tap;\n    }\n    get maxDelayMs() {\n        // @ts-ignore TODO(TS) trace down config\n        return (0, _utils.isnan)(this.config.maxDelayMs) ? 300 : this.config.maxDelayMs;\n    }\n    simulateCancelEvent(inputData) {\n        if (this.isGestureRunning) {\n            this.cancelEvent(inputData);\n        }\n    }\n    onGestureActivated(ev) {\n        if (this.isGestureRunning) {\n            this.onSuccessfulTap(ev);\n        }\n    }\n    onRawEvent(ev) {\n        super.onRawEvent(ev); // Attempt to create a touch-down event by checking if a valid tap hasn't started yet, then validating the input.\n        if (!this.hasGestureFailed && !this.isGestureRunning && // Prevent multi-pointer events from misfiring.\n        !ev.isFinal) {\n            // Tap Gesture start event\n            const gesture = this.hammer.get(this.name); // @ts-ignore TODO(TS) trace down config\n            if (gesture.options.enable(gesture, ev)) {\n                clearTimeout(this._multiTapTimer);\n                this.onStart(ev);\n                this.sendEvent(ev);\n            }\n        }\n        if (ev.isFinal && ev.maxPointers > 1) {\n            setTimeout(()=>{\n                // Handle case where one finger presses slightly\n                // after the first finger on a multi-tap event\n                if (this.isGestureRunning) {\n                    this.cancelEvent(ev);\n                }\n            });\n        }\n        if (this.hasGestureFailed) {\n            return;\n        } // Hammer doesn't send a `cancel` event for taps.\n        // Manually fail the event.\n        if (ev.isFinal) {\n            // Handle case where one finger presses slightly\n            // after the first finger on a multi-tap event\n            if (ev.maxPointers > 1) {\n                setTimeout(()=>{\n                    if (this.isGestureRunning) {\n                        this.cancelEvent(ev);\n                    }\n                });\n            } // Clear last timer\n            clearTimeout(this._timer); // Create time out for multi-taps.\n            this._timer = setTimeout(()=>{\n                this.hasGestureFailed = true;\n                this.cancelEvent(ev);\n            }, this.maxDelayMs);\n        } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n            // Tap Gesture start event\n            const gesture = this.hammer.get(this.name); // @ts-ignore TODO(TS) trace down config\n            if (gesture.options.enable(gesture, ev)) {\n                clearTimeout(this._multiTapTimer);\n                this.onStart(ev);\n                this.sendEvent(ev);\n            }\n        }\n    }\n    getHammerConfig() {\n        return {\n            ...super.getHammerConfig(),\n            event: this.name,\n            // @ts-ignore TODO(TS) trace down config\n            taps: (0, _utils.isnan)(this.config.numberOfTaps) ? 1 : this.config.numberOfTaps,\n            interval: this.maxDelayMs,\n            time: (0, _utils.isnan)(this.config.maxDurationMs) || this.config.maxDurationMs == null ? 250 : this.config.maxDurationMs\n        };\n    }\n    updateGestureConfig({ shouldCancelWhenOutside = true, maxDeltaX = Number.NaN, maxDeltaY = Number.NaN, numberOfTaps = 1, minDurationMs = 525, maxDelayMs = Number.NaN, // eslint-disable-next-line @typescript-eslint/no-unused-vars -- TODO possibly forgotten to use in updateGestureConfig?\n    maxDurationMs = Number.NaN, maxDist = 2, minPointers = 1, maxPointers = 1, ...props }) {\n        return super.updateGestureConfig({\n            shouldCancelWhenOutside,\n            numberOfTaps,\n            maxDeltaX,\n            maxDeltaY,\n            minDurationMs,\n            maxDelayMs,\n            maxDist,\n            minPointers,\n            maxPointers,\n            ...props\n        });\n    }\n    onGestureEnded(...props) {\n        clearTimeout(this._timer); // @ts-ignore TODO(TS) check how onGestureEnded works\n        super.onGestureEnded(...props);\n    }\n    onWaitingEnded(_gesture) {\n        if (this._shouldFireEndEvent) {\n            this.onSuccessfulTap(this._shouldFireEndEvent);\n            this._shouldFireEndEvent = null;\n        }\n    }\n}\nvar _default = TapGestureHandler;\nexports[\"default\"] = _default; //# sourceMappingURL=TapGestureHandler.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/TapGestureHandler.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/constants.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/constants.js ***!
  \****************************************************************************************/
/***/ ((__unused_webpack_module, exports, __webpack_require__) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.HammerDirectionNames = exports.HammerInputNames = exports.DirectionMap = exports.Direction = exports.EventMap = exports.DEG_RAD = exports.MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD = exports.MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD = exports.CONTENT_TOUCHES_QUICK_TAP_END_DELAY = exports.CONTENT_TOUCHES_DELAY = void 0;\nvar _hammerjs = _interopRequireDefault(__webpack_require__(/*! @egjs/hammerjs */ \"@egjs/hammerjs\"));\nvar _State = __webpack_require__(/*! ../State */ \"./node_modules/react-native-gesture-handler/lib/commonjs/State.js\");\nfunction _interopRequireDefault(obj) {\n    return obj && obj.__esModule ? obj : {\n        default: obj\n    };\n}\nconst CONTENT_TOUCHES_DELAY = 240;\nexports.CONTENT_TOUCHES_DELAY = CONTENT_TOUCHES_DELAY;\nconst CONTENT_TOUCHES_QUICK_TAP_END_DELAY = 50;\nexports.CONTENT_TOUCHES_QUICK_TAP_END_DELAY = CONTENT_TOUCHES_QUICK_TAP_END_DELAY;\nconst MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD = 0.1;\nexports.MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD = MULTI_FINGER_PAN_MAX_PINCH_THRESHOLD;\nconst MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD = 7;\nexports.MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD = MULTI_FINGER_PAN_MAX_ROTATION_THRESHOLD;\nconst DEG_RAD = Math.PI / 180; // Map Hammer values to RNGH\nexports.DEG_RAD = DEG_RAD;\nconst EventMap = {\n    [_hammerjs.default.INPUT_START]: _State.State.BEGAN,\n    [_hammerjs.default.INPUT_MOVE]: _State.State.ACTIVE,\n    [_hammerjs.default.INPUT_END]: _State.State.END,\n    [_hammerjs.default.INPUT_CANCEL]: _State.State.FAILED\n};\nexports.EventMap = EventMap;\nconst Direction = {\n    RIGHT: 1,\n    LEFT: 2,\n    UP: 4,\n    DOWN: 8\n};\nexports.Direction = Direction;\nconst DirectionMap = {\n    [_hammerjs.default.DIRECTION_RIGHT]: Direction.RIGHT,\n    [_hammerjs.default.DIRECTION_LEFT]: Direction.LEFT,\n    [_hammerjs.default.DIRECTION_UP]: Direction.UP,\n    [_hammerjs.default.DIRECTION_DOWN]: Direction.DOWN\n};\nexports.DirectionMap = DirectionMap;\nconst HammerInputNames = {\n    [_hammerjs.default.INPUT_START]: \"START\",\n    [_hammerjs.default.INPUT_MOVE]: \"MOVE\",\n    [_hammerjs.default.INPUT_END]: \"END\",\n    [_hammerjs.default.INPUT_CANCEL]: \"CANCEL\"\n};\nexports.HammerInputNames = HammerInputNames;\nconst HammerDirectionNames = {\n    [_hammerjs.default.DIRECTION_HORIZONTAL]: \"HORIZONTAL\",\n    [_hammerjs.default.DIRECTION_UP]: \"UP\",\n    [_hammerjs.default.DIRECTION_DOWN]: \"DOWN\",\n    [_hammerjs.default.DIRECTION_VERTICAL]: \"VERTICAL\",\n    [_hammerjs.default.DIRECTION_NONE]: \"NONE\",\n    [_hammerjs.default.DIRECTION_ALL]: \"ALL\",\n    [_hammerjs.default.DIRECTION_RIGHT]: \"RIGHT\",\n    [_hammerjs.default.DIRECTION_LEFT]: \"LEFT\"\n};\nexports.HammerDirectionNames = HammerDirectionNames; //# sourceMappingURL=constants.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci9jb25zdGFudHMuanMiLCJtYXBwaW5ncyI6IkFBQWE7QUFFYkEsOENBQTZDO0lBQzNDRyxPQUFPO0FBQ1QsQ0FBQyxFQUFDO0FBQ0ZELDRCQUE0QixHQUFHQSx3QkFBd0IsR0FBR0Esb0JBQW9CLEdBQUdBLGlCQUFpQixHQUFHQSxnQkFBZ0IsR0FBR0EsZUFBZSxHQUFHQSwrQ0FBK0MsR0FBR0EsNENBQTRDLEdBQUdBLDJDQUEyQyxHQUFHQSw2QkFBNkIsR0FBRyxLQUFLO0FBRTlULElBQUlZLFlBQVlDLHVCQUF1QkMsbUJBQU9BLENBQUMsc0NBQWdCO0FBRS9ELElBQUlDLFNBQVNELG1CQUFPQSxDQUFDLG1GQUFVO0FBRS9CLFNBQVNELHVCQUF1QkcsR0FBRztJQUFJLE9BQU9BLE9BQU9BLElBQUlDLFVBQVUsR0FBR0QsTUFBTTtRQUFFRSxTQUFTRjtJQUFJO0FBQUc7QUFFOUYsTUFBTUwsd0JBQXdCO0FBQzlCWCw2QkFBNkIsR0FBR1c7QUFDaEMsTUFBTUQsc0NBQXNDO0FBQzVDViwyQ0FBMkMsR0FBR1U7QUFDOUMsTUFBTUQsdUNBQXVDO0FBQzdDVCw0Q0FBNEMsR0FBR1M7QUFDL0MsTUFBTUQsMENBQTBDO0FBQ2hEUiwrQ0FBK0MsR0FBR1E7QUFDbEQsTUFBTUQsVUFBVVksS0FBS0MsRUFBRSxHQUFHLEtBQUssNEJBQTRCO0FBRTNEcEIsZUFBZSxHQUFHTztBQUNsQixNQUFNRCxXQUFXO0lBQ2YsQ0FBQ00sVUFBVU0sT0FBTyxDQUFDRyxXQUFXLENBQUMsRUFBRU4sT0FBT08sS0FBSyxDQUFDQyxLQUFLO0lBQ25ELENBQUNYLFVBQVVNLE9BQU8sQ0FBQ00sVUFBVSxDQUFDLEVBQUVULE9BQU9PLEtBQUssQ0FBQ0csTUFBTTtJQUNuRCxDQUFDYixVQUFVTSxPQUFPLENBQUNRLFNBQVMsQ0FBQyxFQUFFWCxPQUFPTyxLQUFLLENBQUNLLEdBQUc7SUFDL0MsQ0FBQ2YsVUFBVU0sT0FBTyxDQUFDVSxZQUFZLENBQUMsRUFBRWIsT0FBT08sS0FBSyxDQUFDTyxNQUFNO0FBQ3ZEO0FBQ0E3QixnQkFBZ0IsR0FBR007QUFDbkIsTUFBTUQsWUFBWTtJQUNoQnlCLE9BQU87SUFDUEMsTUFBTTtJQUNOQyxJQUFJO0lBQ0pDLE1BQU07QUFDUjtBQUNBakMsaUJBQWlCLEdBQUdLO0FBQ3BCLE1BQU1ELGVBQWU7SUFDbkIsQ0FBQ1EsVUFBVU0sT0FBTyxDQUFDZ0IsZUFBZSxDQUFDLEVBQUU3QixVQUFVeUIsS0FBSztJQUNwRCxDQUFDbEIsVUFBVU0sT0FBTyxDQUFDaUIsY0FBYyxDQUFDLEVBQUU5QixVQUFVMEIsSUFBSTtJQUNsRCxDQUFDbkIsVUFBVU0sT0FBTyxDQUFDa0IsWUFBWSxDQUFDLEVBQUUvQixVQUFVMkIsRUFBRTtJQUM5QyxDQUFDcEIsVUFBVU0sT0FBTyxDQUFDbUIsY0FBYyxDQUFDLEVBQUVoQyxVQUFVNEIsSUFBSTtBQUNwRDtBQUNBakMsb0JBQW9CLEdBQUdJO0FBQ3ZCLE1BQU1ELG1CQUFtQjtJQUN2QixDQUFDUyxVQUFVTSxPQUFPLENBQUNHLFdBQVcsQ0FBQyxFQUFFO0lBQ2pDLENBQUNULFVBQVVNLE9BQU8sQ0FBQ00sVUFBVSxDQUFDLEVBQUU7SUFDaEMsQ0FBQ1osVUFBVU0sT0FBTyxDQUFDUSxTQUFTLENBQUMsRUFBRTtJQUMvQixDQUFDZCxVQUFVTSxPQUFPLENBQUNVLFlBQVksQ0FBQyxFQUFFO0FBQ3BDO0FBQ0E1Qix3QkFBd0IsR0FBR0c7QUFDM0IsTUFBTUQsdUJBQXVCO0lBQzNCLENBQUNVLFVBQVVNLE9BQU8sQ0FBQ29CLG9CQUFvQixDQUFDLEVBQUU7SUFDMUMsQ0FBQzFCLFVBQVVNLE9BQU8sQ0FBQ2tCLFlBQVksQ0FBQyxFQUFFO0lBQ2xDLENBQUN4QixVQUFVTSxPQUFPLENBQUNtQixjQUFjLENBQUMsRUFBRTtJQUNwQyxDQUFDekIsVUFBVU0sT0FBTyxDQUFDcUIsa0JBQWtCLENBQUMsRUFBRTtJQUN4QyxDQUFDM0IsVUFBVU0sT0FBTyxDQUFDc0IsY0FBYyxDQUFDLEVBQUU7SUFDcEMsQ0FBQzVCLFVBQVVNLE9BQU8sQ0FBQ3VCLGFBQWEsQ0FBQyxFQUFFO0lBQ25DLENBQUM3QixVQUFVTSxPQUFPLENBQUNnQixlQUFlLENBQUMsRUFBRTtJQUNyQyxDQUFDdEIsVUFBVU0sT0FBTyxDQUFDaUIsY0FBYyxDQUFDLEVBQUU7QUFDdEM7QUFDQW5DLDRCQUE0QixHQUFHRSxzQkFDL0IscUNBQXFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vZml0X3BsdXNfcGx1cy8uL25vZGVfbW9kdWxlcy9yZWFjdC1uYXRpdmUtZ2VzdHVyZS1oYW5kbGVyL2xpYi9jb21tb25qcy93ZWJfaGFtbWVyL2NvbnN0YW50cy5qcz83Y2RiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5IYW1tZXJEaXJlY3Rpb25OYW1lcyA9IGV4cG9ydHMuSGFtbWVySW5wdXROYW1lcyA9IGV4cG9ydHMuRGlyZWN0aW9uTWFwID0gZXhwb3J0cy5EaXJlY3Rpb24gPSBleHBvcnRzLkV2ZW50TWFwID0gZXhwb3J0cy5ERUdfUkFEID0gZXhwb3J0cy5NVUxUSV9GSU5HRVJfUEFOX01BWF9ST1RBVElPTl9USFJFU0hPTEQgPSBleHBvcnRzLk1VTFRJX0ZJTkdFUl9QQU5fTUFYX1BJTkNIX1RIUkVTSE9MRCA9IGV4cG9ydHMuQ09OVEVOVF9UT1VDSEVTX1FVSUNLX1RBUF9FTkRfREVMQVkgPSBleHBvcnRzLkNPTlRFTlRfVE9VQ0hFU19ERUxBWSA9IHZvaWQgMDtcblxudmFyIF9oYW1tZXJqcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcIkBlZ2pzL2hhbW1lcmpzXCIpKTtcblxudmFyIF9TdGF0ZSA9IHJlcXVpcmUoXCIuLi9TdGF0ZVwiKTtcblxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cblxuY29uc3QgQ09OVEVOVF9UT1VDSEVTX0RFTEFZID0gMjQwO1xuZXhwb3J0cy5DT05URU5UX1RPVUNIRVNfREVMQVkgPSBDT05URU5UX1RPVUNIRVNfREVMQVk7XG5jb25zdCBDT05URU5UX1RPVUNIRVNfUVVJQ0tfVEFQX0VORF9ERUxBWSA9IDUwO1xuZXhwb3J0cy5DT05URU5UX1RPVUNIRVNfUVVJQ0tfVEFQX0VORF9ERUxBWSA9IENPTlRFTlRfVE9VQ0hFU19RVUlDS19UQVBfRU5EX0RFTEFZO1xuY29uc3QgTVVMVElfRklOR0VSX1BBTl9NQVhfUElOQ0hfVEhSRVNIT0xEID0gMC4xO1xuZXhwb3J0cy5NVUxUSV9GSU5HRVJfUEFOX01BWF9QSU5DSF9USFJFU0hPTEQgPSBNVUxUSV9GSU5HRVJfUEFOX01BWF9QSU5DSF9USFJFU0hPTEQ7XG5jb25zdCBNVUxUSV9GSU5HRVJfUEFOX01BWF9ST1RBVElPTl9USFJFU0hPTEQgPSA3O1xuZXhwb3J0cy5NVUxUSV9GSU5HRVJfUEFOX01BWF9ST1RBVElPTl9USFJFU0hPTEQgPSBNVUxUSV9GSU5HRVJfUEFOX01BWF9ST1RBVElPTl9USFJFU0hPTEQ7XG5jb25zdCBERUdfUkFEID0gTWF0aC5QSSAvIDE4MDsgLy8gTWFwIEhhbW1lciB2YWx1ZXMgdG8gUk5HSFxuXG5leHBvcnRzLkRFR19SQUQgPSBERUdfUkFEO1xuY29uc3QgRXZlbnRNYXAgPSB7XG4gIFtfaGFtbWVyanMuZGVmYXVsdC5JTlBVVF9TVEFSVF06IF9TdGF0ZS5TdGF0ZS5CRUdBTixcbiAgW19oYW1tZXJqcy5kZWZhdWx0LklOUFVUX01PVkVdOiBfU3RhdGUuU3RhdGUuQUNUSVZFLFxuICBbX2hhbW1lcmpzLmRlZmF1bHQuSU5QVVRfRU5EXTogX1N0YXRlLlN0YXRlLkVORCxcbiAgW19oYW1tZXJqcy5kZWZhdWx0LklOUFVUX0NBTkNFTF06IF9TdGF0ZS5TdGF0ZS5GQUlMRURcbn07XG5leHBvcnRzLkV2ZW50TWFwID0gRXZlbnRNYXA7XG5jb25zdCBEaXJlY3Rpb24gPSB7XG4gIFJJR0hUOiAxLFxuICBMRUZUOiAyLFxuICBVUDogNCxcbiAgRE9XTjogOFxufTtcbmV4cG9ydHMuRGlyZWN0aW9uID0gRGlyZWN0aW9uO1xuY29uc3QgRGlyZWN0aW9uTWFwID0ge1xuICBbX2hhbW1lcmpzLmRlZmF1bHQuRElSRUNUSU9OX1JJR0hUXTogRGlyZWN0aW9uLlJJR0hULFxuICBbX2hhbW1lcmpzLmRlZmF1bHQuRElSRUNUSU9OX0xFRlRdOiBEaXJlY3Rpb24uTEVGVCxcbiAgW19oYW1tZXJqcy5kZWZhdWx0LkRJUkVDVElPTl9VUF06IERpcmVjdGlvbi5VUCxcbiAgW19oYW1tZXJqcy5kZWZhdWx0LkRJUkVDVElPTl9ET1dOXTogRGlyZWN0aW9uLkRPV05cbn07XG5leHBvcnRzLkRpcmVjdGlvbk1hcCA9IERpcmVjdGlvbk1hcDtcbmNvbnN0IEhhbW1lcklucHV0TmFtZXMgPSB7XG4gIFtfaGFtbWVyanMuZGVmYXVsdC5JTlBVVF9TVEFSVF06ICdTVEFSVCcsXG4gIFtfaGFtbWVyanMuZGVmYXVsdC5JTlBVVF9NT1ZFXTogJ01PVkUnLFxuICBbX2hhbW1lcmpzLmRlZmF1bHQuSU5QVVRfRU5EXTogJ0VORCcsXG4gIFtfaGFtbWVyanMuZGVmYXVsdC5JTlBVVF9DQU5DRUxdOiAnQ0FOQ0VMJ1xufTtcbmV4cG9ydHMuSGFtbWVySW5wdXROYW1lcyA9IEhhbW1lcklucHV0TmFtZXM7XG5jb25zdCBIYW1tZXJEaXJlY3Rpb25OYW1lcyA9IHtcbiAgW19oYW1tZXJqcy5kZWZhdWx0LkRJUkVDVElPTl9IT1JJWk9OVEFMXTogJ0hPUklaT05UQUwnLFxuICBbX2hhbW1lcmpzLmRlZmF1bHQuRElSRUNUSU9OX1VQXTogJ1VQJyxcbiAgW19oYW1tZXJqcy5kZWZhdWx0LkRJUkVDVElPTl9ET1dOXTogJ0RPV04nLFxuICBbX2hhbW1lcmpzLmRlZmF1bHQuRElSRUNUSU9OX1ZFUlRJQ0FMXTogJ1ZFUlRJQ0FMJyxcbiAgW19oYW1tZXJqcy5kZWZhdWx0LkRJUkVDVElPTl9OT05FXTogJ05PTkUnLFxuICBbX2hhbW1lcmpzLmRlZmF1bHQuRElSRUNUSU9OX0FMTF06ICdBTEwnLFxuICBbX2hhbW1lcmpzLmRlZmF1bHQuRElSRUNUSU9OX1JJR0hUXTogJ1JJR0hUJyxcbiAgW19oYW1tZXJqcy5kZWZhdWx0LkRJUkVDVElPTl9MRUZUXTogJ0xFRlQnXG59O1xuZXhwb3J0cy5IYW1tZXJEaXJlY3Rpb25OYW1lcyA9IEhhbW1lckRpcmVjdGlvbk5hbWVzO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsIkhhbW1lckRpcmVjdGlvbk5hbWVzIiwiSGFtbWVySW5wdXROYW1lcyIsIkRpcmVjdGlvbk1hcCIsIkRpcmVjdGlvbiIsIkV2ZW50TWFwIiwiREVHX1JBRCIsIk1VTFRJX0ZJTkdFUl9QQU5fTUFYX1JPVEFUSU9OX1RIUkVTSE9MRCIsIk1VTFRJX0ZJTkdFUl9QQU5fTUFYX1BJTkNIX1RIUkVTSE9MRCIsIkNPTlRFTlRfVE9VQ0hFU19RVUlDS19UQVBfRU5EX0RFTEFZIiwiQ09OVEVOVF9UT1VDSEVTX0RFTEFZIiwiX2hhbW1lcmpzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfU3RhdGUiLCJvYmoiLCJfX2VzTW9kdWxlIiwiZGVmYXVsdCIsIk1hdGgiLCJQSSIsIklOUFVUX1NUQVJUIiwiU3RhdGUiLCJCRUdBTiIsIklOUFVUX01PVkUiLCJBQ1RJVkUiLCJJTlBVVF9FTkQiLCJFTkQiLCJJTlBVVF9DQU5DRUwiLCJGQUlMRUQiLCJSSUdIVCIsIkxFRlQiLCJVUCIsIkRPV04iLCJESVJFQ1RJT05fUklHSFQiLCJESVJFQ1RJT05fTEVGVCIsIkRJUkVDVElPTl9VUCIsIkRJUkVDVElPTl9ET1dOIiwiRElSRUNUSU9OX0hPUklaT05UQUwiLCJESVJFQ1RJT05fVkVSVElDQUwiLCJESVJFQ1RJT05fTk9ORSIsIkRJUkVDVElPTl9BTEwiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/constants.js\n");

/***/ }),

/***/ "./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js":
/*!************************************************************************************!*\
  !*** ./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js ***!
  \************************************************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\nObject.defineProperty(exports, \"__esModule\", ({\n    value: true\n}));\nexports.fireAfterInterval = fireAfterInterval;\nexports.TEST_MAX_IF_NOT_NAN = exports.VEC_LEN_SQ = exports.TEST_MIN_IF_NOT_NAN = exports.isValidNumber = exports.isnan = void 0;\n// TODO(TS) remove if not necessary after rewrite\nconst isnan = (v)=>Number.isNaN(v); // TODO(TS) remove if not necessary after rewrite\nexports.isnan = isnan;\nconst isValidNumber = (v)=>typeof v === \"number\" && !Number.isNaN(v);\nexports.isValidNumber = isValidNumber;\nconst TEST_MIN_IF_NOT_NAN = (value, limit)=>!isnan(limit) && (limit < 0 && value <= limit || limit >= 0 && value >= limit);\nexports.TEST_MIN_IF_NOT_NAN = TEST_MIN_IF_NOT_NAN;\nconst VEC_LEN_SQ = ({ x = 0, y = 0 } = {})=>x * x + y * y;\nexports.VEC_LEN_SQ = VEC_LEN_SQ;\nconst TEST_MAX_IF_NOT_NAN = (value, max)=>!isnan(max) && (max < 0 && value < max || max >= 0 && value > max);\nexports.TEST_MAX_IF_NOT_NAN = TEST_MAX_IF_NOT_NAN;\nfunction fireAfterInterval(method, interval) {\n    if (!interval) {\n        method();\n        return null;\n    }\n    return setTimeout(()=>method(), interval);\n} //# sourceMappingURL=utils.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci91dGlscy5qcyIsIm1hcHBpbmdzIjoiQUFBYTtBQUViQSw4Q0FBNkM7SUFDM0NHLE9BQU87QUFDVCxDQUFDLEVBQUM7QUFDRkQseUJBQXlCLEdBQUdFO0FBQzVCRiwyQkFBMkIsR0FBR0Esa0JBQWtCLEdBQUdBLDJCQUEyQixHQUFHQSxxQkFBcUIsR0FBR0EsYUFBYSxHQUFHLEtBQUs7QUFFOUgsaURBQWlEO0FBQ2pELE1BQU1PLFFBQVFDLENBQUFBLElBQUtDLE9BQU9DLEtBQUssQ0FBQ0YsSUFBSSxpREFBaUQ7QUFHckZSLGFBQWEsR0FBR087QUFFaEIsTUFBTUQsZ0JBQWdCRSxDQUFBQSxJQUFLLE9BQU9BLE1BQU0sWUFBWSxDQUFDQyxPQUFPQyxLQUFLLENBQUNGO0FBRWxFUixxQkFBcUIsR0FBR007QUFFeEIsTUFBTUQsc0JBQXNCLENBQUNKLE9BQU9VLFFBQVUsQ0FBQ0osTUFBTUksVUFBV0EsQ0FBQUEsUUFBUSxLQUFLVixTQUFTVSxTQUFTQSxTQUFTLEtBQUtWLFNBQVNVLEtBQUk7QUFFMUhYLDJCQUEyQixHQUFHSztBQUU5QixNQUFNRCxhQUFhLENBQUMsRUFDbEJRLElBQUksQ0FBQyxFQUNMQyxJQUFJLENBQUMsRUFDTixHQUFHLENBQUMsQ0FBQyxHQUFLRCxJQUFJQSxJQUFJQyxJQUFJQTtBQUV2QmIsa0JBQWtCLEdBQUdJO0FBRXJCLE1BQU1ELHNCQUFzQixDQUFDRixPQUFPYSxNQUFRLENBQUNQLE1BQU1PLFFBQVNBLENBQUFBLE1BQU0sS0FBS2IsUUFBUWEsT0FBT0EsT0FBTyxLQUFLYixRQUFRYSxHQUFFO0FBRTVHZCwyQkFBMkIsR0FBR0c7QUFFOUIsU0FBU0Qsa0JBQWtCYSxNQUFNLEVBQUVDLFFBQVE7SUFDekMsSUFBSSxDQUFDQSxVQUFVO1FBQ2JEO1FBQ0EsT0FBTztJQUNUO0lBRUEsT0FBT0UsV0FBVyxJQUFNRixVQUFVQztBQUNwQyxFQUNBLGlDQUFpQyIsInNvdXJjZXMiOlsid2VicGFjazovL2ZpdF9wbHVzX3BsdXMvLi9ub2RlX21vZHVsZXMvcmVhY3QtbmF0aXZlLWdlc3R1cmUtaGFuZGxlci9saWIvY29tbW9uanMvd2ViX2hhbW1lci91dGlscy5qcz9mNWU0Il0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5maXJlQWZ0ZXJJbnRlcnZhbCA9IGZpcmVBZnRlckludGVydmFsO1xuZXhwb3J0cy5URVNUX01BWF9JRl9OT1RfTkFOID0gZXhwb3J0cy5WRUNfTEVOX1NRID0gZXhwb3J0cy5URVNUX01JTl9JRl9OT1RfTkFOID0gZXhwb3J0cy5pc1ZhbGlkTnVtYmVyID0gZXhwb3J0cy5pc25hbiA9IHZvaWQgMDtcblxuLy8gVE9ETyhUUykgcmVtb3ZlIGlmIG5vdCBuZWNlc3NhcnkgYWZ0ZXIgcmV3cml0ZVxuY29uc3QgaXNuYW4gPSB2ID0+IE51bWJlci5pc05hTih2KTsgLy8gVE9ETyhUUykgcmVtb3ZlIGlmIG5vdCBuZWNlc3NhcnkgYWZ0ZXIgcmV3cml0ZVxuXG5cbmV4cG9ydHMuaXNuYW4gPSBpc25hbjtcblxuY29uc3QgaXNWYWxpZE51bWJlciA9IHYgPT4gdHlwZW9mIHYgPT09ICdudW1iZXInICYmICFOdW1iZXIuaXNOYU4odik7XG5cbmV4cG9ydHMuaXNWYWxpZE51bWJlciA9IGlzVmFsaWROdW1iZXI7XG5cbmNvbnN0IFRFU1RfTUlOX0lGX05PVF9OQU4gPSAodmFsdWUsIGxpbWl0KSA9PiAhaXNuYW4obGltaXQpICYmIChsaW1pdCA8IDAgJiYgdmFsdWUgPD0gbGltaXQgfHwgbGltaXQgPj0gMCAmJiB2YWx1ZSA+PSBsaW1pdCk7XG5cbmV4cG9ydHMuVEVTVF9NSU5fSUZfTk9UX05BTiA9IFRFU1RfTUlOX0lGX05PVF9OQU47XG5cbmNvbnN0IFZFQ19MRU5fU1EgPSAoe1xuICB4ID0gMCxcbiAgeSA9IDBcbn0gPSB7fSkgPT4geCAqIHggKyB5ICogeTtcblxuZXhwb3J0cy5WRUNfTEVOX1NRID0gVkVDX0xFTl9TUTtcblxuY29uc3QgVEVTVF9NQVhfSUZfTk9UX05BTiA9ICh2YWx1ZSwgbWF4KSA9PiAhaXNuYW4obWF4KSAmJiAobWF4IDwgMCAmJiB2YWx1ZSA8IG1heCB8fCBtYXggPj0gMCAmJiB2YWx1ZSA+IG1heCk7XG5cbmV4cG9ydHMuVEVTVF9NQVhfSUZfTk9UX05BTiA9IFRFU1RfTUFYX0lGX05PVF9OQU47XG5cbmZ1bmN0aW9uIGZpcmVBZnRlckludGVydmFsKG1ldGhvZCwgaW50ZXJ2YWwpIHtcbiAgaWYgKCFpbnRlcnZhbCkge1xuICAgIG1ldGhvZCgpO1xuICAgIHJldHVybiBudWxsO1xuICB9XG5cbiAgcmV0dXJuIHNldFRpbWVvdXQoKCkgPT4gbWV0aG9kKCksIGludGVydmFsKTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWxzLmpzLm1hcCJdLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImZpcmVBZnRlckludGVydmFsIiwiVEVTVF9NQVhfSUZfTk9UX05BTiIsIlZFQ19MRU5fU1EiLCJURVNUX01JTl9JRl9OT1RfTkFOIiwiaXNWYWxpZE51bWJlciIsImlzbmFuIiwidiIsIk51bWJlciIsImlzTmFOIiwibGltaXQiLCJ4IiwieSIsIm1heCIsIm1ldGhvZCIsImludGVydmFsIiwic2V0VGltZW91dCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/react-native-gesture-handler/lib/commonjs/web_hammer/utils.js\n");

/***/ })

};
;